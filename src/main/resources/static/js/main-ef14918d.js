const p$1 = function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(script) {
    const fetchOpts = {};
    if (script.integrity)
      fetchOpts.integrity = script.integrity;
    if (script.referrerpolicy)
      fetchOpts.referrerPolicy = script.referrerpolicy;
    if (script.crossorigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (script.crossorigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
};
p$1();
function makeMap(str, expectsLowerCase) {
  const map = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
}
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value6) {
  return !!value6 || value6 === "";
}
function normalizeStyle(value6) {
  if (isArray$e(value6)) {
    const res = {};
    for (let i = 0; i < value6.length; i++) {
      const item = value6[i];
      const normalized = isString$1(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString$1(value6)) {
    return value6;
  } else if (isObject$e(value6)) {
    return value6;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value6) {
  let res = "";
  if (isString$1(value6)) {
    res = value6;
  } else if (isArray$e(value6)) {
    for (let i = 0; i < value6.length; i++) {
      const normalized = normalizeClass(value6[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject$e(value6)) {
    for (const name2 in value6) {
      if (value6[name2]) {
        res += name2 + " ";
      }
    }
  }
  return res.trim();
}
const toDisplayString = (val) => {
  return isString$1(val) ? val : val == null ? "" : isArray$e(val) || isObject$e(val) && (val.toString === objectToString$2 || !isFunction$4(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap$2(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet$2(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject$e(val) && !isArray$e(val) && !isPlainObject$4(val)) {
    return String(val);
  }
  return val;
};
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend$1 = Object.assign;
const remove$1 = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty$h = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$h.call(val, key);
const isArray$e = Array.isArray;
const isMap$2 = (val) => toTypeString(val) === "[object Map]";
const isSet$2 = (val) => toTypeString(val) === "[object Set]";
const isFunction$4 = (val) => typeof val === "function";
const isString$1 = (val) => typeof val === "string";
const isSymbol$5 = (val) => typeof val === "symbol";
const isObject$e = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject$e(val) && isFunction$4(val.then) && isFunction$4(val.catch);
};
const objectToString$2 = Object.prototype.toString;
const toTypeString = (value6) => objectToString$2.call(value6);
const toRawType = (value6) => {
  return toTypeString(value6).slice(8, -1);
};
const isPlainObject$4 = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString$1(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn2) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize$2 = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize$2(str)}` : ``);
const hasChanged = (value6, oldValue) => !Object.is(value6, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
const def = (obj, key, value6) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value: value6
  });
};
const toNumber$4 = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.active = true;
    this.effects = [];
    this.cleanups = [];
    if (!detached && activeEffectScope) {
      this.parent = activeEffectScope;
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
  }
  run(fn2) {
    if (this.active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn2();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    }
  }
  on() {
    activeEffectScope = this;
  }
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this.active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (this.parent && !fromParent) {
        const last2 = this.parent.scopes.pop();
        if (last2 && last2 !== this) {
          this.parent.scopes[this.index] = last2;
          last2.index = this.index;
        }
      }
      this.active = false;
    }
  }
}
function recordEffectScope(effect2, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect2) => {
  const { deps } = effect2;
  if (deps.length) {
    let ptr = 0;
    for (let i = 0; i < deps.length; i++) {
      const dep = deps[i];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect2);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol("");
const MAP_KEY_ITERATE_KEY = Symbol("");
class ReactiveEffect {
  constructor(fn2, scheduler = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent2 = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent2) {
      if (parent2 === this) {
        return;
      }
      parent2 = parent2.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect2);
    }
    deps.length = 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last2 = trackStack.pop();
  shouldTrack = last2 === void 0 ? true : last2;
}
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    trackEffects(dep);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray$e(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newValue) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray$e(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap$2(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray$e(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap$2(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap$2(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  for (const effect2 of isArray$e(dep) ? dep : [...dep]) {
    if (effect2 !== activeEffect || effect2.allowRecurse) {
      if (effect2.scheduler) {
        effect2.scheduler();
      } else {
        effect2.run();
      }
    }
  }
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(/* @__PURE__ */ Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol$5));
const get$2 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get4(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray$e(target);
    if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol$5(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
      return shouldUnwrap ? res.value : res;
    }
    if (isObject$e(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$1 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set4(target, key, value6, receiver) {
    let oldValue = target[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value6)) {
      return false;
    }
    if (!shallow && !isReadonly(value6)) {
      if (!isShallow(value6)) {
        value6 = toRaw(value6);
        oldValue = toRaw(oldValue);
      }
      if (!isArray$e(target) && isRef(oldValue) && !isRef(value6)) {
        oldValue.value = value6;
        return true;
      }
    }
    const hadKey = isArray$e(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value6, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value6);
      } else if (hasChanged(value6, oldValue)) {
        trigger(target, "set", key, value6);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol$5(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys$2o(target) {
  track(target, "iterate", isArray$e(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get: get$2,
  set: set$1,
  deleteProperty,
  has,
  ownKeys: ownKeys$2o
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    return true;
  },
  deleteProperty(target, key) {
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend$1({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
const toShallow = (value6) => value6;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get$1$1(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, "get", key);
  }
  !isReadonly2 && track(rawTarget, "get", rawKey);
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, "has", key);
  }
  !isReadonly2 && track(rawTarget, "has", rawKey);
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add$1(value6) {
  value6 = toRaw(value6);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value6);
  if (!hadKey) {
    target.add(value6);
    trigger(target, "add", value6, value6);
  }
  return this;
}
function set$1$1(key, value6) {
  value6 = toRaw(value6);
  const target = toRaw(this);
  const { has: has2, get: get4 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  const oldValue = get4.call(target, key);
  target.set(key, value6);
  if (!hadKey) {
    trigger(target, "add", key, value6);
  } else if (hasChanged(value6, oldValue)) {
    trigger(target, "set", key, value6);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get4 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  get4 ? get4.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value6, key) => {
      return callback.call(thisArg, wrap(value6), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap$2(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const { value: value6, done } = innerIterator.next();
        return done ? { value: value6, done } : {
          value: isPair ? [wrap(value6[0]), wrap(value6[1])] : wrap(value6),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$1$1(this, key);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add: add$1,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$1$1(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add: add$1,
    set: set$1$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$1$1(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$1$1(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value6) {
  return value6["__v_skip"] || !Object.isExtensible(value6) ? 0 : targetTypeMap(toRawType(value6));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject$e(target)) {
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value6) {
  if (isReadonly(value6)) {
    return isReactive(value6["__v_raw"]);
  }
  return !!(value6 && value6["__v_isReactive"]);
}
function isReadonly(value6) {
  return !!(value6 && value6["__v_isReadonly"]);
}
function isShallow(value6) {
  return !!(value6 && value6["__v_isShallow"]);
}
function isProxy(value6) {
  return isReactive(value6) || isReadonly(value6);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value6) {
  def(value6, "__v_skip", true);
  return value6;
}
const toReactive = (value6) => isObject$e(value6) ? reactive(value6) : value6;
const toReadonly = (value6) => isObject$e(value6) ? readonly(value6) : value6;
function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    {
      trackEffects(ref2.dep || (ref2.dep = createDep()));
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  if (ref2.dep) {
    {
      triggerEffects(ref2.dep);
    }
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value6) {
  return createRef(value6, false);
}
function shallowRef(value6) {
  return createRef(value6, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value6, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value6 : toRaw(value6);
    this._value = __v_isShallow ? value6 : toReactive(value6);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    newVal = this.__v_isShallow ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = this.__v_isShallow ? newVal : toReactive(newVal);
      triggerRefValue(this);
    }
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value6, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value6)) {
      oldValue.value = value6;
      return true;
    } else {
      return Reflect.set(target, key, value6, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
function toRefs(object) {
  const ret = isArray$e(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
}
function toRef(object, key, defaultValue) {
  const val = object[key];
  return isRef(val) ? val : new ObjectRefImpl(object, key, defaultValue);
}
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty || !self2._cacheable) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction$4(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  return cRef;
}
function callWithErrorHandling(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction$4(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn2.length; i++) {
    values.push(callWithAsyncErrorHandling(fn2[i], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    console.error(err);
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue$1 = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex(id) {
  let start3 = flushIndex + 1;
  let end3 = queue$1.length;
  while (start3 < end3) {
    const middle = start3 + end3 >>> 1;
    const middleJobId = getId(queue$1[middle]);
    middleJobId < id ? start3 = middle + 1 : end3 = middle;
  }
  return start3;
}
function queueJob(job) {
  if ((!queue$1.length || !queue$1.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
    if (job.id == null) {
      queue$1.push(job);
    } else {
      queue$1.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue$1.indexOf(job);
  if (i > flushIndex) {
    queue$1.splice(i, 1);
  }
}
function queueCb(cb, activeQueue, pendingQueue, index2) {
  if (!isArray$e(cb)) {
    if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index2 + 1 : index2)) {
      pendingQueue.push(cb);
    }
  } else {
    pendingQueue.push(...cb);
  }
  queueFlush();
}
function queuePreFlushCb(cb) {
  queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
  queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen2, parentJob = null) {
  if (pendingPreFlushCbs.length) {
    currentPreFlushParentJob = parentJob;
    activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
    pendingPreFlushCbs.length = 0;
    for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
      activePreFlushCbs[preFlushIndex]();
    }
    activePreFlushCbs = null;
    preFlushIndex = 0;
    currentPreFlushParentJob = null;
    flushPreFlushCbs(seen2, parentJob);
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
function flushJobs(seen2) {
  isFlushPending = false;
  isFlushing = true;
  flushPreFlushCbs(seen2);
  queue$1.sort((a, b) => getId(a) - getId(b));
  const check2 = NOOP;
  try {
    for (flushIndex = 0; flushIndex < queue$1.length; flushIndex++) {
      const job = queue$1[flushIndex];
      if (job && job.active !== false) {
        if (false)
          ;
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue$1.length = 0;
    flushPostFlushCbs();
    isFlushing = false;
    currentFlushPromise = null;
    if (queue$1.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) {
      flushJobs(seen2);
    }
  }
}
function emit$1(instance, event, ...rawArgs) {
  if (instance.isUnmounted)
    return;
  const props2 = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props2) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number: number2, trim: trim3 } = props2[modifiersKey] || EMPTY_OBJ;
    if (trim3) {
      args = rawArgs.map((a) => a.trim());
    } else if (number2) {
      args = rawArgs.map(toNumber$4);
    }
  }
  let handlerName;
  let handler15 = props2[handlerName = toHandlerKey(event)] || props2[handlerName = toHandlerKey(camelize(event))];
  if (!handler15 && isModelListener2) {
    handler15 = props2[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler15) {
    callWithAsyncErrorHandling(handler15, instance, 6, args);
  }
  const onceHandler = props2[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction$4(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend$1(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, null);
    return null;
  }
  if (isArray$e(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend$1(normalized, raw);
  }
  cache.set(comp, normalized);
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    const res = fn2(...args);
    setCurrentRenderingInstance(prevInstance);
    if (renderFnWithContext._d) {
      setBlockTracking(1);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function markAttrsAccessed() {
}
function renderComponentRoot(instance) {
  const { type: Component, vnode, proxy, withProxy, props: props2, propsOptions: [propsOptions], slots, attrs, emit, render: render102, renderCache, data: data26, setupState, ctx, inheritAttrs } = instance;
  let result;
  let fallthroughAttrs;
  const prev = setCurrentRenderingInstance(instance);
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render102.call(proxyToUse, proxyToUse, renderCache, props2, setupState, data26, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render103 = Component;
      if (false)
        ;
      result = normalizeVNode(render103.length > 1 ? render103(props2, false ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit
      } : { attrs, slots, emit }) : render103(props2, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment$1);
  }
  let root2 = result;
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys2 = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root2;
    if (keys2.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys2.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
        }
        root2 = cloneVNode(root2, fallthroughAttrs);
      }
    }
  }
  if (vnode.dirs) {
    root2.dirs = root2.dirs ? root2.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    root2.transition = vnode.transition;
  }
  {
    result = root2;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props2) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props2)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent: parent2 }, el) {
  while (parent2 && parent2.subTree === vnode) {
    (vnode = parent2.vnode).el = el;
    parent2 = parent2.parent;
  }
}
const isSuspense = (type) => type.__isSuspense;
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray$e(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
function provide(key, value6) {
  if (!currentInstance)
    ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value6;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction$4(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else
      ;
  }
}
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  const instance = currentInstance;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray$e(source)) {
    isMultiSource = true;
    forceTrigger = source.some(isReactive);
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse(s);
      } else if (isFunction$4(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else
        ;
    });
  } else if (isFunction$4(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(source, instance, 3, [onCleanup]);
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn2) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(fn2, instance, 4);
    };
  };
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    return NOOP;
  }
  let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    scheduler = () => {
      if (!instance || instance.isMounted) {
        queuePreFlushCb(job);
      } else {
        job();
      }
    };
  }
  const effect2 = new ReactiveEffect(getter, scheduler);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(effect2.run.bind(effect2), instance && instance.suspense);
  } else {
    effect2.run();
  }
  return () => {
    effect2.stop();
    if (instance && instance.scope) {
      remove$1(instance.scope.effects, effect2);
    }
  };
}
function instanceWatch(source, value6, options) {
  const publicThis = this.proxy;
  const getter = isString$1(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction$4(value6)) {
    cb = value6;
  } else {
    cb = value6.handler;
    options = value6;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function traverse(value6, seen2) {
  if (!isObject$e(value6) || value6["__v_skip"]) {
    return value6;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value6)) {
    return value6;
  }
  seen2.add(value6);
  if (isRef(value6)) {
    traverse(value6.value, seen2);
  } else if (isArray$e(value6)) {
    for (let i = 0; i < value6.length; i++) {
      traverse(value6[i], seen2);
    }
  } else if (isSet$2(value6) || isMap$2(value6)) {
    value6.forEach((v) => {
      traverse(v, seen2);
    });
  } else if (isPlainObject$4(value6)) {
    for (const key in value6) {
      traverse(value6[key], seen2);
    }
  }
  return value6;
}
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: {
    mode: String,
    appear: Boolean,
    persisted: Boolean,
    onBeforeEnter: TransitionHookValidator,
    onEnter: TransitionHookValidator,
    onAfterEnter: TransitionHookValidator,
    onEnterCancelled: TransitionHookValidator,
    onBeforeLeave: TransitionHookValidator,
    onLeave: TransitionHookValidator,
    onAfterLeave: TransitionHookValidator,
    onLeaveCancelled: TransitionHookValidator,
    onBeforeAppear: TransitionHookValidator,
    onAppear: TransitionHookValidator,
    onAfterAppear: TransitionHookValidator,
    onAppearCancelled: TransitionHookValidator
  },
  setup(props2, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevTransitionKey;
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        for (const c of children) {
          if (c.type !== Comment$1) {
            child = c;
            break;
          }
        }
      }
      const rawProps = toRaw(props2);
      const { mode: mode3 } = rawProps;
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      let transitionKeyChanged = false;
      const { getTransitionKey } = innerChild.type;
      if (getTransitionKey) {
        const key = getTransitionKey();
        if (prevTransitionKey === void 0) {
          prevTransitionKey = key;
        } else if (key !== prevTransitionKey) {
          prevTransitionKey = key;
          transitionKeyChanged = true;
        }
      }
      if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode3 === "out-in") {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            instance.update();
          };
          return emptyPlaceholder(child);
        } else if (mode3 === "in-out" && innerChild.type !== Comment$1) {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el._leaveCb = () => {
              earlyRemove();
              el._leaveCb = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props2, state, instance) {
  const { appear, mode: mode3, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props2;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(hook, instance, 9, args);
  };
  const hooks = {
    mode: mode3,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el._leaveCb) {
        el._leaveCb(true);
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook2(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el]);
        } else {
          callHook2(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el._enterCb = void 0;
      };
      if (hook) {
        hook(el, done);
        if (hook.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    leave(el, remove3) {
      const key2 = String(vnode.key);
      if (el._enterCb) {
        el._enterCb(true);
      }
      if (state.isUnmounting) {
        return remove3();
      }
      callHook2(onBeforeLeave, [el]);
      let called = false;
      const done = el._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove3();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el]);
        } else {
          callHook2(onAfterLeave, [el]);
        }
        el._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        onLeave(el, done);
        if (onLeave.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props2, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i = 0; i < children.length; i++) {
    let child = children[i];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
    } else if (keepComment || child.type !== Comment$1) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i = 0; i < ret.length; i++) {
      ret[i].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent(options) {
  return isFunction$4(options) ? { setup: options, name: options.name } : options;
}
const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current2 = target;
    while (current2) {
      if (current2.isDeactivated) {
        return;
      }
      current2 = current2.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current2 = target.parent;
    while (current2 && current2.parent) {
      if (isKeepAlive(current2.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current2);
      }
      current2 = current2.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(type, hook, keepAliveRoot, true);
  onUnmounted(() => {
    remove$1(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook, target);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    created: created7,
    beforeMount,
    mounted: mounted13,
    beforeUpdate: beforeUpdate2,
    updated: updated2,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount: beforeUnmount4,
    destroyed,
    unmounted: unmounted5,
    render: render102,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    expose,
    inheritAttrs,
    components: components2,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction$4(methodHandler)) {
        {
          ctx[key] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data26 = dataOptions.call(publicThis, publicThis);
    if (!isObject$e(data26))
      ;
    else {
      instance.data = reactive(data26);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get4 = isFunction$4(opt) ? opt.bind(publicThis, publicThis) : isFunction$4(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set4 = !isFunction$4(opt) && isFunction$4(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c = computed({
        get: get4,
        set: set4
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction$4(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created7) {
    callHook$1(created7, instance, "c");
  }
  function registerLifecycleHook(register2, hook) {
    if (isArray$e(hook)) {
      hook.forEach((_hook) => register2(_hook.bind(publicThis)));
    } else if (hook) {
      register2(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted13);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate2);
  registerLifecycleHook(onUpdated, updated2);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount4);
  registerLifecycleHook(onUnmounted, unmounted5);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray$e(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render102 && instance.render === NOOP) {
    instance.render = render102;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components2)
    instance.components = components2;
  if (directives)
    instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
  if (isArray$e(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject$e(opt)) {
      if ("default" in opt) {
        injected = inject(opt.from || key, opt.default, true);
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v) => injected.value = v
        });
      } else {
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
  }
}
function callHook$1(hook, instance, type) {
  callWithAsyncErrorHandling(isArray$e(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString$1(raw)) {
    const handler15 = ctx[raw];
    if (isFunction$4(handler15)) {
      watch(getter, handler15);
    }
  } else if (isFunction$4(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject$e(raw)) {
    if (isArray$e(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler15 = isFunction$4(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction$4(handler15)) {
        watch(getter, handler15, raw);
      }
    }
  } else
    ;
}
function resolveMergedOptions(instance) {
  const base2 = instance.type;
  const { mixins, extends: extendsOptions } = base2;
  const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache.get(base2);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base2;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m) => mergeOptions$1(resolved, m, optionMergeStrategies, true));
    }
    mergeOptions$1(resolved, base2, optionMergeStrategies);
  }
  cache.set(base2, resolved);
  return resolved;
}
function mergeOptions$1(to, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions$1(to, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m) => mergeOptions$1(to, m, strats, true));
  }
  for (const key in from) {
    if (asMixin && key === "expose")
      ;
    else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
  }
  return to;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeObjectOptions,
  emits: mergeObjectOptions,
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  watch: mergeWatchOptions,
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to, from) {
  if (!from) {
    return to;
  }
  if (!to) {
    return from;
  }
  return function mergedDataFn() {
    return extend$1(isFunction$4(to) ? to.call(this, this) : to, isFunction$4(from) ? from.call(this, this) : from);
  };
}
function mergeInject(to, from) {
  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray$e(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to, from) {
  return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
  return to ? extend$1(extend$1(/* @__PURE__ */ Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
  if (!to)
    return from;
  if (!from)
    return to;
  const merged = extend$1(/* @__PURE__ */ Object.create(null), to);
  for (const key in from) {
    merged[key] = mergeAsArray(to[key], from[key]);
  }
  return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props2 = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props2, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props2)) {
      props2[key] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props2 : shallowReactive(props2);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props2;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const { props: props2, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw(props2);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if ((optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value6 = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value6 !== attrs[key]) {
              attrs[key] = value6;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props2[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value6, instance, false);
          }
        } else {
          if (value6 !== attrs[key]) {
            attrs[key] = value6;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props2, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || !hasOwn(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props2[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);
          }
        } else {
          delete props2[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
}
function setFullProps(instance, rawProps, props2, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value6 = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props2[camelKey] = value6;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value6;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value6 !== attrs[key]) {
          attrs[key] = value6;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props2);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props2[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props2, key, value6, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value6 === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction$4(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value6 = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value6 = propsDefaults[key] = defaultValue.call(null, props2);
          unsetCurrentInstance();
        }
      } else {
        value6 = defaultValue;
      }
    }
    if (opt[0]) {
      if (isAbsent && !hasDefault) {
        value6 = false;
      } else if (opt[1] && (value6 === "" || value6 === hyphenate(key))) {
        value6 = true;
      }
    }
  }
  return value6;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction$4(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props2, keys2] = normalizePropsOptions(raw2, appContext, true);
      extend$1(normalized, props2);
      if (keys2)
        needCastKeys.push(...keys2);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, EMPTY_ARR);
    return EMPTY_ARR;
  }
  if (isArray$e(raw)) {
    for (let i = 0; i < raw.length; i++) {
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray$e(opt) || isFunction$4(opt) ? { type: opt } : opt;
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  cache.set(comp, res);
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ctor === null ? "null" : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray$e(expectedTypes)) {
    return expectedTypes.findIndex((t) => isSameType(t, type));
  } else if (isFunction$4(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value6) => isArray$e(value6) ? value6.map(normalizeVNode) : [normalizeVNode(value6)];
const normalizeSlot$1 = (key, rawSlot, ctx) => {
  const normalized = withCtx((...args) => {
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value6 = rawSlots[key];
    if (isFunction$4(value6)) {
      slots[key] = normalizeSlot$1(key, value6, ctx);
    } else if (value6 != null) {
      const normalized = normalizeSlotValue(value6);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw(children);
      def(children, "_", type);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend$1(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    return vnode;
  }
  const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value6, arg, modifiers = EMPTY_OBJ] = directives[i];
    if (isFunction$4(dir)) {
      dir = {
        mounted: dir,
        updated: dir
      };
    }
    if (dir.deep) {
      traverse(value6);
    }
    bindings.push({
      dir,
      instance,
      value: value6,
      oldValue: void 0,
      arg,
      modifiers
    });
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name2) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    let hook = binding.dir[name2];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render102, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction$4(rootComponent)) {
      rootComponent = Object.assign({}, rootComponent);
    }
    if (rootProps != null && !isObject$e(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version: version$1,
      get config() {
        return context.config;
      },
      set config(v) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin))
          ;
        else if (plugin && isFunction$4(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction$4(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else
          ;
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          }
        }
        return app;
      },
      component(name2, component) {
        if (!component) {
          return context.components[name2];
        }
        context.components[name2] = component;
        return app;
      },
      directive(name2, directive) {
        if (!directive) {
          return context.directives[name2];
        }
        context.directives[name2] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render102(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          return getExposeProxy(vnode.component) || vnode.component.proxy;
        }
      },
      unmount() {
        if (isMounted) {
          render102(null, app._container);
          delete app._container.__vue_app__;
        }
      },
      provide(key, value6) {
        context.provides[key] = value6;
        return app;
      }
    };
    return app;
  };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray$e(rawRef)) {
    rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray$e(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value6 = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString$1(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction$4(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value6, refs]);
  } else {
    const _isString = isString$1(ref2);
    const _isRef = isRef(ref2);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? refs[ref2] : ref2.value;
          if (isUnmount) {
            isArray$e(existing) && remove$1(existing, refValue);
          } else {
            if (!isArray$e(existing)) {
              if (_isString) {
                refs[ref2] = [refValue];
                if (hasOwn(setupState, ref2)) {
                  setupState[ref2] = refs[ref2];
                }
              } else {
                ref2.value = [refValue];
                if (rawRef.k)
                  refs[rawRef.k] = ref2.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref2] = value6;
          if (hasOwn(setupState, ref2)) {
            setupState[ref2] = value6;
          }
        } else if (isRef(ref2)) {
          ref2.value = value6;
          if (rawRef.k)
            refs[rawRef.k] = value6;
        } else
          ;
      };
      if (value6) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    }
  }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  const target = getGlobalThis();
  target.__VUE__ = true;
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment$1:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else
          ;
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { type, props: props2, shapeFlag, transition, patchFlag, dirs } = vnode;
    if (vnode.el && hostCloneNode !== void 0 && patchFlag === -1) {
      el = vnode.el = hostCloneNode(vnode.el);
    } else {
      el = vnode.el = hostCreateElement(vnode.type, isSVG, props2 && props2.is, props2);
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props2) {
        for (const key in props2) {
          if (key !== "value" && !isReservedProp(key)) {
            hostPatchProp(el, key, null, props2[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
        if ("value" in props2) {
          hostPatchProp(el, "value", null, props2.value);
        }
        if (vnodeHook = props2.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props2 && props2.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i = 0; i < slotScopeIds.length; i++) {
        hostSetScopeId(el, slotScopeIds[i]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start3 = 0) => {
    for (let i = start3; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = oldVNode.el && (oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment$1);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.component = n1.component;
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props: props2 } = initialVNode;
        const { bm, m, parent: parent2 } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props2 && props2.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent2, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(el, instance.subTree, instance, parentSuspense, null);
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(() => !instance.isUnmounted && hydrateSubTree());
          } else {
            hydrateSubTree();
          }
        } else {
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props2 && props2.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent2, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next, bu, u, parent: parent2, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent2, next, vnode);
        }
        toggleRecurse(instance, true);
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(prevTree, nextTree, hostParentNode(prevTree.el), getNextHostNode(prevTree), instance, parentSuspense, isSVG);
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent2, next, vnode), parentSuspense);
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect(componentUpdateFn, () => queueJob(instance.update), instance.scope);
    const update = instance.update = effect2.run.bind(effect2);
    update.id = instance.uid;
    toggleRecurse(instance, true);
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(void 0, instance.update);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved2 = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++)
        newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex2;
        if (prevChild.key != null) {
          newIndex2 = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex2 = j;
              break;
            }
          }
        }
        if (newIndex2 === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex2 - s2] = i + 1;
          if (newIndex2 >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex2;
          } else {
            moved2 = true;
          }
          patch(prevChild, c2[newIndex2], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved2 ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved2) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove4 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove4();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove4, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props: props2, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props2 && props2.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove3(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props2 && props2.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove3 = (vnode) => {
    const { type, el, anchor, transition } = vnode;
    if (type === Fragment) {
      {
        removeFragment(el, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end3) => {
    let next;
    while (cur !== end3) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end3);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start3 = 0) => {
    for (let i = start3; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render102 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove3,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render102,
    hydrate,
    createApp: createAppAPI(render102, hydrate)
  };
}
function toggleRecurse({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray$e(ch1) && isArray$e(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len2 = arr.length;
  for (i = 0; i < len2; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
const isTeleport = (type) => type.__isTeleport;
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name2, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name2, true, maybeSelfReference) || name2;
}
const NULL_DYNAMIC_COMPONENT = Symbol();
function resolveDirective(name2) {
  return resolveAsset(DIRECTIVES, name2);
}
function resolveAsset(type, name2, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(Component);
      if (selfName && (selfName === name2 || selfName === camelize(name2) || selfName === capitalize$2(camelize(name2)))) {
        return Component;
      }
    }
    const res = resolve(instance[type] || Component[type], name2) || resolve(instance.appContext[type], name2);
    if (!res && maybeSelfReference) {
      return Component;
    }
    return res;
  }
}
function resolve(registry, name2) {
  return registry && (registry[name2] || registry[camelize(name2)] || registry[capitalize$2(camelize(name2))]);
}
const Fragment = Symbol(void 0);
const Text = Symbol(void 0);
const Comment$1 = Symbol(void 0);
const Static = Symbol(void 0);
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value6) {
  isBlockTreeEnabled += value6;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props2, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(createBaseVNode(type, props2, children, patchFlag, dynamicProps, shapeFlag, true));
}
function createBlock(type, props2, children, patchFlag, dynamicProps) {
  return setupBlock(createVNode(type, props2, children, patchFlag, dynamicProps, true));
}
function isVNode(value6) {
  return value6 ? value6.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({ ref: ref2, ref_key, ref_for }) => {
  return ref2 != null ? isString$1(ref2) || isRef(ref2) || isFunction$4(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
};
function createBaseVNode(type, props2 = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props: props2,
    key: props2 && normalizeKey(props2),
    ref: props2 && normalizeRef(props2),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString$1(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type, props2 = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    type = Comment$1;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(type, props2, true);
    if (children) {
      normalizeChildren(cloned, children);
    }
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props2) {
    props2 = guardReactiveProps(props2);
    let { class: klass, style } = props2;
    if (klass && !isString$1(klass)) {
      props2.class = normalizeClass(klass);
    }
    if (isObject$e(style)) {
      if (isProxy(style) && !isArray$e(style)) {
        style = extend$1({}, style);
      }
      props2.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString$1(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject$e(type) ? 4 : isFunction$4(type) ? 2 : 0;
  return createBaseVNode(type, props2, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props2) {
  if (!props2)
    return null;
  return isProxy(props2) || InternalObjectKey in props2 ? extend$1({}, props2) : props2;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props: props2, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props2 || {}, extraProps) : props2;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray$e(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  };
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment$1);
  } else if (isArray$e(child)) {
    return createVNode(Fragment, null, child.slice());
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray$e(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction$4(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i = 0; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray$e(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
function renderList(source, renderItem3, cache, index2) {
  let ret;
  const cached = cache && cache[index2];
  if (isArray$e(source) || isString$1(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem3(source[i], i, void 0, cached && cached[i]);
    }
  } else if (typeof source === "number") {
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem3(i + 1, i, void 0, cached && cached[i]);
    }
  } else if (isObject$e(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, (item, i) => renderItem3(item, i, void 0, cached && cached[i]));
    } else {
      const keys2 = Object.keys(source);
      ret = new Array(keys2.length);
      for (let i = 0, l = keys2.length; i < l; i++) {
        const key = keys2[i];
        ret[i] = renderItem3(source[key], key, i, cached && cached[i]);
      }
    }
  } else {
    ret = [];
  }
  if (cache) {
    cache[index2] = ret;
  }
  return ret;
}
const getPublicInstance = (i) => {
  if (!i)
    return null;
  if (isStatefulComponent(i))
    return getExposeProxy(i) || i.proxy;
  return getPublicInstance(i.parent);
};
const publicPropertiesMap = /* @__PURE__ */ extend$1(/* @__PURE__ */ Object.create(null), {
  $: (i) => i,
  $el: (i) => i.vnode.el,
  $data: (i) => i.data,
  $props: (i) => i.props,
  $attrs: (i) => i.attrs,
  $slots: (i) => i.slots,
  $refs: (i) => i.refs,
  $parent: (i) => getPublicInstance(i.parent),
  $root: (i) => getPublicInstance(i.root),
  $emit: (i) => i.emit,
  $options: (i) => resolveMergedOptions(i),
  $forceUpdate: (i) => () => queueJob(i.update),
  $nextTick: (i) => nextTick.bind(i.proxy),
  $watch: (i) => instanceWatch.bind(i)
});
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data: data26, props: props2, accessCache, type, appContext } = instance;
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1:
            return setupState[key];
          case 2:
            return data26[key];
          case 4:
            return ctx[key];
          case 3:
            return props2[key];
        }
      } else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data26 !== EMPTY_OBJ && hasOwn(data26, key)) {
        accessCache[key] = 2;
        return data26[key];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)) {
        accessCache[key] = 3;
        return props2[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)) {
      {
        return globalProperties[key];
      }
    } else
      ;
  },
  set({ _: instance }, key, value6) {
    const { data: data26, setupState, ctx } = instance;
    if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
      setupState[key] = value6;
      return true;
    } else if (data26 !== EMPTY_OBJ && hasOwn(data26, key)) {
      data26[key] = value6;
      return true;
    } else if (hasOwn(instance.props, key)) {
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key] = value6;
      }
    }
    return true;
  },
  has({ _: { data: data26, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
    let normalizedProps;
    return !!accessCache[key] || data26 !== EMPTY_OBJ && hasOwn(data26, key) || setupState !== EMPTY_OBJ && hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
const emptyAppContext = createAppContext();
let uid$1$1 = 0;
function createComponentInstance(vnode, parent2, suspense) {
  const type = vnode.type;
  const appContext = (parent2 ? parent2.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$1$1++,
    vnode,
    type,
    parent: parent2,
    appContext,
    root: null,
    next: null,
    subTree: null,
    effect: null,
    update: null,
    scope: new EffectScope(true),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent2 ? parent2.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    emit: null,
    emitted: null,
    propsDefaults: EMPTY_OBJ,
    inheritAttrs: type.inheritAttrs,
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent2 ? parent2.root : instance;
  instance.emit = emit$1.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
const setCurrentInstance = (instance) => {
  currentInstance = instance;
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  currentInstance = null;
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props: props2, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props2, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  const { setup: setup134 } = Component;
  if (setup134) {
    const setupContext = instance.setupContext = setup134.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(setup134, instance, 0, [instance.props, setupContext]);
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(e, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction$4(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject$e(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else
    ;
  finishComponentSetup(instance, isSSR);
}
let compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component.render) {
      const template2 = Component.template;
      if (template2) {
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend$1(extend$1({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component.render = compile(template2, finalCompilerOptions);
      }
    }
    instance.render = Component.render || NOOP;
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
}
function createAttrsProxy(instance) {
  return new Proxy(instance.attrs, {
    get(target, key) {
      track(instance, "get", "$attrs");
      return target[key];
    }
  });
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return {
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      }
    }));
  }
}
function getComponentName(Component) {
  return isFunction$4(Component) ? Component.displayName || Component.name : Component.name;
}
function isClassComponent(value6) {
  return isFunction$4(value6) && "__vccOpts" in value6;
}
const computed = (getterOrOptions, debugOptions) => {
  return computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
};
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject$e(propsOrChildren) && !isArray$e(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
const version$1 = "3.2.33";
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent2, anchor) => {
    parent2.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent2 = child.parentNode;
    if (parent2) {
      parent2.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is2, props2) => {
    const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props2 && props2.multiple != null) {
      el.setAttribute("multiple", props2.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  cloneNode(el) {
    const cloned = el.cloneNode(true);
    if (`_value` in el) {
      cloned._value = el._value;
    }
    return cloned;
  },
  insertStaticContent(content, parent2, anchor, isSVG, start3, end3) {
    const before = anchor ? anchor.previousSibling : parent2.lastChild;
    if (start3 && (start3 === end3 || start3.nextSibling)) {
      while (true) {
        parent2.insertBefore(start3.cloneNode(true), anchor);
        if (start3 === end3 || !(start3 = start3.nextSibling))
          break;
      }
    } else {
      templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      const template2 = templateContainer.content;
      if (isSVG) {
        const wrapper = template2.firstChild;
        while (wrapper.firstChild) {
          template2.appendChild(wrapper.firstChild);
        }
        template2.removeChild(wrapper);
      }
      parent2.insertBefore(template2, anchor);
    }
    return [
      before ? before.nextSibling : parent2.firstChild,
      anchor ? anchor.previousSibling : parent2.lastChild
    ];
  }
};
function patchClass(el, value6, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value6 = (value6 ? [value6, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value6 == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value6);
  } else {
    el.className = value6;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  const isCssString = isString$1(next);
  if (next && !isCssString) {
    for (const key in next) {
      setStyle$2(style, key, next[key]);
    }
    if (prev && !isString$1(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle$2(style, key, "");
        }
      }
    }
  } else {
    const currentDisplay = style.display;
    if (isCssString) {
      if (prev !== next) {
        style.cssText = next;
      }
    } else if (prev) {
      el.removeAttribute("style");
    }
    if ("_vod" in el) {
      style.display = currentDisplay;
    }
  }
}
const importantRE = /\s*!important$/;
function setStyle$2(style, name2, val) {
  if (isArray$e(val)) {
    val.forEach((v) => setStyle$2(style, name2, v));
  } else {
    if (val == null)
      val = "";
    if (name2.startsWith("--")) {
      style.setProperty(name2, val);
    } else {
      const prefixed = autoPrefix(style, name2);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name2 = camelize(rawName);
  if (name2 !== "filter" && name2 in style) {
    return prefixCache[rawName] = name2;
  }
  name2 = capitalize$2(name2);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name2;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value6, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value6 == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value6);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr(key);
    if (value6 == null || isBoolean2 && !includeBooleanAttr(value6)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean2 ? "" : value6);
    }
  }
}
function patchDOMProp(el, key, value6, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value6 == null ? "" : value6;
    return;
  }
  if (key === "value" && el.tagName !== "PROGRESS" && !el.tagName.includes("-")) {
    el._value = value6;
    const newValue = value6 == null ? "" : value6;
    if (el.value !== newValue || el.tagName === "OPTION") {
      el.value = newValue;
    }
    if (value6 == null) {
      el.removeAttribute(key);
    }
    return;
  }
  let needRemove = false;
  if (value6 === "" || value6 == null) {
    const type = typeof el[key];
    if (type === "boolean") {
      value6 = includeBooleanAttr(value6);
    } else if (value6 == null && type === "string") {
      value6 = "";
      needRemove = true;
    } else if (type === "number") {
      value6 = 0;
      needRemove = true;
    }
  }
  try {
    el[key] = value6;
  } catch (e) {
  }
  needRemove && el.removeAttribute(key);
}
const [_getNow, skipTimestampCheck] = /* @__PURE__ */ (() => {
  let _getNow2 = Date.now;
  let skipTimestampCheck2 = false;
  if (typeof window !== "undefined") {
    if (Date.now() > document.createEvent("Event").timeStamp) {
      _getNow2 = () => performance.now();
    }
    const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
    skipTimestampCheck2 = !!(ffMatch && Number(ffMatch[1]) <= 53);
  }
  return [_getNow2, skipTimestampCheck2];
})();
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const reset = () => {
  cachedNow = 0;
};
const getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler15, options) {
  el.addEventListener(event, handler15, options);
}
function removeEventListener(el, event, handler15, options) {
  el.removeEventListener(event, handler15, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name2, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name2, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name2, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name2) {
  let options;
  if (optionsModifierRE.test(name2)) {
    options = {};
    let m;
    while (m = name2.match(optionsModifierRE)) {
      name2 = name2.slice(0, name2.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  return [hyphenate(name2.slice(2)), options];
}
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    const timeStamp = e.timeStamp || _getNow();
    if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value6) {
  if (isArray$e(value6)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value6.map((fn2) => (e2) => !e2._stopped && fn2 && fn2(e2));
  } else {
    return value6;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value6, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction$4(value6)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString$1(value6)) {
    return false;
  }
  return key in el;
}
const TRANSITION = "transition";
const ANIMATION = "animation";
const Transition = (props2, { slots }) => h(BaseTransition, resolveTransitionProps(props2), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend$1({}, BaseTransition.props, DOMTransitionPropsValidators);
const callHook = (hook, args = []) => {
  if (isArray$e(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray$e(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps2 = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps2[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps2;
  }
  const { name: name2 = "v", type, duration, enterFromClass = `${name2}-enter-from`, enterActiveClass = `${name2}-enter-active`, enterToClass = `${name2}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name2}-leave-from`, leaveActiveClass = `${name2}-leave-active`, leaveToClass = `${name2}-leave-to` } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps2;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el, isAppear, done);
      callHook(hook, [el, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend$1(baseProps2, {
    onBeforeEnter(el) {
      callHook(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      forceReflow();
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type, leaveDuration, resolve2);
        }
      });
      callHook(onLeave, [el, resolve2]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject$e(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber$4(val);
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
  (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
  const { _vtc } = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end3 = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end3();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end3();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(TRANSITION + "Delay");
  const transitionDurations = getStyleProperties(TRANSITION + "Duration");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(ANIMATION + "Delay");
  const animationDurations = getStyleProperties(ANIMATION + "Duration");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend$1({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props2, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props2.moveClass || `${props2.name || "v"}-move`;
      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c) => {
        const el = c.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb = el._moveCb = (e) => {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener("transitionend", cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props2);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = children;
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.key != null) {
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
        }
      }
      if (prevChildren) {
        for (let i = 0; i < prevChildren.length; i++) {
          const child = prevChildren[i];
          setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
          positionMap.set(child, child.el.getBoundingClientRect());
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
  const el = c.el;
  if (el._moveCb) {
    el._moveCb();
  }
  if (el._enterCb) {
    el._enterCb();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c;
  }
}
function hasCSSTransform(el, root2, moveClass) {
  const clone2 = el.cloneNode();
  if (el._vtc) {
    el._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c) => c && clone2.classList.remove(c));
    });
  }
  moveClass.split(/\s+/).forEach((c) => c && clone2.classList.add(c));
  clone2.style.display = "none";
  const container = root2.nodeType === 1 ? root2 : root2.parentNode;
  container.appendChild(clone2);
  const { hasTransform } = getTransitionInfo(clone2);
  container.removeChild(clone2);
  return hasTransform;
}
const vShow = {
  beforeMount(el, { value: value6 }, { transition }) {
    el._vod = el.style.display === "none" ? "" : el.style.display;
    if (transition && value6) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value6);
    }
  },
  mounted(el, { value: value6 }, { transition }) {
    if (transition && value6) {
      transition.enter(el);
    }
  },
  updated(el, { value: value6, oldValue }, { transition }) {
    if (!value6 === !oldValue)
      return;
    if (transition) {
      if (value6) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value6);
    }
  },
  beforeUnmount(el, { value: value6 }) {
    setDisplay(el, value6);
  }
};
function setDisplay(el, value6) {
  el.style.display = value6 ? el._vod : "none";
}
const rendererOptions = /* @__PURE__ */ extend$1({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  const { mount: mount2 } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction$4(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount2(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function normalizeContainer(container) {
  if (isString$1(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
function _arrayLikeToArray$1(arr, len2) {
  if (len2 == null || len2 > arr.length)
    len2 = arr.length;
  for (var i = 0, arr2 = new Array(len2); i < len2; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray$1(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray$1(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray$1(o, minLen);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
}
function _defineProperty$3(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value6,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function setStyle$1(el, styles) {
  var keys2 = Object.keys(styles);
  keys2.forEach(function(key) {
    el.style[key] = styles[key];
  });
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties$1(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose$1(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getIEVersion() {
  var _navigator = navigator, userAgent2 = _navigator.userAgent;
  var isIE = userAgent2.indexOf("compatible") > -1 && userAgent2.indexOf("MSIE") > -1;
  var isIE11 = userAgent2.indexOf("Trident") > -1 && userAgent2.indexOf("rv:11.0") > -1;
  if (isIE) {
    var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
    var match = userAgent2.match(reIE);
    if (!match)
      return -1;
    var fIEVersion = parseFloat(match[1]);
    return fIEVersion < 7 ? 6 : fIEVersion;
  }
  if (isIE11) {
    return 11;
  }
  return Number.MAX_SAFE_INTEGER;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$2n(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2m(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2n(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function circleAdapter(circleElem) {
  var _window, _window$getComputedSt2, _window2, _window2$navigator;
  var basicStyle = {};
  if (!circleElem) {
    return;
  }
  var _window$getComputedSt = (_window = window) === null || _window === void 0 ? void 0 : (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem), color = _window$getComputedSt.color, fontSize = _window$getComputedSt.fontSize;
  var ua = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$navigator = _window2.navigator) === null || _window2$navigator === void 0 ? void 0 : _window2$navigator.userAgent;
  var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);
  if (isSafari) {
    basicStyle = {
      transformOrigin: "-1px -1px",
      transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
    };
  }
  if (color && getIEVersion() > 11) {
    var matched = color.match(/[\d.]+/g);
    var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
    setStyle$1(circleElem, _objectSpread$2m(_objectSpread$2m({}, basicStyle), {}, {
      background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
    }));
  } else {
    setStyle$1(circleElem, _objectSpread$2m(_objectSpread$2m({}, basicStyle), {}, {
      background: ""
    }));
  }
}
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs$1(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function listCacheClear$1() {
  this.__data__ = [];
  this.size = 0;
}
var _listCacheClear = listCacheClear$1;
function eq$6(value6, other) {
  return value6 === other || value6 !== value6 && other !== other;
}
var eq_1 = eq$6;
var eq$5 = eq_1;
function assocIndexOf$4(array, key) {
  var length = array.length;
  while (length--) {
    if (eq$5(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var _assocIndexOf = assocIndexOf$4;
var assocIndexOf$3 = _assocIndexOf;
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete$1(key) {
  var data26 = this.__data__, index2 = assocIndexOf$3(data26, key);
  if (index2 < 0) {
    return false;
  }
  var lastIndex = data26.length - 1;
  if (index2 == lastIndex) {
    data26.pop();
  } else {
    splice.call(data26, index2, 1);
  }
  --this.size;
  return true;
}
var _listCacheDelete = listCacheDelete$1;
var assocIndexOf$2 = _assocIndexOf;
function listCacheGet$1(key) {
  var data26 = this.__data__, index2 = assocIndexOf$2(data26, key);
  return index2 < 0 ? void 0 : data26[index2][1];
}
var _listCacheGet = listCacheGet$1;
var assocIndexOf$1 = _assocIndexOf;
function listCacheHas$1(key) {
  return assocIndexOf$1(this.__data__, key) > -1;
}
var _listCacheHas = listCacheHas$1;
var assocIndexOf = _assocIndexOf;
function listCacheSet$1(key, value6) {
  var data26 = this.__data__, index2 = assocIndexOf(data26, key);
  if (index2 < 0) {
    ++this.size;
    data26.push([key, value6]);
  } else {
    data26[index2][1] = value6;
  }
  return this;
}
var _listCacheSet = listCacheSet$1;
var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
function ListCache$4(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
ListCache$4.prototype.clear = listCacheClear;
ListCache$4.prototype["delete"] = listCacheDelete;
ListCache$4.prototype.get = listCacheGet;
ListCache$4.prototype.has = listCacheHas;
ListCache$4.prototype.set = listCacheSet;
var _ListCache = ListCache$4;
var ListCache$3 = _ListCache;
function stackClear$1() {
  this.__data__ = new ListCache$3();
  this.size = 0;
}
var _stackClear = stackClear$1;
function stackDelete$1(key) {
  var data26 = this.__data__, result = data26["delete"](key);
  this.size = data26.size;
  return result;
}
var _stackDelete = stackDelete$1;
function stackGet$1(key) {
  return this.__data__.get(key);
}
var _stackGet = stackGet$1;
function stackHas$1(key) {
  return this.__data__.has(key);
}
var _stackHas = stackHas$1;
var freeGlobal$1 = typeof commonjsGlobal$1 == "object" && commonjsGlobal$1 && commonjsGlobal$1.Object === Object && commonjsGlobal$1;
var _freeGlobal = freeGlobal$1;
var freeGlobal = _freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$a = freeGlobal || freeSelf || Function("return this")();
var _root = root$a;
var root$9 = _root;
var Symbol$7 = root$9.Symbol;
var _Symbol = Symbol$7;
var Symbol$6 = _Symbol;
var objectProto$i = Object.prototype;
var hasOwnProperty$g = objectProto$i.hasOwnProperty;
var nativeObjectToString$1 = objectProto$i.toString;
var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : void 0;
function getRawTag$1(value6) {
  var isOwn = hasOwnProperty$g.call(value6, symToStringTag$1), tag = value6[symToStringTag$1];
  try {
    value6[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e) {
  }
  var result = nativeObjectToString$1.call(value6);
  if (unmasked) {
    if (isOwn) {
      value6[symToStringTag$1] = tag;
    } else {
      delete value6[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag$1;
var objectProto$h = Object.prototype;
var nativeObjectToString = objectProto$h.toString;
function objectToString$1(value6) {
  return nativeObjectToString.call(value6);
}
var _objectToString = objectToString$1;
var Symbol$5 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : void 0;
function baseGetTag$a(value6) {
  if (value6 == null) {
    return value6 === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value6) ? getRawTag(value6) : objectToString(value6);
}
var _baseGetTag = baseGetTag$a;
function isObject$d(value6) {
  var type = typeof value6;
  return value6 != null && (type == "object" || type == "function");
}
var isObject_1 = isObject$d;
var baseGetTag$9 = _baseGetTag, isObject$c = isObject_1;
var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction$3(value6) {
  if (!isObject$c(value6)) {
    return false;
  }
  var tag = baseGetTag$9(value6);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}
var isFunction_1 = isFunction$3;
var root$8 = _root;
var coreJsData$1 = root$8["__core-js_shared__"];
var _coreJsData = coreJsData$1;
var coreJsData = _coreJsData;
var maskSrcKey = function() {
  var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid2 ? "Symbol(src)_1." + uid2 : "";
}();
function isMasked$1(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var _isMasked = isMasked$1;
var funcProto$2 = Function.prototype;
var funcToString$2 = funcProto$2.toString;
function toSource$2(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var _toSource = toSource$2;
var isFunction$2 = isFunction_1, isMasked = _isMasked, isObject$b = isObject_1, toSource$1 = _toSource;
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto$1 = Function.prototype, objectProto$g = Object.prototype;
var funcToString$1 = funcProto$1.toString;
var hasOwnProperty$f = objectProto$g.hasOwnProperty;
var reIsNative = RegExp("^" + funcToString$1.call(hasOwnProperty$f).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative$1(value6) {
  if (!isObject$b(value6) || isMasked(value6)) {
    return false;
  }
  var pattern2 = isFunction$2(value6) ? reIsNative : reIsHostCtor;
  return pattern2.test(toSource$1(value6));
}
var _baseIsNative = baseIsNative$1;
function getValue$2(object, key) {
  return object == null ? void 0 : object[key];
}
var _getValue = getValue$2;
var baseIsNative = _baseIsNative, getValue$1 = _getValue;
function getNative$7(object, key) {
  var value6 = getValue$1(object, key);
  return baseIsNative(value6) ? value6 : void 0;
}
var _getNative = getNative$7;
var getNative$6 = _getNative, root$7 = _root;
var Map$4 = getNative$6(root$7, "Map");
var _Map = Map$4;
var getNative$5 = _getNative;
var nativeCreate$4 = getNative$5(Object, "create");
var _nativeCreate = nativeCreate$4;
var nativeCreate$3 = _nativeCreate;
function hashClear$1() {
  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
  this.size = 0;
}
var _hashClear = hashClear$1;
function hashDelete$1(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var _hashDelete = hashDelete$1;
var nativeCreate$2 = _nativeCreate;
var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
var objectProto$f = Object.prototype;
var hasOwnProperty$e = objectProto$f.hasOwnProperty;
function hashGet$1(key) {
  var data26 = this.__data__;
  if (nativeCreate$2) {
    var result = data26[key];
    return result === HASH_UNDEFINED$2 ? void 0 : result;
  }
  return hasOwnProperty$e.call(data26, key) ? data26[key] : void 0;
}
var _hashGet = hashGet$1;
var nativeCreate$1 = _nativeCreate;
var objectProto$e = Object.prototype;
var hasOwnProperty$d = objectProto$e.hasOwnProperty;
function hashHas$1(key) {
  var data26 = this.__data__;
  return nativeCreate$1 ? data26[key] !== void 0 : hasOwnProperty$d.call(data26, key);
}
var _hashHas = hashHas$1;
var nativeCreate = _nativeCreate;
var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
function hashSet$1(key, value6) {
  var data26 = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data26[key] = nativeCreate && value6 === void 0 ? HASH_UNDEFINED$1 : value6;
  return this;
}
var _hashSet = hashSet$1;
var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
function Hash$1(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
Hash$1.prototype.clear = hashClear;
Hash$1.prototype["delete"] = hashDelete;
Hash$1.prototype.get = hashGet;
Hash$1.prototype.has = hashHas;
Hash$1.prototype.set = hashSet;
var _Hash = Hash$1;
var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
function mapCacheClear$1() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash(),
    "map": new (Map$3 || ListCache$2)(),
    "string": new Hash()
  };
}
var _mapCacheClear = mapCacheClear$1;
function isKeyable$1(value6) {
  var type = typeof value6;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value6 !== "__proto__" : value6 === null;
}
var _isKeyable = isKeyable$1;
var isKeyable = _isKeyable;
function getMapData$4(map, key) {
  var data26 = map.__data__;
  return isKeyable(key) ? data26[typeof key == "string" ? "string" : "hash"] : data26.map;
}
var _getMapData = getMapData$4;
var getMapData$3 = _getMapData;
function mapCacheDelete$1(key) {
  var result = getMapData$3(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var _mapCacheDelete = mapCacheDelete$1;
var getMapData$2 = _getMapData;
function mapCacheGet$1(key) {
  return getMapData$2(this, key).get(key);
}
var _mapCacheGet = mapCacheGet$1;
var getMapData$1 = _getMapData;
function mapCacheHas$1(key) {
  return getMapData$1(this, key).has(key);
}
var _mapCacheHas = mapCacheHas$1;
var getMapData = _getMapData;
function mapCacheSet$1(key, value6) {
  var data26 = getMapData(this, key), size2 = data26.size;
  data26.set(key, value6);
  this.size += data26.size == size2 ? 0 : 1;
  return this;
}
var _mapCacheSet = mapCacheSet$1;
var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
function MapCache$3(entries) {
  var index2 = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index2 < length) {
    var entry = entries[index2];
    this.set(entry[0], entry[1]);
  }
}
MapCache$3.prototype.clear = mapCacheClear;
MapCache$3.prototype["delete"] = mapCacheDelete;
MapCache$3.prototype.get = mapCacheGet;
MapCache$3.prototype.has = mapCacheHas;
MapCache$3.prototype.set = mapCacheSet;
var _MapCache = MapCache$3;
var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
var LARGE_ARRAY_SIZE$1 = 200;
function stackSet$1(key, value6) {
  var data26 = this.__data__;
  if (data26 instanceof ListCache$1) {
    var pairs = data26.__data__;
    if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
      pairs.push([key, value6]);
      this.size = ++data26.size;
      return this;
    }
    data26 = this.__data__ = new MapCache$2(pairs);
  }
  data26.set(key, value6);
  this.size = data26.size;
  return this;
}
var _stackSet = stackSet$1;
var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
function Stack$4(entries) {
  var data26 = this.__data__ = new ListCache(entries);
  this.size = data26.size;
}
Stack$4.prototype.clear = stackClear;
Stack$4.prototype["delete"] = stackDelete;
Stack$4.prototype.get = stackGet;
Stack$4.prototype.has = stackHas;
Stack$4.prototype.set = stackSet;
var _Stack = Stack$4;
function arrayEach$1(array, iteratee) {
  var index2 = -1, length = array == null ? 0 : array.length;
  while (++index2 < length) {
    if (iteratee(array[index2], index2, array) === false) {
      break;
    }
  }
  return array;
}
var _arrayEach = arrayEach$1;
var getNative$4 = _getNative;
var defineProperty$2 = function() {
  try {
    var func = getNative$4(Object, "defineProperty");
    func({}, "", {});
    return func;
  } catch (e) {
  }
}();
var _defineProperty$2 = defineProperty$2;
var defineProperty$1 = _defineProperty$2;
function baseAssignValue$3(object, key, value6) {
  if (key == "__proto__" && defineProperty$1) {
    defineProperty$1(object, key, {
      "configurable": true,
      "enumerable": true,
      "value": value6,
      "writable": true
    });
  } else {
    object[key] = value6;
  }
}
var _baseAssignValue = baseAssignValue$3;
var baseAssignValue$2 = _baseAssignValue, eq$4 = eq_1;
var objectProto$d = Object.prototype;
var hasOwnProperty$c = objectProto$d.hasOwnProperty;
function assignValue$3(object, key, value6) {
  var objValue = object[key];
  if (!(hasOwnProperty$c.call(object, key) && eq$4(objValue, value6)) || value6 === void 0 && !(key in object)) {
    baseAssignValue$2(object, key, value6);
  }
}
var _assignValue = assignValue$3;
var assignValue$2 = _assignValue, baseAssignValue$1 = _baseAssignValue;
function copyObject$7(source, props2, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index2 = -1, length = props2.length;
  while (++index2 < length) {
    var key = props2[index2];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue$1(object, key, newValue);
    } else {
      assignValue$2(object, key, newValue);
    }
  }
  return object;
}
var _copyObject = copyObject$7;
function baseTimes$1(n, iteratee) {
  var index2 = -1, result = Array(n);
  while (++index2 < n) {
    result[index2] = iteratee(index2);
  }
  return result;
}
var _baseTimes = baseTimes$1;
function isObjectLike$d(value6) {
  return value6 != null && typeof value6 == "object";
}
var isObjectLike_1 = isObjectLike$d;
var baseGetTag$8 = _baseGetTag, isObjectLike$c = isObjectLike_1;
var argsTag$3 = "[object Arguments]";
function baseIsArguments$1(value6) {
  return isObjectLike$c(value6) && baseGetTag$8(value6) == argsTag$3;
}
var _baseIsArguments = baseIsArguments$1;
var baseIsArguments = _baseIsArguments, isObjectLike$b = isObjectLike_1;
var objectProto$c = Object.prototype;
var hasOwnProperty$b = objectProto$c.hasOwnProperty;
var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;
var isArguments$5 = baseIsArguments(function() {
  return arguments;
}()) ? baseIsArguments : function(value6) {
  return isObjectLike$b(value6) && hasOwnProperty$b.call(value6, "callee") && !propertyIsEnumerable$1.call(value6, "callee");
};
var isArguments_1 = isArguments$5;
var isArray$d = Array.isArray;
var isArray_1 = isArray$d;
var isBuffer$5 = { exports: {} };
function stubFalse() {
  return false;
}
var stubFalse_1 = stubFalse;
(function(module, exports) {
  var root2 = _root, stubFalse2 = stubFalse_1;
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root2.Buffer : void 0;
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
  var isBuffer2 = nativeIsBuffer || stubFalse2;
  module.exports = isBuffer2;
})(isBuffer$5, isBuffer$5.exports);
var MAX_SAFE_INTEGER$1 = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex$4(value6, length) {
  var type = typeof value6;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value6)) && (value6 > -1 && value6 % 1 == 0 && value6 < length);
}
var _isIndex = isIndex$4;
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength$3(value6) {
  return typeof value6 == "number" && value6 > -1 && value6 % 1 == 0 && value6 <= MAX_SAFE_INTEGER;
}
var isLength_1 = isLength$3;
var baseGetTag$7 = _baseGetTag, isLength$2 = isLength_1, isObjectLike$a = isObjectLike_1;
var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$4 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$3 = "[object Error]", funcTag$1 = "[object Function]", mapTag$6 = "[object Map]", numberTag$4 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$6 = "[object Set]", stringTag$4 = "[object String]", weakMapTag$2 = "[object WeakMap]";
var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;
function baseIsTypedArray$1(value6) {
  return isObjectLike$a(value6) && isLength$2(value6.length) && !!typedArrayTags[baseGetTag$7(value6)];
}
var _baseIsTypedArray = baseIsTypedArray$1;
function baseUnary$5(func) {
  return function(value6) {
    return func(value6);
  };
}
var _baseUnary = baseUnary$5;
var _nodeUtil = { exports: {} };
(function(module, exports) {
  var freeGlobal2 = _freeGlobal;
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal2.process;
  var nodeUtil2 = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  module.exports = nodeUtil2;
})(_nodeUtil, _nodeUtil.exports);
var baseIsTypedArray = _baseIsTypedArray, baseUnary$4 = _baseUnary, nodeUtil$2 = _nodeUtil.exports;
var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
var isTypedArray$4 = nodeIsTypedArray ? baseUnary$4(nodeIsTypedArray) : baseIsTypedArray;
var isTypedArray_1 = isTypedArray$4;
var baseTimes = _baseTimes, isArguments$4 = isArguments_1, isArray$c = isArray_1, isBuffer$4 = isBuffer$5.exports, isIndex$3 = _isIndex, isTypedArray$3 = isTypedArray_1;
var objectProto$b = Object.prototype;
var hasOwnProperty$a = objectProto$b.hasOwnProperty;
function arrayLikeKeys$2(value6, inherited) {
  var isArr = isArray$c(value6), isArg = !isArr && isArguments$4(value6), isBuff = !isArr && !isArg && isBuffer$4(value6), isType = !isArr && !isArg && !isBuff && isTypedArray$3(value6), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value6.length, String) : [], length = result.length;
  for (var key in value6) {
    if ((inherited || hasOwnProperty$a.call(value6, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex$3(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var _arrayLikeKeys = arrayLikeKeys$2;
var objectProto$a = Object.prototype;
function isPrototype$4(value6) {
  var Ctor = value6 && value6.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$a;
  return value6 === proto;
}
var _isPrototype = isPrototype$4;
function overArg$2(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var _overArg = overArg$2;
var overArg$1 = _overArg;
var nativeKeys$1 = overArg$1(Object.keys, Object);
var _nativeKeys = nativeKeys$1;
var isPrototype$3 = _isPrototype, nativeKeys = _nativeKeys;
var objectProto$9 = Object.prototype;
var hasOwnProperty$9 = objectProto$9.hasOwnProperty;
function baseKeys$2(object) {
  if (!isPrototype$3(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$9.call(object, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
var _baseKeys = baseKeys$2;
var isFunction$1 = isFunction_1, isLength$1 = isLength_1;
function isArrayLike$5(value6) {
  return value6 != null && isLength$1(value6.length) && !isFunction$1(value6);
}
var isArrayLike_1 = isArrayLike$5;
var arrayLikeKeys$1 = _arrayLikeKeys, baseKeys$1 = _baseKeys, isArrayLike$4 = isArrayLike_1;
function keys$5(object) {
  return isArrayLike$4(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);
}
var keys_1 = keys$5;
var copyObject$6 = _copyObject, keys$4 = keys_1;
function baseAssign$1(object, source) {
  return object && copyObject$6(source, keys$4(source), object);
}
var _baseAssign = baseAssign$1;
function nativeKeysIn$1(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}
var _nativeKeysIn = nativeKeysIn$1;
var isObject$a = isObject_1, isPrototype$2 = _isPrototype, nativeKeysIn = _nativeKeysIn;
var objectProto$8 = Object.prototype;
var hasOwnProperty$8 = objectProto$8.hasOwnProperty;
function baseKeysIn$1(object) {
  if (!isObject$a(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype$2(object), result = [];
  for (var key in object) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty$8.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}
var _baseKeysIn = baseKeysIn$1;
var arrayLikeKeys = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$3 = isArrayLike_1;
function keysIn$6(object) {
  return isArrayLike$3(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
var keysIn_1 = keysIn$6;
var copyObject$5 = _copyObject, keysIn$5 = keysIn_1;
function baseAssignIn$1(object, source) {
  return object && copyObject$5(source, keysIn$5(source), object);
}
var _baseAssignIn = baseAssignIn$1;
var _cloneBuffer = { exports: {} };
(function(module, exports) {
  var root2 = _root;
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
  function cloneBuffer2(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }
  module.exports = cloneBuffer2;
})(_cloneBuffer, _cloneBuffer.exports);
function copyArray$2(source, array) {
  var index2 = -1, length = source.length;
  array || (array = Array(length));
  while (++index2 < length) {
    array[index2] = source[index2];
  }
  return array;
}
var _copyArray = copyArray$2;
function arrayFilter$1(array, predicate) {
  var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
  while (++index2 < length) {
    var value6 = array[index2];
    if (predicate(value6, index2, array)) {
      result[resIndex++] = value6;
    }
  }
  return result;
}
var _arrayFilter = arrayFilter$1;
function stubArray$2() {
  return [];
}
var stubArray_1 = stubArray$2;
var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
var objectProto$7 = Object.prototype;
var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};
var _getSymbols = getSymbols$3;
var copyObject$4 = _copyObject, getSymbols$2 = _getSymbols;
function copySymbols$1(source, object) {
  return copyObject$4(source, getSymbols$2(source), object);
}
var _copySymbols = copySymbols$1;
function arrayPush$3(array, values) {
  var index2 = -1, length = values.length, offset2 = array.length;
  while (++index2 < length) {
    array[offset2 + index2] = values[index2];
  }
  return array;
}
var _arrayPush = arrayPush$3;
var overArg = _overArg;
var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
var _getPrototype = getPrototype$3;
var arrayPush$2 = _arrayPush, getPrototype$2 = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush$2(result, getSymbols$1(object));
    object = getPrototype$2(object);
  }
  return result;
};
var _getSymbolsIn = getSymbolsIn$2;
var copyObject$3 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
function copySymbolsIn$1(source, object) {
  return copyObject$3(source, getSymbolsIn$1(source), object);
}
var _copySymbolsIn = copySymbolsIn$1;
var arrayPush$1 = _arrayPush, isArray$b = isArray_1;
function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray$b(object) ? result : arrayPush$1(result, symbolsFunc(object));
}
var _baseGetAllKeys = baseGetAllKeys$2;
var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$3 = keys_1;
function getAllKeys$2(object) {
  return baseGetAllKeys$1(object, keys$3, getSymbols);
}
var _getAllKeys = getAllKeys$2;
var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$4 = keysIn_1;
function getAllKeysIn$2(object) {
  return baseGetAllKeys(object, keysIn$4, getSymbolsIn);
}
var _getAllKeysIn = getAllKeysIn$2;
var getNative$3 = _getNative, root$6 = _root;
var DataView$1 = getNative$3(root$6, "DataView");
var _DataView = DataView$1;
var getNative$2 = _getNative, root$5 = _root;
var Promise$2 = getNative$2(root$5, "Promise");
var _Promise = Promise$2;
var getNative$1 = _getNative, root$4 = _root;
var Set$2 = getNative$1(root$4, "Set");
var _Set = Set$2;
var getNative = _getNative, root$3 = _root;
var WeakMap$2 = getNative(root$3, "WeakMap");
var _WeakMap = WeakMap$2;
var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag$6 = _baseGetTag, toSource = _toSource;
var mapTag$5 = "[object Map]", objectTag$3 = "[object Object]", promiseTag = "[object Promise]", setTag$5 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
var dataViewTag$3 = "[object DataView]";
var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
var getTag$5 = baseGetTag$6;
if (DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$5(new Map$1()) != mapTag$5 || Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag || Set$1 && getTag$5(new Set$1()) != setTag$5 || WeakMap$1 && getTag$5(new WeakMap$1()) != weakMapTag$1) {
  getTag$5 = function(value6) {
    var result = baseGetTag$6(value6), Ctor = result == objectTag$3 ? value6.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag$3;
        case mapCtorString:
          return mapTag$5;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag$5;
        case weakMapCtorString:
          return weakMapTag$1;
      }
    }
    return result;
  };
}
var _getTag = getTag$5;
var objectProto$6 = Object.prototype;
var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
function initCloneArray$1(array) {
  var length = array.length, result = new array.constructor(length);
  if (length && typeof array[0] == "string" && hasOwnProperty$7.call(array, "index")) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}
var _initCloneArray = initCloneArray$1;
var root$2 = _root;
var Uint8Array$2 = root$2.Uint8Array;
var _Uint8Array = Uint8Array$2;
var Uint8Array$1 = _Uint8Array;
function cloneArrayBuffer$3(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
  return result;
}
var _cloneArrayBuffer = cloneArrayBuffer$3;
var cloneArrayBuffer$2 = _cloneArrayBuffer;
function cloneDataView$1(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var _cloneDataView = cloneDataView$1;
var reFlags = /\w*$/;
function cloneRegExp$1(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}
var _cloneRegExp = cloneRegExp$1;
var Symbol$4 = _Symbol;
var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
function cloneSymbol$1(symbol) {
  return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
}
var _cloneSymbol = cloneSymbol$1;
var cloneArrayBuffer$1 = _cloneArrayBuffer;
function cloneTypedArray$2(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var _cloneTypedArray = cloneTypedArray$2;
var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray$1 = _cloneTypedArray;
var boolTag$3 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$4 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$3 = "[object String]", symbolTag$3 = "[object Symbol]";
var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
function initCloneByTag$1(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$2:
      return cloneArrayBuffer(object);
    case boolTag$3:
    case dateTag$2:
      return new Ctor(+object);
    case dataViewTag$2:
      return cloneDataView(object, isDeep);
    case float32Tag$1:
    case float64Tag$1:
    case int8Tag$1:
    case int16Tag$1:
    case int32Tag$1:
    case uint8Tag$1:
    case uint8ClampedTag$1:
    case uint16Tag$1:
    case uint32Tag$1:
      return cloneTypedArray$1(object, isDeep);
    case mapTag$4:
      return new Ctor();
    case numberTag$3:
    case stringTag$3:
      return new Ctor(object);
    case regexpTag$2:
      return cloneRegExp(object);
    case setTag$4:
      return new Ctor();
    case symbolTag$3:
      return cloneSymbol(object);
  }
}
var _initCloneByTag = initCloneByTag$1;
var isObject$9 = isObject_1;
var objectCreate = Object.create;
var baseCreate$1 = function() {
  function object() {
  }
  return function(proto) {
    if (!isObject$9(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object();
    object.prototype = void 0;
    return result;
  };
}();
var _baseCreate = baseCreate$1;
var baseCreate = _baseCreate, getPrototype$1 = _getPrototype, isPrototype$1 = _isPrototype;
function initCloneObject$2(object) {
  return typeof object.constructor == "function" && !isPrototype$1(object) ? baseCreate(getPrototype$1(object)) : {};
}
var _initCloneObject = initCloneObject$2;
var getTag$4 = _getTag, isObjectLike$9 = isObjectLike_1;
var mapTag$3 = "[object Map]";
function baseIsMap$1(value6) {
  return isObjectLike$9(value6) && getTag$4(value6) == mapTag$3;
}
var _baseIsMap = baseIsMap$1;
var baseIsMap = _baseIsMap, baseUnary$3 = _baseUnary, nodeUtil$1 = _nodeUtil.exports;
var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
var isMap$1 = nodeIsMap ? baseUnary$3(nodeIsMap) : baseIsMap;
var isMap_1 = isMap$1;
var getTag$3 = _getTag, isObjectLike$8 = isObjectLike_1;
var setTag$3 = "[object Set]";
function baseIsSet$1(value6) {
  return isObjectLike$8(value6) && getTag$3(value6) == setTag$3;
}
var _baseIsSet = baseIsSet$1;
var baseIsSet = _baseIsSet, baseUnary$2 = _baseUnary, nodeUtil = _nodeUtil.exports;
var nodeIsSet = nodeUtil && nodeUtil.isSet;
var isSet$1 = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
var isSet_1 = isSet$1;
var Stack$3 = _Stack, arrayEach = _arrayEach, assignValue$1 = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer$1 = _cloneBuffer.exports, copyArray$1 = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn$1 = _getAllKeysIn, getTag$2 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject$1 = _initCloneObject, isArray$a = isArray_1, isBuffer$3 = isBuffer$5.exports, isMap = isMap_1, isObject$8 = isObject_1, isSet = isSet_1, keys$2 = keys_1, keysIn$3 = keysIn_1;
var CLONE_DEEP_FLAG$2 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$2 = 4;
var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$2 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$2 = "[object Map]", numberTag$2 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$2] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag$2] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
function baseClone$2(value6, bitmask, customizer, key, object, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG$2, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
  if (customizer) {
    result = object ? customizer(value6, key, object, stack) : customizer(value6);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject$8(value6)) {
    return value6;
  }
  var isArr = isArray$a(value6);
  if (isArr) {
    result = initCloneArray(value6);
    if (!isDeep) {
      return copyArray$1(value6, result);
    }
  } else {
    var tag = getTag$2(value6), isFunc = tag == funcTag || tag == genTag;
    if (isBuffer$3(value6)) {
      return cloneBuffer$1(value6, isDeep);
    }
    if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject$1(value6);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value6, baseAssignIn(result, value6)) : copySymbols(value6, baseAssign(result, value6));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value6 : {};
      }
      result = initCloneByTag(value6, tag, isDeep);
    }
  }
  stack || (stack = new Stack$3());
  var stacked = stack.get(value6);
  if (stacked) {
    return stacked;
  }
  stack.set(value6, result);
  if (isSet(value6)) {
    value6.forEach(function(subValue) {
      result.add(baseClone$2(subValue, bitmask, customizer, subValue, value6, stack));
    });
  } else if (isMap(value6)) {
    value6.forEach(function(subValue, key2) {
      result.set(key2, baseClone$2(subValue, bitmask, customizer, key2, value6, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn$3 : keys$2;
  var props2 = isArr ? void 0 : keysFunc(value6);
  arrayEach(props2 || value6, function(subValue, key2) {
    if (props2) {
      key2 = subValue;
      subValue = value6[key2];
    }
    assignValue$1(result, key2, baseClone$2(subValue, bitmask, customizer, key2, value6, stack));
  });
  return result;
}
var _baseClone = baseClone$2;
var baseClone$1 = _baseClone;
var CLONE_DEEP_FLAG$1 = 1, CLONE_SYMBOLS_FLAG$1 = 4;
function cloneDeep(value6) {
  return baseClone$1(value6, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
}
var cloneDeep_1 = cloneDeep;
var baseAssignValue = _baseAssignValue, eq$3 = eq_1;
function assignMergeValue$2(object, key, value6) {
  if (value6 !== void 0 && !eq$3(object[key], value6) || value6 === void 0 && !(key in object)) {
    baseAssignValue(object, key, value6);
  }
}
var _assignMergeValue = assignMergeValue$2;
function createBaseFor$1(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index2 = -1, iterable = Object(object), props2 = keysFunc(object), length = props2.length;
    while (length--) {
      var key = props2[fromRight ? length : ++index2];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}
var _createBaseFor = createBaseFor$1;
var createBaseFor = _createBaseFor;
var baseFor$1 = createBaseFor();
var _baseFor = baseFor$1;
var isArrayLike$2 = isArrayLike_1, isObjectLike$7 = isObjectLike_1;
function isArrayLikeObject$4(value6) {
  return isObjectLike$7(value6) && isArrayLike$2(value6);
}
var isArrayLikeObject_1 = isArrayLikeObject$4;
var baseGetTag$5 = _baseGetTag, getPrototype = _getPrototype, isObjectLike$6 = isObjectLike_1;
var objectTag$1 = "[object Object]";
var funcProto = Function.prototype, objectProto$5 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
var objectCtorString = funcToString.call(Object);
function isPlainObject$3(value6) {
  if (!isObjectLike$6(value6) || baseGetTag$5(value6) != objectTag$1) {
    return false;
  }
  var proto = getPrototype(value6);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$6.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
var isPlainObject_1 = isPlainObject$3;
function safeGet$2(object, key) {
  if (key === "constructor" && typeof object[key] === "function") {
    return;
  }
  if (key == "__proto__") {
    return;
  }
  return object[key];
}
var _safeGet = safeGet$2;
var copyObject$2 = _copyObject, keysIn$2 = keysIn_1;
function toPlainObject$1(value6) {
  return copyObject$2(value6, keysIn$2(value6));
}
var toPlainObject_1 = toPlainObject$1;
var assignMergeValue$1 = _assignMergeValue, cloneBuffer = _cloneBuffer.exports, cloneTypedArray = _cloneTypedArray, copyArray = _copyArray, initCloneObject = _initCloneObject, isArguments$3 = isArguments_1, isArray$9 = isArray_1, isArrayLikeObject$3 = isArrayLikeObject_1, isBuffer$2 = isBuffer$5.exports, isFunction = isFunction_1, isObject$7 = isObject_1, isPlainObject$2 = isPlainObject_1, isTypedArray$2 = isTypedArray_1, safeGet$1 = _safeGet, toPlainObject = toPlainObject_1;
function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet$1(object, key), srcValue = safeGet$1(source, key), stacked = stack.get(srcValue);
  if (stacked) {
    assignMergeValue$1(object, key, stacked);
    return;
  }
  var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
  var isCommon = newValue === void 0;
  if (isCommon) {
    var isArr = isArray$9(srcValue), isBuff = !isArr && isBuffer$2(srcValue), isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);
    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray$9(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject$3(objValue)) {
        newValue = copyArray(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject$2(srcValue) || isArguments$3(srcValue)) {
      newValue = objValue;
      if (isArguments$3(objValue)) {
        newValue = toPlainObject(objValue);
      } else if (!isObject$7(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    } else {
      isCommon = false;
    }
  }
  if (isCommon) {
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack["delete"](srcValue);
  }
  assignMergeValue$1(object, key, newValue);
}
var _baseMergeDeep = baseMergeDeep$1;
var Stack$2 = _Stack, assignMergeValue = _assignMergeValue, baseFor = _baseFor, baseMergeDeep = _baseMergeDeep, isObject$6 = isObject_1, keysIn$1 = keysIn_1, safeGet = _safeGet;
function baseMerge$2(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack$2());
    if (isObject$6(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
      if (newValue === void 0) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn$1);
}
var _baseMerge = baseMerge$2;
function identity$3(value6) {
  return value6;
}
var identity_1 = identity$3;
function apply$2(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}
var _apply = apply$2;
var apply$1 = _apply;
var nativeMax$3 = Math.max;
function overRest$2(func, start3, transform) {
  start3 = nativeMax$3(start3 === void 0 ? func.length - 1 : start3, 0);
  return function() {
    var args = arguments, index2 = -1, length = nativeMax$3(args.length - start3, 0), array = Array(length);
    while (++index2 < length) {
      array[index2] = args[start3 + index2];
    }
    index2 = -1;
    var otherArgs = Array(start3 + 1);
    while (++index2 < start3) {
      otherArgs[index2] = args[index2];
    }
    otherArgs[start3] = transform(array);
    return apply$1(func, this, otherArgs);
  };
}
var _overRest = overRest$2;
function constant$1(value6) {
  return function() {
    return value6;
  };
}
var constant_1 = constant$1;
var constant = constant_1, defineProperty = _defineProperty$2, identity$2 = identity_1;
var baseSetToString$1 = !defineProperty ? identity$2 : function(func, string) {
  return defineProperty(func, "toString", {
    "configurable": true,
    "enumerable": false,
    "value": constant(string),
    "writable": true
  });
};
var _baseSetToString = baseSetToString$1;
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut$1(func) {
  var count = 0, lastCalled = 0;
  return function() {
    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(void 0, arguments);
  };
}
var _shortOut = shortOut$1;
var baseSetToString = _baseSetToString, shortOut = _shortOut;
var setToString$2 = shortOut(baseSetToString);
var _setToString = setToString$2;
var identity$1 = identity_1, overRest$1 = _overRest, setToString$1 = _setToString;
function baseRest$5(func, start3) {
  return setToString$1(overRest$1(func, start3, identity$1), func + "");
}
var _baseRest = baseRest$5;
var eq$2 = eq_1, isArrayLike$1 = isArrayLike_1, isIndex$2 = _isIndex, isObject$5 = isObject_1;
function isIterateeCall$3(value6, index2, object) {
  if (!isObject$5(object)) {
    return false;
  }
  var type = typeof index2;
  if (type == "number" ? isArrayLike$1(object) && isIndex$2(index2, object.length) : type == "string" && index2 in object) {
    return eq$2(object[index2], value6);
  }
  return false;
}
var _isIterateeCall = isIterateeCall$3;
var baseRest$4 = _baseRest, isIterateeCall$2 = _isIterateeCall;
function createAssigner$3(assigner) {
  return baseRest$4(function(object, sources) {
    var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
    customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
    if (guard && isIterateeCall$2(sources[0], sources[1], guard)) {
      customizer = length < 3 ? void 0 : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index2 < length) {
      var source = sources[index2];
      if (source) {
        assigner(object, source, index2, customizer);
      }
    }
    return object;
  });
}
var _createAssigner = createAssigner$3;
var baseMerge$1 = _baseMerge, createAssigner$2 = _createAssigner;
var mergeWith = createAssigner$2(function(object, source, srcIndex, customizer) {
  baseMerge$1(object, source, srcIndex, customizer);
});
var mergeWith_1 = mergeWith;
var baseMerge = _baseMerge, createAssigner$1 = _createAssigner;
var merge$2 = createAssigner$1(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});
var merge_1 = merge$2;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var defaultConfig = {
  classPrefix: "t",
  animation: {
    include: ["ripple", "expand", "fade"],
    exclude: []
  },
  calendar: {
    firstDayOfWeek: 1,
    fillWithZero: true,
    controllerConfig: void 0
  },
  dialog: {
    confirmBtnTheme: {
      "default": "primary",
      info: "primary",
      warning: "primary",
      danger: "primary",
      success: "primary"
    }
  },
  popconfirm: {
    confirmBtnTheme: {
      "default": "primary",
      warning: "primary",
      danger: "primary"
    }
  },
  table: {
    expandIcon: void 0,
    sortIcon: void 0,
    filterIcon: void 0
  },
  select: {
    clearIcon: void 0
  },
  tree: {
    folderIcon: void 0
  },
  datePicker: {
    firstDayOfWeek: 1
  },
  steps: {
    errorIcon: void 0
  },
  tag: {
    closeIcon: void 0
  },
  form: {
    requiredMark: true
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var zhCn = {
  pagination: {
    itemsPerPage: "{size} \u6761/\u9875",
    jumpTo: "\u8DF3\u81F3",
    page: "\u9875",
    total: "\u5171 {total} \u9879\u6570\u636E"
  },
  cascader: {
    empty: "\u6682\u65E0\u6570\u636E",
    loadingText: "",
    placeholder: "\u8BF7\u9009\u62E9"
  },
  calendar: {
    yearSelection: "{year} \u5E74",
    monthSelection: "{month} \u6708",
    yearRadio: "\u5E74",
    monthRadio: "\u6708",
    hideWeekend: "\u9690\u85CF\u5468\u672B",
    showWeekend: "\u663E\u793A\u5468\u672B",
    today: "\u4ECA\u5929",
    thisMonth: "\u672C\u6708",
    week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
    cellMonth: "\u4E00\u6708,\u4E8C\u6708,\u4E09\u6708,\u56DB\u6708,\u4E94\u6708,\u516D\u6708,\u4E03\u6708,\u516B\u6708,\u4E5D\u6708,\u5341\u6708,\u5341\u4E00\u6708,\u5341\u4E8C\u6708"
  },
  transfer: {
    title: "{checked} / {total} \u9879",
    empty: "\u6682\u65E0\u6570\u636E",
    placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
  },
  timePicker: {
    now: "\u6B64\u523B",
    confirm: "\u786E\u5B9A",
    anteMeridiem: "\u4E0A\u5348",
    postMeridiem: "\u4E0B\u5348",
    placeholder: "\u9009\u62E9\u65F6\u95F4"
  },
  dialog: {
    confirm: "\u786E\u8BA4",
    cancel: "\u53D6\u6D88"
  },
  drawer: {
    confirm: "\u786E\u8BA4",
    cancel: "\u53D6\u6D88"
  },
  popconfirm: {
    confirm: {
      content: "\u786E\u5B9A"
    },
    cancel: {
      content: "\u53D6\u6D88"
    }
  },
  table: {
    empty: "\u6682\u65E0\u6570\u636E",
    loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
    loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
    filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
    sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
    sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
    sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
    clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
    columnConfigButtonText: "\u5217\u914D\u7F6E",
    columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
    columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
    confirmText: "\u786E\u8BA4",
    cancelText: "\u53D6\u6D88",
    resetText: "\u91CD\u7F6E",
    selectAllText: "\u5168\u9009",
    searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
  },
  select: {
    empty: "\u6682\u65E0\u6570\u636E",
    loadingText: "\u52A0\u8F7D\u4E2D",
    placeholder: "\u8BF7\u9009\u62E9"
  },
  tree: {
    empty: "\u6682\u65E0\u6570\u636E"
  },
  treeSelect: {
    empty: "\u6682\u65E0\u6570\u636E",
    loadingText: "\u52A0\u8F7D\u4E2D",
    placeholder: "\u8BF7\u9009\u62E9"
  },
  datePicker: {
    placeholder: {
      date: "\u8BF7\u9009\u62E9\u65E5\u671F",
      month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
      year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
    },
    weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
    months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
    rangeSeparator: " \u81F3 ",
    direction: "ltr",
    format: "YYYY-MM-DD",
    dayAriaLabel: "\u65E5",
    weekAbbreviation: "\u5468",
    yearAriaLabel: "\u5E74",
    monthAriaLabel: "\u6708",
    confirm: "\u786E\u5B9A",
    selectTime: "\u9009\u62E9\u65F6\u95F4",
    selectDate: "\u9009\u62E9\u65E5\u671F",
    nextYear: "\u4E0B\u4E00\u5E74",
    preYear: "\u4E0A\u4E00\u5E74",
    nextMonth: "\u4E0B\u4E2A\u6708",
    preMonth: "\u4E0A\u4E2A\u6708",
    preDecade: "\u4E0A\u4E2A\u5341\u5E74",
    nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
    now: "\u5F53\u524D"
  },
  upload: {
    sizeLimitMessage: "\u56FE\u7247\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
    cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
    triggerUploadText: {
      fileInput: "\u9009\u62E9\u6587\u4EF6",
      image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
      normal: "\u70B9\u51FB\u4E0A\u4F20",
      reupload: "\u91CD\u65B0\u4E0A\u4F20",
      continueUpload: "\u7EE7\u7EED\u4E0A\u4F20",
      "delete": "\u5220\u9664"
    },
    dragger: {
      dragDropText: "\u91CA\u653E\u9F20\u6807",
      draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
      clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
    },
    file: {
      fileNameText: "\u6587\u4EF6\u540D",
      fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
      fileStatusText: "\u72B6\u6001",
      fileOperationText: "\u64CD\u4F5C",
      fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
    },
    progress: {
      uploadingText: "\u4E0A\u4F20\u4E2D",
      waitingText: "\u5F85\u4E0A\u4F20",
      failText: "\u4E0A\u4F20\u5931\u8D25",
      successText: "\u4E0A\u4F20\u6210\u529F"
    }
  },
  form: {
    errorMessage: {
      date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
      url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
      required: "${name}\u5FC5\u586B",
      max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
      min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
      len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
      "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
      idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
      telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
      pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
      validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
      "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
      number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
    }
  },
  input: {
    placeholder: "\u8BF7\u8F93\u5165"
  },
  list: {
    loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
    loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
  },
  alert: {
    expandText: "\u5C55\u5F00\u66F4\u591A",
    collapseText: "\u6536\u8D77"
  },
  anchor: {
    copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
    copyText: "\u590D\u5236\u94FE\u63A5"
  },
  colorPicker: {
    swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
    recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
    clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F"
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var EAnimationType = /* @__PURE__ */ function(EAnimationType2) {
  EAnimationType2["ripple"] = "ripple";
  EAnimationType2["expand"] = "expand";
  EAnimationType2["fade"] = "fade";
  return EAnimationType2;
}(EAnimationType || {});
var defaultGlobalConfig = merge_1(defaultConfig, zhCn);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var merge = function merge2(defaultGlobalConfig2, injectConfig) {
  return mergeWith_1(defaultGlobalConfig2, injectConfig, function(objValue, srcValue) {
    if (Array.isArray(objValue)) {
      return srcValue;
    }
  });
};
function useConfig(componentName) {
  var globalConfig = inject("globalConfig", /* @__PURE__ */ Object.create(null));
  var mergedGlobalConfig = computed(function() {
    var mergedGlobalConfig2 = merge(cloneDeep_1(defaultGlobalConfig), unref(globalConfig));
    return mergedGlobalConfig2;
  });
  var global2 = computed(function() {
    return mergedGlobalConfig.value[componentName];
  });
  var classPrefix2 = computed(function() {
    return mergedGlobalConfig.value.classPrefix;
  });
  var t = function t2(pattern2, data26) {
    if (typeof pattern2 === "string") {
      if (!data26)
        return pattern2;
      var regular = /\{\s*([\w-]+)\s*\}/g;
      var translated = pattern2.replace(regular, function(match, key) {
        if (data26) {
          return String(data26[key]);
        }
        return "";
      });
      return translated;
    }
    if (typeof pattern2 === "function") {
      return pattern2(data26 !== null && data26 !== void 0 ? data26 : h);
    }
    return "";
  };
  return {
    t,
    global: global2,
    classPrefix: classPrefix2
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function usePrefixClass(componentName) {
  var _useConfig = useConfig("classPrefix"), classPrefix2 = _useConfig.classPrefix;
  return computed(function() {
    return componentName ? "".concat(classPrefix2.value, "-").concat(componentName) : classPrefix2.value;
  });
}
function useCommonClassName$2() {
  var _useConfig2 = useConfig("classPrefix"), classPrefix2 = _useConfig2.classPrefix;
  return {
    SIZE: computed(function() {
      return {
        small: "".concat(classPrefix2.value, "-size-s"),
        medium: "".concat(classPrefix2.value, "-size-m"),
        large: "".concat(classPrefix2.value, "-size-l"),
        "default": "",
        xs: "".concat(classPrefix2.value, "-size-xs"),
        xl: "".concat(classPrefix2.value, "-size-xl"),
        block: "".concat(classPrefix2.value, "-size-full-width")
      };
    }),
    STATUS: computed(function() {
      return {
        loading: "".concat(classPrefix2.value, "-is-loading"),
        loadMore: "".concat(classPrefix2.value, "-is-load-more"),
        disabled: "".concat(classPrefix2.value, "-is-disabled"),
        focused: "".concat(classPrefix2.value, "-is-focused"),
        success: "".concat(classPrefix2.value, "-is-success"),
        error: "".concat(classPrefix2.value, "-is-error"),
        warning: "".concat(classPrefix2.value, "-is-warning"),
        selected: "".concat(classPrefix2.value, "-is-selected"),
        active: "".concat(classPrefix2.value, "-is-active"),
        checked: "".concat(classPrefix2.value, "-is-checked"),
        current: "".concat(classPrefix2.value, "-is-current"),
        hidden: "".concat(classPrefix2.value, "-is-hidden"),
        visible: "".concat(classPrefix2.value, "-is-visible"),
        expanded: "".concat(classPrefix2.value, "-is-expanded"),
        indeterminate: "".concat(classPrefix2.value, "-is-indeterminate")
      };
    })
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var GradientIcon = defineComponent({
  name: "TLoadingGradient",
  setup: function setup() {
    var classPrefix2 = usePrefixClass();
    onMounted(function() {
      var circleElem = getCurrentInstance().refs.circle;
      circleAdapter(circleElem);
    });
    return {
      classPrefix: classPrefix2
    };
  },
  render: function render() {
    var classPrefix2 = this.classPrefix;
    var name2 = "".concat(classPrefix2, "-loading__gradient");
    var classes6 = [name2, "".concat(classPrefix2, "-icon-loading")];
    return createVNode("svg", {
      "class": classes6,
      "viewBox": "0 0 14 14",
      "version": "1.1",
      "width": "1em",
      "height": "1em",
      "xmlns": "http://www.w3.org/2000/svg"
    }, [createVNode("foreignObject", {
      "x": "1",
      "y": "1",
      "width": "12",
      "height": "12"
    }, [createVNode("div", {
      "class": "".concat(name2, "-conic"),
      "ref": "circle"
    }, null)])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var prefix = "t";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var SIZE_CLASSNAMES = {
  small: "".concat(prefix, "-size-s"),
  medium: "".concat(prefix, "-size-m"),
  large: "".concat(prefix, "-size-l"),
  "default": "",
  xs: "".concat(prefix, "-size-xs"),
  xl: "".concat(prefix, "-size-xl"),
  block: "".concat(prefix, "-size-full-width")
};
var STATUS_CLASSNAMES = {
  loading: "".concat(prefix, "-is-loading"),
  loadMore: "".concat(prefix, "-is-load-more"),
  disabled: "".concat(prefix, "-is-disabled"),
  focused: "".concat(prefix, "-is-focused"),
  success: "".concat(prefix, "-is-success"),
  error: "".concat(prefix, "-is-error"),
  warning: "".concat(prefix, "-is-warning"),
  selected: "".concat(prefix, "-is-selected"),
  active: "".concat(prefix, "-is-active"),
  checked: "".concat(prefix, "-is-checked"),
  current: "".concat(prefix, "-is-current"),
  hidden: "".concat(prefix, "-is-hidden"),
  visible: "".concat(prefix, "-is-visible"),
  expanded: "".concat(prefix, "-is-expanded"),
  indeterminate: "".concat(prefix, "-is-indeterminate")
};
var ClASSNAMES = {
  SIZE: SIZE_CLASSNAMES,
  STATUS: STATUS_CLASSNAMES
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var baseGetTag$4 = _baseGetTag, isArray$8 = isArray_1, isObjectLike$5 = isObjectLike_1;
var stringTag$1 = "[object String]";
function isString(value6) {
  return typeof value6 == "string" || !isArray$8(value6) && isObjectLike$5(value6) && baseGetTag$4(value6) == stringTag$1;
}
var isString_1 = isString;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var easeInOutCubic = function easeInOutCubic2(current2, start3, end3, duration) {
  var change = (end3 - start3) / 2;
  var time2 = current2 / (duration / 2);
  if (time2 < 1) {
    return change * time2 * time2 * time2 + start3;
  }
  time2 -= 2;
  return change * (time2 * time2 * time2 + 2) + start3;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var raf$2 = { exports: {} };
var performanceNow$1 = { exports: {} };
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
  if (typeof performance !== "undefined" && performance !== null && performance.now) {
    performanceNow$1.exports = function() {
      return performance.now();
    };
  } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
    performanceNow$1.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function getNanoSeconds2() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    performanceNow$1.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    performanceNow$1.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }
}).call(commonjsGlobal);
var now$2 = performanceNow$1.exports, root$1 = typeof window === "undefined" ? commonjsGlobal : window, vendors = ["moz", "webkit"], suffix = "AnimationFrame", raf = root$1["request" + suffix], caf = root$1["cancel" + suffix] || root$1["cancelRequest" + suffix];
for (var i = 0; !raf && i < vendors.length; i++) {
  raf = root$1[vendors[i] + "Request" + suffix];
  caf = root$1[vendors[i] + "Cancel" + suffix] || root$1[vendors[i] + "CancelRequest" + suffix];
}
if (!raf || !caf) {
  var last$2 = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
  raf = function raf2(callback) {
    if (queue.length === 0) {
      var _now = now$2(), next = Math.max(0, frameDuration - (_now - last$2));
      last$2 = next + _now;
      setTimeout(function() {
        var cp = queue.slice(0);
        queue.length = 0;
        for (var i = 0; i < cp.length; i++) {
          if (!cp[i].cancelled) {
            try {
              cp[i].callback(last$2);
            } catch (e) {
              setTimeout(function() {
                throw e;
              }, 0);
            }
          }
        }
      }, Math.round(next));
    }
    queue.push({
      handle: ++id,
      callback,
      cancelled: false
    });
    return id;
  };
  caf = function caf2(handle) {
    for (var i = 0; i < queue.length; i++) {
      if (queue[i].handle === handle) {
        queue[i].cancelled = true;
      }
    }
  };
}
raf$2.exports = function(fn2) {
  return raf.call(root$1, fn2);
};
raf$2.exports.cancel = function() {
  caf.apply(root$1, arguments);
};
raf$2.exports.polyfill = function(object) {
  if (!object) {
    object = root$1;
  }
  object.requestAnimationFrame = raf;
  object.cancelAnimationFrame = caf;
};
var raf$1 = raf$2.exports;
var isServer = typeof window === "undefined";
var trim = function trim2(str) {
  return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
};
var on$1 = function() {
  if (!isServer && document.addEventListener) {
    return function(element2, event, handler15) {
      if (element2 && event && handler15) {
        element2.addEventListener(event, handler15, false);
      }
    };
  }
  return function(element2, event, handler15) {
    if (element2 && event && handler15) {
      element2.attachEvent("on".concat(event), handler15);
    }
  };
}();
var off$1 = function() {
  if (!isServer && document.removeEventListener) {
    return function(element2, event, handler15) {
      if (element2 && event) {
        element2.removeEventListener(event, handler15, false);
      }
    };
  }
  return function(element2, event, handler15) {
    if (element2 && event) {
      element2.detachEvent("on".concat(event), handler15);
    }
  };
}();
function once(element2, event, handler15) {
  var handlerFn = typeof handler15 === "function" ? handler15 : handler15.handleEvent;
  var callback = function callback2(evt) {
    handlerFn(evt);
    off$1(element2, event, callback2);
  };
  on$1(element2, event, callback);
}
function hasClass(el, cls) {
  if (!el || !cls)
    return false;
  if (cls.indexOf(" ") !== -1)
    throw new Error("className should not contain space.");
  if (el.classList) {
    return el.classList.contains(cls);
  }
  return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
}
function addClass(el, cls) {
  if (!el)
    return;
  var curClass = el.className;
  var classes6 = (cls || "").split(" ");
  for (var i = 0, j = classes6.length; i < j; i++) {
    var clsName = classes6[i];
    if (!clsName)
      continue;
    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += " ".concat(clsName);
    }
  }
  if (!el.classList) {
    el.className = curClass;
  }
}
function removeClass(el, cls) {
  if (!el || !cls)
    return;
  var classes6 = cls.split(" ");
  var curClass = " ".concat(el.className, " ");
  for (var i = 0, j = classes6.length; i < j; i++) {
    var clsName = classes6[i];
    if (!clsName)
      continue;
    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(" ".concat(clsName, " "), " ");
    }
  }
  if (!el.classList) {
    el.className = trim(curClass);
  }
}
var getAttach = function getAttach2(node) {
  var attachNode = typeof node === "function" ? node() : node;
  if (!attachNode) {
    return document.body;
  }
  if (isString_1(attachNode)) {
    return document.querySelector(attachNode);
  }
  if (attachNode instanceof HTMLElement) {
    return attachNode;
  }
  return document.body;
};
var getScrollContainer = function getScrollContainer2() {
  var container = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "body";
  if (isString_1(container)) {
    return document.querySelector(container);
  }
  if (typeof container === "function") {
    return container();
  }
  return container;
};
function isWindow(obj) {
  return obj && obj === obj.window;
}
function getScroll(target, isLeft) {
  if (typeof window === "undefined" || !target) {
    return 0;
  }
  var method = isLeft ? "scrollLeft" : "scrollTop";
  var result = 0;
  if (isWindow(target)) {
    result = target[isLeft ? "pageXOffset" : "pageYOffset"];
  } else if (target instanceof Document) {
    result = target.documentElement[method];
  } else if (target) {
    result = target[method];
  }
  return result;
}
function scrollTo(target, opt) {
  var _opt$container = opt.container, container = _opt$container === void 0 ? window : _opt$container, _opt$duration = opt.duration, duration = _opt$duration === void 0 ? 450 : _opt$duration, _opt$easing = opt.easing, easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
  var scrollTop = getScroll(container);
  var startTime = Date.now();
  return new Promise(function(res) {
    var fnc = function fnc2() {
      var timestamp = Date.now();
      var time2 = timestamp - startTime;
      var nextScrollTop = easing(Math.min(time2, duration), scrollTop, target, duration);
      if (isWindow(container)) {
        container.scrollTo(window.pageXOffset, nextScrollTop);
      } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
        container.documentElement.scrollTop = nextScrollTop;
      } else {
        container.scrollTop = nextScrollTop;
      }
      if (time2 < duration) {
        raf$1(fnc2);
      } else {
        raf$1(res);
      }
    };
    raf$1(fnc);
  });
}
var isNodeOverflow = function isNodeOverflow2(ele) {
  var _ele$clientWidth = ele.clientWidth, clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth, _ele$scrollWidth = ele.scrollWidth, scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;
  return scrollWidth > clientWidth;
};
var scrollSelectedIntoView = function scrollSelectedIntoView2(parentEle, selected2) {
  if (!window)
    return;
  if (!selected2 || selected2.offsetParent !== parentEle) {
    parentEle.scrollTop = 0;
    return;
  }
  var selectedTop = selected2.offsetTop;
  var selectedBottom = selectedTop + selected2.offsetHeight;
  var parentScrollTop = parentEle.scrollTop;
  var parentViewBottom = parentScrollTop + parentEle.clientHeight;
  if (selectedTop < parentScrollTop) {
    parentEle.scrollTop = selectedTop;
  } else if (selectedBottom > parentViewBottom) {
    parentEle.scrollTop = selectedBottom - parentEle.clientHeight;
  }
};
var baseKeys = _baseKeys, getTag$1 = _getTag, isArguments$2 = isArguments_1, isArray$7 = isArray_1, isArrayLike = isArrayLike_1, isBuffer$1 = isBuffer$5.exports, isPrototype = _isPrototype, isTypedArray$1 = isTypedArray_1;
var mapTag$1 = "[object Map]", setTag$1 = "[object Set]";
var objectProto$4 = Object.prototype;
var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
function isEmpty(value6) {
  if (value6 == null) {
    return true;
  }
  if (isArrayLike(value6) && (isArray$7(value6) || typeof value6 == "string" || typeof value6.splice == "function" || isBuffer$1(value6) || isTypedArray$1(value6) || isArguments$2(value6))) {
    return !value6.length;
  }
  var tag = getTag$1(value6);
  if (tag == mapTag$1 || tag == setTag$1) {
    return !value6.size;
  }
  if (isPrototype(value6)) {
    return !baseKeys(value6).length;
  }
  for (var key in value6) {
    if (hasOwnProperty$5.call(value6, key)) {
      return false;
    }
  }
  return true;
}
var isEmpty_1 = isEmpty;
function arrayMap$6(array, iteratee) {
  var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
  while (++index2 < length) {
    result[index2] = iteratee(array[index2], index2, array);
  }
  return result;
}
var _arrayMap = arrayMap$6;
var baseGetTag$3 = _baseGetTag, isObjectLike$4 = isObjectLike_1;
var symbolTag$1 = "[object Symbol]";
function isSymbol$4(value6) {
  return typeof value6 == "symbol" || isObjectLike$4(value6) && baseGetTag$3(value6) == symbolTag$1;
}
var isSymbol_1 = isSymbol$4;
var Symbol$3 = _Symbol, arrayMap$5 = _arrayMap, isArray$6 = isArray_1, isSymbol$3 = isSymbol_1;
var INFINITY$2 = 1 / 0;
var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
function baseToString$1(value6) {
  if (typeof value6 == "string") {
    return value6;
  }
  if (isArray$6(value6)) {
    return arrayMap$5(value6, baseToString$1) + "";
  }
  if (isSymbol$3(value6)) {
    return symbolToString ? symbolToString.call(value6) : "";
  }
  var result = value6 + "";
  return result == "0" && 1 / value6 == -INFINITY$2 ? "-0" : result;
}
var _baseToString = baseToString$1;
var baseToString = _baseToString;
function toString$8(value6) {
  return value6 == null ? "" : baseToString(value6);
}
var toString_1 = toString$8;
function baseSlice$3(array, start3, end3) {
  var index2 = -1, length = array.length;
  if (start3 < 0) {
    start3 = -start3 > length ? 0 : length + start3;
  }
  end3 = end3 > length ? length : end3;
  if (end3 < 0) {
    end3 += length;
  }
  length = start3 > end3 ? 0 : end3 - start3 >>> 0;
  start3 >>>= 0;
  var result = Array(length);
  while (++index2 < length) {
    result[index2] = array[index2 + start3];
  }
  return result;
}
var _baseSlice = baseSlice$3;
var baseSlice$2 = _baseSlice;
function castSlice$1(array, start3, end3) {
  var length = array.length;
  end3 = end3 === void 0 ? length : end3;
  return !start3 && end3 >= length ? array : baseSlice$2(array, start3, end3);
}
var _castSlice = castSlice$1;
var rsAstralRange$2 = "\\ud800-\\udfff", rsComboMarksRange$3 = "\\u0300-\\u036f", reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$3 = "\\u20d0-\\u20ff", rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3, rsVarRange$2 = "\\ufe0e\\ufe0f";
var rsZWJ$2 = "\\u200d";
var reHasUnicode = RegExp("[" + rsZWJ$2 + rsAstralRange$2 + rsComboRange$3 + rsVarRange$2 + "]");
function hasUnicode$2(string) {
  return reHasUnicode.test(string);
}
var _hasUnicode = hasUnicode$2;
function asciiToArray$1(string) {
  return string.split("");
}
var _asciiToArray = asciiToArray$1;
var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$2 = "\\u0300-\\u036f", reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$2 = "\\u20d0-\\u20ff", rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2, rsVarRange$1 = "\\ufe0e\\ufe0f";
var rsAstral = "[" + rsAstralRange$1 + "]", rsCombo$2 = "[" + rsComboRange$2 + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$2 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$1 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ$1 = "\\u200d";
var reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$1 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$1 + "(?:" + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsSymbol = "(?:" + [rsNonAstral$1 + rsCombo$2 + "?", rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join("|") + ")";
var reUnicode = RegExp(rsFitz$1 + "(?=" + rsFitz$1 + ")|" + rsSymbol + rsSeq$1, "g");
function unicodeToArray$1(string) {
  return string.match(reUnicode) || [];
}
var _unicodeToArray = unicodeToArray$1;
var asciiToArray = _asciiToArray, hasUnicode$1 = _hasUnicode, unicodeToArray = _unicodeToArray;
function stringToArray$1(string) {
  return hasUnicode$1(string) ? unicodeToArray(string) : asciiToArray(string);
}
var _stringToArray = stringToArray$1;
var castSlice = _castSlice, hasUnicode = _hasUnicode, stringToArray = _stringToArray, toString$7 = toString_1;
function createCaseFirst$1(methodName) {
  return function(string) {
    string = toString$7(string);
    var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
    return chr[methodName]() + trailing;
  };
}
var _createCaseFirst = createCaseFirst$1;
var createCaseFirst = _createCaseFirst;
var upperFirst$1 = createCaseFirst("toUpperCase");
var upperFirst_1 = upperFirst$1;
var toString$6 = toString_1, upperFirst = upperFirst_1;
function capitalize$1(string) {
  return upperFirst(toString$6(string).toLowerCase());
}
var capitalize_1 = capitalize$1;
function arrayReduce$1(array, iteratee, accumulator, initAccum) {
  var index2 = -1, length = array == null ? 0 : array.length;
  if (initAccum && length) {
    accumulator = array[++index2];
  }
  while (++index2 < length) {
    accumulator = iteratee(accumulator, array[index2], index2, array);
  }
  return accumulator;
}
var _arrayReduce = arrayReduce$1;
function basePropertyOf$2(object) {
  return function(key) {
    return object == null ? void 0 : object[key];
  };
}
var _basePropertyOf = basePropertyOf$2;
var basePropertyOf$1 = _basePropertyOf;
var deburredLetters = {
  "\xC0": "A",
  "\xC1": "A",
  "\xC2": "A",
  "\xC3": "A",
  "\xC4": "A",
  "\xC5": "A",
  "\xE0": "a",
  "\xE1": "a",
  "\xE2": "a",
  "\xE3": "a",
  "\xE4": "a",
  "\xE5": "a",
  "\xC7": "C",
  "\xE7": "c",
  "\xD0": "D",
  "\xF0": "d",
  "\xC8": "E",
  "\xC9": "E",
  "\xCA": "E",
  "\xCB": "E",
  "\xE8": "e",
  "\xE9": "e",
  "\xEA": "e",
  "\xEB": "e",
  "\xCC": "I",
  "\xCD": "I",
  "\xCE": "I",
  "\xCF": "I",
  "\xEC": "i",
  "\xED": "i",
  "\xEE": "i",
  "\xEF": "i",
  "\xD1": "N",
  "\xF1": "n",
  "\xD2": "O",
  "\xD3": "O",
  "\xD4": "O",
  "\xD5": "O",
  "\xD6": "O",
  "\xD8": "O",
  "\xF2": "o",
  "\xF3": "o",
  "\xF4": "o",
  "\xF5": "o",
  "\xF6": "o",
  "\xF8": "o",
  "\xD9": "U",
  "\xDA": "U",
  "\xDB": "U",
  "\xDC": "U",
  "\xF9": "u",
  "\xFA": "u",
  "\xFB": "u",
  "\xFC": "u",
  "\xDD": "Y",
  "\xFD": "y",
  "\xFF": "y",
  "\xC6": "Ae",
  "\xE6": "ae",
  "\xDE": "Th",
  "\xFE": "th",
  "\xDF": "ss",
  "\u0100": "A",
  "\u0102": "A",
  "\u0104": "A",
  "\u0101": "a",
  "\u0103": "a",
  "\u0105": "a",
  "\u0106": "C",
  "\u0108": "C",
  "\u010A": "C",
  "\u010C": "C",
  "\u0107": "c",
  "\u0109": "c",
  "\u010B": "c",
  "\u010D": "c",
  "\u010E": "D",
  "\u0110": "D",
  "\u010F": "d",
  "\u0111": "d",
  "\u0112": "E",
  "\u0114": "E",
  "\u0116": "E",
  "\u0118": "E",
  "\u011A": "E",
  "\u0113": "e",
  "\u0115": "e",
  "\u0117": "e",
  "\u0119": "e",
  "\u011B": "e",
  "\u011C": "G",
  "\u011E": "G",
  "\u0120": "G",
  "\u0122": "G",
  "\u011D": "g",
  "\u011F": "g",
  "\u0121": "g",
  "\u0123": "g",
  "\u0124": "H",
  "\u0126": "H",
  "\u0125": "h",
  "\u0127": "h",
  "\u0128": "I",
  "\u012A": "I",
  "\u012C": "I",
  "\u012E": "I",
  "\u0130": "I",
  "\u0129": "i",
  "\u012B": "i",
  "\u012D": "i",
  "\u012F": "i",
  "\u0131": "i",
  "\u0134": "J",
  "\u0135": "j",
  "\u0136": "K",
  "\u0137": "k",
  "\u0138": "k",
  "\u0139": "L",
  "\u013B": "L",
  "\u013D": "L",
  "\u013F": "L",
  "\u0141": "L",
  "\u013A": "l",
  "\u013C": "l",
  "\u013E": "l",
  "\u0140": "l",
  "\u0142": "l",
  "\u0143": "N",
  "\u0145": "N",
  "\u0147": "N",
  "\u014A": "N",
  "\u0144": "n",
  "\u0146": "n",
  "\u0148": "n",
  "\u014B": "n",
  "\u014C": "O",
  "\u014E": "O",
  "\u0150": "O",
  "\u014D": "o",
  "\u014F": "o",
  "\u0151": "o",
  "\u0154": "R",
  "\u0156": "R",
  "\u0158": "R",
  "\u0155": "r",
  "\u0157": "r",
  "\u0159": "r",
  "\u015A": "S",
  "\u015C": "S",
  "\u015E": "S",
  "\u0160": "S",
  "\u015B": "s",
  "\u015D": "s",
  "\u015F": "s",
  "\u0161": "s",
  "\u0162": "T",
  "\u0164": "T",
  "\u0166": "T",
  "\u0163": "t",
  "\u0165": "t",
  "\u0167": "t",
  "\u0168": "U",
  "\u016A": "U",
  "\u016C": "U",
  "\u016E": "U",
  "\u0170": "U",
  "\u0172": "U",
  "\u0169": "u",
  "\u016B": "u",
  "\u016D": "u",
  "\u016F": "u",
  "\u0171": "u",
  "\u0173": "u",
  "\u0174": "W",
  "\u0175": "w",
  "\u0176": "Y",
  "\u0177": "y",
  "\u0178": "Y",
  "\u0179": "Z",
  "\u017B": "Z",
  "\u017D": "Z",
  "\u017A": "z",
  "\u017C": "z",
  "\u017E": "z",
  "\u0132": "IJ",
  "\u0133": "ij",
  "\u0152": "Oe",
  "\u0153": "oe",
  "\u0149": "'n",
  "\u017F": "s"
};
var deburrLetter$1 = basePropertyOf$1(deburredLetters);
var _deburrLetter = deburrLetter$1;
var deburrLetter = _deburrLetter, toString$5 = toString_1;
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
var rsCombo$1 = "[" + rsComboRange$1 + "]";
var reComboMark = RegExp(rsCombo$1, "g");
function deburr$1(string) {
  string = toString$5(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
}
var deburr_1 = deburr$1;
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function asciiWords$1(string) {
  return string.match(reAsciiWord) || [];
}
var _asciiWords = asciiWords$1;
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function hasUnicodeWord$1(string) {
  return reHasUnicodeWord.test(string);
}
var _hasUnicodeWord = hasUnicodeWord$1;
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
var rsApos$1 = "['\u2019]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
var reUnicodeWord = RegExp([
  rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
  rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
  rsUpper + "+" + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join("|"), "g");
function unicodeWords$1(string) {
  return string.match(reUnicodeWord) || [];
}
var _unicodeWords = unicodeWords$1;
var asciiWords = _asciiWords, hasUnicodeWord = _hasUnicodeWord, toString$4 = toString_1, unicodeWords = _unicodeWords;
function words$1(string, pattern2, guard) {
  string = toString$4(string);
  pattern2 = guard ? void 0 : pattern2;
  if (pattern2 === void 0) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern2) || [];
}
var words_1 = words$1;
var arrayReduce = _arrayReduce, deburr = deburr_1, words = words_1;
var rsApos = "['\u2019]";
var reApos = RegExp(rsApos, "g");
function createCompounder$3(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
  };
}
var _createCompounder = createCompounder$3;
var capitalize = capitalize_1, createCompounder$2 = _createCompounder;
var camelCase = createCompounder$2(function(result, word, index2) {
  word = word.toLowerCase();
  return result + (index2 ? capitalize(word) : word);
});
var camelCase_1 = camelCase;
var createCompounder$1 = _createCompounder;
var kebabCase = createCompounder$1(function(result, word, index2) {
  return result + (index2 ? "-" : "") + word.toLowerCase();
});
var kebabCase_1 = kebabCase;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getDefaultNode(options) {
  var defaultNode;
  if (isObject_1(options) && "defaultNode" in options) {
    defaultNode = options.defaultNode;
  } else if (isVNode(options) || isString_1(options)) {
    defaultNode = options;
  }
  return defaultNode;
}
function getParams(options) {
  return isObject_1(options) && "params" in options ? options.params : null;
}
function handleSlots$1(instance, params, name2) {
  var _instance$$slots$came, _instance$$slots, _instance$$slots$keba, _instance$$slots2;
  var node = (_instance$$slots$came = (_instance$$slots = instance.$slots)[camelCase_1(name2)]) === null || _instance$$slots$came === void 0 ? void 0 : _instance$$slots$came.call(_instance$$slots, params);
  if (node)
    return node;
  node = (_instance$$slots$keba = (_instance$$slots2 = instance.$slots)[kebabCase_1(name2)]) === null || _instance$$slots$keba === void 0 ? void 0 : _instance$$slots$keba.call(_instance$$slots2, params);
  if (node)
    return node;
  return null;
}
var renderTNodeJSX = function renderTNodeJSX2(instance, name2, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var propsNode;
  if (name2 in instance) {
    propsNode = instance[name2];
  }
  if (propsNode === false)
    return;
  if (propsNode === true && defaultNode) {
    return handleSlots$1(instance, params, name2) || defaultNode;
  }
  if (isFunction_1(propsNode))
    return propsNode(h, params);
  var isPropsEmpty = [void 0, params, ""].includes(propsNode);
  if (isPropsEmpty && (instance.$slots[camelCase_1(name2)] || instance.$slots[kebabCase_1(name2)])) {
    return handleSlots$1(instance, params, name2);
  }
  return propsNode;
};
var renderTNodeJSXDefault = function renderTNodeJSXDefault2(vm, name2, options) {
  var defaultNode = getDefaultNode(options);
  return renderTNodeJSX(vm, name2, options) || defaultNode;
};
var renderContent = function renderContent2(vm, name1, name2, options) {
  var params = getParams(options);
  var defaultNode = getDefaultNode(options);
  var toParams = params ? {
    params
  } : void 0;
  var node1 = renderTNodeJSX(vm, name1, toParams);
  var node2 = renderTNodeJSX(vm, name2, toParams);
  var res = isEmpty_1(node1) ? node2 : node1;
  return isEmpty_1(res) ? defaultNode : res;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$2m(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2l(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2m(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getShouldUpdate(node) {
  if (!node) {
    return false;
  }
  if (typeof node === "string" && node.indexOf("?") > 0) {
    try {
      var config = JSON.parse(node.split("?")[1]);
      return config.autoUpdate || false;
    } catch (e) {
      return false;
    }
  }
  return false;
}
var TransferDom = {
  mounted: function mounted(el, binding) {
    var value6 = binding.value;
    el.className = el.className ? "".concat(el.className, " v-transfer-dom") : "v-transfer-dom";
    var parentNode = el.parentNode;
    var home = document.createComment("");
    var hasMovedOut = false;
    var target = getAttach(value6);
    if (value6 && target) {
      parentNode.replaceChild(home, el);
      target.appendChild(el);
      hasMovedOut = true;
    }
    if (!el.__transferDomData) {
      el.__transferDomData = {
        parentNode,
        home,
        target,
        hasMovedOut
      };
    }
  },
  updated: function updated(el, binding) {
    var value6 = binding.value;
    var shouldUpdate = getShouldUpdate(value6);
    if (!shouldUpdate) {
      return;
    }
    var ref$1 = el.__transferDomData;
    var parentNode = ref$1.parentNode, home = ref$1.home, hasMovedOut = ref$1.hasMovedOut;
    if (!hasMovedOut && value6) {
      var _getAttach, _getAttach$appendChil;
      parentNode.replaceChild(home, el);
      (_getAttach = getAttach(value6)) === null || _getAttach === void 0 ? void 0 : (_getAttach$appendChil = _getAttach.appendChild) === null || _getAttach$appendChil === void 0 ? void 0 : _getAttach$appendChil.call(_getAttach, el);
      el.__transferDomData = _objectSpread$2l(_objectSpread$2l({}, el.__transferDomData), {}, {
        hasMovedOut: true,
        target: getAttach(value6)
      });
    } else if (hasMovedOut && !value6) {
      parentNode.replaceChild(el, home);
      el.__transferDomData = _objectSpread$2l(_objectSpread$2l({}, el.__transferDomData), {}, {
        hasMovedOut: false,
        target: getAttach(value6)
      });
    } else if (value6) {
      var _getAttach2, _getAttach2$appendChi;
      (_getAttach2 = getAttach(value6)) === null || _getAttach2 === void 0 ? void 0 : (_getAttach2$appendChi = _getAttach2.appendChild) === null || _getAttach2$appendChi === void 0 ? void 0 : _getAttach2$appendChi.call(_getAttach2, el);
    }
  },
  unmounted: function unbind(el) {
    el.className = el.className.replace("v-transfer-dom", "");
    if (el.__transferDomData && el.__transferDomData.hasMovedOut === true) {
      var _el$__transferDomData, _el$__transferDomData2;
      (_el$__transferDomData = el.__transferDomData.parentNode) === null || _el$__transferDomData === void 0 ? void 0 : (_el$__transferDomData2 = _el$__transferDomData.appendChild) === null || _el$__transferDomData2 === void 0 ? void 0 : _el$__transferDomData2.call(_el$__transferDomData, el);
    }
    el.__transferDomData = null;
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$18 = {
  attach: {
    type: [String, Function],
    "default": ""
  },
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  delay: {
    type: Number,
    "default": 0
  },
  fullscreen: Boolean,
  indicator: {
    type: [Boolean, Function],
    "default": true
  },
  inheritColor: Boolean,
  loading: {
    type: Boolean,
    "default": true
  },
  preventScrollThrough: {
    type: Boolean,
    "default": true
  },
  showOverlay: {
    type: Boolean,
    "default": true
  },
  size: {
    type: String,
    "default": "medium"
  },
  text: {
    type: [String, Function]
  },
  zIndex: {
    type: Number
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var useComponentClassName$2 = function useComponentClassName() {
  return {
    name: usePrefixClass("loading"),
    centerClass: usePrefixClass("loading--center"),
    fullscreenClass: usePrefixClass("loading__fullscreen"),
    lockClass: usePrefixClass("loading--lock"),
    overlayClass: usePrefixClass("loading__overlay"),
    relativeClass: usePrefixClass("loading__parent"),
    fullClass: usePrefixClass("loading--full"),
    inheritColorClass: usePrefixClass("loading--inherit-color")
  };
};
var _Loading = defineComponent({
  name: "TLoading",
  directives: {
    TransferDom
  },
  props: props$18,
  setup: function setup2(props2, _ref) {
    var slots = _ref.slots;
    var delayShowLoading = ref(false);
    var _useComponentClassNam = useComponentClassName$2(), name2 = _useComponentClassNam.name, centerClass = _useComponentClassNam.centerClass, fullscreenClass = _useComponentClassNam.fullscreenClass, lockClass2 = _useComponentClassNam.lockClass, overlayClass = _useComponentClassNam.overlayClass, relativeClass = _useComponentClassNam.relativeClass, fullClass = _useComponentClassNam.fullClass, inheritColorClass = _useComponentClassNam.inheritColorClass;
    var classPrefix2 = usePrefixClass();
    var countDelay = function countDelay2() {
      delayShowLoading.value = false;
      var timer = setTimeout(function() {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props2.delay);
    };
    var delayCounted = computed(function() {
      return Boolean(!props2.delay || props2.delay && delayShowLoading.value);
    });
    var styles = computed(function() {
      var styles2 = {};
      if (props2.zIndex !== void 0) {
        styles2.zIndex = props2.zIndex;
      }
      if (!["small", "medium", "large"].includes(props2.size)) {
        styles2["font-size"] = props2.size;
      }
      return styles2;
    });
    var hasContent = computed(function() {
      return Boolean(props2["default"] || slots["default"] || props2.content || slots.content);
    });
    var lockFullscreen = computed(function() {
      return props2.preventScrollThrough && props2.fullscreen;
    });
    var showText = computed(function() {
      return Boolean(props2.text || slots.text);
    });
    var showWrapLoading = computed(function() {
      return hasContent.value && props2.loading && delayCounted.value;
    });
    var showFullScreenLoading = computed(function() {
      return props2.fullscreen && props2.loading && delayCounted.value;
    });
    var showNormalLoading = computed(function() {
      return props2.attach && props2.loading && delayCounted.value;
    });
    var classes6 = computed(function() {
      var baseClasses = [centerClass.value, SIZE_CLASSNAMES[props2.size], _defineProperty$3({}, inheritColorClass.value, props2.inheritColor)];
      var fullScreenClasses = [name2.value, fullscreenClass.value, centerClass.value, overlayClass.value];
      return {
        baseClasses,
        attachClasses: baseClasses.concat([name2.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
        withContentClasses: baseClasses.concat([name2.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
        fullScreenClasses,
        normalClasses: baseClasses.concat([name2.value])
      };
    });
    var loadingRef = computed(function() {
      return props2.loading;
    });
    watch([loadingRef], function(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1), isLoading = _ref6[0];
      if (isLoading) {
        countDelay();
        lockFullscreen.value && addClass(document.body, lockClass2.value);
      } else {
        lockFullscreen.value && removeClass(document.body, lockClass2.value);
      }
    });
    onMounted(function() {
      props2.delay && countDelay();
    });
    return {
      classPrefix: classPrefix2,
      relativeClass,
      delayShowLoading,
      styles,
      showText,
      hasContent,
      classes: classes6,
      lockFullscreen,
      showWrapLoading,
      showNormalLoading,
      showFullScreenLoading
    };
  },
  render: function render2() {
    var _this$classes = this.classes, fullScreenClasses = _this$classes.fullScreenClasses, baseClasses = _this$classes.baseClasses, withContentClasses = _this$classes.withContentClasses, attachClasses = _this$classes.attachClasses, normalClasses = _this$classes.normalClasses;
    var defaultIndicator = createVNode(GradientIcon, {
      "size": this.size
    }, null);
    var indicator = this.loading && renderTNodeJSX(this, "indicator", defaultIndicator);
    var text = this.showText && createVNode("div", {
      "class": "".concat(this.classPrefix, "-loading__text")
    }, [renderTNodeJSX(this, "text")]);
    if (this.fullscreen) {
      if (!this.showFullScreenLoading)
        return null;
      return withDirectives(createVNode("div", {
        "class": fullScreenClasses,
        "style": this.styles
      }, [createVNode("div", {
        "class": baseClasses
      }, [indicator, text])]), [[resolveDirective("transfer-dom"), this.attach]]);
    }
    if (this.hasContent) {
      return createVNode("div", {
        "class": this.relativeClass
      }, [renderContent(this, "default", "content"), this.showWrapLoading && createVNode("div", {
        "class": withContentClasses,
        "style": this.styles
      }, [indicator, text])]);
    }
    if (this.attach) {
      return withDirectives(createVNode("div", {
        "class": attachClasses,
        "style": this.styles
      }, [indicator, text]), [[resolveDirective("transfer-dom"), this.attach]]);
    }
    return createVNode("div", {
      "class": normalClasses,
      "style": this.styles
    }, [indicator, text]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var withInstall = function withInstall2(comp, customName) {
  var c = comp;
  c.install = function(app, name2) {
    var defaultName = c.name.includes("-mapprops") ? c.name.replace("-mapprops", "") : c.name;
    app.component(customName || name2 || defaultName, comp);
  };
  return c;
};
var index$S = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$2l(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2k(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2l(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var lockClass = "".concat(prefix, "-loading--lock");
var fullScreenLoadingInstance = null;
function createLoading(props2) {
  var component = defineComponent({
    setup: function setup134() {
      var loadingOptions = reactive(props2);
      return {
        loadingOptions
      };
    },
    render: function render102() {
      return h(_Loading, _objectSpread$2k({}, this.loadingOptions));
    }
  });
  var attach2 = getAttach(props2.attach);
  var loading2 = createApp(component).mount(document.createElement("div"));
  if (attach2) {
    attach2.appendChild(loading2.$el);
  } else {
    console.error("attach is not exist");
  }
  var loadingInstance = {
    hide: function hide2() {
      loading2.loading = false;
      loading2.$el.parentNode.removeChild(loading2.$el);
    }
  };
  return loadingInstance;
}
function produceLoading(props2) {
  if (props2 === true) {
    fullScreenLoadingInstance = createLoading({
      fullscreen: true,
      loading: true,
      attach: "body"
    });
    return fullScreenLoadingInstance;
  }
  removeClass(document.body, lockClass);
  if (props2 === false) {
    removeClass(document.body, lockClass);
    fullScreenLoadingInstance.hide();
    fullScreenLoadingInstance = null;
    return;
  }
  return createLoading(props2);
}
var LoadingPlugin = produceLoading;
LoadingPlugin.install = function(app) {
  app.config.globalProperties.$loading = produceLoading;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Loading = withInstall(_Loading);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$17 = {
  block: Boolean,
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  disabled: Boolean,
  ghost: Boolean,
  icon: {
    type: Function
  },
  loading: Boolean,
  shape: {
    type: String,
    "default": "rectangle",
    validator: function validator(val) {
      return ["rectangle", "square", "round", "circle"].includes(val);
    }
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator2(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  theme: {
    type: String,
    "default": void 0,
    validator: function validator3(val) {
      return ["default", "primary", "danger", "warning", "success"].includes(val);
    }
  },
  type: {
    type: String,
    "default": "button",
    validator: function validator4(val) {
      return ["submit", "reset", "button"].includes(val);
    }
  },
  variant: {
    type: String,
    "default": "base",
    validator: function validator5(val) {
      return ["base", "outline", "dashed", "text"].includes(val);
    }
  },
  onClick: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var expand = EAnimationType.expand, ripple = EAnimationType.ripple, fade = EAnimationType.fade;
function useKeepAnimation() {
  var _useConfig = useConfig("animation"), global2 = _useConfig.global;
  var keepAnimation = function keepAnimation2(type) {
    var _animationConfig$excl, _animationConfig$incl;
    var animationConfig = global2.value;
    return animationConfig && !((_animationConfig$excl = animationConfig.exclude) !== null && _animationConfig$excl !== void 0 && _animationConfig$excl.includes(type)) && ((_animationConfig$incl = animationConfig.include) === null || _animationConfig$incl === void 0 ? void 0 : _animationConfig$incl.includes(type));
  };
  return {
    keepExpand: keepAnimation(expand),
    keepRipple: keepAnimation(ripple),
    keepFade: keepAnimation(fade)
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function setStyle(el, styles) {
  var keys2 = Object.keys(styles);
  keys2.forEach(function(key) {
    el.style[key] = styles[key];
  });
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var period = 200;
var noneRippleBg = "rgba(0, 0, 0, 0)";
var defaultRippleColor = "rgba(0, 0, 0, 0.35)";
var getRippleColor = function getRippleColor2(el, fixedRippleColor) {
  var _el$dataset;
  if (fixedRippleColor) {
    return fixedRippleColor;
  }
  if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
    var rippleColor = el.dataset.ripple;
    return rippleColor;
  }
  var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");
  if (cssVariable) {
    return cssVariable;
  }
  return defaultRippleColor;
};
function useRipple(el, fixedRippleColor) {
  var rippleContainer = ref(null);
  var classPrefix2 = usePrefixClass();
  var _useKeepAnimation = useKeepAnimation(), keepRipple = _useKeepAnimation.keepRipple;
  var handleAddRipple = function handleAddRipple2(e) {
    var dom = el.value;
    var rippleColor = getRippleColor(dom, fixedRippleColor === null || fixedRippleColor === void 0 ? void 0 : fixedRippleColor.value);
    if (e.button !== 0 || !el || !keepRipple)
      return;
    if (dom.classList.contains("".concat(classPrefix2.value, "-is-active")) || dom.classList.contains("".concat(classPrefix2.value, "-is-disabled")) || dom.classList.contains("".concat(classPrefix2.value, "-is-checked")))
      return;
    var elStyle = getComputedStyle(dom);
    var elBorder = parseInt(elStyle.borderWidth, 10);
    var border = elBorder > 0 ? elBorder : 0;
    var width = dom.offsetWidth;
    var height = dom.offsetHeight;
    if (rippleContainer.value.parentNode === null) {
      setStyle(rippleContainer.value, {
        position: "absolute",
        left: "".concat(0 - border, "px"),
        top: "".concat(0 - border, "px"),
        width: "".concat(width, "px"),
        height: "".concat(height, "px"),
        borderRadius: elStyle.borderRadius,
        pointerEvents: "none",
        overflow: "hidden"
      });
      dom.appendChild(rippleContainer.value);
    }
    var ripple2 = document.createElement("div");
    setStyle(ripple2, {
      marginTop: "0",
      marginLeft: "0",
      right: "".concat(width, "px"),
      width: "".concat(width + 20, "px"),
      height: "100%",
      transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
      transform: "skewX(-8deg)",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      backgroundColor: rippleColor,
      opacity: "0.9"
    });
    var elMap = /* @__PURE__ */ new WeakMap();
    for (var n = dom.children.length, i = 0; i < n; ++i) {
      var child = dom.children[i];
      if (child.style.zIndex === "" && child !== rippleContainer.value) {
        child.style.zIndex = "1";
        elMap.set(child, true);
      }
    }
    var initPosition = dom.style.position ? dom.style.position : getComputedStyle(dom).position;
    if (initPosition === "" || initPosition === "static") {
      dom.style.position = "relative";
    }
    rippleContainer.value.insertBefore(ripple2, rippleContainer.value.firstChild);
    setTimeout(function() {
      ripple2.style.transform = "translateX(".concat(width, "px)");
    }, 0);
    var handleClearRipple = function handleClearRipple2() {
      ripple2.style.backgroundColor = noneRippleBg;
      if (!el.value)
        return;
      el.value.removeEventListener("pointerup", handleClearRipple2, false);
      el.value.removeEventListener("pointerleave", handleClearRipple2, false);
      setTimeout(function() {
        ripple2.remove();
        if (rippleContainer.value.children.length === 0)
          rippleContainer.value.remove();
      }, period * 2 + 100);
    };
    el.value.addEventListener("pointerup", handleClearRipple, false);
    el.value.addEventListener("pointerleave", handleClearRipple, false);
  };
  onMounted(function() {
    var dom = el.value;
    if (!dom)
      return;
    rippleContainer.value = document.createElement("div");
    dom.addEventListener("pointerdown", handleAddRipple, false);
  });
  onUnmounted(function() {
    var _el$value;
    (_el$value = el.value) === null || _el$value === void 0 ? void 0 : _el$value.removeEventListener("pointerdown", handleAddRipple, false);
  });
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useFormDisabled(extend2) {
  var _getCurrentInstance = getCurrentInstance(), props2 = _getCurrentInstance.props;
  var propsDisabled = computed(function() {
    return props2.disabled;
  });
  var _inject = inject("formDisabled", /* @__PURE__ */ Object.create(null)), disabled2 = _inject.disabled;
  return computed(function() {
    return propsDisabled.value || (disabled2 === null || disabled2 === void 0 ? void 0 : disabled2.value) || (extend2 === null || extend2 === void 0 ? void 0 : extend2.value);
  });
}
var index$R = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TButton = defineComponent({
  name: "TButton",
  inheritAttrs: false,
  props: props$17,
  setup: function setup3(props2) {
    var COMPONENT_NAME2 = usePrefixClass("button");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    var disabled2 = useFormDisabled();
    var btnRef = ref();
    useRipple(btnRef);
    var isDisabled = computed(function() {
      return props2.disabled || props2.loading || disabled2.value;
    });
    var mergeTheme = computed(function() {
      var theme = props2.theme, variant = props2.variant;
      if (theme)
        return theme;
      if (variant === "base")
        return "primary";
      return "default";
    });
    var buttonClass = computed(function() {
      var _ref;
      return ["".concat(COMPONENT_NAME2.value), SIZE.value[props2.size], "".concat(COMPONENT_NAME2.value, "--variant-").concat(props2.variant), "".concat(COMPONENT_NAME2.value, "--theme-").concat(mergeTheme.value), (_ref = {}, _defineProperty$3(_ref, STATUS.value.disabled, isDisabled.value), _defineProperty$3(_ref, STATUS.value.loading, props2.loading), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--shape-").concat(props2.shape), props2.shape !== "rectangle"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--ghost"), props2.ghost), _defineProperty$3(_ref, SIZE.value.block, props2.block), _ref)];
    });
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      disabled: isDisabled,
      mergeTheme,
      buttonClass,
      btnRef
    };
  },
  render: function render3() {
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var buttonContent = renderContent(this, "default", "content");
    var icon = this.loading ? createVNode(Loading, {
      "inheritColor": true
    }, null) : renderTNodeJSX(this, "icon");
    var iconOnly = icon && !buttonContent;
    buttonContent = buttonContent ? createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "__text")
    }, [buttonContent]) : "";
    if (icon) {
      buttonContent = [icon, buttonContent];
    }
    return createVNode("button", mergeProps({
      "ref": "btnRef",
      "class": [].concat(_toConsumableArray(this.buttonClass), [_defineProperty$3({}, "".concat(COMPONENT_NAME2, "--icon-only"), iconOnly)]),
      "type": this.type,
      "disabled": this.disabled
    }, this.$attrs, {
      "onClick": this.onClick
    }), [buttonContent]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Button = withInstall(TButton);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$16 = {
  align: {
    type: String,
    "default": "center",
    validator: function validator6(val) {
      return ["left", "right", "center"].includes(val);
    }
  },
  content: {
    type: [String, Function]
  },
  dashed: Boolean,
  "default": {
    type: [String, Function]
  },
  layout: {
    type: String,
    "default": "horizontal",
    validator: function validator7(val) {
      return ["horizontal", "vertical"].includes(val);
    }
  },
  theme: {
    type: String,
    "default": "horizontal",
    validator: function validator8(val) {
      return ["horizontal", "vertical"].includes(val);
    }
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$2k(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2j(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2k(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Divider = defineComponent({
  name: "TDivider",
  props: _objectSpread$2j({}, props$16),
  setup: function setup4() {
    var COMPONENT_NAME2 = usePrefixClass("divider");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  render: function render4() {
    var _ref;
    var theme = this.theme, dashed = this.dashed, align = this.align, COMPONENT_NAME2 = this.COMPONENT_NAME;
    var children = renderContent(this, "default", "content");
    var dividerClassNames = ["".concat(COMPONENT_NAME2), ["".concat(COMPONENT_NAME2, "--").concat(theme)], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--dashed"), !!dashed), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--with-text"), !!children), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--with-text-").concat(align), !!children), _ref)];
    return createVNode("div", mergeProps({
      "class": dividerClassNames
    }, this.$attrs), [children && createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "__inner-text")
    }, [children])]);
  }
});
var index$Q = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Divider = withInstall(_Divider);
function _defineProperty$1(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value6,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function ownKeys$2j(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2i(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2j(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function camel2Kebab(camelString) {
  var covertArr = ["fillOpacity", "fillRule", "clipRule"];
  if (covertArr.includes(camelString)) {
    return camelString.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();
  }
  return camelString;
}
function renderFn(node, props2) {
  var kebabAttrs = Object.keys(node.attrs).reduce((result, key) => {
    result[camel2Kebab(key)] = node.attrs[key];
    return result;
  }, {});
  return h(node.tag, _objectSpread$2i(_objectSpread$2i({}, kebabAttrs), props2), (node.children || []).map((child) => renderFn(child, {})));
}
var DEFAULT_CLASS_PREFIX = "t";
var DEFAULT_LOCALE = "zh-CN";
var ConfigContext = {
  classPrefix: DEFAULT_CLASS_PREFIX,
  locale: DEFAULT_LOCALE
};
function useCommonClassName$1() {
  var {
    classPrefix: classPrefix2
  } = ConfigContext;
  return {
    SIZE: {
      default: "",
      xs: "".concat(classPrefix2, "-size-xs"),
      small: "".concat(classPrefix2, "-size-s"),
      middle: "".concat(classPrefix2, "-size-m"),
      large: "".concat(classPrefix2, "-size-l"),
      xl: "".concat(classPrefix2, "-size-xl"),
      block: "".concat(classPrefix2, "-size-full-width")
    },
    STATUS: {
      loading: "".concat(classPrefix2, "-is-loading"),
      disabled: "".concat(classPrefix2, "-is-disabled"),
      focused: "".concat(classPrefix2, "-is-focused"),
      success: "".concat(classPrefix2, "-is-success"),
      error: "".concat(classPrefix2, "-is-error"),
      warning: "".concat(classPrefix2, "-is-warning"),
      selected: "".concat(classPrefix2, "-is-selected"),
      active: "".concat(classPrefix2, "-is-active"),
      checked: "".concat(classPrefix2, "-is-checked"),
      current: "".concat(classPrefix2, "-is-current"),
      hidden: "".concat(classPrefix2, "-is-hidden"),
      visible: "".concat(classPrefix2, "-is-visible"),
      expanded: "".concat(classPrefix2, "-is-expanded"),
      indeterminate: "".concat(classPrefix2, "-is-indeterminate")
    }
  };
}
function useSizeProps(size2) {
  var COMMON_SIZE_CLASS_NAMES = useCommonClassName$1().SIZE;
  var className = computed(() => {
    if (size2.value in COMMON_SIZE_CLASS_NAMES) {
      return COMMON_SIZE_CLASS_NAMES[size2.value];
    }
    return "";
  });
  var style = computed(() => {
    if (size2.value === void 0 || size2.value in COMMON_SIZE_CLASS_NAMES) {
      return {};
    }
    return {
      fontSize: size2.value
    };
  });
  return {
    style,
    className
  };
}
var index$P = "";
function ownKeys$2i(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2h(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2i(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$w = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
      "fillOpacity": 0.9
    }
  }]
};
var addRectangle = defineComponent({
  name: "AddRectangleIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-add-rectangle", className.value]);
    var finalStyle = computed(() => _objectSpread$2h(_objectSpread$2h({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$w, finalProps.value);
  }
});
function ownKeys$2h(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2g(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2h(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$v = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
      "fillOpacity": 0.9
    }
  }]
};
var add = defineComponent({
  name: "AddIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-add", className.value]);
    var finalStyle = computed(() => _objectSpread$2g(_objectSpread$2g({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$v, finalProps.value);
  }
});
function ownKeys$2g(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2f(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2g(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$u = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
      "fillOpacity": 0.9
    }
  }]
};
var browseOff = defineComponent({
  name: "BrowseOffIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-browse-off", className.value]);
    var finalStyle = computed(() => _objectSpread$2f(_objectSpread$2f({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$u, finalProps.value);
  }
});
function ownKeys$2f(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2e(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2f(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$t = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
      "fillOpacity": 0.9
    }
  }]
};
var browse = defineComponent({
  name: "BrowseIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-browse", className.value]);
    var finalStyle = computed(() => _objectSpread$2e(_objectSpread$2e({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$t, finalProps.value);
  }
});
function ownKeys$2e(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2d(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2e(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$s = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
      "fillOpacity": 0.9
    }
  }]
};
var calendar = defineComponent({
  name: "CalendarIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-calendar", className.value]);
    var finalStyle = computed(() => _objectSpread$2d(_objectSpread$2d({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$s, finalProps.value);
  }
});
function ownKeys$2d(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2c(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2d(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$r = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M6 5v6l4.5-3L6 5z",
      "fillOpacity": 0.9
    }
  }]
};
var caretRightSmall = defineComponent({
  name: "CaretRightSmallIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-caret-right-small", className.value]);
    var finalStyle = computed(() => _objectSpread$2c(_objectSpread$2c({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$r, finalProps.value);
  }
});
function ownKeys$2c(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2b(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2c(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$q = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
      "fillOpacity": 0.9
    }
  }]
};
var checkCircleFilled = defineComponent({
  name: "CheckCircleFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-check-circle-filled", className.value]);
    var finalStyle = computed(() => _objectSpread$2b(_objectSpread$2b({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$q, finalProps.value);
  }
});
function ownKeys$2b(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2a(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2b(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$p = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
      "fillOpacity": 0.9
    }
  }]
};
var check = defineComponent({
  name: "CheckIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-check", className.value]);
    var finalStyle = computed(() => _objectSpread$2a(_objectSpread$2a({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$p, finalProps.value);
  }
});
function ownKeys$2a(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$29(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2a(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$o = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
      "fillOpacity": 0.9
    }
  }]
};
var chevronDown = defineComponent({
  name: "ChevronDownIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-chevron-down", className.value]);
    var finalStyle = computed(() => _objectSpread$29(_objectSpread$29({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$o, finalProps.value);
  }
});
function ownKeys$29(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$28(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$29(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$n = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
      "fillOpacity": 0.9
    }
  }]
};
var chevronLeftDouble = defineComponent({
  name: "ChevronLeftDoubleIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-chevron-left-double", className.value]);
    var finalStyle = computed(() => _objectSpread$28(_objectSpread$28({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$n, finalProps.value);
  }
});
function ownKeys$28(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$27(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$28(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$m = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
      "fillOpacity": 0.9
    }
  }]
};
var chevronLeft = defineComponent({
  name: "ChevronLeftIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-chevron-left", className.value]);
    var finalStyle = computed(() => _objectSpread$27(_objectSpread$27({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$m, finalProps.value);
  }
});
function ownKeys$27(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$26(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$27(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$l = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
      "fillOpacity": 0.9
    }
  }]
};
var chevronRightCircle = defineComponent({
  name: "ChevronRightCircleIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-chevron-right-circle", className.value]);
    var finalStyle = computed(() => _objectSpread$26(_objectSpread$26({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$l, finalProps.value);
  }
});
function ownKeys$26(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$25(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$26(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$k = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
      "fillOpacity": 0.9
    }
  }]
};
var chevronRightDouble = defineComponent({
  name: "ChevronRightDoubleIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-chevron-right-double", className.value]);
    var finalStyle = computed(() => _objectSpread$25(_objectSpread$25({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$k, finalProps.value);
  }
});
function ownKeys$25(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$24(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$25(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$j = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
      "fillOpacity": 0.9
    }
  }]
};
var chevronRight = defineComponent({
  name: "ChevronRightIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-chevron-right", className.value]);
    var finalStyle = computed(() => _objectSpread$24(_objectSpread$24({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$j, finalProps.value);
  }
});
function ownKeys$24(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$23(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$24(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$i = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
      "fillOpacity": 0.9
    }
  }]
};
var chevronUp = defineComponent({
  name: "ChevronUpIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-chevron-up", className.value]);
    var finalStyle = computed(() => _objectSpread$23(_objectSpread$23({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$i, finalProps.value);
  }
});
function ownKeys$23(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$22(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$23(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$h = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
      "fillOpacity": 0.9
    }
  }]
};
var closeCircleFilled = defineComponent({
  name: "CloseCircleFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-close-circle-filled", className.value]);
    var finalStyle = computed(() => _objectSpread$22(_objectSpread$22({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$h, finalProps.value);
  }
});
function ownKeys$22(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$21(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$22(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$g = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
      "fillOpacity": 0.9
    }
  }]
};
var close = defineComponent({
  name: "CloseIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-close", className.value]);
    var finalStyle = computed(() => _objectSpread$21(_objectSpread$21({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$g, finalProps.value);
  }
});
function ownKeys$21(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$20(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$21(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$f = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
      "fillOpacity": 0.9
    }
  }]
};
var _delete = defineComponent({
  name: "DeleteIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-delete", className.value]);
    var finalStyle = computed(() => _objectSpread$20(_objectSpread$20({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$f, finalProps.value);
  }
});
function ownKeys$20(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1$(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$20(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$e = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
      "fillOpacity": 0.9
    }
  }]
};
var ellipsis = defineComponent({
  name: "EllipsisIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-ellipsis", className.value]);
    var finalStyle = computed(() => _objectSpread$1$(_objectSpread$1$({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$e, finalProps.value);
  }
});
function ownKeys$1$(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1_(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1$(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$d = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
      "fillOpacity": 0.9
    }
  }]
};
var errorCircleFilled = defineComponent({
  name: "ErrorCircleFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-error-circle-filled", className.value]);
    var finalStyle = computed(() => _objectSpread$1_(_objectSpread$1_({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$d, finalProps.value);
  }
});
function ownKeys$1_(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1Z(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1_(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$c = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8.5 2h-1v9h1V2zm.1 10.8H7.4V14h1.2v-1.2z",
      "fillOpacity": 0.9
    }
  }]
};
var error = defineComponent({
  name: "ErrorIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-error", className.value]);
    var finalStyle = computed(() => _objectSpread$1Z(_objectSpread$1Z({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$c, finalProps.value);
  }
});
function ownKeys$1Z(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1Y(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1Z(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$b = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
      "fillOpacity": 0.9
    }
  }]
};
var fileCopy = defineComponent({
  name: "FileCopyIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-file-copy", className.value]);
    var finalStyle = computed(() => _objectSpread$1Y(_objectSpread$1Y({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$b, finalProps.value);
  }
});
function ownKeys$1Y(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1X(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1Y(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$a = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
      "fillOpacity": 0.9
    }
  }]
};
var filter = defineComponent({
  name: "FilterIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-filter", className.value]);
    var finalStyle = computed(() => _objectSpread$1X(_objectSpread$1X({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$a, finalProps.value);
  }
});
function ownKeys$1X(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1W(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1X(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$9 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
      "fillOpacity": 0.9
    }
  }]
};
var helpCircleFilled = defineComponent({
  name: "HelpCircleFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-help-circle-filled", className.value]);
    var finalStyle = computed(() => _objectSpread$1W(_objectSpread$1W({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$9, finalProps.value);
  }
});
function ownKeys$1W(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1V(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1W(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$8 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
      "fillOpacity": 0.9
    }
  }]
};
var infoCircleFilled = defineComponent({
  name: "InfoCircleFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-info-circle-filled", className.value]);
    var finalStyle = computed(() => _objectSpread$1V(_objectSpread$1V({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$8, finalProps.value);
  }
});
function ownKeys$1V(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1U(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1V(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$7 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M5 8.5h6v-1H5v1z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
      "fillOpacity": 0.9
    }
  }]
};
var minusRectangle = defineComponent({
  name: "MinusRectangleIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-minus-rectangle", className.value]);
    var finalStyle = computed(() => _objectSpread$1U(_objectSpread$1U({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$7, finalProps.value);
  }
});
function ownKeys$1U(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1T(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1U(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$6 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M3.5 7.35h9v1.3h-9v-1.3z",
      "fillOpacity": 0.9
    }
  }]
};
var remove = defineComponent({
  name: "RemoveIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-remove", className.value]);
    var finalStyle = computed(() => _objectSpread$1T(_objectSpread$1T({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$6, finalProps.value);
  }
});
function ownKeys$1T(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1S(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1T(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$5 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
      "fillOpacity": 0.9
    }
  }]
};
var round$1 = defineComponent({
  name: "RoundIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-round", className.value]);
    var finalStyle = computed(() => _objectSpread$1S(_objectSpread$1S({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$5, finalProps.value);
  }
});
function ownKeys$1S(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1R(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1S(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$4 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
      "fillOpacity": 0.9
    }
  }]
};
var search = defineComponent({
  name: "SearchIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-search", className.value]);
    var finalStyle = computed(() => _objectSpread$1R(_objectSpread$1R({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$4, finalProps.value);
  }
});
function ownKeys$1R(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1Q(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1R(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$3 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
      "fillOpacity": 0.9
    }
  }]
};
var setting = defineComponent({
  name: "SettingIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-setting", className.value]);
    var finalStyle = computed(() => _objectSpread$1Q(_objectSpread$1Q({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$3, finalProps.value);
  }
});
function ownKeys$1Q(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1P(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1Q(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$2 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
      "fillOpacity": 0.9
    }
  }]
};
var timeFilled = defineComponent({
  name: "TimeFilledIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-time-filled", className.value]);
    var finalStyle = computed(() => _objectSpread$1P(_objectSpread$1P({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$2, finalProps.value);
  }
});
function ownKeys$1P(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1O(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1P(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element$1 = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
      "fillOpacity": 0.9
    }
  }]
};
var time = defineComponent({
  name: "TimeIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-time", className.value]);
    var finalStyle = computed(() => _objectSpread$1O(_objectSpread$1O({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element$1, finalProps.value);
  }
});
function ownKeys$1O(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1N(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1O(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var element = {
  "tag": "svg",
  "attrs": {
    "fill": "none",
    "viewBox": "0 0 16 16",
    "width": "1em",
    "height": "1em"
  },
  "children": [{
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
      "fillOpacity": 0.9
    }
  }, {
    "tag": "path",
    "attrs": {
      "fill": "currentColor",
      "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
      "fillOpacity": 0.9
    }
  }]
};
var upload = defineComponent({
  name: "UploadIcon",
  props: {
    size: {
      type: String
    },
    onClick: {
      type: Function
    }
  },
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var {
      className,
      style
    } = useSizeProps(propsSize);
    var finalCls = computed(() => ["t-icon", "t-icon-upload", className.value]);
    var finalStyle = computed(() => _objectSpread$1N(_objectSpread$1N({}, style.value), attrs.style));
    var finalProps = computed(() => ({
      class: finalCls.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props$onClick;
        return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
          e
        });
      }
    }));
    return () => renderFn(element, finalProps.value);
  }
});
function checkScriptAndLoad(url, className) {
  if (!document || !url || typeof url !== "string")
    return;
  if (document.querySelectorAll(".".concat(className, '[src="').concat(url, '"]')).length > 0) {
    return;
  }
  var svg = document.createElement("script");
  svg.setAttribute("class", className);
  svg.setAttribute("src", url);
  document.body.appendChild(svg);
}
var props$15 = {
  name: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    default: void 0
  },
  url: {
    type: [String, Array],
    default: void 0
  },
  loadDefaultIcons: {
    type: Boolean,
    default: true
  },
  onClick: Function
};
function ownKeys$1N(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1M(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1N(Object(source), true).forEach(function(key) {
      _defineProperty$1(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var {
  classPrefix
} = ConfigContext;
var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.0.3/fonts/index.js";
var _Icon = defineComponent({
  name: "Icon",
  props: props$15,
  setup(props2, _ref) {
    var {
      attrs
    } = _ref;
    var propsSize = computed(() => props2.size);
    var name2 = computed(() => props2.name || "");
    var {
      className: sizeClassName,
      style: sizeStyle
    } = useSizeProps(propsSize);
    var finalUrl = computed(() => {
      var url = [];
      url = props2.url instanceof Array ? props2.url.concat() : [props2.url];
      if (props2.loadDefaultIcons)
        url.push(CDN_ICONFONT_URL);
      return url;
    });
    var classNames2 = computed(() => ["".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name2.value), sizeClassName.value]);
    var finalStyle = computed(() => _objectSpread$1M(_objectSpread$1M({}, sizeStyle.value), attrs.style));
    Array.from(new Set(finalUrl.value)).forEach((url) => {
      checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
    });
    var finalProps = computed(() => ({
      class: classNames2.value,
      style: finalStyle.value,
      onClick: (e) => {
        var _props2$onClick;
        return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
          e
        });
      }
    }));
    return () => h("svg", finalProps.value, h("use", {
      href: props2.url ? "#".concat(name2.value) : "#t-icon-".concat(name2.value)
    }));
  }
});
var Icon$1 = _Icon;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Icon = withInstall(Icon$1, "TIcon");
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$14 = {
  align: {
    type: String,
    "default": "top",
    validator: function validator9(val) {
      return ["top", "middle", "bottom"].includes(val);
    }
  },
  gutter: {
    type: [Number, Object, Array],
    "default": 0
  },
  justify: {
    type: String,
    "default": "start",
    validator: function validator10(val) {
      return ["start", "end", "center", "space-around", "space-between"].includes(val);
    }
  },
  tag: {
    type: String,
    "default": "div"
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var calcSize = function calcSize2(width) {
  var size2 = "xs";
  if (width < 768) {
    size2 = "xs";
  } else if (width >= 768 && width < 992) {
    size2 = "sm";
  } else if (width >= 992 && width < 1200) {
    size2 = "md";
  } else if (width >= 1200 && width < 1400) {
    size2 = "lg";
  } else if (width >= 1400 && width < 1880) {
    size2 = "xl";
  } else {
    size2 = "xxl";
  }
  return size2;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _excluded$4 = ["from", "to", "direction"];
function ownKeys$1M(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1L(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1M(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function omit$1(obj, fields) {
  var shallowCopy = _objectSpread$1L({}, obj);
  for (var i = 0; i < fields.length; i++) {
    var key = fields[i];
    delete shallowCopy[key];
  }
  return shallowCopy;
}
function firstUpperCase$1(str) {
  return str.toLowerCase().replace(/( |^)[a-z]/g, function(_char) {
    return _char.toUpperCase();
  });
}
function getBackgroundColor(color) {
  if (typeof color === "string") {
    return color;
  }
  if (Array.isArray(color)) {
    if (color[0] && color[0][0] === "#") {
      color.unshift("90deg");
    }
    return "linear-gradient( ".concat(color.join(","), " )");
  }
  var from = color.from, to = color.to, _color$direction = color.direction, direction = _color$direction === void 0 ? "to right" : _color$direction, rest = _objectWithoutProperties$1(color, _excluded$4);
  var keys2 = Object.keys(rest);
  if (keys2.length) {
    keys2 = keys2.sort(function(a, b) {
      return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
    });
    var tempArr = keys2.map(function(key) {
      return "".concat(rest[key], " ").concat(key);
    });
    return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
  }
  return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
}
function getPropsApiByEvent(eventName) {
  return camelCase_1("on-".concat(eventName));
}
function getCharacterLength(str, maxCharacter) {
  var hasMaxCharacter = typeof maxCharacter === "number";
  if (!str || str.length === 0) {
    if (hasMaxCharacter) {
      return {
        length: 0,
        characters: str
      };
    }
    return 0;
  }
  var len2 = 0;
  for (var i = 0; i < str.length; i++) {
    var currentStringLength = 0;
    if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
      currentStringLength = 2;
    } else {
      currentStringLength = 1;
    }
    if (hasMaxCharacter && len2 + currentStringLength > maxCharacter) {
      return {
        length: len2,
        characters: str.slice(0, i)
      };
    }
    len2 += currentStringLength;
  }
  if (hasMaxCharacter) {
    return {
      length: len2,
      characters: str
    };
  }
  return len2;
}
function pxCompat(param) {
  return typeof param === "number" ? "".concat(param, "px") : param;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useEmitEvent() {
  var instance = getCurrentInstance();
  return function emitEvent2(eventName) {
    var emitEventMethodName;
    if (typeof eventName === "string") {
      emitEventMethodName = getPropsApiByEvent(eventName);
    }
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (typeof instance.props[emitEventMethodName] === "function") {
      var _instance$props;
      (_instance$props = instance.props)[emitEventMethodName].apply(_instance$props, args);
    } else {
      instance.emit.apply(instance, [eventName].concat(args));
    }
  };
}
function useListener(type, listener) {
  onMounted(function() {
    window.addEventListener(type, listener);
  });
  onBeforeUnmount(function() {
    window.removeEventListener(type, listener);
  });
}
function useResize(listener, observer) {
  useListener("resize", listener);
  if (!window.ResizeObserver || !observer)
    return;
  var resizeObserver = new window.ResizeObserver(listener);
  resizeObserver.observe(observer);
  onBeforeUnmount(function() {
    resizeObserver.disconnect();
  });
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1L(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1K(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1L(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useRowSize() {
  var size2 = ref(calcSize(window.innerWidth));
  var updateSize = function updateSize2() {
    size2.value = calcSize(window.innerWidth);
  };
  useListener("resize", updateSize);
  return size2;
}
function getRowClasses(name2, props2) {
  var _ref;
  var justify = props2.justify, align = props2.align;
  return [name2, (_ref = {}, _defineProperty$3(_ref, "".concat(name2, "--").concat(justify), justify), _defineProperty$3(_ref, "".concat(name2, "--").concat(align), align), _ref)];
}
function calcRowStyle(gutter, currentSize) {
  var rowStyle = {};
  var getMarginStyle = function getMarginStyle2(gutter2) {
    return Object.assign(rowStyle, {
      marginLeft: "".concat(gutter2 / -2, "px"),
      marginRight: "".concat(gutter2 / -2, "px")
    });
  };
  var getRowGapStyle = function getRowGapStyle2(gutter2) {
    return Object.assign(rowStyle, {
      rowGap: "".concat(gutter2, "px")
    });
  };
  var strategyMap = {
    isNumber: function isNumber2(gutter2) {
      if (typeof gutter2 === "number") {
        getMarginStyle(gutter2);
      }
    },
    isArray: function isArray2(gutter2) {
      if (Array.isArray(gutter2) && gutter2.length) {
        strategyMap.isNumber(gutter2[0]);
        if (typeof gutter2[1] === "number") {
          getRowGapStyle(gutter2[1]);
        }
        if (isObject_1(gutter2[0]) && gutter2[0][currentSize] !== void 0) {
          getMarginStyle(gutter2[0][currentSize]);
        }
        if (isObject_1(gutter2[1]) && gutter2[1][currentSize] !== void 0) {
          getRowGapStyle(gutter2[1][currentSize]);
        }
      }
    },
    isObject: function isObject$12(gutter2) {
      if (isObject_1(gutter2) && gutter2[currentSize]) {
        if (Array.isArray(gutter2) && gutter2.length) {
          getMarginStyle(gutter2[currentSize][0]);
          getRowGapStyle(gutter2[currentSize][1]);
        } else {
          getMarginStyle(gutter2[currentSize]);
        }
      }
    }
  };
  Object.keys(strategyMap).forEach(function(item) {
    strategyMap[item](gutter);
  });
  return rowStyle;
}
function parseFlex(flex) {
  if (typeof flex === "number") {
    return "".concat(flex, " ").concat(flex, " 0");
  }
  if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
    return "0 0 ".concat(flex);
  }
  return flex;
}
function calcColPadding(gutter, currentSize) {
  var paddingObj = {};
  var getPaddingStyle = function getPaddingStyle2(gutter2) {
    return Object.assign(paddingObj, {
      paddingLeft: "".concat(gutter2 / 2, "px"),
      paddingRight: "".concat(gutter2 / 2, "px")
    });
  };
  var strategyMap = {
    isNumber: function isNumber2(gutter2) {
      if (typeof gutter2 === "number") {
        getPaddingStyle(gutter2);
      }
    },
    isArray: function isArray2(gutter2) {
      if (Array.isArray(gutter2) && gutter2.length) {
        if (typeof gutter2[0] === "number") {
          getPaddingStyle(gutter2[0]);
        }
        if (isObject_1(gutter2[0]) && gutter2[0][currentSize]) {
          getPaddingStyle(gutter2[0][currentSize]);
        }
      }
    },
    isObject: function isObject$12(gutter2) {
      if (isObject_1(gutter2) && gutter2[currentSize]) {
        getPaddingStyle(gutter2[currentSize]);
      }
    }
  };
  Object.keys(strategyMap).forEach(function(item) {
    strategyMap[item](gutter);
  });
  return paddingObj;
}
function getColClasses(name2, props2) {
  var _objectSpread3;
  var span = props2.span, order2 = props2.order, offset2 = props2.offset, push = props2.push, pull = props2.pull;
  var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
  var ColSizeClasses = allSizes.reduce(function(acc, currSize) {
    var _objectSpread22;
    var sizeProp = props2[currSize];
    var sizeObject = {};
    if (typeof sizeProp === "number") {
      sizeObject.span = sizeProp;
    } else if (isObject_1(sizeProp)) {
      sizeObject = sizeProp || {};
    }
    return _objectSpread$1K(_objectSpread$1K({}, acc), {}, (_objectSpread22 = {}, _defineProperty$3(_objectSpread22, "".concat(name2, "-").concat(currSize, "-").concat(sizeObject.span), sizeObject.span !== void 0), _defineProperty$3(_objectSpread22, "".concat(name2, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), _defineProperty$3(_objectSpread22, "".concat(name2, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), _defineProperty$3(_objectSpread22, "".concat(name2, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), _defineProperty$3(_objectSpread22, "".concat(name2, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0), _objectSpread22));
  }, {});
  return _objectSpread$1K((_objectSpread3 = {}, _defineProperty$3(_objectSpread3, "".concat(name2), true), _defineProperty$3(_objectSpread3, "".concat(name2, "-").concat(span), span !== void 0), _defineProperty$3(_objectSpread3, "".concat(name2, "-order-").concat(order2), order2), _defineProperty$3(_objectSpread3, "".concat(name2, "-offset-").concat(offset2), offset2), _defineProperty$3(_objectSpread3, "".concat(name2, "-push-").concat(push), push), _defineProperty$3(_objectSpread3, "".concat(name2, "-pull-").concat(pull), pull), _objectSpread3), ColSizeClasses);
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1K(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1J(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1K(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$s(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _Row = defineComponent({
  name: "TRow",
  props: _objectSpread$1J({}, props$14),
  setup: function setup5(props2) {
    provide("rowContext", {
      gutter: props2.gutter
    });
    var size2 = useRowSize();
    var COMPONENT_NAME2 = usePrefixClass("row");
    var rowClasses = computed(function() {
      return getRowClasses(COMPONENT_NAME2.value, props2);
    });
    var rowStyle = computed(function() {
      return calcRowStyle(props2.gutter, size2.value);
    });
    return {
      rowStyle,
      size: size2,
      rowClasses
    };
  },
  render: function render5() {
    var _slot;
    var TAG = this.tag, rowClasses = this.rowClasses, rowStyle = this.rowStyle;
    return createVNode(TAG, {
      "class": rowClasses,
      "style": rowStyle
    }, _isSlot$s(_slot = renderTNodeJSX(this, "default")) ? _slot : {
      "default": function _default65() {
        return [_slot];
      }
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$13 = {
  flex: {
    type: [String, Number]
  },
  lg: {
    type: [Number, Object]
  },
  md: {
    type: [Number, Object]
  },
  offset: {
    type: Number,
    "default": 0
  },
  order: {
    type: Number,
    "default": 0
  },
  pull: {
    type: Number,
    "default": 0
  },
  push: {
    type: Number,
    "default": 0
  },
  sm: {
    type: [Number, Object]
  },
  span: {
    type: Number,
    "default": 12
  },
  tag: {
    type: String,
    "default": "div"
  },
  xl: {
    type: [Number, Object]
  },
  xs: {
    type: [Number, Object]
  },
  xxl: {
    type: [Number, Object]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1J(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1I(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1J(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$r(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _Col = defineComponent({
  name: "TCol",
  inject: ["rowContext"],
  props: _objectSpread$1I({}, props$13),
  setup: function setup6(props2) {
    var COMPONENT_NAME2 = usePrefixClass("col");
    var rowContext = inject("rowContext", /* @__PURE__ */ Object.create(null));
    var size2 = useRowSize();
    var colClasses = computed(function() {
      return getColClasses(COMPONENT_NAME2.value, props2);
    });
    var colStyle = computed(function() {
      var colStyle2 = {};
      var flex = props2.flex;
      flex && (colStyle2.flex = parseFlex(flex));
      if (rowContext) {
        var rowGutter = rowContext.gutter;
        Object.assign(colStyle2, calcColPadding(rowGutter, size2.value));
      }
      return colStyle2;
    });
    return {
      size: size2,
      colClasses,
      colStyle
    };
  },
  render: function render6() {
    var _slot;
    var colStyle = this.colStyle, TAG = this.tag, colClasses = this.colClasses;
    return createVNode(TAG, {
      "class": colClasses,
      "style": colStyle
    }, _isSlot$r(_slot = renderTNodeJSX(this, "default")) ? _slot : {
      "default": function _default65() {
        return [_slot];
      }
    });
  }
});
var index$O = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Row = withInstall(_Row);
var Col = withInstall(_Col);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Layout = defineComponent({
  name: "TLayout",
  setup: function setup7() {
    var hasSide = ref(false);
    var COMPONENT_NAME2 = usePrefixClass("layout");
    var classes6 = computed(function() {
      return [COMPONENT_NAME2.value, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--with-sider"), hasSide.value)];
    });
    provide("layout", {
      hasSide
    });
    return {
      classes: classes6
    };
  },
  render: function render7() {
    return createVNode("section", {
      "class": this.classes
    }, [renderTNodeJSX(this, "default")]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$12 = {
  height: {
    type: String,
    "default": ""
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Header = defineComponent({
  name: "THeader",
  props: props$12,
  setup: function setup8() {
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2
    };
  },
  render: function render8() {
    var styles = this.height ? {
      height: this.height
    } : {};
    return createVNode("header", {
      "class": "".concat(this.classPrefix, "-layout__header"),
      "style": styles
    }, [renderTNodeJSX(this, "default")]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$11 = {
  height: {
    type: String,
    "default": ""
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Footer = defineComponent({
  name: "TFooter",
  props: props$11,
  setup: function setup9() {
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2
    };
  },
  render: function render9() {
    var styles = this.height ? {
      height: this.height
    } : {};
    return createVNode("footer", {
      "class": "".concat(this.classPrefix, "-layout__footer"),
      "style": styles
    }, [renderTNodeJSX(this, "default")]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$10 = {
  width: {
    type: String,
    "default": ""
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Aside = defineComponent({
  name: "TAside",
  props: props$10,
  setup: function setup10() {
    var _inject = inject("layout", /* @__PURE__ */ Object.create(null)), hasSide = _inject.hasSide;
    var classPrefix2 = usePrefixClass();
    if (!hasSide)
      return;
    onMounted(function() {
      hasSide.value = true;
    });
    onUnmounted(function() {
      hasSide.value = false;
    });
    return {
      classPrefix: classPrefix2
    };
  },
  render: function render10() {
    var classPrefix2 = this.classPrefix;
    var styles = this.width ? {
      width: this.width
    } : {};
    return createVNode("aside", {
      "class": "".concat(classPrefix2, "-layout__sider"),
      "style": styles
    }, [renderTNodeJSX(this, "default")]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Content = defineComponent({
  name: "TContent",
  setup: function setup11() {
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2
    };
  },
  render: function render11() {
    return createVNode("main", {
      "class": "".concat(this.classPrefix, "-layout__content")
    }, [renderTNodeJSX(this, "default")]);
  }
});
var index$N = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Aside = withInstall(_Aside);
var Layout = withInstall(_Layout);
var Header = withInstall(_Header);
var Footer = withInstall(_Footer);
var Content = withInstall(_Content);
function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
  try {
    var info4 = gen[key](arg);
    var value6 = info4.value;
  } catch (error5) {
    reject(error5);
    return;
  }
  if (info4.done) {
    resolve2(value6);
  } else {
    Promise.resolve(value6).then(_next, _throw);
  }
}
function _asyncToGenerator(fn2) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve2, reject) {
      var gen = fn2.apply(self2, args);
      function _next(value6) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value6);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
var runtime = { exports: {} };
(function(module) {
  var runtime2 = function(exports) {
    var Op = Object.prototype;
    var hasOwn2 = Op.hasOwnProperty;
    var undefined$1;
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value6) {
      Object.defineProperty(obj, key, {
        value: value6,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function(obj, key, value6) {
        return obj[key] = value6;
      };
    }
    function wrap(innerFn, outerFn, self2, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);
      generator._invoke = makeInvokeMethod(innerFn, self2, context);
      return generator;
    }
    exports.wrap = wrap;
    function tryCatch(fn2, obj, arg) {
      try {
        return { type: "normal", arg: fn2.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    var ContinueSentinel = {};
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
      return this;
    });
    var getProto2 = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto2 && getProto2(getProto2(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn2.call(NativeIteratorPrototype, iteratorSymbol)) {
      IteratorPrototype = NativeIteratorPrototype;
    }
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }
    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };
    exports.awrap = function(arg) {
      return { __await: arg };
    };
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve2, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value6 = result.value;
          if (value6 && typeof value6 === "object" && hasOwn2.call(value6, "__await")) {
            return PromiseImpl.resolve(value6.__await).then(function(value7) {
              invoke("next", value7, resolve2, reject);
            }, function(err) {
              invoke("throw", err, resolve2, reject);
            });
          }
          return PromiseImpl.resolve(value6).then(function(unwrapped) {
            result.value = unwrapped;
            resolve2(result);
          }, function(error5) {
            return invoke("throw", error5, resolve2, reject);
          });
        }
      }
      var previousPromise;
      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve2, reject) {
            invoke(method, arg, resolve2, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
      this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;
    exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0)
        PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
        return result.done ? result.value : iter.next();
      });
    };
    function makeInvokeMethod(innerFn, self2, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }
        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }
          return doneResult();
        }
        context.method = method;
        context.arg = arg;
        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel)
                continue;
              return delegateResult;
            }
          }
          if (context.method === "next") {
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }
            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }
          state = GenStateExecuting;
          var record = tryCatch(innerFn, self2, context);
          if (record.type === "normal") {
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
            if (record.arg === ContinueSentinel) {
              continue;
            }
            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        context.delegate = null;
        if (context.method === "throw") {
          if (delegate.iterator["return"]) {
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);
            if (context.method === "throw") {
              return ContinueSentinel;
            }
          }
          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }
        return ContinueSentinel;
      }
      var record = tryCatch(method, delegate.iterator, context.arg);
      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }
      var info4 = record.arg;
      if (!info4) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }
      if (info4.done) {
        context[delegate.resultName] = info4.value;
        context.next = delegate.nextLoc;
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        return info4;
      }
      context.delegate = null;
      return ContinueSentinel;
    }
    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator");
    define(Gp, iteratorSymbol, function() {
      return this;
    });
    define(Gp, "toString", function() {
      return "[object Generator]";
    });
    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };
      if (1 in locs) {
        entry.catchLoc = locs[1];
      }
      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }
      this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }
    exports.keys = function(object) {
      var keys2 = [];
      for (var key in object) {
        keys2.push(key);
      }
      keys2.reverse();
      return function next() {
        while (keys2.length) {
          var key2 = keys2.pop();
          if (key2 in object) {
            next.value = key2;
            next.done = false;
            return next;
          }
        }
        next.done = true;
        return next;
      };
    };
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }
        if (typeof iterable.next === "function") {
          return iterable;
        }
        if (!isNaN(iterable.length)) {
          var i = -1, next = function next2() {
            while (++i < iterable.length) {
              if (hasOwn2.call(iterable, i)) {
                next2.value = iterable[i];
                next2.done = false;
                return next2;
              }
            }
            next2.value = undefined$1;
            next2.done = true;
            return next2;
          };
          return next.next = next;
        }
      }
      return { next: doneResult };
    }
    exports.values = values;
    function doneResult() {
      return { value: undefined$1, done: true };
    }
    Context.prototype = {
      constructor: Context,
      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);
        if (!skipTempReset) {
          for (var name2 in this) {
            if (name2.charAt(0) === "t" && hasOwn2.call(this, name2) && !isNaN(+name2.slice(1))) {
              this[name2] = undefined$1;
            }
          }
        }
      },
      stop: function() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }
        return this.rval;
      },
      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }
        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          if (caught) {
            context.method = "next";
            context.arg = undefined$1;
          }
          return !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;
          if (entry.tryLoc === "root") {
            return handle("end");
          }
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn2.call(entry, "catchLoc");
            var hasFinally = hasOwn2.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn2.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          finallyEntry = null;
        }
        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;
        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }
        return this.complete(record);
      },
      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }
        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
        return ContinueSentinel;
      },
      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName,
          nextLoc
        };
        if (this.method === "next") {
          this.arg = undefined$1;
        }
        return ContinueSentinel;
      }
    };
    return exports;
  }(module.exports);
  try {
    regeneratorRuntime = runtime2;
  } catch (accidentalStrictMode) {
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime2;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime2);
    }
  }
})(runtime);
var regenerator = runtime.exports;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$$ = {
  container: {
    type: [String, Function],
    "default": function _default() {
      return function() {
        return window;
      };
    }
  },
  offsetBottom: {
    type: Number,
    "default": 0
  },
  offsetTop: {
    type: Number,
    "default": 0
  },
  zIndex: {
    type: Number
  },
  onFixedChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Affix = defineComponent({
  name: "TAffix",
  props: props$$,
  emits: ["fixedChange"],
  setup: function setup12(props2, context) {
    var COMPONENT_NAME2 = usePrefixClass("affix");
    var affixRef = ref(null);
    var fixedTop = ref(false);
    var scrollContainer = ref();
    var containerHeight = ref(0);
    var ticking = ref(false);
    var contentStyle2 = ref({});
    var calcInitValue = function calcInitValue2() {
      var _containerHeight = 0;
      if (scrollContainer.value instanceof Window) {
        _containerHeight = scrollContainer.value.innerHeight;
      } else {
        _containerHeight = scrollContainer.value.clientHeight;
      }
      containerHeight.value = _containerHeight - (affixRef.value.clientHeight || 0);
      handleScroll3();
    };
    var handleScroll3 = function handleScroll4() {
      if (!ticking.value) {
        window.requestAnimationFrame(function() {
          var _affixRef$value$getBo = affixRef.value.getBoundingClientRect(), top2 = _affixRef$value$getBo.top;
          var containerTop = 0;
          if (scrollContainer.value instanceof HTMLElement) {
            containerTop = scrollContainer.value.getBoundingClientRect().top;
          }
          var calcTop = top2 - containerTop;
          var calcBottom = containerTop + containerHeight.value - props2.offsetBottom;
          if (props2.offsetTop !== void 0 && calcTop <= props2.offsetTop) {
            fixedTop.value = containerTop + props2.offsetTop;
          } else if (props2.offsetBottom !== void 0 && top2 >= calcBottom) {
            fixedTop.value = calcBottom;
          } else {
            fixedTop.value = false;
          }
          ticking.value = false;
        });
        ticking.value = true;
      }
    };
    watch(function() {
      return props2.offsetTop;
    }, function() {
      calcInitValue();
    });
    watch(function() {
      return props2.offsetBottom;
    }, function() {
      calcInitValue();
    });
    watch([fixedTop], function(_ref) {
      var _ref2 = _slicedToArray(_ref, 1), val = _ref2[0];
      context.emit("fixedChange", val !== false, {
        top: val
      });
      if (isFunction_1(props2.onFixedChange))
        props2.onFixedChange(val !== false, {
          top: Number(val)
        });
    });
    var getContentStyle = function getContentStyle2() {
      var _affixRef$value = affixRef.value, clientWidth = _affixRef$value.clientWidth, clientHeight = _affixRef$value.clientHeight;
      contentStyle2.value = {
        width: "".concat(clientWidth, "px"),
        height: "".concat(clientHeight, "px")
      };
    };
    onMounted(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return nextTick();
            case 2:
              scrollContainer.value = getScrollContainer(props2.container);
              calcInitValue();
              getContentStyle();
              on$1(scrollContainer.value, "scroll", handleScroll3);
              on$1(window, "resize", calcInitValue);
              if (!(scrollContainer.value instanceof Window))
                on$1(window, "scroll", handleScroll3);
            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    onBeforeUnmount(function() {
      if (!scrollContainer.value)
        return;
      off$1(scrollContainer.value, "scroll", handleScroll3);
      off$1(window, "resize", calcInitValue);
      if (!(scrollContainer.value instanceof Window))
        off$1(window, "scroll", handleScroll3);
    });
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      affixRef,
      fixedTop,
      scrollContainer,
      contentStyle: contentStyle2
    };
  },
  render: function render12() {
    var fixedTop = this.fixedTop, zIndex = this.zIndex, contentStyle2 = this.contentStyle;
    return createVNode("div", {
      "style": fixedTop !== false ? contentStyle2 : {},
      "ref": "affixRef"
    }, [fixedTop !== false ? createVNode("div", {
      "class": this.COMPONENT_NAME,
      "style": {
        zIndex,
        top: "".concat(fixedTop, "px")
      }
    }, [renderTNodeJSX(this, "default")]) : renderTNodeJSX(this, "default")]);
  }
});
var index$M = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Affix = withInstall(_Affix);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
function getOffsetTop(target, container) {
  var _target$getBoundingCl = target.getBoundingClientRect(), top2 = _target$getBoundingCl.top;
  if (container === window) {
    return top2 - document.documentElement.clientTop;
  }
  return top2 - container.getBoundingClientRect().top;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$_ = {
  affixProps: {
    type: Object
  },
  bounds: {
    type: Number,
    "default": 5
  },
  container: {
    type: [String, Function],
    "default": function _default2() {
      return function() {
        return window;
      };
    }
  },
  cursor: {
    type: Function
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator11(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  targetOffset: {
    type: Number,
    "default": 0
  },
  onChange: Function,
  onClick: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function emitEvent(vm, eventName) {
  var emitEventMethodName;
  if (typeof eventName === "string") {
    emitEventMethodName = getPropsApiByEvent(eventName);
  }
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  if (typeof vm.$props[emitEventMethodName] === "function") {
    var _vm$$props;
    (_vm$$props = vm.$props)[emitEventMethodName].apply(_vm$$props, args);
  } else {
    vm.$emit.apply(vm, [eventName].concat(args));
  }
}
var index$L = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1I(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1H(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1I(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$q(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _Anchor = defineComponent({
  name: "TAnchor",
  provide: function provide2() {
    return {
      tAnchor: this
    };
  },
  props: _objectSpread$1H({}, props$_),
  emits: ["change", "click"],
  setup: function setup13() {
    var COMPONENT_NAME2 = usePrefixClass("anchor");
    var ANCHOR_LINE_CLASSNAME = usePrefixClass("anchor__line");
    var ANCHOR_LINE_CURSOR_CLASSNAME = usePrefixClass("anchor__line-cursor");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      ANCHOR_LINE_CLASSNAME,
      ANCHOR_LINE_CURSOR_CLASSNAME,
      STATUS,
      SIZE
    };
  },
  data: function data() {
    return {
      links: [],
      active: "",
      scrollContainer: null,
      activeLineStyle: {}
    };
  },
  watch: {
    attach: function attach() {
      if (this.scrollContainer) {
        off$1(this.scrollContainer, "scroll", this.handleScroll);
      }
      this.getScrollContainer();
    }
  },
  mounted: function mounted2() {
    var _this = this;
    return _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
      var active;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              active = _this.active;
              _this.getScrollContainer();
              if (!active) {
                _context.next = 6;
                break;
              }
              _context.next = 5;
              return nextTick();
            case 5:
              _this.handleScrollTo(active);
            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  unmounted: function unmounted() {
    if (!this.scrollContainer)
      return;
    off$1(this.scrollContainer, "scroll", this.handleScroll);
  },
  methods: {
    getScrollContainer: function getScrollContainer$1() {
      var container = this.container;
      this.scrollContainer = getScrollContainer(container);
      on$1(this.scrollContainer, "scroll", this.handleScroll);
      this.handleScroll();
    },
    getAnchorTarget: function getAnchorTarget(link) {
      var matcher = link.match(ANCHOR_SHARP_REGEXP);
      if (!matcher) {
        return;
      }
      var anchor = document.getElementById(matcher[1]);
      if (!anchor) {
        return;
      }
      return anchor;
    },
    registerLink: function registerLink(link) {
      var links = this.links;
      if (!ANCHOR_SHARP_REGEXP.test(link) || links.indexOf(link) !== -1) {
        return;
      }
      links.push(link);
    },
    unregisterLink: function unregisterLink(link) {
      this.links = this.links.filter(function(each) {
        return each !== link;
      });
    },
    setCurrentActiveLink: function setCurrentActiveLink(link) {
      var _this2 = this;
      return _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2() {
        var active;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                active = _this2.active;
                if (!(active === link)) {
                  _context2.next = 3;
                  break;
                }
                return _context2.abrupt("return");
              case 3:
                _this2.active = link;
                _this2.emitChange(link, active);
                _context2.next = 7;
                return nextTick();
              case 7:
                _this2.updateActiveLine();
              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    updateActiveLine: function updateActiveLine() {
      var ele = this.$el.querySelector(".".concat(this.STATUS.active, ">a"));
      if (!ele) {
        this.activeLineStyle = null;
        return;
      }
      var top2 = ele.offsetTop, height = ele.offsetHeight;
      this.activeLineStyle = {
        top: "".concat(top2, "px"),
        height: "".concat(height, "px"),
        opacity: 1
      };
    },
    emitChange: function emitChange(currentLink, prevLink) {
      emitEvent(this, "change", currentLink, prevLink);
    },
    handleLinkClick: function handleLinkClick(link) {
      emitEvent(this, "click", link);
    },
    handleScrollTo: function handleScrollTo(link) {
      var _this3 = this;
      return _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee3() {
        var anchor, scrollContainer, targetOffset, scrollTop, offsetTop, top2;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                anchor = _this3.getAnchorTarget(link);
                _this3.setCurrentActiveLink(link);
                if (anchor) {
                  _context3.next = 4;
                  break;
                }
                return _context3.abrupt("return");
              case 4:
                _this3.handleScrollLock = true;
                scrollContainer = _this3.scrollContainer, targetOffset = _this3.targetOffset;
                scrollTop = getScroll(scrollContainer);
                offsetTop = getOffsetTop(anchor, scrollContainer);
                top2 = scrollTop + offsetTop - targetOffset;
                _context3.next = 11;
                return scrollTo(top2, {
                  container: scrollContainer
                });
              case 11:
                _this3.handleScrollLock = false;
              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    handleScroll: function handleScroll() {
      var _this4 = this;
      if (this.handleScrollLock)
        return;
      var links = this.links, bounds = this.bounds, targetOffset = this.targetOffset;
      var filters = [];
      var active = "";
      links.forEach(function(link) {
        var anchor = _this4.getAnchorTarget(link);
        if (!anchor) {
          return;
        }
        var top2 = getOffsetTop(anchor, _this4.scrollContainer);
        if (top2 < bounds + targetOffset) {
          filters.push({
            link,
            top: top2
          });
        }
      });
      if (filters.length) {
        var latest = filters.reduce(function(prev, cur) {
          return prev.top > cur.top ? prev : cur;
        });
        active = latest.link;
      }
      this.setCurrentActiveLink(active);
    },
    renderCursor: function renderCursor() {
      var titleContent = renderTNodeJSX(this, "cursor");
      return titleContent || createVNode("div", {
        "class": this.ANCHOR_LINE_CURSOR_CLASSNAME
      }, null);
    }
  },
  render: function render13() {
    var children = this.$slots["default"], size2 = this.size, affixProps = this.affixProps, activeLineStyle = this.activeLineStyle, $attrs = this.$attrs;
    var className = [this.COMPONENT_NAME, this.SIZE[size2]];
    var content = createVNode("div", mergeProps({
      "class": className
    }, $attrs), [createVNode("div", {
      "class": this.ANCHOR_LINE_CLASSNAME
    }, [createVNode("div", {
      "class": "".concat(this.ANCHOR_LINE_CURSOR_CLASSNAME, "-wrapper"),
      "style": activeLineStyle
    }, [this.renderCursor()])]), children && children(null)]);
    if (affixProps) {
      return createVNode(Affix, affixProps, _isSlot$q(content) ? content : {
        "default": function _default65() {
          return [content];
        }
      });
    }
    return content;
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$Z = {
  href: {
    type: String,
    "default": "",
    required: true
  },
  target: {
    type: String,
    "default": "_self",
    validator: function validator12(val) {
      return ["_self", "_blank", "_parent", "_top"].includes(val);
    }
  },
  title: {
    type: [String, Function],
    "default": ""
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1H(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1G(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1H(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _AnchorItem = defineComponent({
  name: "TAnchorItem",
  inject: {
    tAnchor: {
      "default": void 0
    }
  },
  props: _objectSpread$1G(_objectSpread$1G({}, props$Z), {}, {
    href: {
      type: String,
      required: true,
      validator: function validator13(v) {
        return ANCHOR_SHARP_REGEXP.test(v);
      }
    }
  }),
  setup: function setup14() {
    var CLASSNAME_PREFIX = usePrefixClass("anchor__item");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    return {
      STATUS,
      CLASSNAME_PREFIX
    };
  },
  watch: {
    href: {
      immediate: true,
      handler: function handler() {
        this.unregister();
        this.register();
      }
    }
  },
  mounted: function mounted3() {
    this.register();
  },
  unmounted: function unmounted2() {
    this.unregister();
  },
  methods: {
    register: function register() {
      this.tAnchor.registerLink(this.href);
    },
    unregister: function unregister() {
      var href = this.href;
      if (!href)
        return;
      this.tAnchor.unregisterLink(href);
    },
    handleClick: function handleClick(e) {
      var href = this.href, tAnchor = this.tAnchor, title = this.title;
      tAnchor.handleScrollTo(href);
      tAnchor.handleLinkClick({
        href,
        title: typeof title === "string" ? title : void 0,
        e
      });
    },
    renderTitle: function renderTitle() {
      var title = this.title, $slots = this.$slots;
      var titleSlot = $slots.title;
      var titleVal;
      if (typeof title === "string") {
        titleVal = title;
      } else if (typeof title === "function") {
        titleVal = title(h);
      } else if (titleSlot) {
        titleVal = titleSlot(null);
      }
      return titleVal;
    }
  },
  render: function render14() {
    var _wrapperClass;
    var href = this.href, target = this.target, $slots = this.$slots, tAnchor = this.tAnchor, CLASSNAME_PREFIX = this.CLASSNAME_PREFIX, STATUS = this.STATUS;
    var children = $slots["default"], titleSlot = $slots.title;
    var title = this.renderTitle();
    var titleAttr = typeof title === "string" ? title : null;
    var active = tAnchor.active === href;
    var wrapperClass = (_wrapperClass = {}, _defineProperty$3(_wrapperClass, CLASSNAME_PREFIX, true), _defineProperty$3(_wrapperClass, STATUS.active, active), _wrapperClass);
    var titleClass = _defineProperty$3({}, "".concat(CLASSNAME_PREFIX, "-link"), true);
    return createVNode("div", {
      "class": wrapperClass
    }, [createVNode("a", {
      "href": href,
      "title": titleAttr,
      "class": titleClass,
      "target": target,
      "onClick": this.handleClick
    }, [titleSlot ? titleSlot(null) : title]), children && children(null)]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var clipboard = { exports: {} };
/*!
 * clipboard.js v2.0.10
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory) {
    module.exports = factory();
  })(commonjsGlobal, function() {
    return function() {
      var __webpack_modules__ = {
        686: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__2) {
          __webpack_require__2.d(__webpack_exports__, {
            "default": function _default65() {
              return clipboard2;
            }
          });
          var tiny_emitter = __webpack_require__2(279);
          var tiny_emitter_default = /* @__PURE__ */ __webpack_require__2.n(tiny_emitter);
          var listen = __webpack_require__2(370);
          var listen_default = /* @__PURE__ */ __webpack_require__2.n(listen);
          var src_select = __webpack_require__2(817);
          var select_default = /* @__PURE__ */ __webpack_require__2.n(src_select);
          function command(type) {
            try {
              return document.execCommand(type);
            } catch (err) {
              return false;
            }
          }
          var ClipboardActionCut = function ClipboardActionCut2(target) {
            var selectedText = select_default()(target);
            command("cut");
            return selectedText;
          };
          var actions_cut = ClipboardActionCut;
          function createFakeElement(value6) {
            var isRTL = document.documentElement.getAttribute("dir") === "rtl";
            var fakeElement = document.createElement("textarea");
            fakeElement.style.fontSize = "12pt";
            fakeElement.style.border = "0";
            fakeElement.style.padding = "0";
            fakeElement.style.margin = "0";
            fakeElement.style.position = "absolute";
            fakeElement.style[isRTL ? "right" : "left"] = "-9999px";
            var yPosition = window.pageYOffset || document.documentElement.scrollTop;
            fakeElement.style.top = "".concat(yPosition, "px");
            fakeElement.setAttribute("readonly", "");
            fakeElement.value = value6;
            return fakeElement;
          }
          var ClipboardActionCopy = function ClipboardActionCopy2(target) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
              container: document.body
            };
            var selectedText = "";
            if (typeof target === "string") {
              var fakeElement = createFakeElement(target);
              options.container.appendChild(fakeElement);
              selectedText = select_default()(fakeElement);
              command("copy");
              fakeElement.remove();
            } else {
              selectedText = select_default()(target);
              command("copy");
            }
            return selectedText;
          };
          var actions_copy = ClipboardActionCopy;
          function _typeof2(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof2 = function _typeof3(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof2 = function _typeof3(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof2(obj);
          }
          var ClipboardActionDefault = function ClipboardActionDefault2() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var _options$action = options.action, action = _options$action === void 0 ? "copy" : _options$action, container = options.container, target = options.target, text = options.text;
            if (action !== "copy" && action !== "cut") {
              throw new Error('Invalid "action" value, use either "copy" or "cut"');
            }
            if (target !== void 0) {
              if (target && _typeof2(target) === "object" && target.nodeType === 1) {
                if (action === "copy" && target.hasAttribute("disabled")) {
                  throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                }
                if (action === "cut" && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) {
                  throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                }
              } else {
                throw new Error('Invalid "target" value, use a valid Element');
              }
            }
            if (text) {
              return actions_copy(text, {
                container
              });
            }
            if (target) {
              return action === "cut" ? actions_cut(target) : actions_copy(target, {
                container
              });
            }
          };
          var actions_default = ClipboardActionDefault;
          function clipboard_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              clipboard_typeof = function _typeof3(obj2) {
                return typeof obj2;
              };
            } else {
              clipboard_typeof = function _typeof3(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return clipboard_typeof(obj);
          }
          function _classCallCheck2(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _defineProperties2(target, props2) {
            for (var i = 0; i < props2.length; i++) {
              var descriptor = props2[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function _createClass2(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties2(Constructor.prototype, protoProps);
            if (staticProps)
              _defineProperties2(Constructor, staticProps);
            return Constructor;
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
              constructor: {
                value: subClass,
                writable: true,
                configurable: true
              }
            });
            if (superClass)
              _setPrototypeOf(subClass, superClass);
          }
          function _setPrototypeOf(o, p2) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p3) {
              o2.__proto__ = p3;
              return o2;
            };
            return _setPrototypeOf(o, p2);
          }
          function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function _createSuperInternal() {
              var Super = _getPrototypeOf(Derived), result;
              if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
              } else {
                result = Super.apply(this, arguments);
              }
              return _possibleConstructorReturn(this, result);
            };
          }
          function _possibleConstructorReturn(self2, call) {
            if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
              return call;
            }
            return _assertThisInitialized(self2);
          }
          function _assertThisInitialized(self2) {
            if (self2 === void 0) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self2;
          }
          function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if (typeof Proxy === "function")
              return true;
            try {
              Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              }));
              return true;
            } catch (e) {
              return false;
            }
          }
          function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2);
            };
            return _getPrototypeOf(o);
          }
          function getAttributeValue(suffix2, element2) {
            var attribute = "data-clipboard-".concat(suffix2);
            if (!element2.hasAttribute(attribute)) {
              return;
            }
            return element2.getAttribute(attribute);
          }
          var Clipboard2 = /* @__PURE__ */ function(_Emitter) {
            _inherits(Clipboard3, _Emitter);
            var _super = _createSuper(Clipboard3);
            function Clipboard3(trigger2, options) {
              var _this;
              _classCallCheck2(this, Clipboard3);
              _this = _super.call(this);
              _this.resolveOptions(options);
              _this.listenClick(trigger2);
              return _this;
            }
            _createClass2(Clipboard3, [{
              key: "resolveOptions",
              value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                this.action = typeof options.action === "function" ? options.action : this.defaultAction;
                this.target = typeof options.target === "function" ? options.target : this.defaultTarget;
                this.text = typeof options.text === "function" ? options.text : this.defaultText;
                this.container = clipboard_typeof(options.container) === "object" ? options.container : document.body;
              }
            }, {
              key: "listenClick",
              value: function listenClick(trigger2) {
                var _this2 = this;
                this.listener = listen_default()(trigger2, "click", function(e) {
                  return _this2.onClick(e);
                });
              }
            }, {
              key: "onClick",
              value: function onClick2(e) {
                var trigger2 = e.delegateTarget || e.currentTarget;
                var action = this.action(trigger2) || "copy";
                var text = actions_default({
                  action,
                  container: this.container,
                  target: this.target(trigger2),
                  text: this.text(trigger2)
                });
                this.emit(text ? "success" : "error", {
                  action,
                  text,
                  trigger: trigger2,
                  clearSelection: function clearSelection() {
                    if (trigger2) {
                      trigger2.focus();
                    }
                    document.activeElement.blur();
                    window.getSelection().removeAllRanges();
                  }
                });
              }
            }, {
              key: "defaultAction",
              value: function defaultAction(trigger2) {
                return getAttributeValue("action", trigger2);
              }
            }, {
              key: "defaultTarget",
              value: function defaultTarget(trigger2) {
                var selector = getAttributeValue("target", trigger2);
                if (selector) {
                  return document.querySelector(selector);
                }
              }
            }, {
              key: "defaultText",
              value: function defaultText(trigger2) {
                return getAttributeValue("text", trigger2);
              }
            }, {
              key: "destroy",
              value: function destroy2() {
                this.listener.destroy();
              }
            }], [{
              key: "copy",
              value: function copy(target) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                  container: document.body
                };
                return actions_copy(target, options);
              }
            }, {
              key: "cut",
              value: function cut(target) {
                return actions_cut(target);
              }
            }, {
              key: "isSupported",
              value: function isSupported() {
                var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"];
                var actions = typeof action === "string" ? [action] : action;
                var support = !!document.queryCommandSupported;
                actions.forEach(function(action2) {
                  support = support && !!document.queryCommandSupported(action2);
                });
                return support;
              }
            }]);
            return Clipboard3;
          }(tiny_emitter_default());
          var clipboard2 = Clipboard2;
        },
        828: function _(module2) {
          var DOCUMENT_NODE_TYPE = 9;
          if (typeof Element !== "undefined" && !Element.prototype.matches) {
            var proto = Element.prototype;
            proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
          }
          function closest2(element2, selector) {
            while (element2 && element2.nodeType !== DOCUMENT_NODE_TYPE) {
              if (typeof element2.matches === "function" && element2.matches(selector)) {
                return element2;
              }
              element2 = element2.parentNode;
            }
          }
          module2.exports = closest2;
        },
        438: function _(module2, __unused_webpack_exports, __webpack_require__2) {
          var closest2 = __webpack_require__2(828);
          function _delegate(element2, selector, type, callback, useCapture) {
            var listenerFn = listener.apply(this, arguments);
            element2.addEventListener(type, listenerFn, useCapture);
            return {
              destroy: function destroy2() {
                element2.removeEventListener(type, listenerFn, useCapture);
              }
            };
          }
          function delegate(elements, selector, type, callback, useCapture) {
            if (typeof elements.addEventListener === "function") {
              return _delegate.apply(null, arguments);
            }
            if (typeof type === "function") {
              return _delegate.bind(null, document).apply(null, arguments);
            }
            if (typeof elements === "string") {
              elements = document.querySelectorAll(elements);
            }
            return Array.prototype.map.call(elements, function(element2) {
              return _delegate(element2, selector, type, callback, useCapture);
            });
          }
          function listener(element2, selector, type, callback) {
            return function(e) {
              e.delegateTarget = closest2(e.target, selector);
              if (e.delegateTarget) {
                callback.call(element2, e);
              }
            };
          }
          module2.exports = delegate;
        },
        879: function _(__unused_webpack_module, exports2) {
          exports2.node = function(value6) {
            return value6 !== void 0 && value6 instanceof HTMLElement && value6.nodeType === 1;
          };
          exports2.nodeList = function(value6) {
            var type = Object.prototype.toString.call(value6);
            return value6 !== void 0 && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value6 && (value6.length === 0 || exports2.node(value6[0]));
          };
          exports2.string = function(value6) {
            return typeof value6 === "string" || value6 instanceof String;
          };
          exports2.fn = function(value6) {
            var type = Object.prototype.toString.call(value6);
            return type === "[object Function]";
          };
        },
        370: function _(module2, __unused_webpack_exports, __webpack_require__2) {
          var is2 = __webpack_require__2(879);
          var delegate = __webpack_require__2(438);
          function listen(target, type, callback) {
            if (!target && !type && !callback) {
              throw new Error("Missing required arguments");
            }
            if (!is2.string(type)) {
              throw new TypeError("Second argument must be a String");
            }
            if (!is2.fn(callback)) {
              throw new TypeError("Third argument must be a Function");
            }
            if (is2.node(target)) {
              return listenNode(target, type, callback);
            } else if (is2.nodeList(target)) {
              return listenNodeList(target, type, callback);
            } else if (is2.string(target)) {
              return listenSelector(target, type, callback);
            } else {
              throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
            }
          }
          function listenNode(node, type, callback) {
            node.addEventListener(type, callback);
            return {
              destroy: function destroy2() {
                node.removeEventListener(type, callback);
              }
            };
          }
          function listenNodeList(nodeList2, type, callback) {
            Array.prototype.forEach.call(nodeList2, function(node) {
              node.addEventListener(type, callback);
            });
            return {
              destroy: function destroy2() {
                Array.prototype.forEach.call(nodeList2, function(node) {
                  node.removeEventListener(type, callback);
                });
              }
            };
          }
          function listenSelector(selector, type, callback) {
            return delegate(document.body, selector, type, callback);
          }
          module2.exports = listen;
        },
        817: function _(module2) {
          function select2(element2) {
            var selectedText;
            if (element2.nodeName === "SELECT") {
              element2.focus();
              selectedText = element2.value;
            } else if (element2.nodeName === "INPUT" || element2.nodeName === "TEXTAREA") {
              var isReadOnly = element2.hasAttribute("readonly");
              if (!isReadOnly) {
                element2.setAttribute("readonly", "");
              }
              element2.select();
              element2.setSelectionRange(0, element2.value.length);
              if (!isReadOnly) {
                element2.removeAttribute("readonly");
              }
              selectedText = element2.value;
            } else {
              if (element2.hasAttribute("contenteditable")) {
                element2.focus();
              }
              var selection = window.getSelection();
              var range = document.createRange();
              range.selectNodeContents(element2);
              selection.removeAllRanges();
              selection.addRange(range);
              selectedText = selection.toString();
            }
            return selectedText;
          }
          module2.exports = select2;
        },
        279: function _(module2) {
          function E() {
          }
          E.prototype = {
            on: function on2(name2, callback, ctx) {
              var e = this.e || (this.e = {});
              (e[name2] || (e[name2] = [])).push({
                fn: callback,
                ctx
              });
              return this;
            },
            once: function once2(name2, callback, ctx) {
              var self2 = this;
              function listener() {
                self2.off(name2, listener);
                callback.apply(ctx, arguments);
              }
              listener._ = callback;
              return this.on(name2, listener, ctx);
            },
            emit: function emit(name2) {
              var data26 = [].slice.call(arguments, 1);
              var evtArr = ((this.e || (this.e = {}))[name2] || []).slice();
              var i = 0;
              var len2 = evtArr.length;
              for (i; i < len2; i++) {
                evtArr[i].fn.apply(evtArr[i].ctx, data26);
              }
              return this;
            },
            off: function off2(name2, callback) {
              var e = this.e || (this.e = {});
              var evts = e[name2];
              var liveEvents = [];
              if (evts && callback) {
                for (var i = 0, len2 = evts.length; i < len2; i++) {
                  if (evts[i].fn !== callback && evts[i].fn._ !== callback)
                    liveEvents.push(evts[i]);
                }
              }
              liveEvents.length ? e[name2] = liveEvents : delete e[name2];
              return this;
            }
          };
          module2.exports = E;
          module2.exports.TinyEmitter = E;
        }
      };
      var __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        if (__webpack_module_cache__[moduleId]) {
          return __webpack_module_cache__[moduleId].exports;
        }
        var module2 = __webpack_module_cache__[moduleId] = {
          exports: {}
        };
        __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
        return module2.exports;
      }
      !function() {
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function() {
            return module2["default"];
          } : function() {
            return module2;
          };
          __webpack_require__.d(getter, {
            a: getter
          });
          return getter;
        };
      }();
      !function() {
        __webpack_require__.d = function(exports2, definition) {
          for (var key in definition) {
            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
              Object.defineProperty(exports2, key, {
                enumerable: true,
                get: definition[key]
              });
            }
          }
        };
      }();
      !function() {
        __webpack_require__.o = function(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        };
      }();
      return __webpack_require__(686);
    }()["default"];
  });
})(clipboard, clipboard.exports);
var Clipboard = /* @__PURE__ */ getDefaultExportFromCjs(clipboard.exports);
function copyText(_text) {
  var div = document.createElement("div");
  var clip = new Clipboard(div, {
    text: function text() {
      return _text;
    }
  });
  div.click();
  clip.destroy();
  div.remove();
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  return _typeof$1 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$1(obj);
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var THEME_LIST = ["info", "success", "warning", "error", "question", "loading"];
var DISTANCE$1 = "32px";
var PLACEMENT_OFFSET$1 = {
  top: {
    top: DISTANCE$1,
    left: "50%",
    transform: "translateX(-50%)"
  },
  center: {
    left: "50%",
    top: "50%",
    transform: "translateX(-50%) translateY(-50%)"
  },
  left: {
    left: DISTANCE$1,
    top: "50%",
    transform: "translateY(-50%)"
  },
  bottom: {
    bottom: DISTANCE$1,
    left: "50%",
    transform: "translateX(-50%)"
  },
  right: {
    right: DISTANCE$1,
    top: "50%",
    transform: "translateY(-50%)",
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-end"
  },
  "top-left": {
    left: DISTANCE$1,
    top: DISTANCE$1
  },
  "top-right": {
    right: DISTANCE$1,
    top: DISTANCE$1,
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-end"
  },
  "bottom-right": {
    right: DISTANCE$1,
    bottom: DISTANCE$1,
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-end"
  },
  "bottom-left": {
    left: DISTANCE$1,
    bottom: DISTANCE$1
  }
};
var PLACEMENT_LIST = Object.keys(PLACEMENT_OFFSET$1);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$Y = {
  closeBtn: {
    type: [String, Boolean, Function],
    "default": void 0
  },
  content: {
    type: [String, Function]
  },
  duration: {
    type: Number,
    "default": 3e3
  },
  icon: {
    type: [Boolean, Function],
    "default": true
  },
  theme: {
    type: String,
    "default": "info",
    validator: function validator14(val) {
      return ["info", "success", "warning", "error", "question", "loading"].includes(val);
    }
  },
  onCloseBtnClick: Function,
  onDurationEnd: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var ANIMATION_OPTION = {
  duration: 200,
  easing: "linear"
};
function fadeIn(dom, placement) {
  if (!dom)
    return;
  var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
  var fadeInKeyframes = getFadeInKeyframes(placement, offsetWidth, offsetHeight);
  if (!fadeInKeyframes)
    return;
  var styleAfterFadeIn = fadeInKeyframes[fadeInKeyframes.length - 1];
  setDomStyleAfterAnimation(dom, styleAfterFadeIn);
  dom.animate && dom.animate(fadeInKeyframes, ANIMATION_OPTION);
}
function fadeOut(dom, placement, onFinish) {
  if (!dom)
    return;
  var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
  var fadeOutKeyframes = getFadeOutKeyframes(placement, offsetHeight);
  if (!fadeOutKeyframes)
    return onFinish();
  var styleAfterFadeOut = fadeOutKeyframes[fadeOutKeyframes.length - 1];
  setDomStyleAfterAnimation(dom, styleAfterFadeOut);
  var animation = dom.animate && dom.animate(fadeOutKeyframes, ANIMATION_OPTION);
  if (animation) {
    animation.onfinish = function() {
      dom.style.display = "none";
      onFinish();
    };
  } else {
    dom.style.display = "none";
    onFinish();
  }
}
function setDomStyleAfterAnimation(dom, styleAfterAnimation) {
  var keys2 = Object.keys(styleAfterAnimation);
  for (var i = 0; i < keys2.length; i += 1) {
    var key = keys2[i];
    dom.style[key] = styleAfterAnimation[key];
  }
}
function getFadeInKeyframes(placement, offsetWidth, offsetHeight) {
  if (!PLACEMENT_LIST.includes(placement))
    return null;
  if (["top-left", "left", "bottom-left"].includes(placement)) {
    return [{
      opacity: 0,
      marginLeft: "-".concat(offsetWidth, "px")
    }, {
      opacity: 1,
      marginLeft: "0"
    }];
  }
  if (["top-right", "right", "bottom-right"].includes(placement)) {
    return [{
      opacity: 0,
      marginRight: "-".concat(offsetWidth, "px")
    }, {
      opacity: 1,
      marginRight: "0"
    }];
  }
  if (["top", "center"].includes(placement)) {
    return [{
      opacity: 0,
      marginTop: "-".concat(offsetHeight, "px")
    }, {
      opacity: 1,
      marginTop: "0"
    }];
  }
  if (["bottom"].includes(placement)) {
    return [{
      opacity: 0,
      transform: "translate3d(0, ".concat(offsetHeight, "px, 0)")
    }, {
      opacity: 1,
      transform: "translate3d(0, 0, 0)"
    }];
  }
}
function getFadeOutKeyframes(placement, offsetHeight) {
  if (!PLACEMENT_LIST.includes(placement))
    return null;
  if (["bottom-left", "bottom", "bottom-right"].includes(placement)) {
    var marginOffset2 = "".concat(offsetHeight, "px");
    return [{
      opacity: 1,
      marginTop: "0px"
    }, {
      opacity: 0,
      marginTop: marginOffset2
    }];
  }
  var marginOffset = "-".concat(offsetHeight, "px");
  return [{
    opacity: 1,
    marginTop: "0px"
  }, {
    opacity: 0,
    marginTop: marginOffset
  }];
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function handleSlots(instance, name2, params) {
  var _instance$slots$camel, _instance$slots, _instance$slots$kebab, _instance$slots2;
  var node = (_instance$slots$camel = (_instance$slots = instance.slots)[camelCase_1(name2)]) === null || _instance$slots$camel === void 0 ? void 0 : _instance$slots$camel.call(_instance$slots, params);
  if (node)
    return node;
  node = (_instance$slots$kebab = (_instance$slots2 = instance.slots)[kebabCase_1(name2)]) === null || _instance$slots$kebab === void 0 ? void 0 : _instance$slots$kebab.call(_instance$slots2, params);
  if (node)
    return node;
  return null;
}
var useTNodeJSX = function useTNodeJSX2() {
  var instance = getCurrentInstance();
  return function(name2, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var propsNode;
    if (Object.keys(instance.props).includes(name2)) {
      propsNode = instance.props[name2];
    }
    if (propsNode === false)
      return;
    if (propsNode === true) {
      return handleSlots(instance, name2, params) || defaultNode;
    }
    if (isFunction_1(propsNode))
      return propsNode(h, params);
    var isPropsEmpty = [void 0, params, ""].includes(propsNode);
    if (isPropsEmpty && (instance.slots[camelCase_1(name2)] || instance.slots[kebabCase_1(name2)])) {
      return handleSlots(instance, name2, params);
    }
    return propsNode;
  };
};
var useTNodeDefault = function useTNodeDefault2() {
  var renderTNodeJSX3 = useTNodeJSX();
  return function(name2, options) {
    var defaultNode = getDefaultNode(options);
    return renderTNodeJSX3(name2, options) || defaultNode;
  };
};
var useContent = function useContent2() {
  var renderTNodeJSX3 = useTNodeJSX();
  return function(name1, name2, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var toParams = params ? {
      params
    } : void 0;
    var node1 = renderTNodeJSX3(name1, toParams);
    var node2 = renderTNodeJSX3(name2, toParams);
    var res = isEmpty_1(node1) ? node2 : node1;
    return isEmpty_1(res) ? defaultNode : res;
  };
};
var index$K = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1G(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1F(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1G(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Message = defineComponent({
  name: "TMessage",
  props: _objectSpread$1F(_objectSpread$1F({}, props$Y), {}, {
    placement: String
  }),
  setup: function setup15(props2, _ref) {
    var slots = _ref.slots, expose = _ref.expose;
    var COMPONENT_NAME2 = usePrefixClass("message");
    var classPrefix2 = usePrefixClass();
    var renderTNode = useTNodeJSX();
    var renderContent6 = useContent();
    var msgRef = ref(null);
    var timer = ref(null);
    var classes6 = computed(function() {
      var status = {};
      THEME_LIST.forEach(function(t) {
        return status["".concat(classPrefix2.value, "-is-").concat(t)] = props2.theme === t;
      });
      return [COMPONENT_NAME2.value, status, _defineProperty$3({}, "".concat(classPrefix2.value, "-is-closable"), props2.closeBtn || slots.closeBtn)];
    });
    var close$1 = function close5(e) {
      var _props2$onCloseBtnCli;
      (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
        e
      });
    };
    var clearTimer2 = function clearTimer3() {
      props2.duration && clearTimeout(timer.value);
    };
    var setTimer2 = function setTimer3() {
      if (!props2.duration) {
        return;
      }
      timer.value = Number(setTimeout(function() {
        clearTimer2();
        var msgDom = msgRef.value;
        fadeOut(msgDom, props2.placement, function() {
          var _props2$onDurationEnd;
          (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
        });
      }, props2.duration));
    };
    var renderClose = function renderClose2() {
      var defaultClose = createVNode(close, null, null);
      return createVNode("span", {
        "class": "".concat(COMPONENT_NAME2.value, "__close"),
        "onClick": close$1
      }, [renderTNode("closeBtn", defaultClose)]);
    };
    var renderIcon4 = function renderIcon5() {
      if (props2.icon === false)
        return;
      if (typeof props2.icon === "function")
        return props2.icon(h);
      if (slots.icon) {
        return slots.icon(null);
      }
      var Icon2 = {
        info: infoCircleFilled,
        success: checkCircleFilled,
        warning: errorCircleFilled,
        error: errorCircleFilled,
        question: helpCircleFilled,
        loading: Loading
      }[props2.theme];
      return createVNode(Icon2, null, null);
    };
    onBeforeMount(function() {
      props2.duration && setTimer2();
    });
    onMounted(function() {
      var msgDom = msgRef.value;
      fadeIn(msgDom, props2.placement);
    });
    expose({
      close: close$1
    });
    return function() {
      return createVNode("div", {
        "ref": msgRef,
        "class": classes6.value,
        "onMouseenter": clearTimer2,
        "onMouseleave": setTimer2
      }, [renderIcon4(), renderContent6("content", "default"), renderClose()]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1F(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1E(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1F(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var DEFAULT_Z_INDEX$1 = 6e3;
var getUniqueId = function() {
  var id = 0;
  return function() {
    id += 1;
    return id;
  };
}();
var MessageList = defineComponent({
  name: "TMessageList",
  props: {
    zIndex: {
      type: Number,
      "default": 0
    },
    placement: {
      type: String,
      "default": ""
    }
  },
  setup: function setup16(props2, _ref) {
    var expose = _ref.expose;
    var list = ref([]);
    var messageList = ref([]);
    var styles = computed(function() {
      return _objectSpread$1E(_objectSpread$1E({}, PLACEMENT_OFFSET$1[props2.placement]), {}, {
        zIndex: props2.zIndex !== DEFAULT_Z_INDEX$1 ? props2.zIndex : DEFAULT_Z_INDEX$1
      });
    });
    var add2 = function add3(msg) {
      var mg = _objectSpread$1E(_objectSpread$1E({}, msg), {}, {
        key: getUniqueId()
      });
      list.value.push(mg);
      return list.value.length - 1;
    };
    var remove3 = function remove4(index2) {
      list.value.splice(index2, 1);
    };
    var removeAll = function removeAll2() {
      list.value = [];
    };
    var getOffset = function getOffset2(val) {
      if (!val)
        return;
      return isNaN(Number(val)) ? val : "".concat(val, "px");
    };
    var msgStyles = function msgStyles2(item) {
      return item.offset && {
        position: "relative",
        left: getOffset(item.offset[0]),
        top: getOffset(item.offset[1])
      };
    };
    var getListeners = function getListeners2(index2) {
      return {
        onCloseBtnClick: function onCloseBtnClick() {
          return remove3(index2);
        },
        onDurationEnd: function onDurationEnd() {
          return remove3(index2);
        }
      };
    };
    var addChild = function addChild2(el) {
      if (el) {
        messageList.value.push(el);
      }
    };
    expose({
      add: add2,
      removeAll,
      list,
      messageList
    });
    return function() {
      if (!list.value.length)
        return;
      return createVNode("div", {
        "class": "t-message__list",
        "style": styles.value
      }, [list.value.map(function(item, index2) {
        return createVNode(_Message, mergeProps({
          "key": item.key,
          "style": msgStyles(item),
          "ref": addChild
        }, item, getListeners(index2)), null);
      })]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1E(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1D(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1E(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var instanceMap$1 = /* @__PURE__ */ new Map();
function handleParams(params) {
  var options = _objectSpread$1D({
    duration: 3e3,
    attach: "body",
    zIndex: DEFAULT_Z_INDEX$1,
    placement: "top"
  }, params);
  options.content = params.content;
  return options;
}
var MessageFunction = function MessageFunction2(props2) {
  var options = handleParams(props2);
  var attach2 = options.attach, placement = options.placement;
  var attachDom = getAttach(attach2);
  if (!instanceMap$1.get(attachDom)) {
    instanceMap$1.set(attachDom, {});
  }
  var p2 = instanceMap$1.get(attachDom)[placement];
  if (!p2) {
    var wrapper = document.createElement("div");
    var instance = createApp(MessageList, {
      zIndex: options.zIndex,
      placement: options.placement
    }).mount(wrapper);
    instance.add(options);
    instanceMap$1.get(attachDom)[placement] = instance;
    attachDom.appendChild(wrapper);
  } else {
    p2.add(options);
  }
  return new Promise(function(resolve2) {
    var ins = instanceMap$1.get(attachDom)[placement];
    nextTick(function() {
      var msg = ins.messageList;
      resolve2(msg[msg.length - 1]);
    });
  });
};
var showThemeMessage = function showThemeMessage2(theme, params, duration) {
  var options = {
    theme
  };
  if (typeof params === "string") {
    options.content = params;
  } else if (_typeof$1(params) === "object" && !(params instanceof Array)) {
    options = _objectSpread$1D(_objectSpread$1D({}, options), params);
  }
  (duration || duration === 0) && (options.duration = duration);
  return MessageFunction(options);
};
var extraApi$2 = {
  info: function info(params, duration) {
    return showThemeMessage("info", params, duration);
  },
  success: function success(params, duration) {
    return showThemeMessage("success", params, duration);
  },
  warning: function warning(params, duration) {
    return showThemeMessage("warning", params, duration);
  },
  error: function error2(params, duration) {
    return showThemeMessage("error", params, duration);
  },
  question: function question(params, duration) {
    return showThemeMessage("question", params, duration);
  },
  loading: function loading(params, duration) {
    return showThemeMessage("loading", params, duration);
  },
  close: function close2(promise) {
    promise.then(function(instance) {
      return instance.close();
    });
  },
  closeAll: function closeAll() {
    if (instanceMap$1 instanceof Map) {
      instanceMap$1.forEach(function(attach2) {
        Object.keys(attach2).forEach(function(placement) {
          var instance = attach2[placement];
          instance.list = [];
        });
      });
    }
  }
};
var MessagePlugin = showThemeMessage;
MessagePlugin.install = function(app) {
  app.config.globalProperties.$message = showThemeMessage;
  Object.keys(extraApi$2).forEach(function(funcName) {
    app.config.globalProperties.$message[funcName] = extraApi$2[funcName];
  });
};
Object.keys(extraApi$2).forEach(function(funcName) {
  MessagePlugin[funcName] = extraApi$2[funcName];
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$X = {
  id: {
    type: String,
    "default": "",
    required: true
  },
  tag: {
    type: String,
    "default": "div"
  }
};
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name2) {
    var style = state.styles[name2] || {};
    var attributes = state.attributes[name2] || {};
    var element2 = state.elements[name2];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name3) {
      var value6 = attributes[name3];
      if (value6 === false) {
        element2.removeAttribute(name3);
      } else {
        element2.setAttribute(name3, value6 === true ? "" : value6);
      }
    });
  });
}
function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name2) {
      var element2 = state.elements[name2];
      var attributes = state.attributes[name2] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name2) ? state.styles[name2] : initialStyles[name2]);
      var style = styleProperties.reduce(function(style2, property2) {
        style2[property2] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles$1 = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect$2,
  requires: ["computeStyles"]
};
function getBasePlacement(placement) {
  return placement.split("-")[0];
}
var max = Math.max;
var min$1 = Math.min;
var round = Math.round;
function getBoundingClientRect(element2, includeScale) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  var rect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (isHTMLElement(element2) && includeScale) {
    var offsetHeight = element2.offsetHeight;
    var offsetWidth = element2.offsetWidth;
    if (offsetWidth > 0) {
      scaleX = round(rect.width) / offsetWidth || 1;
    }
    if (offsetHeight > 0) {
      scaleY = round(rect.height) / offsetHeight || 1;
    }
  }
  return {
    width: rect.width / scaleX,
    height: rect.height / scaleY,
    top: rect.top / scaleY,
    right: rect.right / scaleX,
    bottom: rect.bottom / scaleY,
    left: rect.left / scaleX,
    x: rect.left / scaleX,
    y: rect.top / scaleY
  };
}
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}
function contains(parent2, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent2.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent2.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getComputedStyle$1(element2) {
  return getWindow(element2).getComputedStyle(element2);
}
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}
function getDocumentElement(element2) {
  return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
}
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
}
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || getComputedStyle$1(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
  var isIE = navigator.userAgent.indexOf("Trident") !== -1;
  if (isIE && isHTMLElement(element2)) {
    var elementCss = getComputedStyle$1(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle$1(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}
function within(min4, value6, max$1) {
  return max(min4, min$1(value6, max$1));
}
function withinMaxClamp(min4, value6, max4) {
  var v = within(min4, value6, max4);
  return v > max4 ? max4 : v;
}
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value6, keys2) {
  return keys2.reduce(function(hashMap, key) {
    hashMap[key] = value6;
    return hashMap;
  }, {});
}
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name2 = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len2 = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len2] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len2];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min4 = paddingObject[minProp];
  var max4 = clientSize - arrowRect[len2] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len2] / 2 + centerToReference;
  var offset2 = within(min4, center, max4);
  var axisProp = axis;
  state.modifiersData[name2] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect$1(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow$1 = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect$1,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function getVariation(placement) {
  return placement.split("-")[1];
}
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle$1(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles$1 = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};
var passive = {
  passive: true
};
function effect(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash$1[matched];
  });
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash[matched];
  });
}
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}
function getViewportRect(element2) {
  var win = getWindow(element2);
  var html = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element2),
    y
  };
}
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y = -winScroll.scrollTop;
  if (getComputedStyle$1(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle$1(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}
function listScrollParents(element2, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}
function getInnerBoundingClientRect(element2) {
  var rect = getBoundingClientRect(element2);
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min$1(rect.right, accRect.right);
    accRect.bottom = min$1(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len2 = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len2] / 2 - element2[len2] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len2] / 2 - element2[len2] / 2);
        break;
    }
  }
  return offsets;
}
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name2 = _ref.name;
  if (state.modifiersData[name2]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len2 = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len2] > popperRect[len2]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check2) {
      return check2;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check2) {
            return check2;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name2]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip$1 = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name2 = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name2] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide$1 = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name2 = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data26 = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data26[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name2] = data26;
}
var offset$1 = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};
function popperOffsets(_ref) {
  var state = _ref.state, name2 = _ref.name;
  state.modifiersData[name2] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets$1 = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name2 = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data26 = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len2 = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min4 = offset2 + overflow[mainSide];
    var max$1 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len2] / 2 : 0;
    var minLen = variation === start ? referenceRect[len2] : popperRect[len2];
    var maxLen = variation === start ? -popperRect[len2] : -referenceRect[len2];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len2], arrowRect[len2]);
    var minOffset = isBasePlacement ? referenceRect[len2] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len2] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min$1(min4, tetherMin) : min4, offset2, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets2[mainAxis] = preventedOffset;
    data26[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data26[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name2] = data26;
}
var preventOverflow$1 = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = round(rect.width) / element2.offsetWidth || 1;
  var scaleY = round(rect.height) / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort2(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort2(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort2(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}
function debounce$2(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve2) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve2(fn2());
        });
      });
    }
    return pending;
  };
}
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current2) {
    var existing = merged2[current2.name];
    merged2[current2.name] = existing ? Object.assign({}, existing, current2, {
      options: Object.assign({}, existing.options, current2.options),
      data: Object.assign({}, existing.data, current2.data)
    }) : current2;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
          if (state.reset === true) {
            state.reset = false;
            index2 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index2], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name2 = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name: name2,
              instance
            }) || state;
          }
        }
      },
      update: debounce$2(function() {
        return new Promise(function(resolve2) {
          instance.forceUpdate();
          resolve2(state);
        });
      }),
      destroy: function destroy2() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name2 = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
        if (typeof effect2 === "function") {
          var cleanupFn = effect2({
            state,
            name: name2,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var popupProps = {
  attach: {
    type: [String, Function],
    "default": "body"
  },
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  destroyOnClose: Boolean,
  disabled: Boolean,
  hideEmptyPopup: Boolean,
  overlayClassName: {
    type: [String, Object, Array]
  },
  overlayStyle: {
    type: [Boolean, Object, Function]
  },
  placement: {
    type: String,
    "default": "top",
    validator: function validator15(val) {
      return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
    }
  },
  showArrow: Boolean,
  trigger: {
    type: String,
    "default": "hover",
    validator: function validator16(val) {
      return ["hover", "click", "focus", "context-menu"].includes(val);
    }
  },
  triggerElement: {
    type: [String, Function]
  },
  visible: Boolean,
  defaultVisible: Boolean,
  zIndex: {
    type: Number
  },
  onScroll: Function,
  onVisibleChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TDisplayNoneElementRefresh = "t-display-none-element-refresh";
function useDestroyOnClose() {
  var refresh2 = ref(0);
  provide(TDisplayNoneElementRefresh, refresh2);
  onUpdated(function() {
    refresh2.value += 1;
  });
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var ResizeSensor$1 = { exports: {} };
(function(module, exports) {
  (function(root2, factory) {
    {
      module.exports = factory();
    }
  })(typeof window !== "undefined" ? window : commonjsGlobal, function() {
    if (typeof window === "undefined") {
      return null;
    }
    var globalWindow = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
    var requestAnimationFrame2 = globalWindow.requestAnimationFrame || globalWindow.mozRequestAnimationFrame || globalWindow.webkitRequestAnimationFrame || function(fn2) {
      return globalWindow.setTimeout(fn2, 20);
    };
    var cancelAnimationFrame = globalWindow.cancelAnimationFrame || globalWindow.mozCancelAnimationFrame || globalWindow.webkitCancelAnimationFrame || function(timer) {
      globalWindow.clearTimeout(timer);
    };
    function forEachElement(elements, callback) {
      var elementsType = Object.prototype.toString.call(elements);
      var isCollectionTyped = elementsType === "[object Array]" || elementsType === "[object NodeList]" || elementsType === "[object HTMLCollection]" || elementsType === "[object Object]" || typeof jQuery !== "undefined" && elements instanceof jQuery || typeof Elements !== "undefined" && elements instanceof Elements;
      var i = 0, j = elements.length;
      if (isCollectionTyped) {
        for (; i < j; i++) {
          callback(elements[i]);
        }
      } else {
        callback(elements);
      }
    }
    function getElementSize(element2) {
      if (!element2.getBoundingClientRect) {
        return {
          width: element2.offsetWidth,
          height: element2.offsetHeight
        };
      }
      var rect = element2.getBoundingClientRect();
      return {
        width: Math.round(rect.width),
        height: Math.round(rect.height)
      };
    }
    function setStyle2(element2, style) {
      Object.keys(style).forEach(function(key) {
        element2.style[key] = style[key];
      });
    }
    var ResizeSensor2 = function ResizeSensor3(element2, callback) {
      var lastAnimationFrameForInvisibleCheck = 0;
      function EventQueue() {
        var q = [];
        this.add = function(ev) {
          q.push(ev);
        };
        var i, j;
        this.call = function(sizeInfo) {
          for (i = 0, j = q.length; i < j; i++) {
            q[i].call(this, sizeInfo);
          }
        };
        this.remove = function(ev) {
          var newQueue = [];
          for (i = 0, j = q.length; i < j; i++) {
            if (q[i] !== ev)
              newQueue.push(q[i]);
          }
          q = newQueue;
        };
        this.length = function() {
          return q.length;
        };
      }
      function attachResizeEvent(element3, resized) {
        if (!element3)
          return;
        if (element3.resizedAttached) {
          element3.resizedAttached.add(resized);
          return;
        }
        element3.resizedAttached = new EventQueue();
        element3.resizedAttached.add(resized);
        element3.resizeSensor = document.createElement("div");
        element3.resizeSensor.dir = "ltr";
        element3.resizeSensor.className = "resize-sensor";
        var style = {
          pointerEvents: "none",
          position: "absolute",
          left: "0px",
          top: "0px",
          right: "0px",
          bottom: "0px",
          overflow: "hidden",
          zIndex: "-1",
          visibility: "hidden",
          maxWidth: "100%"
        };
        var styleChild = {
          position: "absolute",
          left: "0px",
          top: "0px",
          transition: "0s"
        };
        setStyle2(element3.resizeSensor, style);
        var expand2 = document.createElement("div");
        expand2.className = "resize-sensor-expand";
        setStyle2(expand2, style);
        var expandChild = document.createElement("div");
        setStyle2(expandChild, styleChild);
        expand2.appendChild(expandChild);
        var shrink = document.createElement("div");
        shrink.className = "resize-sensor-shrink";
        setStyle2(shrink, style);
        var shrinkChild = document.createElement("div");
        setStyle2(shrinkChild, styleChild);
        setStyle2(shrinkChild, {
          width: "200%",
          height: "200%"
        });
        shrink.appendChild(shrinkChild);
        element3.resizeSensor.appendChild(expand2);
        element3.resizeSensor.appendChild(shrink);
        element3.appendChild(element3.resizeSensor);
        var computedStyle = window.getComputedStyle(element3);
        var position = computedStyle ? computedStyle.getPropertyValue("position") : null;
        if (position !== "absolute" && position !== "relative" && position !== "fixed" && position !== "sticky") {
          element3.style.position = "relative";
        }
        var dirty = false;
        var rafId = 0;
        var size2 = getElementSize(element3);
        var lastWidth = 0;
        var lastHeight = 0;
        var initialHiddenCheck = true;
        lastAnimationFrameForInvisibleCheck = 0;
        var resetExpandShrink = function resetExpandShrink2() {
          var width = element3.offsetWidth;
          var height = element3.offsetHeight;
          expandChild.style.width = width + 10 + "px";
          expandChild.style.height = height + 10 + "px";
          expand2.scrollLeft = width + 10;
          expand2.scrollTop = height + 10;
          shrink.scrollLeft = width + 10;
          shrink.scrollTop = height + 10;
        };
        var reset3 = function reset4() {
          if (initialHiddenCheck) {
            var invisible = element3.offsetWidth === 0 && element3.offsetHeight === 0;
            if (invisible) {
              if (!lastAnimationFrameForInvisibleCheck) {
                lastAnimationFrameForInvisibleCheck = requestAnimationFrame2(function() {
                  lastAnimationFrameForInvisibleCheck = 0;
                  reset4();
                });
              }
              return;
            } else {
              initialHiddenCheck = false;
            }
          }
          resetExpandShrink();
        };
        element3.resizeSensor.resetSensor = reset3;
        var onResized = function onResized2() {
          rafId = 0;
          if (!dirty)
            return;
          lastWidth = size2.width;
          lastHeight = size2.height;
          if (element3.resizedAttached) {
            element3.resizedAttached.call(size2);
          }
        };
        var onScroll = function onScroll2() {
          size2 = getElementSize(element3);
          dirty = size2.width !== lastWidth || size2.height !== lastHeight;
          if (dirty && !rafId) {
            rafId = requestAnimationFrame2(onResized);
          }
          reset3();
        };
        var addEvent = function addEvent2(el, name2, cb) {
          if (el.attachEvent) {
            el.attachEvent("on" + name2, cb);
          } else {
            el.addEventListener(name2, cb);
          }
        };
        addEvent(expand2, "scroll", onScroll);
        addEvent(shrink, "scroll", onScroll);
        lastAnimationFrameForInvisibleCheck = requestAnimationFrame2(function() {
          lastAnimationFrameForInvisibleCheck = 0;
          reset3();
        });
      }
      forEachElement(element2, function(elem) {
        attachResizeEvent(elem, callback);
      });
      this.detach = function(ev) {
        if (!lastAnimationFrameForInvisibleCheck) {
          cancelAnimationFrame(lastAnimationFrameForInvisibleCheck);
          lastAnimationFrameForInvisibleCheck = 0;
        }
        ResizeSensor3.detach(element2, ev);
      };
      this.reset = function() {
        element2.resizeSensor.resetSensor();
      };
    };
    ResizeSensor2.reset = function(element2) {
      forEachElement(element2, function(elem) {
        elem.resizeSensor.resetSensor();
      });
    };
    ResizeSensor2.detach = function(element2, ev) {
      forEachElement(element2, function(elem) {
        if (!elem)
          return;
        if (elem.resizedAttached && typeof ev === "function") {
          elem.resizedAttached.remove(ev);
          if (elem.resizedAttached.length())
            return;
        }
        if (elem.resizeSensor) {
          if (elem.contains(elem.resizeSensor)) {
            elem.removeChild(elem.resizeSensor);
          }
          delete elem.resizeSensor;
          delete elem.resizedAttached;
        }
      });
    };
    if (typeof MutationObserver !== "undefined") {
      var observer = new MutationObserver(function(mutations) {
        for (var i in mutations) {
          if (mutations.hasOwnProperty(i)) {
            var items = mutations[i].addedNodes;
            for (var j = 0; j < items.length; j++) {
              if (items[j].resizeSensor) {
                ResizeSensor2.reset(items[j]);
              }
            }
          }
        }
      });
      document.addEventListener("DOMContentLoaded", function(event) {
        observer.observe(document.body, {
          childList: true,
          subtree: true
        });
      });
    }
    return ResizeSensor2;
  });
})(ResizeSensor$1, ResizeSensor$1.exports);
var ResizeSensor = ResizeSensor$1.exports;
function ownKeys$1D(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1C(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1D(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var stop = function stop2(e) {
  return e.stopPropagation();
};
var placementMap = {
  top: "top",
  "top-left": "top-start",
  "top-right": "top-end",
  bottom: "bottom",
  "bottom-left": "bottom-start",
  "bottom-right": "bottom-end",
  left: "left",
  "left-top": "left-start",
  "left-bottom": "left-end",
  right: "right",
  "right-top": "right-start",
  "right-bottom": "right-end"
};
var showTimeout = 250;
var hideTimeout = 150;
var triggers = ["click", "hover", "focus", "context-menu"];
var _Popup = defineComponent({
  name: "TPopup",
  components: {
    Transition
  },
  provide: function provide3() {
    return {
      popup: this
    };
  },
  inject: {
    popup: {
      "default": void 0
    }
  },
  props: _objectSpread$1C(_objectSpread$1C({}, popupProps), {}, {
    expandAnimation: {
      type: Boolean
    }
  }),
  emits: ["visible-change", "enter", "leave"],
  setup: function setup17() {
    var COMPONENT_NAME2 = usePrefixClass("popup");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    useDestroyOnClose();
    return {
      STATUS,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data2() {
    return {
      currentPlacement: "",
      popperElm: null,
      referenceElm: null,
      resizeSensor: null,
      popper: null,
      timeout: null,
      refOverlayElm: null,
      hasDocumentEvent: false,
      offEvents: []
    };
  },
  computed: {
    overlayClasses: function overlayClasses() {
      var _ref;
      var base2 = ["".concat(this.COMPONENT_NAME, "__content"), (_ref = {}, _defineProperty$3(_ref, "".concat(this.COMPONENT_NAME, "__content--arrow"), this.showArrow), _defineProperty$3(_ref, this.STATUS.disabled, this.disabled), _ref)];
      return base2.concat(this.overlayClassName);
    },
    hasTrigger: function hasTrigger() {
      var _this = this;
      return triggers.reduce(function(map, trigger2) {
        return _objectSpread$1C(_objectSpread$1C({}, map), {}, _defineProperty$3({}, trigger2, _this.trigger.includes(trigger2)));
      }, {});
    }
  },
  watch: {
    visible: function visible(val) {
      var _this2 = this;
      if (val) {
        this.updatePopper();
        if (!this.hasDocumentEvent && (this.hasTrigger["context-menu"] || this.hasTrigger.click)) {
          on$1(document, "mousedown", this.handleDocumentClick);
          this.hasDocumentEvent = true;
        }
        if (this.referenceElm && this.hasTrigger.focus) {
          once(this.referenceElm, "keydown", function(ev) {
            if (ev.code === "Escape") {
              _this2.handleClose({
                trigger: "keydown-esc"
              });
            }
          });
        }
      } else {
        off$1(document, "mousedown", this.handleDocumentClick);
        this.hasDocumentEvent = false;
      }
    },
    overlayStyle: function overlayStyle() {
      if (this.popper) {
        this.popper.update();
        this.updateOverlayStyle();
      }
    }
  },
  mounted: function mounted4() {
    var _this3 = this;
    if (typeof this.content === "string") {
      this.setOverlayStyle({
        maxWidth: "480px"
      });
    }
    this.referenceElm = this.referenceElm || this.$el;
    if (!this.referenceElm || !this.$refs.popper)
      return;
    if (this.visible) {
      this.createPopper();
      this.updateOverlayStyle();
    }
    var reference2 = this.referenceElm;
    var popperElm = this.$refs.popper;
    var offEvents = [];
    if (this.hasTrigger.click) {
      offEvents.push(on$1(reference2, "click", function(e) {
        return _this3.handleToggle({
          e,
          trigger: "trigger-element-click"
        });
      }));
    }
    if (this.hasTrigger.hover) {
      offEvents.push(on$1(reference2, "mouseenter", function() {
        return _this3.handleOpen({
          trigger: "trigger-element-hover"
        });
      }));
      offEvents.push(on$1(reference2, "mouseleave", function() {
        return _this3.handleClose({
          trigger: "trigger-element-hover"
        });
      }));
      offEvents.push(on$1(popperElm, "mouseenter", function() {
        return _this3.handleOpen({
          trigger: "trigger-element-hover"
        }, true);
      }));
      offEvents.push(on$1(popperElm, "mouseleave", function(ev) {
        var parent2 = _this3.popup;
        var closeParent;
        if (parent2 !== null && parent2 !== void 0 && parent2.visible) {
          var parentRect = parent2.$refs.popper.getBoundingClientRect();
          closeParent = !(ev.x > parentRect.left && ev.x < parentRect.right && ev.y > parentRect.top && ev.y < parentRect.bottom);
        }
        _this3.handleClose({
          trigger: "trigger-element-hover"
        }, closeParent);
      }));
    }
    if (this.hasTrigger.focus) {
      if (reference2.querySelector("input,textarea")) {
        offEvents.push(on$1(reference2, "focusin", function() {
          return _this3.handleOpen({
            trigger: "trigger-element-focus"
          });
        }));
        offEvents.push(on$1(reference2, "focusout", function() {
          return _this3.handleClose({
            trigger: "trigger-element-blur"
          });
        }));
      } else {
        offEvents.push(on$1(reference2, "mousedown", function() {
          return _this3.handleOpen({
            trigger: "trigger-element-click"
          });
        }));
        offEvents.push(on$1(reference2, "mouseup", function() {
          return _this3.handleClose({
            trigger: "trigger-element-click"
          });
        }));
      }
    }
    if (this.hasTrigger["context-menu"]) {
      reference2.oncontextmenu = function() {
        return false;
      };
      offEvents.push(on$1(reference2, "mousedown", function(e) {
        e.button === 2 && _this3.handleToggle({
          trigger: "context-menu"
        });
      }));
    }
    this.offEvents = offEvents;
  },
  beforeUnmount: function beforeUnmount() {
    if (this.popper && !this.visible) {
      this.popper.destroy();
      this.popper = null;
    }
    var popperElement = this.$refs.popper;
    if (popperElement) {
      var _popperElement$parent;
      popperElement === null || popperElement === void 0 ? void 0 : (_popperElement$parent = popperElement.parentNode) === null || _popperElement$parent === void 0 ? void 0 : _popperElement$parent.removeChild(popperElement);
    }
    var popperElm = this.$refs.popper;
    if (popperElm && popperElm.parentNode === document.body) {
      popperElm.removeEventListener("click", stop);
      document.body.removeChild(popperElm);
    }
    this.offEvents.forEach(function(handler15) {
      return handler15 && handler15();
    });
  },
  methods: {
    createPopper: function createPopper$1() {
      var _this4 = this;
      var currentPlacement = this.placement;
      var popperElm = this.$refs.popper;
      var overlayContainer = getAttach(this.attach);
      overlayContainer.appendChild(popperElm);
      if (this.popper && this.popper.destroy) {
        this.popper.destroy();
      }
      var placement = placementMap[currentPlacement];
      this.popper = createPopper(this.referenceElm, popperElm, {
        placement,
        onFirstUpdate: function onFirstUpdate() {
          _this4.$nextTick(_this4.updatePopper);
        }
      });
      popperElm.addEventListener("click", stop);
      this.resizeSensor = new ResizeSensor(this.referenceElm, function() {
        _this4.popper && _this4.popper.update();
        _this4.updateOverlayStyle();
      });
    },
    updatePopper: function updatePopper() {
      if (this.popper) {
        this.popper.update();
      } else {
        this.createPopper();
      }
    },
    updateOverlayStyle: function updateOverlayStyle() {
      var overlayStyle2 = this.overlayStyle;
      var referenceElm = this.$el;
      if (!this.$refs)
        return;
      var refOverlayElm = this.$refs.overlay;
      if (typeof overlayStyle2 === "function" && referenceElm && refOverlayElm) {
        var userOverlayStyle = overlayStyle2(referenceElm, refOverlayElm);
        this.setOverlayStyle(userOverlayStyle);
      } else if (_typeof$1(overlayStyle2) === "object" && refOverlayElm) {
        this.setOverlayStyle(overlayStyle2);
      }
    },
    setOverlayStyle: function setOverlayStyle(styles) {
      var refOverlayElm = this.$refs.overlay;
      if (_typeof$1(styles) === "object" && refOverlayElm) {
        setStyle(refOverlayElm, styles);
      }
    },
    destroyPopper: function destroyPopper(el) {
      if (this.popper) {
        this.popper.destroy();
        this.popper = null;
        if (this.destroyOnClose) {
          var popperElm = this.$refs.popper;
          popperElm.parentNode.removeChild(popperElm);
        }
      }
    },
    handleToggle: function handleToggle(context) {
      this.emitPopVisible(!this.visible, context);
    },
    handleOpen: function handleOpen(context, openParent) {
      var _this5 = this;
      clearTimeout(this.timeout);
      this.timeout = setTimeout(function() {
        _this5.emitPopVisible(true, context);
      }, this.clickTrigger ? 0 : showTimeout);
      if (openParent) {
        var _this$popup;
        (_this$popup = this.popup) === null || _this$popup === void 0 ? void 0 : _this$popup.handleOpen(context, true);
      }
    },
    handleClose: function handleClose(context, closeParent) {
      var _this6 = this;
      clearTimeout(this.timeout);
      this.timeout = setTimeout(function() {
        _this6.emitPopVisible(false, context);
      }, this.clickTrigger ? 0 : hideTimeout);
      if (closeParent) {
        var _this$popup2;
        (_this$popup2 = this.popup) === null || _this$popup2 === void 0 ? void 0 : _this$popup2.handleClose({
          trigger: "trigger-element-hover"
        }, true);
      }
    },
    handleDocumentClick: function handleDocumentClick(e) {
      var popperElm = this.$refs.popper;
      if (!this.$el || this.$el.contains(e.target) || !popperElm || popperElm.contains(e.target))
        return;
      this.emitPopVisible(false, {
        trigger: "document"
      });
    },
    emitPopVisible: function emitPopVisible(val, context) {
      var _this7 = this;
      this.$nextTick(function() {
        emitEvent(_this7, "visible-change", val, context);
      });
    }
  },
  render: function render15() {
    var _this8 = this;
    return createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__reference")
    }, [createVNode(resolveComponent("transition"), {
      "name": this.expandAnimation ? "".concat(this.COMPONENT_NAME, "--animation-expand") : "".concat(this.COMPONENT_NAME, "--animation"),
      "appear": true,
      "onAfterLeave": this.destroyPopper
    }, {
      "default": function _default65() {
        return [withDirectives(createVNode("div", {
          "class": _this8.COMPONENT_NAME,
          "ref": "popper",
          "role": "tooltip",
          "aria-hidden": _this8.disabled || !_this8.visible ? "true" : "false",
          "style": {
            zIndex: _this8.zIndex
          },
          "onMouseenter": function onMouseenter(e) {
            return _this8.$emit("enter", e);
          },
          "onMouseleave": function onMouseleave(e) {
            return _this8.$emit("leave", e);
          }
        }, [createVNode("div", {
          "class": _this8.overlayClasses,
          "ref": "overlay"
        }, [renderTNodeJSX(_this8, "content"), _this8.showArrow && createVNode("div", {
          "class": "".concat(_this8.COMPONENT_NAME, "__arrow")
        }, null)])]), [[vShow, !_this8.disabled && _this8.visible]])];
      }
    }), renderContent(this, "default", "triggerElement")]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _excluded$3 = ["name", "alias"];
function ownKeys$1C(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1B(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1C(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function toCamel(str) {
  return str.replace(/-([a-z])/gi, function(m, letter) {
    return letter.toUpperCase();
  });
}
function getPropOptionMap(props2) {
  var propOptionMap = {};
  function parseProp(propOption) {
    var propName = propOption.name, alias = propOption.alias, others = _objectWithoutProperties$1(propOption, _excluded$3);
    var camelName = propName.replace(/^[a-z]/, function(letter) {
      return letter.toUpperCase();
    });
    var defaultName = "default".concat(camelName);
    var dataName = "data".concat(camelName);
    var events = [];
    if (propOption.event) {
      events = events.concat(propOption.event);
    }
    events.push("update:".concat(propName));
    if (alias) {
      events = events.concat(alias.map(function(item) {
        return "update:".concat(item);
      }));
    }
    return _objectSpread$1B({
      events,
      defaultName,
      dataName,
      alias
    }, others);
  }
  props2.forEach(function(prop) {
    var defaultOption = {
      alias: []
    };
    var propOption;
    if (typeof prop === "string") {
      propOption = _objectSpread$1B(_objectSpread$1B({}, defaultOption), {}, {
        name: prop
      });
    } else {
      propOption = _objectSpread$1B(_objectSpread$1B({}, defaultOption), prop);
    }
    propOptionMap[propOption.name] = parseProp(propOption);
  });
  return propOptionMap;
}
function mapProps(props2) {
  function mapProps2(componentConstructor) {
    var component = componentConstructor;
    var propOptionMap = getPropOptionMap(props2);
    var defineProps = _objectSpread$1B({}, component.props);
    var defineWatches = {};
    var defineEvents = [];
    var defineMethods = {};
    var camelPropsKeys = Object.keys(component.props).map(function(key) {
      return toCamel(key);
    });
    Object.keys(propOptionMap).forEach(function(propName) {
      var _propOptionMap$propNa = propOptionMap[propName], events = _propOptionMap$propNa.events, alias = _propOptionMap$propNa.alias, defaultName = _propOptionMap$propNa.defaultName, dataName = _propOptionMap$propNa.dataName;
      defineProps[propName] = component.props[propName];
      defineProps[defaultName] = component.props[defaultName];
      if (alias) {
        alias.forEach(function(prop) {
          defineProps[prop] = defineProps[propName];
        });
      }
      defineEvents = defineEvents.concat(events);
      var defaultList = [];
      defineWatches[defaultName] = {
        handler: function handler15(v) {
          if (defaultList.indexOf(defaultName + this.$.uid) > -1)
            return;
          var props22 = this.$.vnode.props;
          var hasDefault = props22 && (defaultName in props22 || kebabCase_1(defaultName) in props22);
          if (hasDefault && !(propName in props22)) {
            this.$data[dataName] = v;
          }
          defaultList.push(defaultName + this.$.uid);
        },
        immediate: true
      };
      alias.forEach(function(aliasItem) {
        defineWatches[aliasItem] = {
          handler: function handler15(v) {
            var props22 = this.$.vnode.props;
            if (props22 && aliasItem in props22 && !(propName in props22)) {
              this.$data[dataName] = v;
            }
          },
          immediate: true
        };
      });
      defineWatches[propName] = {
        handler: function handler15(v) {
          var props22 = this.$.vnode.props;
          if (props22 && (propName in props22 || kebabCase_1(propName) in props22)) {
            this.$data[dataName] = v;
          }
        },
        immediate: true
      };
    });
    if (component.methods) {
      Object.keys(component.methods).forEach(function(key) {
        defineMethods[key] = function() {
          if (this.$refs.component) {
            var _this$$refs$component;
            return (_this$$refs$component = this.$refs.component)[key].apply(_this$$refs$component, arguments);
          }
        };
      });
    }
    var name2 = component.name;
    return defineComponent({
      name: "".concat(name2, "-mapprops"),
      inheritAttrs: false,
      props: _objectSpread$1B({}, defineProps),
      data: function data26() {
        var data27 = {};
        Object.keys(propOptionMap).forEach(function(propName) {
          var dataName = propOptionMap[propName].dataName;
          data27[dataName] = void 0;
        });
        return _objectSpread$1B({}, data27);
      },
      computed: {
        _listeners: function _listeners() {
          var _this = this;
          var others = {};
          Object.keys(this.$attrs).forEach(function(attr) {
            var event = attr.startsWith("on") ? attr[2].toLowerCase() + attr.slice(3) : null;
            if (event && defineEvents.indexOf(event) === -1) {
              others[attr] = function() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                _this.$emit.apply(_this, [event].concat(args));
              };
            }
          });
          return others;
        }
      },
      watch: defineWatches,
      methods: _objectSpread$1B({
        updateData: function updateData(propName, v) {
          var _this2 = this;
          for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
          propOptionMap[propName].events.forEach(function(event) {
            var eventName = "on".concat(event.charAt(0).toUpperCase()).concat(event.substr(1));
            if (typeof _this2[eventName] === "function") {
              _this2[eventName].apply(_this2, [v].concat(args));
              return true;
            }
            _this2.$emit.apply(_this2, [event, v].concat(args));
          });
          var props22 = this.$.vnode.props;
          if (!props22 || !(propName in props22)) {
            this[propOptionMap[propName].dataName] = v;
            return true;
          }
        }
      }, defineMethods),
      render: function render102() {
        var _this3 = this;
        var propMap = {};
        var handlerMap = {};
        Object.keys(propOptionMap).forEach(function(propName) {
          var _propOptionMap$propNa2 = propOptionMap[propName], dataName = _propOptionMap$propNa2.dataName, events = _propOptionMap$propNa2.events;
          var eventName = "on".concat(events[0].charAt(0).toUpperCase()).concat(events[0].substr(1));
          var props22 = _this3.$.vnode.props;
          if (props22 && propName in props22 || typeof _this3[dataName] !== "undefined") {
            propMap[propName] = _this3[dataName];
          }
          handlerMap[eventName] = function(v) {
            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
              args[_key3 - 1] = arguments[_key3];
            }
            return _this3.updateData.apply(_this3, [propName, v].concat(args));
          };
        });
        var attrs = {};
        Object.keys(this.$attrs).forEach(function(attrName) {
          var camelAttrKey = toCamel(attrName);
          if (camelPropsKeys.indexOf(camelAttrKey) === -1) {
            attrs[attrName] = _this3.$attrs[attrName];
          }
        });
        return h(componentConstructor, _objectSpread$1B(_objectSpread$1B(_objectSpread$1B(_objectSpread$1B(_objectSpread$1B(_objectSpread$1B({}, this.$props), propMap), attrs), this._listeners), handlerMap), {}, {
          ref: "component"
        }), this.$slots);
      }
    });
  }
  return mapProps2;
}
var index$J = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var LocalPopup = mapProps([{
  name: "visible",
  event: "visible-change"
}])(_Popup);
var Popup = withInstall(LocalPopup);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1B(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1A(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1B(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _AnchorTarget = defineComponent({
  name: "TAnchorTarget",
  components: {
    TPopup: Popup,
    FileCopyIcon: fileCopy
  },
  props: _objectSpread$1A({}, props$X),
  setup: function setup18() {
    var _useConfig = useConfig("anchor"), global2 = _useConfig.global, classPrefix2 = _useConfig.classPrefix;
    var COMPONENT_NAME2 = usePrefixClass("anchor");
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      global: global2,
      classPrefix: classPrefix2
    };
  },
  methods: {
    copyText: function copyText$1() {
      var a = document.createElement("a");
      a.href = "#".concat(this.id);
      copyText(a.href);
      MessagePlugin.success(this.global.copySuccessText, 1e3);
    }
  },
  render: function render16() {
    var _this = this;
    var COMPONENT_NAME2 = this.COMPONENT_NAME, classPrefix2 = this.classPrefix, TAG = this.tag, children = this.$slots["default"], id = this.id;
    var className = ["".concat(COMPONENT_NAME2, "__target")];
    var iconClassName = "".concat(classPrefix2, "-copy");
    return createVNode(TAG, {
      "id": id,
      "class": className
    }, {
      "default": function _default65() {
        return [children && children(null), createVNode(resolveComponent("t-popup"), {
          "content": _this.global.copyText,
          "placement": "top",
          "showArrow": true,
          "class": iconClassName
        }, {
          "default": function _default66() {
            return [createVNode(fileCopy, {
              "onClick": _this.copyText
            }, null)];
          }
        })];
      }
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Anchor = withInstall(_Anchor);
var AnchorItem = withInstall(_AnchorItem);
var AnchorTarget = withInstall(_AnchorTarget);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$W = {
  maxItemWidth: {
    type: String,
    "default": void 0
  },
  options: {
    type: Array
  },
  separator: {
    type: [String, Function]
  },
  theme: {
    type: String,
    "default": "light",
    validator: function validator17(val) {
      return ["light"].includes(val);
    }
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$V = {
  content: {
    type: [String, Number, Function]
  },
  "default": {
    type: [String, Number, Function]
  },
  disabled: Boolean,
  href: {
    type: String,
    "default": ""
  },
  maxWidth: {
    type: String,
    "default": void 0
  },
  replace: Boolean,
  router: {
    type: Object
  },
  target: {
    type: String,
    "default": "_self",
    validator: function validator18(val) {
      return ["_blank", "_self", "_parent", "_top"].includes(val);
    }
  },
  to: {
    type: [String, Object]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$U = {
  destroyOnClose: {
    type: Boolean,
    "default": true
  },
  duration: {
    type: Number,
    "default": 3e3
  },
  showArrow: {
    type: Boolean,
    "default": true
  },
  theme: {
    type: String,
    "default": "default",
    validator: function validator19(val) {
      return ["default", "primary", "success", "danger", "warning", "light"].includes(val);
    }
  }
};
var index$I = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1A(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1z(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1A(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Tooltip = defineComponent({
  name: "TTooltip",
  components: {
    Popup
  },
  props: _objectSpread$1z(_objectSpread$1z({}, popupProps), props$U),
  emits: ["visible-change"],
  setup: function setup19() {
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2
    };
  },
  data: function data3() {
    return {
      timer: null,
      tooltipVisible: false
    };
  },
  computed: {
    tooltipOverlayClassName: function tooltipOverlayClassName() {
      return ["".concat(this.classPrefix, "-tooltip"), _defineProperty$3({}, "".concat(this.classPrefix, "-tooltip--").concat(this.theme), this.theme), this.overlayClassName];
    }
  },
  watch: {
    visible: function visible2(_visible) {
      if (this.timer && !_visible) {
        clearTimeout(this.timer);
        this.timer = null;
      }
    }
  },
  created: function created() {
    var _this = this;
    if (this.duration && this.visible) {
      this.timer = setTimeout(function() {
        emitEvent(_this, "visible-change", false);
        clearTimeout(_this.timer);
        _this.timer = null;
      }, this.duration);
    }
  },
  methods: {
    onTipVisibleChange: function onTipVisibleChange(val, ctx) {
      if (this.timer && (ctx === null || ctx === void 0 ? void 0 : ctx.trigger) !== "document")
        return;
      emitEvent(this, "visible-change", val);
    },
    getPopupProps: function getPopupProps() {
      var _this2 = this;
      var r = _objectSpread$1z(_objectSpread$1z({
        showArrow: true
      }, this.$props), {}, {
        content: function content() {
          return renderTNodeJSX(_this2, "content");
        },
        "default": function _default65() {
          return renderContent(_this2, "default", "triggerElement");
        },
        overlayClassName: this.tooltipOverlayClassName,
        onVisibleChange: this.onTipVisibleChange
      });
      return r;
    }
  },
  render: function render17() {
    return createVNode(Popup, mergeProps({
      "visible": this.visible,
      "showArrow": this.showArrow
    }, this.getPopupProps()), null);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Tooltip = withInstall(mapProps([{
  name: "visible",
  event: "visible-change"
}])(_Tooltip));
var index$H = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1z(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1y(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1z(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$p(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var EVENT_NAME_WITH_KEBAB$1 = ["click"];
var localTBreadcrumbOrigin = {
  separator: "",
  theme: "light",
  $slots: {
    separator: ""
  },
  maxItemWidth: void 0
};
var _BreadcrumbItem = defineComponent({
  name: "TBreadcrumbItem",
  components: {
    Tooltip
  },
  inject: ["tBreadcrumb"],
  props: _objectSpread$1y({}, props$V),
  emits: ["click"],
  setup: function setup20() {
    var COMPONENT_NAME2 = usePrefixClass("breadcrumb__item");
    var separatorClass = usePrefixClass("breadcrumb__separator");
    var disableClass = usePrefixClass("is-disabled");
    var linkClass = usePrefixClass("link");
    var maxLengthClass = usePrefixClass("breadcrumb__inner");
    var textFlowClass = usePrefixClass("breadcrumb--text-overflow");
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      separatorClass,
      disableClass,
      linkClass,
      maxLengthClass,
      textFlowClass
    };
  },
  data: function data4() {
    return {
      localTBreadcrumb: localTBreadcrumbOrigin,
      themeClassName: "",
      $router: null,
      isCutOff: false
    };
  },
  computed: {
    maxWithStyle: function maxWithStyle() {
      var localTBreadcrumb = this.localTBreadcrumb;
      var maxItemWidth = localTBreadcrumb.maxItemWidth;
      var maxWith = this.maxWidth || maxItemWidth || "120";
      return {
        maxWidth: "".concat(maxWith, "px")
      };
    }
  },
  watch: {
    tBreadcrumb: {
      immediate: true,
      handler: function handler2(v) {
        this.localTBreadcrumb = v;
      }
    }
  },
  created: function created2() {
    var tBreadcrumb = this.localTBreadcrumb;
    this.themeClassName = tBreadcrumb.theme;
  },
  mounted: function mounted5() {
    this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
  },
  beforeUpdate: function beforeUpdate() {
    this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
  },
  methods: {
    bindEvent: function bindEvent(e) {
      if (!this.href || !this.disabled) {
        e.preventDefault();
        var to = this.to;
        var router2 = this.router || this.$router;
        if (to && router2) {
          this.replace ? router2.replace(to) : router2.push(to);
        }
      }
    }
  },
  render: function render18() {
    var _this = this;
    var separatorClass = this.separatorClass, disableClass = this.disableClass, linkClass = this.linkClass, maxLengthClass = this.maxLengthClass, textFlowClass = this.textFlowClass;
    var localTBreadcrumb = this.localTBreadcrumb, maxWithStyle2 = this.maxWithStyle;
    var separatorPropContent = localTBreadcrumb.separator;
    var separatorSlot = localTBreadcrumb.$slots.separator;
    var separatorContent = separatorPropContent || separatorSlot || createVNode(chevronRight, {
      color: "rgba(0,0,0,.3)"
    }, null);
    var itemClass2 = [this.COMPONENT_NAME, this.themeClassName];
    var textClass = [textFlowClass];
    if (this.disabled) {
      textClass.push(disableClass);
    }
    var listeners = {};
    EVENT_NAME_WITH_KEBAB$1.forEach(function(eventName) {
      listeners[getPropsApiByEvent(eventName)] = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        emitEvent.apply(void 0, [_this, eventName].concat(args));
      };
    });
    var textContent = createVNode("span", mergeProps({
      "ref": "breadcrumbText"
    }, {
      "class": maxLengthClass,
      style: maxWithStyle2
    }), [this.$slots["default"]()]);
    var itemContent = createVNode("span", _objectSpread$1y({
      "class": textClass
    }, listeners), [textContent]);
    if ((this.href || this.to) && !this.disabled) {
      textClass.push(linkClass);
      itemContent = createVNode("a", mergeProps({
        "class": textClass,
        "href": this.href,
        "target": this.target
      }, listeners, {
        "onClick": this.bindEvent
      }), [textContent]);
    }
    return createVNode("div", mergeProps({
      "class": itemClass2
    }, this.$attrs), [this.isCutOff ? createVNode(Tooltip, {
      "content": function content() {
        return _this.$slots["default"]();
      }
    }, _isSlot$p(itemContent) ? itemContent : {
      "default": function _default65() {
        return [itemContent];
      }
    }) : itemContent, createVNode("span", {
      "class": separatorClass
    }, [typeof separatorContent === "function" ? separatorContent() : separatorContent])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Breadcrumb = defineComponent({
  name: "TBreadcrumb",
  components: {
    BreadcrumbItem: _BreadcrumbItem
  },
  provide: function provide4() {
    return {
      tBreadcrumb: this
    };
  },
  props: props$W,
  render: function render19() {
    var _this = this;
    var content = this.$slots["default"] ? this.$slots["default"]() : "";
    if (this.options && this.options.length) {
      content = this.options.map(function(option2, index2) {
        return createVNode(_BreadcrumbItem, mergeProps(_this.$attrs, option2, {
          "key": index2
        }), {
          "default": function _default65() {
            return [option2["default"] || option2.content];
          }
        });
      });
    }
    return createVNode("div", {
      "class": "t-breadcrumb"
    }, [content]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Breadcrumb = withInstall(_Breadcrumb);
var BreadcrumbItem = withInstall(_BreadcrumbItem);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var itemProps = {
  active: Boolean,
  content: {
    type: [String, Function],
    "default": ""
  },
  disabled: Boolean,
  divider: Boolean,
  value: {
    type: [String, Number, Object]
  },
  onClick: Function
};
var index$G = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1y(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1x(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1y(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _DropdownItem = defineComponent({
  name: "TDropdownItem",
  components: {
    ChevronRightIcon: chevronRight,
    TDivider: Divider
  },
  inject: {
    dropdown: {
      "default": void 0
    }
  },
  props: _objectSpread$1x(_objectSpread$1x({}, itemProps), {}, {
    path: {
      type: String,
      "default": ""
    },
    hasChildren: {
      type: Boolean,
      "default": false
    }
  }),
  emits: ["click", "item-hover", "hover"],
  setup: function setup21() {
    var itemRef = ref();
    useRipple(itemRef);
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var COMPONENT_NAME2 = usePrefixClass("dropdown__item");
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2,
      COMPONENT_NAME: COMPONENT_NAME2,
      STATUS,
      itemRef
    };
  },
  methods: {
    renderSuffix: function renderSuffix() {
      return this.hasChildren ? createVNode(resolveComponent("chevron-right-icon"), {
        "class": "".concat(this.COMPONENT_NAME, "__item-icon")
      }, null) : null;
    },
    handleItemClick: function handleItemClick(e) {
      e.stopPropagation();
      if (!this.hasChildren && !this.disabled) {
        var data26 = {
          value: this.value,
          path: this.path,
          content: this.content
        };
        emitEvent(this, "click", data26, {
          e
        });
        emitEvent(this, "item-hover", this.path);
        this.dropdown.handleMenuClick(data26, {
          e
        });
      }
    },
    handleMouseover: function handleMouseover() {
      emitEvent(this, "hover", this.path);
    }
  },
  render: function render20() {
    var _ref;
    var STATUS = this.STATUS, COMPONENT_NAME2 = this.COMPONENT_NAME, classPrefix2 = this.classPrefix;
    var classes6 = [COMPONENT_NAME2, (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2, "-dropdown--suffix"), this.hasChildren), _defineProperty$3(_ref, STATUS.disabled, this.disabled), _defineProperty$3(_ref, STATUS.active, this.active), _ref)];
    return createVNode("div", null, [createVNode("div", {
      "ref": "itemRef",
      "class": classes6,
      "onClick": this.handleItemClick,
      "onMouseover": this.handleMouseover
    }, [createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "-content")
    }, [createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "-text")
    }, [renderContent(this, "content", "default")])]), this.renderSuffix()]), this.divider ? createVNode(Divider, null, null) : null]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _DropdownMenu = defineComponent({
  name: "TDropdownMenu",
  components: {
    DropdownItem: _DropdownItem
  },
  inject: {
    dropdown: {
      "default": void 0
    }
  },
  props: {
    options: {
      type: Array,
      "default": function _default3() {
        return [];
      }
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    maxColumnWidth: {
      type: Number,
      "default": 100
    },
    minColumnWidth: {
      type: Number,
      "default": 10
    }
  },
  emits: ["click"],
  setup: function setup22() {
    var COMPONENT_NAME2 = usePrefixClass("dropdown__menu");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data5() {
    return {
      path: ""
    };
  },
  methods: {
    isActive: function isActive(item, pathPrefix) {
      var excludeSelf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var itemPath = "".concat(pathPrefix, "/").concat(item.value);
      if (excludeSelf && this.path === itemPath) {
        return false;
      }
      return this.path.indexOf(itemPath) === 0;
    },
    handleHoverItem: function handleHoverItem(path) {
      this.path = path;
    },
    handleItemClick: function handleItemClick2(data26, context, idx) {
      var _this$options$idx$onC, _this$options$idx;
      (_this$options$idx$onC = (_this$options$idx = this.options[idx]).onClick) === null || _this$options$idx$onC === void 0 ? void 0 : _this$options$idx$onC.call(_this$options$idx, data26, context);
      emitEvent(this, "click", data26, context);
    },
    renderMenuColumn: function renderMenuColumn(children, showSubmenu, pathPrefix) {
      var _this = this;
      var menuClass = ["".concat(this.COMPONENT_NAME, "-column"), "narrow-scrollbar", {
        submenu__visible: showSubmenu
      }];
      var _this$dropdown = this.dropdown, maxHeight = _this$dropdown.maxHeight, maxColumnWidth = _this$dropdown.maxColumnWidth, minColumnWidth = _this$dropdown.minColumnWidth;
      return createVNode("div", {
        "class": menuClass,
        "style": {
          maxHeight: "".concat(maxHeight, "px"),
          maxWidth: pxCompat(maxColumnWidth),
          minWidth: pxCompat(minColumnWidth)
        }
      }, [children.map(function(item, idx) {
        return createVNode(_DropdownItem, {
          "key": idx,
          "disabled": item.disabled,
          "active": _this.isActive(item, pathPrefix) || item.active,
          "value": item.value,
          "content": item.content,
          "divider": item.divider,
          "hasChildren": item.children && item.children.length > 0,
          "path": "".concat(pathPrefix, "/").concat(item.value),
          "maxColumnWidth": _this.maxColumnWidth,
          "minColumnWidth": _this.minColumnWidth,
          "onClick": function onClick2(data26, context) {
            return _this.handleItemClick(data26, context, idx);
          },
          "onHover": _this.handleHoverItem
        }, null);
      })]);
    }
  },
  render: function render21() {
    var _this2 = this;
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var columns = [];
    var menuItems = this.options;
    var pathPrefix = "";
    if (this.$slots["default"]) {
      return createVNode("div", {
        "class": COMPONENT_NAME2
      }, [createVNode("div", {
        "class": ["".concat(COMPONENT_NAME2, "-column"), "narrow-scrollbar"],
        "style": {
          maxHeight: "".concat(this.dropdown.maxHeight, "px"),
          maxWidth: "".concat(this.dropdown.maxColumnWidth, "px"),
          minWidth: "".concat(this.dropdown.minColumnWidth, "px")
        }
      }, [renderTNodeJSX(this, "default")])]);
    }
    while (menuItems && menuItems.length) {
      var activeItem = menuItems.find(function(item) {
        return _this2.isActive(item, pathPrefix, false);
      });
      columns.push(this.renderMenuColumn(menuItems, !!activeItem, pathPrefix));
      if (activeItem) {
        pathPrefix = "".concat(pathPrefix, "/").concat(activeItem.value);
        menuItems = activeItem.children || [];
      } else {
        menuItems = [];
      }
    }
    return createVNode("div", {
      "class": COMPONENT_NAME2
    }, [columns]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$T = {
  direction: {
    type: String,
    "default": "right",
    validator: function validator20(val) {
      return ["left", "right"].includes(val);
    }
  },
  disabled: Boolean,
  hideAfterItemClick: {
    type: Boolean,
    "default": true
  },
  maxColumnWidth: {
    type: [String, Number],
    "default": 100
  },
  maxHeight: {
    type: Number,
    "default": 300
  },
  minColumnWidth: {
    type: [String, Number],
    "default": 10
  },
  options: {
    type: Array,
    "default": function _default4() {
      return [];
    }
  },
  placement: {
    type: String,
    "default": "bottom-left",
    validator: function validator21(val) {
      return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
    }
  },
  popupProps: {
    type: Object
  },
  trigger: {
    type: String,
    "default": "hover",
    validator: function validator22(val) {
      return ["hover", "click", "focus", "context-menu"].includes(val);
    }
  },
  onClick: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1x(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1w(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1x(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Dropdown = defineComponent({
  name: "TDropdown",
  components: {
    DropdownMenu: _DropdownMenu
  },
  provide: function provide5() {
    return {
      dropdown: this
    };
  },
  props: _objectSpread$1w({}, props$T),
  emits: ["click", "visibleChange"],
  setup: function setup23() {
    var COMPONENT_NAME2 = usePrefixClass("dropdown");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  methods: {
    handleMenuClick: function handleMenuClick(data26, context) {
      if (this.hideAfterItemClick) {
        var popupElem = this.$refs.popupElem;
        popupElem.handleClose();
      }
      emitEvent(this, "click", data26, context);
    }
  },
  render: function render22() {
    var _this$popupProps, _this = this;
    var trigger2 = this.$slots["default"] ? this.$slots["default"](null) : "";
    var contentSlot = renderTNodeJSX(this, "dropdown");
    var popupProps2 = _objectSpread$1w(_objectSpread$1w({}, this.$attrs), {}, {
      disabled: this.disabled,
      placement: this.placement,
      trigger: this.trigger,
      overlayClassName: [this.COMPONENT_NAME, (_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.overlayClassName]
    });
    return createVNode(Popup, mergeProps(this.popupProps, popupProps2, {
      "destroyOnClose": true,
      "ref": "popupElem",
      "expandAnimation": true
    }), {
      "default": function _default65() {
        return [trigger2];
      },
      content: function content() {
        return contentSlot || createVNode(resolveComponent("dropdown-menu"), {
          "options": _this.options,
          "maxHeight": _this.maxHeight,
          "maxColumnWidth": _this.maxColumnWidth,
          "minColumnWidth": _this.minColumnWidth
        }, null);
      }
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Dropdown = withInstall(_Dropdown);
var DropdownItem = withInstall(_DropdownItem);
var DropdownMenu = withInstall(_DropdownMenu);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$S = {
  collapsed: Boolean,
  expanded: {
    type: Array
  },
  defaultExpanded: {
    type: Array
  },
  expandMutex: Boolean,
  expandType: {
    type: String,
    "default": "normal",
    validator: function validator23(val) {
      return ["normal", "popup"].includes(val);
    }
  },
  logo: {
    type: Function
  },
  operations: {
    type: Function
  },
  theme: {
    type: String,
    "default": "light",
    validator: function validator24(val) {
      return ["light", "dark"].includes(val);
    }
  },
  value: {
    type: [String, Number]
  },
  defaultValue: {
    type: [String, Number]
  },
  width: {
    type: [String, Number, Array],
    "default": "232px"
  },
  onChange: Function,
  onCollapsed: Function,
  onExpand: Function
};
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor = props2[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var getTreePaths = function getTreePaths2(node, val, ans) {
  if (!node)
    return;
  for (var i = 0; i < node.children.length; ++i) {
    var child = node.children[i];
    if (child.value === val)
      return [].concat(_toConsumableArray(ans), [node.value]);
    var target = getTreePaths2(child, val, [].concat(_toConsumableArray(ans), [node.value]));
    if (target)
      return target;
  }
};
var getTreeSameParentNodes = function getTreeSameParentNodes2(node, val) {
  if (!node)
    return [];
  for (var i = 0; i < node.children.length; ++i) {
    var child = node.children[i];
    if (child.value === val)
      return node.children;
    var target = getTreeSameParentNodes2(child, val);
    if (target)
      return target;
  }
};
var DFS = function DFS2(root2, val) {
  if (root2.value === val)
    return root2;
  if (root2.children.length > 0) {
    for (var i = 0, len2 = root2.children.length; i < len2; i++) {
      var res = DFS2(root2.children[i], val);
      if (res)
        return res;
    }
  }
};
var VMenu = /* @__PURE__ */ function() {
  function VMenu2(options) {
    _classCallCheck(this, VMenu2);
    _defineProperty$3(this, "data", null);
    _defineProperty$3(this, "cache", /* @__PURE__ */ new Set());
    _defineProperty$3(this, "isMutex", false);
    _defineProperty$3(this, "expandValues", null);
    var root2 = {
      value: null,
      parent: null,
      children: []
    };
    this.data = root2;
    this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;
    this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);
  }
  _createClass(VMenu2, [{
    key: "add",
    value: function add2(item) {
      var value6 = item.value, parent2 = item.parent, vnode = item.vnode;
      var node = {
        value: value6,
        parent: parent2,
        children: [],
        vnode
      };
      this.cache.forEach(function(data26, v2, set4) {
        if (item.value === data26.parent) {
          node.children.push(data26);
          set4["delete"](data26);
        }
      });
      if (item.parent == null) {
        this.data.children.push(node);
        node.parent = this.data;
      } else if (this.data.children.length > 0) {
        var pNode = DFS(this.data, parent2);
        if (pNode) {
          pNode.children.push(node);
        } else {
          this.cache.add(node);
        }
      } else {
        this.cache.add(node);
      }
    }
  }, {
    key: "select",
    value: function select2(val) {
      var activeValues = getTreePaths(this.data, val, []) || [];
      activeValues.push(val);
      return activeValues.filter(function(val2) {
        return val2 != null;
      });
    }
  }, {
    key: "expand",
    value: function expand2(val) {
      var _this = this;
      if (this.expandValues.has(val)) {
        this.expandValues["delete"](val);
        return _toConsumableArray(this.expandValues);
      }
      this.expandValues.add(val);
      if (!this.isMutex) {
        return _toConsumableArray(this.expandValues);
      }
      var sameParentNodes = getTreeSameParentNodes(this.data, val) || [];
      var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function(node) {
        var _node$children;
        return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;
      }).map(function(child) {
        return child.value;
      }));
      this.expandValues.forEach(function(val2) {
        var isHit = sameLevelSubmenuValues.has(val2);
        if (isHit) {
          _this.expandValues["delete"](val2);
        }
      });
      return _toConsumableArray(this.expandValues);
    }
  }, {
    key: "getChild",
    value: function getChild2(value6) {
      var target = DFS(this.data, value6);
      return target ? target.children : [];
    }
  }]);
  return VMenu2;
}();
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var logSet = /* @__PURE__ */ new Set();
var log = {
  warn: function warn(componentName, message) {
    console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
  },
  warnOnce: function warnOnce(componentName, message) {
    var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
    if (logSet.has(msgContent))
      return;
    logSet.add(msgContent);
    console.warn(msgContent);
  },
  error: function error3(componentName, message) {
    console.error("TDesign ".concat(componentName, " Error: ").concat(message));
  },
  errorOnce: function errorOnce(componentName, message) {
    var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
    if (logSet.has(msgContent))
      return;
    logSet.add(msgContent);
    console.error(msgContent);
  },
  info: function info2(componentName, message) {
    console.info("TDesign ".concat(componentName, " Info: ").concat(message));
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1w(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1v(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1w(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Menu = defineComponent({
  name: "TMenu",
  props: _objectSpread$1v({}, props$S),
  emits: ["collapsed", "change", "expand"],
  setup: function setup24(props2, ctx) {
    var classPrefix2 = usePrefixClass();
    var emitEvent2 = useEmitEvent();
    watchEffect(function() {
      if (ctx.slots.options) {
        log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
      }
    });
    var mode3 = ref(props2.expandType);
    var theme = computed(function() {
      return props2.theme;
    });
    var isMutex = computed(function() {
      return props2.expandMutex;
    });
    var menuClass = computed(function() {
      return ["".concat(classPrefix2.value, "-default-menu"), "".concat(classPrefix2.value, "-menu--").concat(props2.theme), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-collapsed"), props2.collapsed)];
    });
    var innerClasses = computed(function() {
      return ["".concat(classPrefix2.value, "-menu"), _defineProperty$3({}, "".concat(classPrefix2.value, "-menu--scroll"), mode3.value !== "popup"), "narrow-scrollbar"];
    });
    var expandWidth = typeof props2.width === "number" ? "".concat(props2.width, "px") : props2.width;
    var styles = computed(function() {
      return {
        height: "100%",
        width: props2.collapsed ? "64px" : expandWidth
      };
    });
    var activeValue = ref(props2.defaultValue || props2.value);
    var activeValues = ref([]);
    var expandValues = ref(props2.expanded || []);
    watchEffect(function() {
      mode3.value = props2.collapsed ? "popup" : "normal";
      emitEvent2("collapsed", mode3.value);
    });
    var vMenu = new VMenu({
      isMutex: isMutex.value,
      expandValues: expandValues.value
    });
    provide("TdMenu", {
      activeValue,
      activeValues,
      expandValues,
      mode: mode3,
      theme,
      isHead: false,
      vMenu,
      select: function select2(value6) {
        activeValue.value = value6;
        emitEvent2("change", value6);
      },
      open: function open2(value6, type) {
        if (mode3.value === "normal") {
          expandValues.value = vMenu.expand(value6);
        } else if (type === "add") {
          if (expandValues.value.indexOf(value6) === -1) {
            expandValues.value.push(value6);
          }
        } else if (type === "remove") {
          var index2 = expandValues.value.indexOf(value6);
          expandValues.value.splice(index2, 1);
        }
        emitEvent2("expand", expandValues.value);
      }
    });
    watch(function() {
      return props2.expanded;
    }, function(value6) {
      expandValues.value = value6;
      vMenu.expandValues = new Set(value6);
    });
    var updateActiveValues = function updateActiveValues2(value6) {
      activeValue.value = value6;
      activeValues.value = vMenu.select(value6);
    };
    watch(function() {
      return props2.value;
    }, updateActiveValues);
    watch(function() {
      return props2.defaultValue;
    }, updateActiveValues);
    onMounted(function() {
      activeValues.value = vMenu.select(activeValue.value);
    });
    return {
      styles,
      classPrefix: classPrefix2,
      menuClass,
      innerClasses,
      activeValue,
      activeValues,
      expandValues
    };
  },
  render: function render23() {
    var operations = renderContent(this, "operations", "options");
    var logo = renderTNodeJSX(this, "logo");
    return createVNode("div", {
      "class": this.menuClass,
      "style": this.styles
    }, [createVNode("div", {
      "class": "".concat(this.classPrefix, "-default-menu__inner")
    }, [logo && createVNode("div", {
      "class": "".concat(this.classPrefix, "-menu__logo")
    }, [logo]), createVNode("ul", {
      "class": this.innerClasses
    }, [renderContent(this, "default", "content")]), operations && createVNode("div", {
      "class": "".concat(this.classPrefix, "-menu__operations")
    }, [operations])])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$R = {
  expanded: {
    type: Array
  },
  defaultExpanded: {
    type: Array
  },
  expandType: {
    type: String,
    "default": "normal",
    validator: function validator25(val) {
      return ["normal", "popup"].includes(val);
    }
  },
  logo: {
    type: Function
  },
  operations: {
    type: Function
  },
  theme: {
    type: String,
    "default": "light",
    validator: function validator26(val) {
      return ["light", "dark"].includes(val);
    }
  },
  value: {
    type: [String, Number]
  },
  defaultValue: {
    type: [String, Number]
  },
  onChange: Function,
  onExpand: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var tabPanelProps = {
  "default": {
    type: Function
  },
  destroyOnHide: {
    type: Boolean,
    "default": true
  },
  disabled: Boolean,
  label: {
    type: [String, Function]
  },
  panel: {
    type: [String, Function]
  },
  removable: Boolean,
  value: {
    type: [String, Number]
  },
  onRemove: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1v(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1u(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1v(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _TabPanel = defineComponent({
  name: "TTabPanel",
  props: _objectSpread$1u({}, tabPanelProps),
  setup: function setup25(props2) {
    var COMPONENT_NAME2 = usePrefixClass("tab-panel");
    var renderTNodeContent = useContent();
    useDestroyOnClose();
    var tabs = inject("tabs");
    return function() {
      var isActive2 = props2.value === tabs.value.value;
      if (props2.destroyOnHide && !isActive2)
        return null;
      return withDirectives(createVNode("div", {
        "class": COMPONENT_NAME2.value
      }, [renderTNodeContent("default", "panel")]), [[vShow, isActive2]]);
    };
  }
});
var root = _root;
var now$1 = function() {
  return root.Date.now();
};
var now_1 = now$1;
var reWhitespace = /\s/;
function trimmedEndIndex$1(string) {
  var index2 = string.length;
  while (index2-- && reWhitespace.test(string.charAt(index2))) {
  }
  return index2;
}
var _trimmedEndIndex = trimmedEndIndex$1;
var trimmedEndIndex = _trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim$1(string) {
  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
var _baseTrim = baseTrim$1;
var baseTrim = _baseTrim, isObject$4 = isObject_1, isSymbol$2 = isSymbol_1;
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber$3(value6) {
  if (typeof value6 == "number") {
    return value6;
  }
  if (isSymbol$2(value6)) {
    return NAN;
  }
  if (isObject$4(value6)) {
    var other = typeof value6.valueOf == "function" ? value6.valueOf() : value6;
    value6 = isObject$4(other) ? other + "" : other;
  }
  if (typeof value6 != "string") {
    return value6 === 0 ? value6 : +value6;
  }
  value6 = baseTrim(value6);
  var isBinary = reIsBinary.test(value6);
  return isBinary || reIsOctal.test(value6) ? freeParseInt(value6.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value6) ? NAN : +value6;
}
var toNumber_1 = toNumber$3;
var isObject$3 = isObject_1, now = now_1, toNumber$2 = toNumber_1;
var FUNC_ERROR_TEXT$2 = "Expected a function";
var nativeMax$2 = Math.max, nativeMin$1 = Math.min;
function debounce$1(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$2);
  }
  wait = toNumber$2(wait) || 0;
  if (isObject$3(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax$2(toNumber$2(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time2) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time2;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time2) {
    lastInvokeTime = time2;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time2) : result;
  }
  function remainingWait(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time2 = now();
    if (shouldInvoke(time2)) {
      return trailingEdge(time2);
    }
    timerId = setTimeout(timerExpired, remainingWait(time2));
  }
  function trailingEdge(time2) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time2);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now());
  }
  function debounced() {
    var time2 = now(), isInvoking = shouldInvoke(time2);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time2;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_1 = debounce$1;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$Q = {
  addable: Boolean,
  disabled: Boolean,
  list: {
    type: Array
  },
  placement: {
    type: String,
    "default": "top",
    validator: function validator27(val) {
      if (!val)
        return true;
      return ["left", "top", "bottom", "right"].includes(val);
    }
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator28(val) {
      if (!val)
        return true;
      return ["medium", "large"].includes(val);
    }
  },
  theme: {
    type: String,
    "default": "normal",
    validator: function validator29(val) {
      if (!val)
        return true;
      return ["normal", "card"].includes(val);
    }
  },
  value: {
    type: [String, Number],
    "default": void 0
  },
  modelValue: {
    type: [String, Number],
    "default": void 0
  },
  defaultValue: {
    type: [String, Number]
  },
  onAdd: Function,
  onChange: Function,
  onRemove: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var getDomWidth = function getDomWidth2(dom) {
  return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
};
var tabBase = {
  calcScrollLeft: function calcScrollLeft(elements, scrollLeft) {
    var container = elements.navsContainer;
    var wrap = elements.navsWrap;
    var rightOperations = elements.rightOperations;
    var rightOperationsZoneWidth = getDomWidth(rightOperations);
    if (!wrap || !container)
      return scrollLeft;
    var containerWidth = getDomWidth(container);
    var wrapWidth = getDomWidth(wrap);
    if (wrapWidth <= containerWidth) {
      return 0;
    }
    if (scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {
      return wrapWidth + rightOperationsZoneWidth - containerWidth;
    }
    return scrollLeft;
  },
  calculateCanToLeft: function calculateCanToLeft(depElement, scrollLeft, placement) {
    if (["left", "right"].includes(placement.toLowerCase())) {
      return false;
    }
    var container = depElement.navsContainer, wrap = depElement.navsWrap, leftOperations = depElement.leftOperations, toLeftBtn = depElement.toLeftBtn;
    if (!wrap || !container) {
      return false;
    }
    var leftOperationsZoneWidth = getDomWidth(leftOperations);
    var leftIconWidth = getDomWidth(toLeftBtn);
    return scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;
  },
  calculateCanToRight: function calculateCanToRight(depElement, scrollLeft, placement) {
    if (["left", "right"].includes(placement.toLowerCase())) {
      return false;
    }
    var container = depElement.navsContainer, wrap = depElement.navsWrap, rightOperations = depElement.rightOperations, toRightBtn = depElement.toRightBtn;
    if (!wrap || !container) {
      return false;
    }
    var rightOperationsZoneWidth = getDomWidth(rightOperations);
    var rightIconWidth = getDomWidth(toRightBtn);
    return scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;
  },
  moveActiveTabIntoView: function moveActiveTabIntoView(depElement, scrollLeft) {
    var activeTab = depElement.activeTab, container = depElement.navsContainer, navsWrap = depElement.navsWrap, leftOperations = depElement.leftOperations, toLeftBtn = depElement.toLeftBtn, rightOperations = depElement.rightOperations, toRightBtn = depElement.toRightBtn;
    if (!activeTab)
      return scrollLeft;
    var totalWidthBeforeActiveTab = activeTab.offsetLeft;
    if (!container)
      return scrollLeft;
    var _getLeftCoverWidth = function _getLeftCoverWidth2() {
      var leftOperationsZoneWidth = getDomWidth(leftOperations);
      var leftIconWidth = getDomWidth(toLeftBtn);
      if (totalWidthBeforeActiveTab === 0) {
        return leftOperationsZoneWidth - leftIconWidth;
      }
      return leftOperationsZoneWidth;
    };
    var leftCoverWidth = _getLeftCoverWidth();
    var isCurrentTabHiddenInLeftZone = scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;
    if (isCurrentTabHiddenInLeftZone) {
      return totalWidthBeforeActiveTab - leftCoverWidth;
    }
    var activeTabWidth = activeTab.offsetWidth;
    if (!container || !navsWrap)
      return scrollLeft;
    var containerWidth = getDomWidth(container);
    var _getRightCoverWidth = function _getRightCoverWidth2() {
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      var rightIconWidth = getDomWidth(toRightBtn);
      var wrapWidth = getDomWidth(navsWrap);
      if (Math.abs(totalWidthBeforeActiveTab + activeTabWidth - wrapWidth) < 1) {
        return rightOperationsZoneWidth - rightIconWidth;
      }
      return rightOperationsZoneWidth;
    };
    var rightCoverWidth = _getRightCoverWidth();
    var isHiddenInRightZone = scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;
    if (isHiddenInRightZone) {
      return totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;
    }
    return scrollLeft;
  },
  scrollToLeft: function scrollToLeft(depElement, scrollLeft) {
    var container = depElement.navsContainer, leftOperations = depElement.leftOperations, toLeftBtn = depElement.toLeftBtn;
    if (!container)
      return 0;
    var leftOperationsZoneWidth = getDomWidth(leftOperations);
    var leftIconWidth = getDomWidth(toLeftBtn);
    var containerWidth = getDomWidth(container);
    return Math.max(-(leftOperationsZoneWidth - leftIconWidth), scrollLeft - containerWidth);
  },
  scrollToRight: function scrollToRight(depElement, scrollLeft) {
    var container = depElement.navsContainer, wrap = depElement.navsWrap, rightOperations = depElement.rightOperations, toRightBtn = depElement.toRightBtn;
    var rightOperationsZoneWidth = getDomWidth(rightOperations);
    var rightIconWidth = getDomWidth(toRightBtn);
    var containerWidth = getDomWidth(container);
    var wrapWidth = getDomWidth(wrap);
    return Math.min(scrollLeft + containerWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TTabNavItem = defineComponent({
  name: "TTabNavItem",
  components: {
    CloseIcon: close
  },
  props: {
    index: Number,
    active: {
      type: Boolean
    },
    theme: props$Q.theme,
    size: props$Q.size,
    placement: props$Q.placement,
    label: {
      type: null
    },
    disabled: tabPanelProps.disabled,
    removable: tabPanelProps.removable,
    value: tabPanelProps.value,
    onClick: Function,
    onRemove: Function
  },
  setup: function setup26(props2) {
    var itemRef = ref();
    useRipple(itemRef);
    var COMPONENT_NAME2 = usePrefixClass("tabs__nav-item");
    var classPrefix2 = usePrefixClass();
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    var removeBtnClick = function removeBtnClick2(_ref) {
      var e = _ref.e;
      e.stopPropagation();
      props2.onRemove({
        e,
        value: props2.value,
        index: props2.index
      });
    };
    var onClickNav = function onClickNav2(e) {
      if (props2.disabled)
        return;
      props2.onClick(e);
    };
    var navItemClass = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty$3(_ref2, COMPONENT_NAME2.value, true), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-tabs__nav--card"), props2.theme === "card"), _defineProperty$3(_ref2, STATUS.value.disabled, props2.disabled), _defineProperty$3(_ref2, STATUS.value.active, props2.active), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-left"), props2.placement === "left"), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-right"), props2.placement === "right"), _defineProperty$3(_ref2, SIZE.value.medium, props2.size === "medium"), _defineProperty$3(_ref2, SIZE.value.large, props2.size === "large"), _ref2;
    });
    var renderCardItem = function renderCardItem2() {
      return createVNode("div", {
        "class": navItemClass.value,
        "onClick": onClickNav,
        "ref": itemRef
      }, [createVNode("span", {
        "class": "".concat(COMPONENT_NAME2.value, "-text-wrapper")
      }, [props2.label]), props2.removable && !props2.disabled ? createVNode(close, {
        "class": "remove-btn",
        "onClick": removeBtnClick
      }, null) : null]);
    };
    var renderNormalItem = function renderNormalItem2() {
      var _ref3;
      return createVNode("div", {
        "class": navItemClass.value,
        "onClick": onClickNav
      }, [createVNode("div", {
        "class": ["".concat(COMPONENT_NAME2.value, "-wrapper"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, props2.disabled), _defineProperty$3(_ref3, STATUS.value.active, props2.active), _ref3)],
        "ref": itemRef
      }, [createVNode("span", {
        "class": "".concat(COMPONENT_NAME2.value, "-text-wrapper")
      }, [props2.label])])]);
    };
    return function() {
      return props2.theme === "card" ? renderCardItem() : renderNormalItem();
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TTabNavBar = defineComponent({
  props: {
    navs: {
      type: Array
    },
    placement: props$Q.placement,
    value: props$Q.value
  },
  setup: function setup27(props2) {
    var COMPONENT_NAME2 = usePrefixClass("tabs");
    var classPrefix2 = usePrefixClass();
    var navBarClass = computed(function() {
      return ["".concat(COMPONENT_NAME2.value, "__bar"), "".concat(classPrefix2.value, "-is-").concat(props2.placement)];
    });
    var navBarStyle = ref(null);
    var getStyle = function getStyle2() {
      var _props$navs$i$el2, _ref3;
      var isVertical = ["left", "right"].includes(props2.placement.toLowerCase());
      var _ref = isVertical ? ["height", "top"] : ["width", "left"], _ref2 = _slicedToArray(_ref, 2), sizePropName = _ref2[0], offsetPropName = _ref2[1];
      var offset2 = 0;
      var i = 0;
      for (; i < props2.navs.length; i++) {
        var _props$navs$i, _props$navs$i$el;
        if (props2.navs[i].props.value === props2.value) {
          break;
        }
        offset2 += ((_props$navs$i = props2.navs[i]) === null || _props$navs$i === void 0 ? void 0 : (_props$navs$i$el = _props$navs$i.el) === null || _props$navs$i$el === void 0 ? void 0 : _props$navs$i$el["client".concat(firstUpperCase$1(sizePropName))]) || 0;
      }
      if (!props2.navs[i])
        return {};
      return _ref3 = {}, _defineProperty$3(_ref3, offsetPropName, "".concat(offset2, "px")), _defineProperty$3(_ref3, sizePropName, "".concat(((_props$navs$i$el2 = props2.navs[i].el) === null || _props$navs$i$el2 === void 0 ? void 0 : _props$navs$i$el2["client".concat(firstUpperCase$1(sizePropName))]) || 0, "px")), _ref3;
    };
    onMounted(function() {
      nextTick(function() {
        navBarStyle.value = getStyle();
      });
    });
    watch([function() {
      return props2.navs;
    }, function() {
      return props2.value;
    }, function() {
      return props2.placement;
    }], function() {
      nextTick(function() {
        navBarStyle.value = getStyle();
      });
    });
    return function() {
      return createVNode("div", {
        "class": navBarClass.value,
        "style": navBarStyle.value
      }, null);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1u(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1t(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1u(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var calculateCanToLeft2 = tabBase.calculateCanToLeft, calculateCanToRight2 = tabBase.calculateCanToRight, calcScrollLeft2 = tabBase.calcScrollLeft, scrollToLeft2 = tabBase.scrollToLeft, scrollToRight2 = tabBase.scrollToRight, moveActiveTabIntoView2 = tabBase.moveActiveTabIntoView;
var TTabNav = defineComponent(_objectSpread$1t(_objectSpread$1t({
  name: "TTabNav",
  components: {
    TTabNavItem,
    TTabNavBar,
    ChevronLeftIcon: chevronLeft,
    ChevronRightIcon: chevronRight,
    CloseIcon: close,
    AddIcon: add,
    Transition
  }
}, {
  resizeObserver: null
}), {}, {
  props: {
    theme: props$Q.theme,
    panels: {
      type: Array,
      "default": function _default5() {
        return [];
      }
    },
    value: props$Q.value,
    placement: props$Q.placement,
    size: props$Q.size,
    disabled: props$Q.disabled,
    addable: props$Q.addable,
    onChange: props$Q.onChange,
    onAdd: props$Q.onAdd,
    onRemove: props$Q.onRemove
  },
  setup: function setup28(props2) {
    var COMPONENT_NAME2 = usePrefixClass("tabs");
    var classPrefix2 = usePrefixClass();
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
    var scrollLeft = ref(0);
    var canToLeft = ref(false);
    var canToRight = ref(false);
    var navsContainerRef = ref();
    var navsWrapRef = ref();
    var leftOperationsRef = ref();
    var toLeftBtnRef = ref();
    var rightOperationsRef = ref();
    var toRightBtnRef = ref();
    var activeTabRef = ref();
    var getRefs = function getRefs2() {
      return {
        navsContainer: navsContainerRef.value,
        navsWrap: navsWrapRef.value,
        leftOperations: leftOperationsRef.value,
        toLeftBtn: toLeftBtnRef.value,
        rightOperations: rightOperationsRef.value,
        toRightBtn: toRightBtnRef.value
      };
    };
    var wrapTransformStyle = computed(function() {
      if (["left", "right"].includes(props2.placement.toLowerCase()))
        return {};
      return {
        transform: "translate3d(".concat(-scrollLeft.value, "px, 0, 0)")
      };
    });
    var navsContainerStyle = computed(function() {
      return props2.addable ? {
        "min-height": "48px"
      } : null;
    });
    var iconBaseClass = computed(function() {
      var _ref;
      return _ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "__btn"), true), _defineProperty$3(_ref, SIZE.value.medium, props2.size === "medium"), _defineProperty$3(_ref, SIZE.value.large, props2.size === "large"), _ref;
    });
    var leftIconClass = computed(function() {
      return _objectSpread$1t(_defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "__btn--left"), true), iconBaseClass.value);
    });
    var rightIconClass = computed(function() {
      return _objectSpread$1t(_defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "__btn--right"), true), iconBaseClass.value);
    });
    var addIconClass = computed(function() {
      return _objectSpread$1t(_defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "__add-btn"), true), iconBaseClass.value);
    });
    var navContainerClass = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "__nav-container"), true), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "__nav--card"), props2.theme === "card"), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-").concat(props2.placement), true), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-addable"), props2.theme === "card" && props2.addable), _ref2;
    });
    var navScrollContainerClass = computed(function() {
      var _ref3;
      return _ref3 = {}, _defineProperty$3(_ref3, "".concat(COMPONENT_NAME2.value, "__nav-scroll"), true), _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-scrollable"), canToLeft.value || canToRight.value), _ref3;
    });
    var navsWrapClass = computed(function() {
      return ["".concat(COMPONENT_NAME2.value, "__nav-wrap"), "".concat(classPrefix2.value, "-is-smooth"), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-vertical"), props2.placement === "left" || props2.placement === "right")];
    });
    var totalAdjust = function totalAdjust2() {
      adjustArrowDisplay();
      adjustScrollLeft();
    };
    watch([scrollLeft, function() {
      return props2.placement;
    }], totalAdjust);
    useResize(debounce_1(totalAdjust), navsContainerRef.value);
    onMounted(totalAdjust);
    var adjustScrollLeft = function adjustScrollLeft2() {
      scrollLeft.value = calcScrollLeft2(getRefs(), scrollLeft.value);
    };
    var adjustArrowDisplay = function adjustArrowDisplay2() {
      canToLeft.value = calculateCanToLeft2(getRefs(), scrollLeft.value, props2.placement);
      canToRight.value = calculateCanToRight2(getRefs(), scrollLeft.value, props2.placement);
    };
    var handleScroll3 = function handleScroll4(direction) {
      if (direction === "left") {
        scrollLeft.value = scrollToLeft2(getRefs(), scrollLeft.value);
      } else {
        scrollLeft.value = scrollToRight2(getRefs(), scrollLeft.value);
      }
    };
    var handleAddTab = function handleAddTab2(e) {
      props2.onAdd({
        e
      });
    };
    var tabClick = function tabClick2(event, nav) {
      var value6 = nav.value, disabled2 = nav.disabled;
      if (disabled2 || props2.value === value6) {
        return false;
      }
      props2.onChange(value6);
    };
    var removeBtnClick = function removeBtnClick2(_ref5) {
      var e = _ref5.e, value6 = _ref5.value, index2 = _ref5.index;
      props2.onRemove({
        e,
        value: value6,
        index: index2
      });
    };
    var setActiveTab = function setActiveTab2(ref2) {
      if ((ref2 === null || ref2 === void 0 ? void 0 : ref2.value) === props2.value && activeTabRef.value !== ref2.$el) {
        activeTabRef.value = ref2.$el;
        scrollLeft.value = moveActiveTabIntoView2(_objectSpread$1t({
          activeTab: activeTabRef.value
        }, getRefs()), scrollLeft.value);
      }
    };
    var navs = computed(function() {
      return props2.panels.map(function(panel, index2) {
        var _panel$children;
        var label2;
        if (panel !== null && panel !== void 0 && (_panel$children = panel.children) !== null && _panel$children !== void 0 && _panel$children.label) {
          label2 = panel.children.label();
        } else {
          label2 = panel.label || "\u9009\u9879\u5361".concat(index2 + 1);
        }
        return createVNode(TTabNavItem, {
          "ref": setActiveTab,
          "key": panel.value,
          "index": index2,
          "theme": props2.theme,
          "size": props2.size,
          "placement": props2.placement,
          "label": label2,
          "active": panel.value === props2.value,
          "disabled": props2.disabled || panel.disabled,
          "removable": panel.removable,
          "value": panel.value,
          "onClick": function onClick2(e) {
            return tabClick(e, panel);
          },
          "onRemove": removeBtnClick
        }, null);
      });
    });
    var renderArrows = function renderArrows2() {
      return [createVNode("div", {
        "ref": leftOperationsRef,
        "class": ["".concat(COMPONENT_NAME2.value, "__operations"), "".concat(COMPONENT_NAME2.value, "__operations--left")]
      }, [createVNode(resolveComponent("transition"), {
        "name": "fade",
        "mode": "out-in",
        "appear": true
      }, {
        "default": function _default65() {
          return [canToLeft.value ? createVNode("div", {
            "ref": toLeftBtnRef,
            "class": leftIconClass.value,
            "onClick": function onClick2() {
              return handleScroll3("left");
            }
          }, [createVNode(chevronLeft, null, null)]) : null];
        }
      })]), createVNode("div", {
        "ref": rightOperationsRef,
        "class": ["".concat(COMPONENT_NAME2.value, "__operations"), "".concat(COMPONENT_NAME2.value, "__operations--right")]
      }, [createVNode(resolveComponent("transition"), {
        "name": "fade",
        "mode": "out-in",
        "appear": true
      }, {
        "default": function _default65() {
          return [canToRight.value ? createVNode("div", {
            "ref": toRightBtnRef,
            "class": rightIconClass.value,
            "onClick": function onClick2() {
              return handleScroll3("right");
            }
          }, [createVNode(chevronRight, null, null)]) : null];
        }
      }), props2.theme === "card" && props2.addable ? createVNode("div", {
        "class": addIconClass.value,
        "onClick": handleAddTab
      }, [createVNode(add, null, null)]) : null])];
    };
    var renderNavs = function renderNavs2() {
      return createVNode("div", {
        "class": navContainerClass.value
      }, [createVNode("div", {
        "class": navScrollContainerClass.value
      }, [createVNode("div", {
        "ref": navsWrapRef,
        "class": navsWrapClass.value,
        "style": wrapTransformStyle.value
      }, [props2.theme !== "card" && createVNode(TTabNavBar, {
        "placement": props2.placement,
        "value": props2.value,
        "navs": navs.value
      }, null), navs.value])])]);
    };
    return function() {
      return createVNode("div", {
        "ref": navsContainerRef,
        "class": ["".concat(COMPONENT_NAME2.value, "__nav")],
        "style": navsContainerStyle.value
      }, [renderArrows(), renderNavs()]);
    };
  }
}));
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useVModel(value6, modelValue, defaultValue, onChange) {
  var _getCurrentInstance = getCurrentInstance(), emit = _getCurrentInstance.emit;
  var internalValue = ref();
  internalValue.value = defaultValue;
  if (typeof value6.value !== "undefined") {
    return [value6, onChange || function() {
    }];
  }
  if (typeof modelValue.value !== "undefined") {
    return [modelValue, function(newValue) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:modelValue", newValue].concat(args));
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }
  return [internalValue, function(newValue) {
    internalValue.value = newValue;
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
  }];
}
var UPDATE_MODEL = "update:modelValue";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Tabs = defineComponent({
  name: "TTabs",
  components: {
    TTabPanel: _TabPanel,
    TTabNav
  },
  props: props$Q,
  setup: function setup29(props2) {
    var COMPONENT_NAME2 = usePrefixClass("tabs");
    var classPrefix2 = usePrefixClass();
    var renderTNodeJSX3 = useTNodeJSX();
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue || "", props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), tabValue = _useVModel2[0], setTabValue = _useVModel2[1];
    provide("tabs", {
      value: tabValue
    });
    var onTabAdd = function onTabAdd2(context) {
      props2.onAdd({
        e: context.e
      });
    };
    var onTabChange = function onTabChange2(value22) {
      setTabValue(value22);
    };
    var onTabRemove = function onTabRemove2(_ref) {
      var e = _ref.e, value22 = _ref.value, index2 = _ref.index;
      props2.onRemove({
        value: value22,
        index: index2,
        e
      });
    };
    var getSlotPanels = function getSlotPanels2() {
      var content = renderTNodeJSX3("default");
      if (!content)
        return [];
      content = content.map(function(item) {
        if (item.children && Array.isArray(item.children))
          return item.children;
        return item;
      }).flat().filter(function(item) {
        return item.type.name === "TTabPanel";
      });
      return content;
    };
    var renderHeader = function renderHeader2() {
      var _props2$list, _ref2;
      var panels2 = ((_props2$list = props2.list) !== null && _props2$list !== void 0 && _props2$list.length ? props2.list : getSlotPanels()) || [];
      var panelsData = panels2.map(function(item) {
        var selfItem = item;
        if (item.props) {
          Object.keys(item.props).forEach(function(key) {
            selfItem[key] = item.props[key];
          });
        }
        return selfItem;
      });
      var tabNavProps = {
        theme: props2.theme,
        value: tabValue.value,
        size: props2.size,
        disabled: props2.disabled,
        placement: props2.placement,
        addable: props2.addable,
        panels: panelsData
      };
      return createVNode("div", {
        "class": (_ref2 = {}, _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-tabs__header"), true), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-").concat(props2.placement), true), _ref2)
      }, [createVNode(TTabNav, mergeProps(tabNavProps, {
        "onChange": onTabChange,
        "onAdd": onTabAdd,
        "onRemove": onTabRemove
      }), null)]);
    };
    var renderContent6 = function renderContent7() {
      var _props2$list2;
      var panels2 = getSlotPanels();
      if ((_props2$list2 = props2.list) !== null && _props2$list2 !== void 0 && _props2$list2.length) {
        return props2.list.map(function(item) {
          return createVNode(_TabPanel, mergeProps(item, {
            "onRemove": onTabRemove
          }), null);
        });
      }
      if (panels2 && panels2.length) {
        return createVNode("div", {
          "class": ["".concat(classPrefix2.value, "-tabs__content")]
        }, [panels2]);
      }
      console.warn("Tdesign error: list or slots is empty");
    };
    return function() {
      return createVNode("div", {
        "class": [COMPONENT_NAME2.value]
      }, [props2.placement !== "bottom" ? [renderHeader(), renderContent6()] : [renderContent6(), renderHeader()]]);
    };
  }
});
var index$F = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Tabs = withInstall(_Tabs);
var TabPanel = withInstall(_TabPanel);
var index$E = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$o(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _HeadMenu = defineComponent({
  name: "THeadMenu",
  components: {
    Tabs,
    TabPanel
  },
  props: props$R,
  emits: ["change", "expand"],
  setup: function setup30(props2, ctx) {
    var classPrefix2 = usePrefixClass();
    var emitEvent2 = useEmitEvent();
    watchEffect(function() {
      if (ctx.slots.options) {
        log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
      }
    });
    var activeValue = ref(props2.defaultValue || props2.value);
    var activeValues = ref([]);
    var expandValues = ref(props2.defaultExpanded || props2.expanded || []);
    var theme = computed(function() {
      return props2.theme;
    });
    var menuClass = computed(function() {
      return ["".concat(classPrefix2.value, "-menu"), "".concat(classPrefix2.value, "-head-menu"), "".concat(classPrefix2.value, "-menu--").concat(props2.theme)];
    });
    var mode3 = ref(props2.expandType);
    var submenu = reactive([]);
    var vMenu = new VMenu({
      isMutex: true,
      expandValues: expandValues.value
    });
    provide("TdMenu", {
      mode: mode3,
      theme,
      vMenu,
      isHead: true,
      expandValues,
      activeValue,
      activeValues,
      select: function select2(value6) {
        emitEvent2("change", value6);
      },
      open: function open2(value6, type) {
        var expanded2 = _toConsumableArray(expandValues.value);
        var index2 = expanded2.indexOf(value6);
        if (mode3.value === "popup") {
          if (type === "add") {
            if (index2 === -1) {
              expanded2.push(value6);
            }
          } else if (type === "remove") {
            expanded2.splice(index2, 1);
          }
        } else {
          expanded2.splice(0, 1);
          if (index2 === -1) {
            expanded2.push(value6);
          }
        }
        emitEvent2("expand", expanded2);
      }
    });
    var handleTabChange = function handleTabChange2(value6) {
      emitEvent2("change", value6);
    };
    var handleSubmenuExpand = function handleSubmenuExpand2(value6) {
      var ans = vMenu.getChild(value6);
      submenu.length = 0;
      submenu.push.apply(submenu, _toConsumableArray(ans));
    };
    watch(function() {
      return props2.expanded;
    }, function(value6) {
      expandValues.value = value6;
      if (mode3.value === "normal") {
        handleSubmenuExpand(value6[0]);
      }
    });
    var updateActiveValues = function updateActiveValues2(value6) {
      activeValue.value = value6;
      activeValues.value = vMenu.select(value6);
    };
    watch(function() {
      return props2.value;
    }, updateActiveValues);
    watch(function() {
      return props2.defaultValue;
    }, updateActiveValues);
    watch(function() {
      return props2.expandType;
    }, function(value6) {
      mode3.value = value6;
    });
    onMounted(function() {
      var _expandValues$value;
      activeValues.value = vMenu.select(activeValue.value);
      if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
        handleSubmenuExpand(expandValues.value[0]);
      }
    });
    return {
      classPrefix: classPrefix2,
      mode: mode3,
      menuClass,
      expandValues,
      activeValue,
      activeValues,
      submenu,
      handleTabChange
    };
  },
  methods: {
    renderNormalSubmenu: function renderNormalSubmenu() {
      var _slot;
      if (this.submenu.length === 0)
        return null;
      return createVNode("ul", {
        "class": ["".concat(this.classPrefix, "-head-menu__submenu"), "".concat(this.classPrefix, "-submenu")]
      }, [createVNode(resolveComponent("t-tabs"), {
        "value": this.activeValue,
        "onChange": this.handleTabChange
      }, _isSlot$o(_slot = this.submenu.map(function(item) {
        var _item$vnode$;
        return createVNode(resolveComponent("t-tab-panel"), {
          "value": item.value,
          "label": (_item$vnode$ = item.vnode()[0]) === null || _item$vnode$ === void 0 ? void 0 : _item$vnode$.children
        }, null);
      })) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      })]);
    }
  },
  render: function render24() {
    var classPrefix2 = this.classPrefix;
    var operations = renderContent(this, "operations", "options");
    var logo = renderTNodeJSX(this, "logo");
    return createVNode("div", {
      "class": this.menuClass
    }, [createVNode("div", {
      "class": "".concat(classPrefix2, "-head-menu__inner")
    }, [logo && createVNode("div", {
      "class": "".concat(classPrefix2, "-menu__logo")
    }, [logo]), createVNode("ul", {
      "class": "".concat(classPrefix2, "-menu")
    }, [renderContent(this, "default", "content")]), operations && createVNode("div", {
      "class": "".concat(classPrefix2, "-menu__operations")
    }, [operations])]), this.mode === "normal" && this.renderNormalSubmenu()]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$P = {
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  disabled: Boolean,
  icon: {
    type: Function
  },
  title: {
    type: [String, Function]
  },
  value: {
    type: [String, Number]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var FakeArrow = defineComponent({
  name: "TFakeArrow",
  props: {
    isActive: {
      type: Boolean
    },
    overlayClassName: {
      type: [String, Object, Array]
    },
    overlayStyle: {
      type: Object || String
    }
  },
  setup: function setup31(props2) {
    var COMPONENT_NAME2 = usePrefixClass("fake-arrow");
    var classes6 = computed(function() {
      return [COMPONENT_NAME2.value, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--active"), props2.isActive), props2.overlayClassName];
    });
    return {
      classes: classes6
    };
  },
  render: function render25() {
    return createVNode("svg", {
      "class": this.classes,
      "width": "16",
      "height": "16",
      "viewBox": "0 0 16 16",
      "fill": "none",
      "xmlns": "http://www.w3.org/2000/svg",
      "style": this.overlayStyle
    }, [createVNode("path", {
      "d": "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
      "stroke": "black",
      "stroke-opacity": "0.9",
      "stroke-width": "1.3"
    }, null)]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1t(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1s(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1t(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Submenu = defineComponent({
  name: "TSubmenu",
  props: props$P,
  setup: function setup32(props2, ctx) {
    var classPrefix2 = usePrefixClass();
    var menu = inject("TdMenu");
    var theme = menu.theme, activeValues = menu.activeValues, expandValues = menu.expandValues, mode3 = menu.mode, isHead = menu.isHead, open2 = menu.open;
    var submenu = inject("TdSubmenu", null);
    var menuItems = ref([]);
    var isActive2 = computed(function() {
      return activeValues.value.indexOf(props2.value) > -1;
    });
    var popupVisible = ref(false);
    var isCursorInPopup = ref(false);
    var rippleColor = computed(function() {
      return theme.value === "light" ? "#E7E7E7" : "#383838";
    });
    var isOpen = computed(function() {
      if (mode3.value === "popup") {
        return popupVisible.value;
      }
      return expandValues ? expandValues.value.includes(props2.value) : false;
    });
    var isNested = ref(false);
    var submenuRef = ref();
    useRipple(submenuRef, rippleColor);
    var classes6 = computed(function() {
      var _ref;
      return ["".concat(classPrefix2.value, "-submenu"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-opened"), isOpen.value), _ref)];
    });
    var popupClass = computed(function() {
      return ["".concat(classPrefix2.value, "-menu__popup"), "".concat(classPrefix2.value, "-is-").concat(isHead ? "horizontal" : "vertical"), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-opened"), popupVisible.value)];
    });
    var submenuClass = computed(function() {
      var _ref3;
      return ["".concat(classPrefix2.value, "-menu__item"), "".concat(classPrefix2.value, "-menu__item-spacer"), "".concat(classPrefix2.value, "-menu__item-spacer--").concat(isHead && !isNested.value ? "bottom" : "right"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-opened"), isOpen.value), _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-active"), isActive2.value), _ref3)];
    });
    var subClass = computed(function() {
      return ["".concat(classPrefix2.value, "-menu__sub"), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-opened"), isOpen.value)];
    });
    var arrowClass = computed(function() {
      return [_defineProperty$3({}, "".concat(classPrefix2.value, "-fake-arrow--active"), isOpen.value)];
    });
    var handleMouseEnter = function handleMouseEnter2() {
      if (props2.disabled)
        return;
      setTimeout(function() {
        if (!popupVisible.value) {
          open2(props2.value);
        }
        popupVisible.value = true;
      }, 0);
    };
    var handleMouseLeave = function handleMouseLeave2() {
      setTimeout(function() {
        if (isCursorInPopup.value)
          return;
        popupVisible.value = false;
      }, 0);
    };
    var handleMouseLeavePopup = function handleMouseLeavePopup2(e) {
      var toElement = e.toElement;
      var target = toElement;
      var isSubmenu = function isSubmenu2(el) {
        return el === submenuRef.value;
      };
      while (target !== document && !isSubmenu(target)) {
        target = target.parentNode;
      }
      isCursorInPopup.value = false;
      if (!isSubmenu(target)) {
        popupVisible.value = false;
      }
    };
    var handleSubmenuItemClick = function handleSubmenuItemClick2() {
      if (props2.disabled)
        return;
      open2(props2.value);
    };
    watch(popupVisible, function(visible4) {
      menu.open(props2.value, visible4 ? "add" : "remove");
    });
    provide("TdSubmenu", {
      value: props2.value,
      addMenuItem: function addMenuItem(item) {
        menuItems.value.push(item);
        if (submenu) {
          submenu.addMenuItem(item);
        }
      }
    });
    onMounted(function() {
      var _menu$vMenu, _instance$parent;
      menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
        value: props2.value,
        parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
        vnode: ctx.slots["default"]
      });
      var instance = getCurrentInstance();
      isNested.value = !/^t(head)?menu/i.test((_instance$parent = instance.parent) === null || _instance$parent === void 0 ? void 0 : _instance$parent.type.name);
    });
    return {
      classPrefix: classPrefix2,
      menuItems,
      mode: mode3,
      isHead,
      isNested,
      classes: classes6,
      subClass,
      arrowClass,
      popupClass,
      submenuClass,
      submenuRef,
      popupVisible,
      isCursorInPopup,
      handleMouseEnter,
      handleMouseLeave,
      handleMouseLeavePopup,
      handleSubmenuItemClick
    };
  },
  methods: {
    renderPopup: function renderPopup(triggerElement) {
      var _this = this;
      var placement = "right-top";
      if (!this.isNested && this.isHead) {
        placement = "bottom-left";
      }
      var overlayStyle2 = _defineProperty$3({}, "margin-".concat(this.isHead ? "top" : "left"), "20px");
      var popupWrapper = createVNode("ul", {
        "class": "".concat(this.classPrefix, "-menu__popup-wrapper")
      }, [renderContent(this, "default", "content")]);
      var popupInside = createVNode("div", {
        "ref": "submenuRef",
        "class": this.submenuClass
      }, [triggerElement, createVNode("div", {
        "class": this.popupClass
      }, [popupWrapper])]);
      var slots = {
        content: function content() {
          return popupWrapper;
        }
      };
      var realPopup = createVNode(Popup, {
        "overlayClassName": [].concat(_toConsumableArray(this.popupClass), ["".concat(this.classPrefix, "-menu__spacer"), "".concat(this.classPrefix, "-menu__spacer--").concat(this.isHead ? "top" : "left")]),
        "onEnter": function onEnter() {
          return _this.isCursorInPopup = true;
        },
        "onLeave": this.handleMouseLeavePopup,
        "visible": this.popupVisible,
        "placement": placement,
        "overlayStyle": overlayStyle2
      }, _objectSpread$1s({
        "default": function _default65() {
          return [createVNode("div", {
            "ref": "submenuRef",
            "class": _this.submenuClass
          }, [triggerElement])];
        }
      }, slots));
      return this.isNested ? popupInside : realPopup;
    },
    renderHeadSubmenu: function renderHeadSubmenu() {
      var normalSubmenu = [createVNode("div", {
        "ref": "submenuRef",
        "class": this.submenuClass,
        "onClick": this.handleSubmenuItemClick
      }, [renderTNodeJSX(this, "title")]), createVNode("ul", {
        "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
      }, [renderContent(this, "default", "content")])];
      var triggerElement = [renderTNodeJSX(this, "title"), createVNode(FakeArrow, {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(this.isNested ? -90 : 0, "deg)")
        }
      }, null)];
      return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
    },
    renderSubmenu: function renderSubmenu() {
      var hasContent = this.$slots.content || this.$slots["default"];
      var icon = renderTNodeJSX(this, "icon");
      var child = renderContent(this, "default", "content");
      var _getCurrentInstance = getCurrentInstance(), parent2 = _getCurrentInstance.parent;
      var paddingLeft = 44;
      while (parent2 && parent2.type.name !== "TMenu") {
        if (parent2.type.name === "TSubmenu") {
          paddingLeft += 16;
        }
        parent2 = parent2.parent;
      }
      var needRotate = this.mode === "popup" && this.isNested;
      var normalSubmenu = [createVNode("div", {
        "ref": "submenuRef",
        "class": this.submenuClass,
        "onClick": this.handleSubmenuItemClick
      }, [icon, createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderTNodeJSX(this, "title", {
        silent: true
      })]), hasContent && createVNode(FakeArrow, {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
        }
      }, null)]), createVNode("ul", {
        "class": this.subClass,
        "style": {
          "--padding-left": "".concat(paddingLeft, "px")
        }
      }, [child])];
      var triggerElement = [icon, createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderTNodeJSX(this, "title", {
        silent: true
      })]), createVNode(FakeArrow, {
        "overlayClassName": this.arrowClass,
        "overlayStyle": {
          transform: "rotate(".concat(needRotate ? -90 : 0, "deg)"),
          "margin-left": "auto"
        }
      }, null)];
      return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
    }
  },
  render: function render26() {
    var child = null;
    var events = {};
    if (this.mode === "popup") {
      events = {
        onmouseenter: this.handleMouseEnter,
        onmouseleave: this.handleMouseLeave
      };
    }
    if (Object.keys(this.$slots).length > 0) {
      child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
    }
    return createVNode("li", mergeProps({
      "class": this.classes
    }, events), [child]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$O = {
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  disabled: Boolean,
  href: {
    type: String,
    "default": ""
  },
  icon: {
    type: Function
  },
  replace: Boolean,
  router: {
    type: Object
  },
  target: {
    type: String,
    validator: function validator30(val) {
      return ["_blank", "_self", "_parent", "_top"].includes(val);
    }
  },
  to: {
    type: [String, Object]
  },
  value: {
    type: [String, Number]
  },
  onClick: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1s(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1r(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1s(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _MenuItem = defineComponent({
  name: "TMenuItem",
  props: _objectSpread$1r({}, props$O),
  emits: ["click"],
  setup: function setup33(props2, ctx) {
    var classPrefix2 = usePrefixClass();
    var menu = inject("TdMenu");
    var itemRef = ref();
    useRipple(itemRef);
    var submenu = inject("TdSubmenu", null);
    var active = computed(function() {
      return menu.activeValue.value === props2.value;
    });
    var classes6 = computed(function() {
      var _ref;
      return ["".concat(classPrefix2.value, "-menu__item"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-active"), active.value), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-menu__item--plain"), !ctx.slots.icon && !props2.icon), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-submenu__item"), !!submenu && !menu.isHead), _ref)];
    });
    onMounted(function() {
      var _menu$vMenu;
      menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
        value: props2.value,
        parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
        vnode: ctx.slots["default"]
      });
    });
    return {
      classPrefix: classPrefix2,
      menu,
      active,
      classes: classes6,
      itemRef
    };
  },
  methods: {
    handleClick: function handleClick2() {
      if (this.disabled)
        return;
      this.menu.select(this.value);
      emitEvent(this, "click");
      if (this.href) {
        window.open(this.href, this.target);
      } else if (this.to) {
        var router2 = this.router || this.$router;
        var methods = this.replace ? "replace" : "push";
        router2[methods](this.to)["catch"](function(err) {
          if (err.name !== "NavigationDuplicated" && !err.message.includes("Avoided redundant navigation to current location")) {
            throw err;
          }
        });
      }
    }
  },
  render: function render27() {
    return createVNode("li", {
      "ref": "itemRef",
      "class": this.classes,
      "onClick": this.handleClick
    }, [renderTNodeJSX(this, "icon"), createVNode("span", {
      "class": ["".concat(this.classPrefix, "-menu__content")]
    }, [renderContent(this, "default", "content")])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$N = {
  title: {
    type: [String, Function]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _MenuGroup = defineComponent({
  name: "TMenuGroup",
  props: props$N,
  setup: function setup34() {
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2
    };
  },
  render: function render28() {
    var classPrefix2 = this.classPrefix;
    return createVNode("div", {
      "class": "".concat(classPrefix2, "-menu-group")
    }, [createVNode("div", {
      "class": "".concat(classPrefix2, "-menu-group__title")
    }, [this.title]), renderTNodeJSX(this, "default")]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Menu = withInstall(mapProps([{
  name: "value",
  event: "change",
  alias: ["modelValue"]
}])(_Menu));
var HeadMenu = withInstall(mapProps([{
  name: "value",
  event: "change",
  alias: ["modelValue"]
}, {
  name: "expanded",
  event: "expand"
}])(_HeadMenu));
var Submenu = withInstall(_Submenu);
var MenuItem = withInstall(_MenuItem);
var MenuGroup = withInstall(_MenuGroup);
var baseGetTag$2 = _baseGetTag, isObjectLike$3 = isObjectLike_1;
var numberTag$1 = "[object Number]";
function isNumber$1(value6) {
  return typeof value6 == "number" || isObjectLike$3(value6) && baseGetTag$2(value6) == numberTag$1;
}
var isNumber_1 = isNumber$1;
var isNumber = isNumber_1;
function isNaN$1(value6) {
  return isNumber(value6) && value6 != +value6;
}
var _isNaN = isNaN$1;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Addon = defineComponent({
  name: "TAddon",
  inheritAttrs: false,
  props: {
    prepend: {
      type: [String, Function],
      "default": function _default6() {
        return "";
      }
    },
    append: {
      type: [String, Function],
      "default": function _default7() {
        return "";
      }
    }
  },
  setup: function setup35() {
    var COMPONENT_NAME2 = usePrefixClass("addon");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  methods: {
    renderAddon: function renderAddon(h2, type, addon) {
      var addonNode;
      if (this.$slots[type]) {
        addonNode = this.$slots[type](null);
      } else if (typeof addon === "string") {
        addonNode = addon;
      } else if (typeof addon === "function") {
        addonNode = addon(h2);
      } else {
        addonNode = null;
      }
      return addonNode ? createVNode("span", {
        "class": "".concat(this.COMPONENT_NAME, "__").concat(type)
      }, [addonNode]) : addonNode;
    }
  },
  render: function render29() {
    var _ref;
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var prepend = this.renderAddon(h, "prepend", this.prepend);
    var append = this.renderAddon(h, "append", this.append);
    var defaultSlot = this.$slots["default"] ? this.$slots["default"](null) : [null];
    var className = [COMPONENT_NAME2, (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--prepend"), prepend), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--append"), append), _ref)];
    if (!prepend && !append) {
      return defaultSlot[0];
    }
    return createVNode("div", {
      "class": className
    }, [prepend, defaultSlot[0], append]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$M = {
  align: {
    type: String,
    "default": "left",
    validator: function validator31(val) {
      if (!val)
        return true;
      return ["left", "center", "right"].includes(val);
    }
  },
  autocomplete: {
    type: String,
    "default": ""
  },
  autofocus: Boolean,
  autoWidth: Boolean,
  clearable: Boolean,
  disabled: Boolean,
  format: {
    type: Function
  },
  inputClass: {
    type: [String, Object, Array]
  },
  label: {
    type: [String, Function]
  },
  maxcharacter: {
    type: Number
  },
  maxlength: {
    type: Number
  },
  name: {
    type: String,
    "default": ""
  },
  placeholder: {
    type: String,
    "default": void 0
  },
  prefixIcon: {
    type: Function
  },
  readonly: Boolean,
  showClearIconOnEmpty: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator32(val) {
      if (!val)
        return true;
      return ["small", "medium", "large"].includes(val);
    }
  },
  status: {
    type: String,
    validator: function validator33(val) {
      if (!val)
        return true;
      return ["success", "warning", "error"].includes(val);
    }
  },
  suffix: {
    type: [String, Function]
  },
  suffixIcon: {
    type: Function
  },
  tips: {
    type: [String, Function]
  },
  type: {
    type: String,
    "default": "text",
    validator: function validator34(val) {
      if (!val)
        return true;
      return ["text", "number", "url", "tel", "password", "search", "submit", "hidden"].includes(val);
    }
  },
  value: {
    type: [String, Number]
  },
  defaultValue: {
    type: [String, Number]
  },
  onBlur: Function,
  onChange: Function,
  onClear: Function,
  onCompositionend: Function,
  onCompositionstart: Function,
  onEnter: Function,
  onFocus: Function,
  onKeydown: Function,
  onKeypress: Function,
  onKeyup: Function,
  onMouseenter: Function,
  onMouseleave: Function,
  onPaste: Function,
  onWheel: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1r(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1q(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1r(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getValidAttrs$2(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function(key) {
    if (typeof obj[key] !== "undefined") {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
var _Input = defineComponent({
  name: "TInput",
  props: _objectSpread$1q({}, props$M),
  emits: ["enter", "keydown", "keyup", "keypress", "clear", "change", "focus", "blur", "click"],
  setup: function setup36() {
    var disabled2 = useFormDisabled();
    var COMPONENT_NAME2 = usePrefixClass("input");
    var INPUT_WRAP_CLASS = usePrefixClass("input__wrap");
    var INPUT_TIPS_CLASS = usePrefixClass("input__tips");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    var classPrefix2 = usePrefixClass();
    var _useConfig = useConfig("input"), global2 = _useConfig.global;
    return {
      global: global2,
      disabled: disabled2,
      COMPONENT_NAME: COMPONENT_NAME2,
      INPUT_WRAP_CLASS,
      INPUT_TIPS_CLASS,
      classPrefix: classPrefix2,
      STATUS,
      SIZE
    };
  },
  data: function data6() {
    return {
      isHover: false,
      focused: false,
      renderType: this.type
    };
  },
  computed: {
    showClear: function showClear() {
      return this.value && !this.disabled && this.clearable && this.isHover && !this.readonly || this.showClearIconOnEmpty;
    },
    tPlaceholder: function tPlaceholder() {
      var _this$placeholder;
      return (_this$placeholder = this.placeholder) !== null && _this$placeholder !== void 0 ? _this$placeholder : this.global.placeholder;
    },
    inputAttrs: function inputAttrs() {
      return getValidAttrs$2({
        autofocus: this.autofocus,
        disabled: this.disabled,
        readonly: this.readonly,
        placeholder: this.tPlaceholder,
        maxlength: this.maxlength,
        name: this.name || void 0,
        type: this.renderType,
        autocomplete: this.type === "password" ? "on" : void 0
      });
    }
  },
  watch: {
    autofocus: {
      handler: function handler3(val) {
        var _this = this;
        if (val === true) {
          this.$nextTick(function() {
            _this.$refs.inputRef.focus();
          });
        }
      },
      immediate: true
    },
    value: {
      handler: function handler4(val) {
        this.inputValue = val;
      },
      immediate: true
    }
  },
  created: function created3() {
    this.composing = false;
    if (this.autoWidth) {
      this.addListenders();
    }
  },
  methods: {
    addListenders: function addListenders() {
      var _this2 = this;
      this.$watch(function() {
        return _this2.value + _this2.placeholder;
      }, function() {
        if (!_this2.autoWidth)
          return;
        nextTick(function() {
          _this2.updateInputWidth();
        });
      }, {
        immediate: true
      });
    },
    mouseEvent: function mouseEvent(v) {
      this.isHover = v;
    },
    renderIcon: function renderIcon(icon, iconType) {
      if (typeof icon === "function") {
        return icon(h);
      }
      if (this.$slots[kebabCase_1(iconType)]) {
        return this.$slots[kebabCase_1(iconType)](null);
      }
      if (this.$slots[camelCase_1(iconType)]) {
        return this.$slots[camelCase_1(iconType)](null);
      }
      return null;
    },
    setInputValue: function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var input = this.$refs.inputRef;
      var sV = String(v);
      if (!input) {
        return;
      }
      if (input.value !== sV) {
        input.value = sV;
      }
    },
    focus: function focus() {
      var input = this.$refs.inputRef;
      input === null || input === void 0 ? void 0 : input.focus();
    },
    blur: function blur() {
      var input = this.$refs.inputRef;
      input === null || input === void 0 ? void 0 : input.blur();
    },
    handleInput: function handleInput(e) {
      var checkInputType = e.inputType && e.inputType === "insertCompositionText";
      if (e.isComposing || checkInputType)
        return;
      this.inputValueChangeHandle(e);
    },
    handleKeydown: function handleKeydown(e) {
      if (this.disabled)
        return;
      var code = e.code;
      if (code === "Enter" || code === "NumpadEnter") {
        emitEvent(this, "enter", this.value, {
          e
        });
      } else {
        emitEvent(this, "keydown", this.value, {
          e
        });
      }
    },
    handleKeyUp: function handleKeyUp(e) {
      if (this.disabled)
        return;
      emitEvent(this, "keyup", this.value, {
        e
      });
    },
    handleKeypress: function handleKeypress(e) {
      if (this.disabled)
        return;
      emitEvent(this, "keypress", this.value, {
        e
      });
    },
    onHandlePaste: function onHandlePaste(e) {
      var _this$onPaste;
      if (this.disabled)
        return;
      var clipData = e.clipboardData || window.clipboardData;
      (_this$onPaste = this.onPaste) === null || _this$onPaste === void 0 ? void 0 : _this$onPaste.call(this, {
        e,
        pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
      });
    },
    onHandleMousewheel: function onHandleMousewheel(e) {
      var _this$onWheel;
      (_this$onWheel = this.onWheel) === null || _this$onWheel === void 0 ? void 0 : _this$onWheel.call(this, {
        e
      });
    },
    emitPassword: function emitPassword() {
      var renderType = this.renderType;
      var toggleType = renderType === "password" ? "text" : "password";
      this.renderType = toggleType;
    },
    emitClear: function emitClear(_ref) {
      var e = _ref.e;
      emitEvent(this, "clear", {
        e
      });
      emitEvent(this, "change", "", {
        e
      });
      this.focus();
      this.emitFocus(e);
    },
    emitFocus: function emitFocus(e) {
      this.inputValue = this.value;
      if (this.disabled || this.readonly)
        return;
      this.focused = true;
      emitEvent(this, "focus", this.value, {
        e
      });
    },
    formatAndEmitBlur: function formatAndEmitBlur(e) {
      if (this.format) {
        this.inputValue = this.format(this.value);
      }
      this.focused = false;
      emitEvent(this, "blur", this.value, {
        e
      });
    },
    compositionendHandler: function compositionendHandler(e) {
      this.inputValueChangeHandle(e);
    },
    onHandleCompositionend: function onHandleCompositionend(e) {
      this.inputValueChangeHandle(e);
      emitEvent(this, "compositionend", this.value, {
        e
      });
    },
    onHandleonCompositionstart: function onHandleonCompositionstart(e) {
      emitEvent(this, "compositionstart", this.value, {
        e
      });
    },
    onRootClick: function onRootClick(e) {
      var _this$$refs$inputRef;
      (_this$$refs$inputRef = this.$refs.inputRef) === null || _this$$refs$inputRef === void 0 ? void 0 : _this$$refs$inputRef.focus();
      this.$emit("click", e);
    },
    inputValueChangeHandle: function inputValueChangeHandle(e) {
      var _this3 = this;
      var target = e.target;
      var val = target.value;
      if (this.maxcharacter && this.maxcharacter >= 0) {
        var stringInfo = getCharacterLength(val, this.maxcharacter);
        val = _typeof$1(stringInfo) === "object" && stringInfo.characters;
      }
      emitEvent(this, "change", val, {
        e
      });
      nextTick(function() {
        return _this3.setInputValue(_this3.value);
      });
    },
    onInputMouseenter: function onInputMouseenter(e) {
      var _this$onMouseenter;
      this.mouseEvent(true);
      (_this$onMouseenter = this.onMouseenter) === null || _this$onMouseenter === void 0 ? void 0 : _this$onMouseenter.call(this, {
        e
      });
    },
    onInputMouseleave: function onInputMouseleave(e) {
      var _this$onMouseleave;
      this.mouseEvent(false);
      (_this$onMouseleave = this.onMouseleave) === null || _this$onMouseleave === void 0 ? void 0 : _this$onMouseleave.call(this, {
        e
      });
    },
    updateInputWidth: function updateInputWidth() {
      var pre = this.$refs.inputPreRef;
      if (!pre)
        return;
      var width = pre.offsetWidth;
      this.$refs.inputRef.style.width = "".concat(width, "px");
    }
  },
  render: function render30() {
    var _this4 = this, _ref2;
    var COMPONENT_NAME2 = this.COMPONENT_NAME, INPUT_WRAP_CLASS = this.INPUT_WRAP_CLASS, INPUT_TIPS_CLASS = this.INPUT_TIPS_CLASS, SIZE = this.SIZE, STATUS = this.STATUS, classPrefix2 = this.classPrefix;
    var inputEvents2 = getValidAttrs$2({
      onFocus: function onFocus2(e) {
        return _this4.emitFocus(e);
      },
      onBlur: this.formatAndEmitBlur,
      onKeydown: this.handleKeydown,
      onKeyup: this.handleKeyUp,
      onKeypress: this.handleKeypress,
      onPaste: this.onHandlePaste,
      onCompositionend: this.onHandleCompositionend,
      onCompositionstart: this.onHandleonCompositionstart
    });
    var prefixIcon = this.renderIcon(this.prefixIcon, "prefix-icon");
    var suffixIcon = this.renderIcon(this.suffixIcon, "suffix-icon");
    var label2 = renderTNodeJSX(this, "label", {
      silent: true
    });
    var suffix2 = renderTNodeJSX(this, "suffix");
    var labelContent = label2 ? createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__prefix")
    }, [label2]) : null;
    var suffixContent = suffix2 ? createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__suffix")
    }, [suffix2]) : null;
    if (this.showClear) {
      suffixIcon = createVNode(closeCircleFilled, {
        "class": "".concat(COMPONENT_NAME2, "__suffix-clear"),
        "onClick": this.emitClear
      }, null);
    }
    if (this.type === "password") {
      if (this.renderType === "password") {
        suffixIcon = createVNode(browseOff, {
          "class": "".concat(COMPONENT_NAME2, "__suffix-clear"),
          "onClick": this.emitPassword
        }, null);
      } else if (this.renderType === "text") {
        suffixIcon = createVNode(browse, {
          "class": "".concat(COMPONENT_NAME2, "__suffix-clear"),
          "onClick": this.emitPassword
        }, null);
      }
    }
    var classes6 = [COMPONENT_NAME2, this.inputClass, (_ref2 = {}, _defineProperty$3(_ref2, SIZE[this.size], this.size !== "medium"), _defineProperty$3(_ref2, STATUS.disabled, this.disabled), _defineProperty$3(_ref2, STATUS.focused, this.focused), _defineProperty$3(_ref2, "".concat(classPrefix2, "-is-").concat(this.status), this.status), _defineProperty$3(_ref2, "".concat(classPrefix2, "-align-").concat(this.align), this.align !== "left"), _defineProperty$3(_ref2, "".concat(classPrefix2, "-is-readonly"), this.readonly), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2, "--prefix"), prefixIcon || labelContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2, "--suffix"), suffixIcon || suffixContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2, "--focused"), this.focused), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2, "--auto-width"), this.autoWidth), _ref2)];
    var inputNode = createVNode("div", {
      "class": classes6,
      "onClick": this.onRootClick,
      "onMouseenter": this.onInputMouseenter,
      "onMouseleave": this.onInputMouseleave,
      "onWheel": this.onHandleMousewheel
    }, [prefixIcon ? createVNode("span", {
      "class": ["".concat(COMPONENT_NAME2, "__prefix"), "".concat(COMPONENT_NAME2, "__prefix-icon")]
    }, [prefixIcon]) : null, labelContent, createVNode("input", mergeProps({
      "class": "".concat(COMPONENT_NAME2, "__inner")
    }, this.inputAttrs, inputEvents2, {
      "ref": "inputRef",
      "value": this.inputValue,
      "onInput": function onInput2(e) {
        return _this4.handleInput(e);
      }
    }), null), this.autoWidth && createVNode("span", {
      "ref": "inputPreRef",
      "class": "".concat(classPrefix2, "-input__input-pre")
    }, [this.value || this.tPlaceholder]), suffixContent, suffixIcon ? createVNode("span", {
      "class": ["".concat(COMPONENT_NAME2, "__suffix"), "".concat(COMPONENT_NAME2, "__suffix-icon"), _defineProperty$3({}, "".concat(COMPONENT_NAME2, "__clear"), this.showClear)]
    }, [suffixIcon]) : null]);
    var tips = renderTNodeJSX(this, "tips");
    return createVNode("div", {
      "class": INPUT_WRAP_CLASS
    }, [inputNode, tips && createVNode("div", {
      "class": "".concat(INPUT_TIPS_CLASS, " ").concat(classPrefix2, "-input__tips--").concat(this.status || "normal")
    }, [tips])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _InputGroup = defineComponent({
  name: "TInputGroup",
  props: {
    separate: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup37() {
    var COMPONENT_NAME2 = usePrefixClass("input-group");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  computed: {
    CLASS: function CLASS() {
      return [this.COMPONENT_NAME, _defineProperty$3({}, "".concat(this.COMPONENT_NAME, "--separate"), this.separate)];
    }
  },
  render: function render31() {
    var CLASS2 = this.CLASS;
    return createVNode("div", {
      "class": CLASS2
    }, [this.$slots["default"] && this.$slots["default"](null)]);
  }
});
var index$D = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Addon = withInstall(_Addon);
var Input = withInstall(mapProps([{
  name: "value",
  event: ["change"],
  alias: ["modelValue"]
}])(_Input));
var InputGroup = withInstall(_InputGroup);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$L = {
  align: {
    type: String,
    validator: function validator35(val) {
      if (!val)
        return true;
      return ["left", "center", "right"].includes(val);
    }
  },
  autoWidth: Boolean,
  decimalPlaces: {
    type: Number,
    "default": void 0
  },
  disabled: Boolean,
  format: {
    type: Function
  },
  max: {
    type: Number,
    "default": Infinity
  },
  min: {
    type: Number,
    "default": -Infinity
  },
  placeholder: {
    type: String,
    "default": void 0
  },
  readonly: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator36(val) {
      if (!val)
        return true;
      return ["small", "medium", "large"].includes(val);
    }
  },
  status: {
    type: String,
    validator: function validator37(val) {
      if (!val)
        return true;
      return ["success", "warning", "error"].includes(val);
    }
  },
  step: {
    type: Number,
    "default": 1
  },
  theme: {
    type: String,
    "default": "row",
    validator: function validator38(val) {
      if (!val)
        return true;
      return ["column", "row", "normal"].includes(val);
    }
  },
  tips: {
    type: [String, Function]
  },
  value: {
    type: Number,
    "default": void 0
  },
  defaultValue: {
    type: Number,
    "default": void 0
  },
  onBlur: Function,
  onChange: Function,
  onEnter: Function,
  onFocus: Function,
  onKeydown: Function,
  onKeypress: Function,
  onKeyup: Function
};
var index$C = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1q(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1p(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1q(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _InputNumber = defineComponent({
  name: "TInputNumber",
  components: {
    AddIcon: add,
    RemoveIcon: remove,
    ChevronDownIcon: chevronDown,
    ChevronUpIcon: chevronUp,
    TButton: Button,
    TInput: Input
  },
  props: _objectSpread$1p({}, props$L),
  emits: ["update:value", "change", "blur", "focus", "keydown-enter", "keydown", "keyup", "keypress"],
  setup: function setup38() {
    var disabled2 = useFormDisabled();
    var COMPONENT_NAME2 = usePrefixClass("input-number");
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2,
      COMPONENT_NAME: COMPONENT_NAME2,
      disabled: disabled2
    };
  },
  data: function data7() {
    return {
      userInput: null,
      filterValue: null,
      isError: false,
      inputting: false
    };
  },
  computed: {
    disabledReduce: function disabledReduce() {
      return this.disabled || this.isError || Number(this.value) - this.step < this.min;
    },
    disabledAdd: function disabledAdd() {
      return this.disabled || this.isError || Number(this.value) + this.step > this.max;
    },
    valueDecimalPlaces: function valueDecimalPlaces() {
      var tempVal = this.filterValue !== null && !Number.isNaN(Number(this.filterValue)) && !Number.isNaN(parseFloat(this.filterValue)) ? this.filterValue : String(this.value);
      var tempIndex = tempVal.indexOf(".") + 1;
      return tempIndex > 0 ? tempVal.length - tempIndex : 0;
    },
    stepDecimalPlaces: function stepDecimalPlaces() {
      var tempVal = String(this.step);
      var tempIndex = tempVal.indexOf(".") + 1;
      return tempIndex > 0 ? tempVal.length - tempIndex : 0;
    },
    digitsNum: function digitsNum() {
      if (this.decimalPlaces !== void 0) {
        if (this.decimalPlaces < this.stepDecimalPlaces) {
          console.warn("decimal places of step should be less than decimal-places");
        }
        return this.decimalPlaces;
      }
      return this.valueDecimalPlaces > this.stepDecimalPlaces ? this.valueDecimalPlaces : this.stepDecimalPlaces;
    },
    reduceClasses: function reduceClasses() {
      return ["".concat(this.COMPONENT_NAME, "__decrease"), _defineProperty$3({}, ClASSNAMES.STATUS.disabled, this.disabledReduce)];
    },
    reduceEvents: function reduceEvents() {
      return {
        onClick: this.handleReduce
      };
    },
    addClasses: function addClasses() {
      return ["".concat(this.COMPONENT_NAME, "__increase"), _defineProperty$3({}, ClASSNAMES.STATUS.disabled, this.disabledAdd)];
    },
    addEvents: function addEvents() {
      return {
        onClick: this.handleAdd
      };
    },
    cmptWrapClasses: function cmptWrapClasses() {
      var _ref3;
      return [this.COMPONENT_NAME, ClASSNAMES.SIZE[this.size], (_ref3 = {}, _defineProperty$3(_ref3, ClASSNAMES.STATUS.disabled, this.disabled), _defineProperty$3(_ref3, "".concat(this.classPrefix, "-is-controls-right"), this.theme === "column"), _defineProperty$3(_ref3, "".concat(this.COMPONENT_NAME, "--").concat(this.theme), this.theme), _defineProperty$3(_ref3, "".concat(this.COMPONENT_NAME, "--auto-width"), this.autoWidth), _ref3)];
    },
    inputEvents: function inputEvents() {
      return {
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeydown: this.handleKeydown,
        onKeyup: this.handleKeyup,
        onKeypress: this.handleKeypress
      };
    },
    inputAttrs: function inputAttrs2() {
      return {
        disabled: this.disabled,
        readonly: this.readonly,
        autocomplete: "off",
        ref: "refInputElem",
        placeholder: this.placeholder,
        unselectable: this.readonly ? "on" : "off",
        tips: this.tips,
        autoWidth: this.autoWidth,
        align: this.align || (this.theme === "row" ? "center" : void 0),
        status: this.isError ? "error" : this.status
      };
    },
    decreaseIcon: function decreaseIcon() {
      return this.theme === "column" ? createVNode(resolveComponent("chevron-down-icon"), {
        "size": this.size
      }, null) : createVNode(resolveComponent("remove-icon"), {
        "size": this.size
      }, null);
    },
    increaseIcon: function increaseIcon() {
      return this.theme === "column" ? createVNode(resolveComponent("chevron-up-icon"), {
        "size": this.size
      }, null) : createVNode(resolveComponent("add-icon"), {
        "size": this.size
      }, null);
    },
    displayValue: function displayValue() {
      if (this.inputting && this.userInput !== null) {
        return this.filterValue;
      }
      if ([void 0, null].includes(this.value))
        return "";
      return this.format && !this.inputting ? this.format(this.value) : this.value.toFixed(this.digitsNum);
    }
  },
  watch: {
    value: {
      immediate: true,
      handler: function handler5(v) {
        if (v !== void 0) {
          this.isValidNumber(v);
        }
      }
    }
  },
  methods: {
    handleAdd: function handleAdd(e) {
      if (this.disabledAdd || this.readonly)
        return;
      var value6 = this.value || 0;
      var factor = Math.pow(10, this.digitsNum);
      this.handleAction(Number(this.toDecimalPlaces((value6 * factor + this.step * factor) / factor).toFixed(this.digitsNum)), "add", e);
    },
    handleReduce: function handleReduce(e) {
      if (this.disabledReduce || this.readonly)
        return;
      var value6 = this.value || 0;
      var factor = Math.pow(10, this.digitsNum);
      this.handleAction(Number(this.toDecimalPlaces((value6 * factor - this.step * factor) / factor).toFixed(this.digitsNum)), "reduce", e);
    },
    handleInput: function handleInput2(val, e) {
      this.userInput = val;
      this.filterValue = this.toValidStringNumber(this.userInput);
      this.userInput = "";
      if (!this.isValid(this.filterValue) || Number(this.filterValue) === this.value)
        return;
      this.updateValue(Number(this.filterValue));
      this.handleAction(Number(this.filterValue), "input", e);
    },
    handleAction: function handleAction(value6, actionType, e) {
      if (actionType !== "input") {
        this.clearInput();
      }
      this.handleChange(value6, {
        type: actionType,
        e
      });
    },
    toValidStringNumber: function toValidStringNumber(s) {
      var filterVal = s.replace(/[^\d.eE。-]/g, "").replace("\u3002", ".");
      if (this.multiE(filterVal) || this.multiDot(filterVal) || this.multiNegative(filterVal)) {
        filterVal = filterVal.substring(0, filterVal.length - 1);
      }
      return filterVal;
    },
    toValidNumber: function toValidNumber(s) {
      var val = Number(s);
      if (Number.isNaN(val) || Number.isNaN(parseFloat(s)))
        return this.value;
      if (val > this.max)
        return this.max;
      if (val < this.min)
        return this.min;
      return parseFloat(s);
    },
    handleChange: function handleChange(value6, ctx) {
      var v = Number(value6.toFixed(this.digitsNum));
      this.updateValue(v);
      emitEvent(this, "change", v, {
        type: ctx.type,
        e: ctx.e
      });
    },
    handleBlur: function handleBlur(e) {
      var _this = this;
      return _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.handleEndInput(e);
              case 2:
                _this.clearFilterValue();
                emitEvent(_this, "blur", _this.value, {
                  e
                });
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    handleFocus: function handleFocus(e) {
      this.handleStartInput();
      emitEvent(this, "focus", this.value, {
        e
      });
    },
    handleKeydownEnter: function handleKeydownEnter(e) {
      if (e.key !== "Enter")
        return;
      emitEvent(this, "keydown-enter", this.value, {
        e
      });
    },
    handleKeydown: function handleKeydown2(e) {
      emitEvent(this, "keydown", this.value, {
        e
      });
      this.handleKeydownEnter(e);
    },
    handleKeyup: function handleKeyup(e) {
      emitEvent(this, "keyup", this.value, {
        e
      });
    },
    handleKeypress: function handleKeypress2(e) {
      emitEvent(this, "keypress", this.value, {
        e
      });
    },
    handleStartInput: function handleStartInput() {
      this.inputting = true;
      if (this.value === void 0)
        return;
      this.filterValue = this.value.toFixed(this.digitsNum);
    },
    handleEndInput: function handleEndInput(e) {
      this.inputting = false;
      var value6 = this.toValidNumber(this.filterValue);
      if (value6 !== this.value) {
        this.updateValue(value6);
        this.handleAction(value6, "input", e);
      }
      this.isError = false;
    },
    updateValue: function updateValue(v) {
      this.$emit("update:value", v);
    },
    handleInputError: function handleInputError(visible4) {
      this.isError = visible4;
    },
    isValid: function isValid(v) {
      var numV = Number(v);
      if (this.empty(v) || Number.isNaN(numV)) {
        this.handleInputError(true);
        return false;
      }
      return this.isValidNumber(numV);
    },
    isValidNumber: function isValidNumber(v) {
      if (v > this.max) {
        this.handleInputError(true);
        return false;
      }
      if (v < this.min) {
        this.handleInputError(true);
        return false;
      }
      this.handleInputError(false);
      return true;
    },
    empty: function empty(v) {
      return !v && !v.replace(" ", "");
    },
    clearInput: function clearInput() {
      this.userInput = null;
    },
    clearFilterValue: function clearFilterValue() {
      this.filterValue = "";
    },
    multiE: function multiE(s) {
      var m = s.match(/[e]/gi);
      return m === null ? false : m.length > 1;
    },
    multiDot: function multiDot(s) {
      var m = s.match(/[.]/g);
      return m === null ? false : m.length > 1;
    },
    multiNegative: function multiNegative(s) {
      var m = s.match(/[-]/g);
      return m === null ? false : m.length > 2;
    },
    toDecimalPlaces: function toDecimalPlaces(value6) {
      var decimalPlaces = this.decimalPlaces === void 0 ? this.digitsNum : this.decimalPlaces;
      var factor = Math.pow(10, decimalPlaces);
      return Math.round(value6 * factor) / factor;
    }
  },
  render: function render32() {
    var _this2 = this;
    return createVNode("div", {
      "class": this.cmptWrapClasses
    }, [this.theme !== "normal" && createVNode(resolveComponent("t-button"), mergeProps({
      "class": this.reduceClasses
    }, this.reduceEvents, {
      "variant": "outline",
      "shape": "square"
    }), {
      icon: function icon() {
        return _this2.decreaseIcon;
      }
    }), createVNode(resolveComponent("t-input"), mergeProps(this.inputAttrs, this.inputEvents, {
      "value": this.displayValue,
      "onChange": function onChange(val, _ref4) {
        var e = _ref4.e;
        return _this2.handleInput(val, e);
      }
    }), null), this.theme !== "normal" && createVNode(resolveComponent("t-button"), mergeProps({
      "class": this.addClasses
    }, this.addEvents, {
      "variant": "outline",
      "shape": "square"
    }), {
      icon: function icon() {
        return _this2.increaseIcon;
      }
    })]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var LocalInputNumber = mapProps([{
  name: "value",
  alias: ["modelValue"]
}])(_InputNumber);
var InputNumber = withInstall(LocalInputNumber);
var isArray$5 = isArray_1, isSymbol$1 = isSymbol_1;
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
function isKey$3(value6, object) {
  if (isArray$5(value6)) {
    return false;
  }
  var type = typeof value6;
  if (type == "number" || type == "symbol" || type == "boolean" || value6 == null || isSymbol$1(value6)) {
    return true;
  }
  return reIsPlainProp.test(value6) || !reIsDeepProp.test(value6) || object != null && value6 in Object(object);
}
var _isKey = isKey$3;
var MapCache$1 = _MapCache;
var FUNC_ERROR_TEXT$1 = "Expected a function";
function memoize$1(func, resolver) {
  if (typeof func != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || MapCache$1)();
  return memoized;
}
memoize$1.Cache = MapCache$1;
var memoize_1 = memoize$1;
var memoize = memoize_1;
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped$1(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var _memoizeCapped = memoizeCapped$1;
var memoizeCapped = _memoizeCapped;
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath$1 = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46) {
    result.push("");
  }
  string.replace(rePropName, function(match, number2, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
  });
  return result;
});
var _stringToPath = stringToPath$1;
var isArray$4 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$3 = toString_1;
function castPath$6(value6, object) {
  if (isArray$4(value6)) {
    return value6;
  }
  return isKey$2(value6, object) ? [value6] : stringToPath(toString$3(value6));
}
var _castPath = castPath$6;
var isSymbol = isSymbol_1;
var INFINITY$1 = 1 / 0;
function toKey$6(value6) {
  if (typeof value6 == "string" || isSymbol(value6)) {
    return value6;
  }
  var result = value6 + "";
  return result == "0" && 1 / value6 == -INFINITY$1 ? "-0" : result;
}
var _toKey = toKey$6;
var castPath$5 = _castPath, toKey$5 = _toKey;
function baseGet$4(object, path) {
  path = castPath$5(path, object);
  var index2 = 0, length = path.length;
  while (object != null && index2 < length) {
    object = object[toKey$5(path[index2++])];
  }
  return index2 && index2 == length ? object : void 0;
}
var _baseGet = baseGet$4;
var baseGet$3 = _baseGet;
function get$1(object, path, defaultValue) {
  var result = object == null ? void 0 : baseGet$3(object, path);
  return result === void 0 ? defaultValue : result;
}
var get_1 = get$1;
var assignValue = _assignValue, castPath$4 = _castPath, isIndex$1 = _isIndex, isObject$2 = isObject_1, toKey$4 = _toKey;
function baseSet$2(object, path, value6, customizer) {
  if (!isObject$2(object)) {
    return object;
  }
  path = castPath$4(path, object);
  var index2 = -1, length = path.length, lastIndex = length - 1, nested = object;
  while (nested != null && ++index2 < length) {
    var key = toKey$4(path[index2]), newValue = value6;
    if (key === "__proto__" || key === "constructor" || key === "prototype") {
      return object;
    }
    if (index2 != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : void 0;
      if (newValue === void 0) {
        newValue = isObject$2(objValue) ? objValue : isIndex$1(path[index2 + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}
var _baseSet = baseSet$2;
var baseSet$1 = _baseSet;
function set(object, path, value6) {
  return object == null ? object : baseSet$1(object, path, value6);
}
var set_1 = set;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$K = {
  closable: Boolean,
  content: {
    type: [String, Number, Function]
  },
  "default": {
    type: [String, Number, Function]
  },
  disabled: Boolean,
  icon: {
    type: Function,
    "default": void 0
  },
  maxWidth: {
    type: [String, Number]
  },
  shape: {
    type: String,
    "default": "square",
    validator: function validator39(val) {
      return ["square", "round", "mark"].includes(val);
    }
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator40(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  theme: {
    type: String,
    "default": "default",
    validator: function validator41(val) {
      return ["default", "primary", "warning", "danger", "success"].includes(val);
    }
  },
  variant: {
    type: String,
    "default": "dark",
    validator: function validator42(val) {
      return ["dark", "light", "outline", "light-outline"].includes(val);
    }
  },
  onClick: Function,
  onClose: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Tag = defineComponent({
  name: "TTag",
  props: props$K,
  setup: function setup39(props2) {
    var _useConfig = useConfig("tag"), tagGlobalConfig = _useConfig.global;
    var COMPONENT_NAME2 = usePrefixClass("tag");
    var tagClass = computed(function() {
      var _ref;
      return ["".concat(COMPONENT_NAME2.value), "".concat(COMPONENT_NAME2.value, "--").concat(props2.theme), "".concat(COMPONENT_NAME2.value, "--").concat(props2.variant), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--ellipsis"), props2.maxWidth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--close"), props2.closable), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--disabled"), props2.disabled), _ref), ClASSNAMES.SIZE[props2.size], props2.shape !== "square" && "".concat(COMPONENT_NAME2.value, "--").concat(props2.shape)];
    });
    var tagStyle = computed(function() {
      return props2.maxWidth ? {
        maxWidth: "".concat(props2.maxWidth, "px")
      } : {};
    });
    var handleClick5 = function handleClick6(e) {
      var _props2$onClick;
      (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
        e
      });
    };
    var getCloseIcon2 = function getCloseIcon3() {
      if (!props2.closable)
        return null;
      var iconClassName = "".concat(COMPONENT_NAME2.value, "__icon-close");
      if (tagGlobalConfig.value.closeIcon) {
        return h(tagGlobalConfig.value.closeIcon(h), {
          "class": iconClassName
        });
      }
      return createVNode(close, {
        "onClick": function onClick2(_ref2) {
          var _props2$onClose;
          var e = _ref2.e;
          return (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
            e
          });
        },
        "class": iconClassName
      }, null);
    };
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      tagClass,
      tagStyle,
      getCloseIcon: getCloseIcon2,
      handleClick: handleClick5
    };
  },
  render: function render33() {
    var closeIcon = this.getCloseIcon();
    var tagContent = renderContent(this, "default", "content");
    var icon = renderTNodeJSX(this, "icon");
    return createVNode("span", {
      "class": this.tagClass,
      "style": this.tagStyle,
      "onClick": this.handleClick
    }, [icon, this.maxWidth ? createVNode("span", {
      "style": this.tagStyle,
      "class": "".concat(this.COMPONENT_NAME, "--text")
    }, [tagContent]) : tagContent, closeIcon]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$J = {
  checked: {
    type: Boolean,
    "default": void 0
  },
  modelValue: {
    type: Boolean,
    "default": void 0
  },
  defaultChecked: Boolean,
  content: {
    type: [String, Number, Function]
  },
  "default": {
    type: [String, Number, Function]
  },
  disabled: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator43(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  onChange: Function,
  onClick: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _CheckTag = defineComponent({
  name: "TCheckTag",
  props: props$J,
  setup: function setup40(props2) {
    var COMPONENT_NAME2 = usePrefixClass("tag");
    var _toRefs = toRefs(props2), checked = _toRefs.checked, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerChecked = _useVModel2[0], setInnerChecked = _useVModel2[1];
    var tagClass = computed(function() {
      var _ref;
      return ["".concat(COMPONENT_NAME2.value), "".concat(COMPONENT_NAME2.value, "--check"), "".concat(COMPONENT_NAME2.value, "--default"), ClASSNAMES.SIZE[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--checked"), !props2.disabled && innerChecked.value), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--disabled"), props2.disabled), _ref)];
    });
    var handleClick5 = function handleClick6(e) {
      if (!props2.disabled) {
        var _props2$onClick;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
          e
        });
        setInnerChecked(!innerChecked.value);
      }
    };
    return {
      tagClass,
      handleClick: handleClick5
    };
  },
  render: function render34() {
    var tagContent = renderContent(this, "default", "content");
    return createVNode("span", {
      "class": this.tagClass,
      "onClick": this.handleClick
    }, [tagContent]);
  }
});
var index$B = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Tag = withInstall(_Tag);
var CheckTag = withInstall(_CheckTag);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$I = {
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  disabled: Boolean,
  label: {
    type: String,
    "default": ""
  },
  value: {
    type: [String, Number]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$H = {
  checkAll: Boolean,
  checked: {
    type: Boolean,
    "default": void 0
  },
  modelValue: {
    type: Boolean,
    "default": void 0
  },
  defaultChecked: Boolean,
  "default": {
    type: [String, Function]
  },
  disabled: {
    type: Boolean,
    "default": void 0
  },
  indeterminate: Boolean,
  label: {
    type: [String, Function]
  },
  name: {
    type: String,
    "default": ""
  },
  readonly: Boolean,
  value: {
    type: [String, Number]
  },
  onChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var CheckboxGroupInjectionKey = Symbol("CheckboxGroupProvide");
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1p(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1o(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1p(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Checkbox = defineComponent({
  name: "TCheckbox",
  props: _objectSpread$1o(_objectSpread$1o({}, props$H), {}, {
    needRipple: Boolean
  }),
  setup: function setup41(props2) {
    var labelRef = ref();
    if (props2.needRipple) {
      useRipple(labelRef);
    }
    var _toRefs = toRefs(props2), checked = _toRefs.checked, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerChecked = _useVModel2[0], setInnerChecked = _useVModel2[1];
    var checkboxGroup = inject(CheckboxGroupInjectionKey, void 0);
    var GroupDisabled = computed(function() {
      return props2.disabled || !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
    });
    var formDisabled = useFormDisabled(GroupDisabled);
    var name2 = computed(function() {
      return props2.name || (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.name);
    });
    var selfChecked = computed(function() {
      if (props2.checkAll)
        return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.isCheckAll;
      return checkboxGroup ? !!checkboxGroup.checkedMap[props2.value] : innerChecked.value;
    });
    var disabled2 = computed(function() {
      if (formDisabled)
        return formDisabled.value;
      if (!props2.checkAll && !selfChecked.value && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.maxExceeded) {
        return true;
      }
      if (props2.disabled !== void 0)
        return props2.disabled;
      return !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
    });
    var selfIndeterminate = computed(function() {
      if (props2.checkAll)
        return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.indeterminate;
      return props2.indeterminate;
    });
    var classPrefix2 = usePrefixClass();
    var COMPONENT_NAME2 = usePrefixClass("checkbox");
    var labelClasses2 = computed(function() {
      var _ref;
      return ["".concat(COMPONENT_NAME2.value), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-checked"), selfChecked.value), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-disabled"), disabled2.value), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-indeterminate"), selfIndeterminate.value), _ref)];
    });
    var handleChange5 = function handleChange6(e) {
      var checked2 = !selfChecked.value;
      setInnerChecked(checked2, {
        e
      });
      if (checkboxGroup && checkboxGroup.handleCheckboxChange) {
        checkboxGroup.onCheckedChange({
          checked: checked2,
          checkAll: props2.checkAll,
          e,
          option: props2
        });
      }
    };
    var renderContent6 = useContent();
    return function() {
      return createVNode("label", {
        "class": labelClasses2.value,
        "ref": "labelRef"
      }, [createVNode("input", {
        "type": "checkbox",
        "class": "".concat(COMPONENT_NAME2.value, "__former"),
        "disabled": disabled2.value,
        "readonly": props2.readonly,
        "indeterminate": props2.indeterminate,
        "name": name2.value,
        "value": props2.value,
        "checked": selfChecked.value,
        "onChange": handleChange5
      }, null), createVNode("span", {
        "class": "".concat(COMPONENT_NAME2.value, "__input")
      }, null), createVNode("span", {
        "class": "".concat(COMPONENT_NAME2.value, "__label")
      }, [renderContent6("default", "label")])]);
    };
  }
});
var HASH_UNDEFINED = "__lodash_hash_undefined__";
function setCacheAdd$1(value6) {
  this.__data__.set(value6, HASH_UNDEFINED);
  return this;
}
var _setCacheAdd = setCacheAdd$1;
function setCacheHas$1(value6) {
  return this.__data__.has(value6);
}
var _setCacheHas = setCacheHas$1;
var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
function SetCache$3(values) {
  var index2 = -1, length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();
  while (++index2 < length) {
    this.add(values[index2]);
  }
}
SetCache$3.prototype.add = SetCache$3.prototype.push = setCacheAdd;
SetCache$3.prototype.has = setCacheHas;
var _SetCache = SetCache$3;
function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
  var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
  while (fromRight ? index2-- : ++index2 < length) {
    if (predicate(array[index2], index2, array)) {
      return index2;
    }
  }
  return -1;
}
var _baseFindIndex = baseFindIndex$2;
function baseIsNaN$1(value6) {
  return value6 !== value6;
}
var _baseIsNaN = baseIsNaN$1;
function strictIndexOf$1(array, value6, fromIndex) {
  var index2 = fromIndex - 1, length = array.length;
  while (++index2 < length) {
    if (array[index2] === value6) {
      return index2;
    }
  }
  return -1;
}
var _strictIndexOf = strictIndexOf$1;
var baseFindIndex$1 = _baseFindIndex, baseIsNaN = _baseIsNaN, strictIndexOf = _strictIndexOf;
function baseIndexOf$1(array, value6, fromIndex) {
  return value6 === value6 ? strictIndexOf(array, value6, fromIndex) : baseFindIndex$1(array, baseIsNaN, fromIndex);
}
var _baseIndexOf = baseIndexOf$1;
var baseIndexOf = _baseIndexOf;
function arrayIncludes$2(array, value6) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value6, 0) > -1;
}
var _arrayIncludes = arrayIncludes$2;
function arrayIncludesWith$2(array, value6, comparator) {
  var index2 = -1, length = array == null ? 0 : array.length;
  while (++index2 < length) {
    if (comparator(value6, array[index2])) {
      return true;
    }
  }
  return false;
}
var _arrayIncludesWith = arrayIncludesWith$2;
function cacheHas$3(cache, key) {
  return cache.has(key);
}
var _cacheHas = cacheHas$3;
var SetCache$2 = _SetCache, arrayIncludes$1 = _arrayIncludes, arrayIncludesWith$1 = _arrayIncludesWith, arrayMap$4 = _arrayMap, baseUnary$1 = _baseUnary, cacheHas$2 = _cacheHas;
var nativeMin = Math.min;
function baseIntersection$1(arrays, iteratee, comparator) {
  var includes = comparator ? arrayIncludesWith$1 : arrayIncludes$1, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
  while (othIndex--) {
    var array = arrays[othIndex];
    if (othIndex && iteratee) {
      array = arrayMap$4(array, baseUnary$1(iteratee));
    }
    maxLength = nativeMin(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache$2(othIndex && array) : void 0;
  }
  array = arrays[0];
  var index2 = -1, seen2 = caches[0];
  outer:
    while (++index2 < length && result.length < maxLength) {
      var value6 = array[index2], computed2 = iteratee ? iteratee(value6) : value6;
      value6 = comparator || value6 !== 0 ? value6 : 0;
      if (!(seen2 ? cacheHas$2(seen2, computed2) : includes(result, computed2, comparator))) {
        othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if (!(cache ? cacheHas$2(cache, computed2) : includes(arrays[othIndex], computed2, comparator))) {
            continue outer;
          }
        }
        if (seen2) {
          seen2.push(computed2);
        }
        result.push(value6);
      }
    }
  return result;
}
var _baseIntersection = baseIntersection$1;
var isArrayLikeObject$2 = isArrayLikeObject_1;
function castArrayLikeObject$1(value6) {
  return isArrayLikeObject$2(value6) ? value6 : [];
}
var _castArrayLikeObject = castArrayLikeObject$1;
var arrayMap$3 = _arrayMap, baseIntersection = _baseIntersection, baseRest$3 = _baseRest, castArrayLikeObject = _castArrayLikeObject;
var intersection = baseRest$3(function(arrays) {
  var mapped = arrayMap$3(arrays, castArrayLikeObject);
  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
});
var intersection_1 = intersection;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$G = {
  disabled: Boolean,
  max: {
    type: Number,
    "default": void 0
  },
  name: {
    type: String,
    "default": ""
  },
  options: {
    type: Array,
    "default": function _default8() {
      return [];
    }
  },
  value: {
    type: Array,
    "default": void 0
  },
  modelValue: {
    type: Array,
    "default": void 0
  },
  defaultValue: {
    type: Array,
    "default": function _default9() {
      return [];
    }
  },
  onChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1o(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1n(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1o(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$n(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _Group$1 = defineComponent({
  name: "TCheckboxGroup",
  props: props$G,
  setup: function setup42(props2, _ref) {
    var slots = _ref.slots;
    var COMPONENT_NAME2 = usePrefixClass("checkbox-group");
    var isArray2 = Array.isArray;
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
    var checkedMap = computed(function() {
      var map = {};
      if (isArray2(innerValue.value)) {
        innerValue.value.forEach(function(item) {
          map[item] = true;
        });
      }
      return map;
    });
    var optionList = ref([]);
    var intersectionLen = computed(function() {
      var values = optionList.value.map(function(item) {
        return item.value;
      });
      if (isArray2(innerValue.value)) {
        var n = intersection_1(innerValue.value, values);
        return n.length;
      }
      return 0;
    });
    var isCheckAll = computed(function() {
      if (isArray2(innerValue.value) && innerValue.value.length !== optionList.value.length - 1) {
        return false;
      }
      return intersectionLen.value === optionList.value.length - 1;
    });
    var indeterminate = computed(function() {
      return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
    });
    var maxExceeded = computed(function() {
      return props2.max !== void 0 && innerValue.value.length === props2.max;
    });
    watchEffect(function() {
      if (!props2.options)
        return [];
      optionList.value = props2.options.map(function(item) {
        var r = {};
        if (_typeof$1(item) !== "object") {
          r = {
            label: String(item),
            value: item
          };
        } else {
          r = _objectSpread$1n({}, item);
          r.disabled = r.disabled === void 0 ? props2.disabled : r.disabled;
        }
        return r;
      });
    });
    var getAllCheckboxValue = function getAllCheckboxValue2() {
      var val = /* @__PURE__ */ new Set();
      for (var i = 0, len2 = optionList.value.length; i < len2; i++) {
        var item = optionList.value[i];
        if (item.checkAll)
          continue;
        val.add(item.value);
        if (maxExceeded.value)
          break;
      }
      return _toConsumableArray(val);
    };
    var onCheckAllChange = function onCheckAllChange2(checked, context) {
      var value22 = checked ? getAllCheckboxValue() : [];
      setInnerValue(value22, {
        e: context.e,
        type: checked ? "check" : "uncheck",
        current: void 0,
        option: void 0
      });
    };
    var handleCheckboxChange = function handleCheckboxChange2(data26) {
      var currentValue = data26.option.value;
      if (isArray2(innerValue.value)) {
        var val = _toConsumableArray(innerValue.value);
        if (data26.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }
        setInnerValue(val, {
          e: data26.e,
          current: data26.option.value,
          option: data26.option,
          type: data26.checked ? "check" : "uncheck"
        });
      } else {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof$1(innerValue.value)));
      }
    };
    var onCheckedChange = function onCheckedChange2(p2) {
      var checked = p2.checked, checkAll = p2.checkAll, e = p2.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e
        });
      } else {
        handleCheckboxChange(p2);
      }
    };
    var getOptionListBySlots2 = function getOptionListBySlots3(nodes) {
      var arr = [];
      nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function(node) {
        var option2 = node.props;
        if ((option2 === null || option2 === void 0 ? void 0 : option2["check-all"]) === "" || (option2 === null || option2 === void 0 ? void 0 : option2["check-all"]) === true) {
          option2.checkAll = true;
        }
        option2 && arr.push(option2);
      });
      return arr;
    };
    var renderLabel2 = function renderLabel3(option2) {
      if (typeof option2.label === "function") {
        return option2.label(h);
      }
      return option2.label;
    };
    provide(CheckboxGroupInjectionKey, reactive({
      name: props2.name,
      isCheckAll,
      checkedMap,
      maxExceeded,
      disabled: props2.disabled,
      indeterminate,
      handleCheckboxChange,
      onCheckedChange
    }));
    return function() {
      var _props2$options;
      var children = null;
      if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
        var _optionList$value;
        children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function(option2, index2) {
          var _slot;
          return createVNode(_Checkbox, mergeProps({
            "key": "".concat(option2.value).concat(index2)
          }, option2, {
            "checked": checkedMap.value[option2.value]
          }), _isSlot$n(_slot = renderLabel2(option2)) ? _slot : {
            "default": function _default65() {
              return [_slot];
            }
          });
        });
      } else {
        var nodes = slots["default"] && slots["default"](null);
        optionList.value = getOptionListBySlots2(nodes);
        children = nodes;
      }
      return createVNode("div", {
        "class": COMPONENT_NAME2.value
      }, [children]);
    };
  }
});
var index$A = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Checkbox = withInstall(_Checkbox);
var CheckboxGroup = withInstall(_Group$1);
var index$z = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1n(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1m(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1n(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$m(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _Option = defineComponent({
  name: "TOption",
  components: {
    TCheckbox: Checkbox
  },
  inject: {
    tSelect: {
      "default": void 0
    }
  },
  props: _objectSpread$1m({}, props$I),
  setup: function setup43() {
    var disabled2 = useFormDisabled();
    var selectName = usePrefixClass("select");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    var liRef = ref();
    useRipple(liRef);
    return {
      STATUS,
      SIZE,
      selectName,
      disabled: disabled2,
      liRef
    };
  },
  data: function data8() {
    return {
      isHover: false
    };
  },
  computed: {
    hovering: function hovering() {
      return this.tSelect && this.tSelect.visible && this.tSelect.hoverOptions[this.tSelect.hoverIndex] && this.tSelect.hoverOptions[this.tSelect.hoverIndex][this.tSelect.realValue] === this.value;
    },
    multiLimitDisabled: function multiLimitDisabled() {
      if (this.tSelect && this.tSelect.multiple && this.tSelect.max) {
        if (this.tSelect.value instanceof Array && this.tSelect.value.indexOf(this.value) === -1 && this.tSelect.max <= this.tSelect.value.length) {
          return true;
        }
      }
      return false;
    },
    classes: function classes() {
      var _ref;
      return ["".concat(this.selectName, "-option"), (_ref = {}, _defineProperty$3(_ref, this.STATUS.disabled, this.disabled || this.multiLimitDisabled), _defineProperty$3(_ref, this.STATUS.selected, this.selected), _defineProperty$3(_ref, this.SIZE[this.tSelect && this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$3(_ref, "".concat(this.selectName, "-option__hover"), this.hovering), _ref)];
    },
    isCreatedOption: function isCreatedOption() {
      return this.tSelect.creatable && this.value === this.tSelect.searchInput;
    },
    show: function show() {
      var _this = this;
      if (!this.tSelect)
        return false;
      if (this.isCreatedOption)
        return true;
      if (this.tSelect.canFilter && this.tSelect.searchInput !== "") {
        return this.tSelect.filterOptions.some(function(option2) {
          return get_1(option2, _this.tSelect.realValue) === _this.value;
        });
      }
      return true;
    },
    labelText: function labelText() {
      return this.label || String(this.value);
    },
    selected: function selected() {
      var _this2 = this;
      var flag = false;
      if (!this.tSelect)
        return false;
      if (this.tSelect.value instanceof Array) {
        if (this.tSelect.labelInValue) {
          flag = this.tSelect.value.map(function(item) {
            return get_1(item, _this2.tSelect.realValue);
          }).indexOf(this.value) !== -1;
        } else {
          flag = this.tSelect.value.indexOf(this.value) !== -1;
        }
      } else if (_typeof$1(this.tSelect.value) === "object") {
        flag = get_1(this.tSelect.value, this.tSelect.realValue) === this.value;
      } else {
        flag = this.tSelect.value === this.value;
      }
      return flag;
    }
  },
  watch: {
    value: function value() {
      this.tSelect && this.tSelect.getOptions(this);
    },
    label: function label() {
      this.tSelect && this.tSelect.getOptions(this);
    },
    hovering: function hovering2() {
      var _this3 = this;
      if (this.hovering) {
        var timer = setTimeout(function() {
          scrollSelectedIntoView(_this3.tSelect.getOverlayElm(), _this3.$el);
          clearTimeout(timer);
        }, this.tSelect.popupOpenTime);
      }
    }
  },
  mounted: function mounted6() {
    this.tSelect && this.tSelect.getOptions(this);
  },
  methods: {
    select: function select(e) {
      e.stopPropagation();
      if (this.disabled || this.multiLimitDisabled) {
        return false;
      }
      var parent2 = this.$el.parentNode;
      if (parent2 && parent2.className.indexOf("".concat(this.selectName, "__create-option")) !== -1) {
        this.tSelect && this.tSelect.createOption(this.value.toString());
      }
      this.tSelect && this.tSelect.onOptionClick(this.value, e);
    },
    mouseEvent: function mouseEvent2(v) {
      this.isHover = v;
    }
  },
  render: function render35() {
    var _this4 = this;
    var classes6 = this.classes, labelText2 = this.labelText, selected2 = this.selected, disabled2 = this.disabled, multiLimitDisabled3 = this.multiLimitDisabled, show2 = this.show;
    var children = renderContent(this, "default", "content");
    var optionChild = children || labelText2;
    return withDirectives(createVNode("li", {
      "ref": "liRef",
      "class": classes6,
      "title": labelText2,
      "onMouseenter": function onMouseenter() {
        return _this4.mouseEvent(true);
      },
      "onMouseleave": function onMouseleave() {
        return _this4.mouseEvent(false);
      },
      "onClick": function onClick2(e) {
        e.preventDefault();
        _this4.select(e);
      }
    }, [this.tSelect && this.tSelect.multiple ? createVNode(resolveComponent("t-checkbox"), {
      "checked": selected2,
      "disabled": disabled2 || multiLimitDisabled3
    }, _isSlot$m(optionChild) ? optionChild : {
      "default": function _default65() {
        return [optionChild];
      }
    }) : createVNode("span", null, [optionChild])]), [[vShow, show2]]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$F = {
  bordered: {
    type: Boolean,
    "default": true
  },
  clearable: Boolean,
  collapsedItems: {
    type: Function
  },
  creatable: Boolean,
  disabled: Boolean,
  empty: {
    type: [String, Function],
    "default": ""
  },
  filter: {
    type: Function
  },
  filterable: Boolean,
  keys: {
    type: Object
  },
  loading: Boolean,
  loadingText: {
    type: [String, Function],
    "default": ""
  },
  max: {
    type: Number,
    "default": 0
  },
  minCollapsedNum: {
    type: Number,
    "default": 0
  },
  multiple: Boolean,
  options: {
    type: Array,
    "default": function _default10() {
      return [];
    }
  },
  placeholder: {
    type: String,
    "default": ""
  },
  popupProps: {
    type: Object
  },
  prefixIcon: {
    type: Function
  },
  reserveKeyword: Boolean,
  showCheckAlll: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator44(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  value: {
    type: [String, Number, Object, Array]
  },
  defaultValue: {
    type: [String, Number, Object, Array]
  },
  valueDisplay: {
    type: Function
  },
  valueType: {
    type: String,
    "default": "value",
    validator: function validator45(val) {
      return ["value", "object"].includes(val);
    }
  },
  onBlur: Function,
  onChange: Function,
  onClear: Function,
  onCreate: Function,
  onEnter: Function,
  onFocus: Function,
  onRemove: Function,
  onSearch: Function,
  onVisibleChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1m(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1l(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1m(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$l(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var DEFAULT_MAX_OVERLAY_WIDTH = 500;
var DEFAULT_SCROLLY_WIDTH = 8;
var _Select = defineComponent({
  name: "TSelect",
  components: {
    CloseCircleFilledIcon: closeCircleFilled,
    TInput: Input,
    Tag,
    Popup,
    TOption: _Option
  },
  provide: function provide6() {
    return {
      tSelect: this
    };
  },
  props: _objectSpread$1l({}, props$F),
  emits: ["change", "input", "clear", "keydown", "keyup", "keypress", "focus", "blur", "remove", "create", "search", "visible-change"],
  setup: function setup44() {
    var disabled2 = useFormDisabled();
    var COMPONENT_NAME2 = usePrefixClass("select");
    var classPrefix2 = usePrefixClass("");
    var listName = usePrefixClass("select__list");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    var _useConfig = useConfig("select"), global2 = _useConfig.global, t = _useConfig.t;
    return {
      STATUS,
      SIZE,
      classPrefix: classPrefix2,
      listName,
      COMPONENT_NAME: COMPONENT_NAME2,
      disabled: disabled2,
      global: global2,
      t
    };
  },
  data: function data9() {
    return {
      isHover: false,
      visible: false,
      searchInput: "",
      showCreateOption: false,
      hasOptions: false,
      defaultProps: {
        trigger: "click",
        placement: "bottom-left",
        overlayClassName: "",
        overlayStyle: {}
      },
      focusing: false,
      labelInValue: this.valueType === "object",
      realValue: this.keys && this.keys.value ? this.keys.value : "value",
      realLabel: this.keys && this.keys.label ? this.keys.label : "label",
      realOptions: [],
      hoverIndex: -1,
      popupOpenTime: 250,
      checkScroll: true
    };
  },
  computed: {
    classes: function classes2() {
      var _ref;
      return ["".concat(this.COMPONENT_NAME), "".concat(this.COMPONENT_NAME, "-polyfill"), (_ref = {}, _defineProperty$3(_ref, this.STATUS.disabled, this.disabled), _defineProperty$3(_ref, this.STATUS.active, this.visible), _defineProperty$3(_ref, this.SIZE[this.size], this.size), _defineProperty$3(_ref, "".concat(this.classPrefix, "-has-prefix"), this.$slots.prefixIcon), _defineProperty$3(_ref, "".concat(this.classPrefix, "-no-border"), !this.bordered), _ref)];
    },
    popClass: function popClass() {
      var popupObject2 = this.popupObject;
      return "".concat(popupObject2.overlayClassName, " ").concat(this.COMPONENT_NAME, "__dropdown narrow-scrollbar");
    },
    tipsClass: function tipsClass() {
      return ["".concat(this.COMPONENT_NAME, "__loading-tips"), _defineProperty$3({}, this.SIZE[this.size], this.size)];
    },
    emptyClass: function emptyClass() {
      return ["".concat(this.COMPONENT_NAME, "__empty"), _defineProperty$3({}, this.SIZE[this.size], this.size)];
    },
    showPlaceholder: function showPlaceholder() {
      if (!this.showFilter && (!this.multiple && !this.selectedSingle || !this.multiple && _typeof$1(this.value) === "object" && !this.selectedSingle || Array.isArray(this.value) && !this.value.length || this.value === null || this.value === void 0 || this.value === "")) {
        return true;
      }
      return false;
    },
    isGroupOption: function isGroupOption() {
      var _this$options;
      var firstOption = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options[0];
      return !!(firstOption && "group" in firstOption && "children" in firstOption);
    },
    filterPlaceholder: function filterPlaceholder() {
      if (this.multiple && Array.isArray(this.value) && this.value.length) {
        return "";
      }
      if (!this.multiple && this.selectedSingle) {
        return this.selectedSingle;
      }
      return this.placeholder;
    },
    showClose: function showClose() {
      return Boolean(this.clearable && this.isHover && !this.disabled && (!this.multiple && (this.value || this.value === 0) || this.multiple && Array.isArray(this.value) && this.value.length));
    },
    showArrow: function showArrow() {
      return !this.clearable || !this.isHover || this.disabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && (!Array.isArray(this.value) || Array.isArray(this.value) && !this.value.length);
    },
    canFilter: function canFilter() {
      return this.filterable || isFunction_1(this.filter);
    },
    showLoading: function showLoading() {
      return this.loading && !this.disabled;
    },
    showFilter: function showFilter() {
      if (this.disabled)
        return false;
      if (!this.multiple && this.selectedSingle && this.canFilter) {
        return this.visible;
      }
      return this.canFilter;
    },
    selectedSingle: function selectedSingle() {
      var _this = this;
      if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
        var target = [];
        if (this.realOptions && this.realOptions.length) {
          target = this.realOptions.filter(function(item) {
            return get_1(item, _this.realValue) === _this.value;
          });
        }
        if (target.length) {
          if (get_1(target[target.length - 1], this.realLabel) === "") {
            return get_1(target[target.length - 1], this.realValue);
          }
          return get_1(target[target.length - 1], this.realLabel);
        }
        return this.value.toString();
      }
      var showText = get_1(this.value, this.realLabel);
      if (!this.multiple && _typeof$1(this.value) === "object" && showText !== void 0) {
        return showText === "" ? get_1(this.value, this.realValue) : showText;
      }
      return "";
    },
    selectedMultiple: function selectedMultiple() {
      var _this2 = this;
      if (this.multiple && Array.isArray(this.value) && this.value.length) {
        return this.value.map(function(item) {
          if (_typeof$1(item) === "object") {
            return item;
          }
          var tmp = _this2.realOptions.filter(function(op) {
            return get_1(op, _this2.realValue) === item;
          });
          var valueLabel = {};
          set_1(valueLabel, _this2.realValue, item);
          set_1(valueLabel, _this2.realLabel, tmp.length ? get_1(tmp[tmp.length - 1], _this2.realLabel) : item);
          return tmp.length && tmp[tmp.length - 1].disabled ? _objectSpread$1l(_objectSpread$1l({}, valueLabel), {}, {
            disabled: true
          }) : valueLabel;
        });
      }
      return [];
    },
    popupObject: function popupObject() {
      var propsObject = this.popupProps ? _objectSpread$1l(_objectSpread$1l({}, this.defaultProps), this.popupProps) : this.defaultProps;
      return propsObject;
    },
    filterOptions: function filterOptions() {
      var _this3 = this;
      if (isFunction_1(this.filter)) {
        return this.realOptions.filter(function(option2) {
          return _this3.filter(_this3.searchInput, option2);
        });
      }
      if (this.filterable) {
        return this.realOptions.filter(function(option2) {
          return option2[_this3.realLabel].toString().toLowerCase().indexOf(_this3.searchInput.toString().toLowerCase()) !== -1;
        });
      }
      return [];
    },
    displayOptions: function displayOptions() {
      if (isFunction_1(this.onSearch) || this.$attrs.search) {
        return this.realOptions;
      }
      if (this.canFilter && !this.creatable) {
        if (this.searchInput === "") {
          return this.realOptions;
        }
        return this.filterOptions;
      }
      return this.realOptions;
    },
    hoverOptions: function hoverOptions() {
      if (!this.showCreateOption) {
        if (isFunction_1(this.filter) || this.filterable) {
          return this.filterOptions;
        }
        return this.realOptions;
      }
      var willCreateOption = [{
        value: this.searchInput,
        label: this.searchInput
      }];
      if (isFunction_1(this.filter) || this.filterable) {
        return willCreateOption.concat(this.filterOptions);
      }
      return willCreateOption.concat(this.realOptions);
    }
  },
  watch: {
    showFilter: function showFilter2(val) {
      var _this4 = this;
      if (val && this.selectedSingle) {
        nextTick(function() {
          _this4.doFocus();
        });
      }
    },
    searchInput: function searchInput(val) {
      var _this5 = this;
      if (!val && !this.visible)
        return;
      if (isFunction_1(this.onSearch) || this.$attrs.search) {
        this.debounceOnRemote();
      }
      if (this.canFilter && val && this.creatable) {
        var tmp = this.realOptions.filter(function(item) {
          return get_1(item, _this5.realLabel).toString() === val;
        });
        this.showCreateOption = !tmp.length;
      } else {
        this.showCreateOption = false;
      }
    },
    options: {
      immediate: true,
      deep: true,
      handler: function handler6(options) {
        if (Array.isArray(options)) {
          this.realOptions = this.getRealOptions(options);
        } else {
          console.error("TDesign Select: options must be an array.");
        }
      }
    },
    visible: function visible3() {
      this.visible && document.addEventListener("keydown", this.keydownEvent);
      !this.visible && document.removeEventListener("keydown", this.keydownEvent);
    }
  },
  mounted: function mounted7() {
    this.checkVal();
  },
  methods: {
    getRealOptions: function getRealOptions(options) {
      if (this.isGroupOption) {
        var arr = [];
        options.forEach(function(item) {
          if ("children" in item) {
            arr = arr.concat(item.children);
          }
        });
        return arr;
      }
      return _toConsumableArray(options);
    },
    checkVal: function checkVal() {
      var value6 = this.value, multiple = this.multiple;
      if (multiple && !Array.isArray(value6) || !multiple && Array.isArray(value6)) {
        emitEvent(this, "change", this.multiple ? [] : "");
        console.warn("TDesign Warn:", "select props value invalid, v-model automatic calibration");
      }
    },
    multiLimitDisabled: function multiLimitDisabled2(value6) {
      if (this.multiple && this.max) {
        if (this.value instanceof Array && this.value.indexOf(value6) === -1 && this.max <= this.value.length) {
          return true;
        }
      }
      return false;
    },
    visibleChange: function visibleChange(val) {
      emitEvent(this, "visible-change", val);
      this.visible = val;
      if (!val) {
        this.searchInput = "";
        this.showCreateOption = false;
      }
      val && this.monitorWidth();
      val && this.canFilter && this.doFocus();
    },
    onOptionClick: function onOptionClick(value6, e) {
      var _this6 = this;
      if (this.value !== value6) {
        if (this.multiple && this.value instanceof Array) {
          if (this.labelInValue) {
            var index2 = this.value.map(function(item) {
              return get_1(item, _this6.realValue);
            }).indexOf(value6);
            if (index2 > -1) {
              this.removeTag(index2, {
                e
              });
            } else {
              this.value.push(this.realOptions.filter(function(item) {
                return get_1(item, _this6.realValue) === value6;
              })[0]);
              this.emitChange(this.value);
            }
          } else {
            var _index = this.value.indexOf(value6);
            if (_index > -1) {
              this.removeTag(_index, {
                e
              });
            } else {
              this.value.push(value6);
              this.emitChange(this.value);
            }
          }
        } else {
          this.emitChange(value6);
        }
      }
      if (!this.multiple) {
        this.searchInput = "";
        this.hideMenu();
      } else {
        if (!this.reserveKeyword) {
          this.searchInput = "";
        }
        this.canFilter && this.doFocus();
      }
    },
    removeTag: function removeTag(index2, context) {
      var _this7 = this;
      var _ref4 = context || {}, e = _ref4.e;
      e && e.stopPropagation();
      if (this.disabled) {
        return;
      }
      var val = this.value[index2];
      var removeOption = this.realOptions.filter(function(item) {
        return get_1(item, _this7.realValue) === val;
      });
      var tempValue = this.value instanceof Array ? [].concat(this.value) : [];
      tempValue.splice(index2, 1);
      this.emitChange(tempValue);
      emitEvent(this, "remove", {
        value: val,
        data: removeOption[0],
        e
      });
    },
    hideMenu: function hideMenu() {
      this.visible = false;
    },
    clearSelect: function clearSelect(e) {
      e.stopPropagation();
      if (this.multiple) {
        this.emitChange([]);
      } else {
        this.emitChange("");
      }
      this.focusing = false;
      this.searchInput = "";
      this.visible = false;
      emitEvent(this, "clear", {
        e
      });
    },
    getOptions: function getOptions(option2) {
      var _this8 = this;
      if (option2.$el && option2.$el.className && option2.$el.className.indexOf("".concat(this.COMPONENT_NAME, "__create-option--special")) !== -1)
        return;
      var tmp = this.realOptions.filter(function(item) {
        return get_1(item, _this8.realValue) === option2.value;
      });
      if (!tmp.length) {
        this.hasOptions = true;
        var valueLabel = {};
        set_1(valueLabel, this.realValue, option2.value);
        set_1(valueLabel, this.realLabel, option2.label);
        var valueLabelAble = option2.disabled ? _objectSpread$1l(_objectSpread$1l({}, valueLabel), {}, {
          disabled: true
        }) : valueLabel;
        this.realOptions.push(valueLabelAble);
      }
    },
    destroyOptions: function destroyOptions(option2) {
      var _this9 = this;
      this.realOptions.forEach(function(item, index2) {
        if (item[_this9.realValue] === option2.value && item[_this9.realLabel] === option2.label) {
          _this9.realOptions.splice(index2, 1);
        }
      });
    },
    emitChange: function emitChange2(val) {
      var _this10 = this;
      var value6;
      if (this.labelInValue) {
        if (Array.isArray(val)) {
          if (!val.length) {
            value6 = [];
          } else {
            value6 = val;
          }
        } else {
          var target = this.realOptions.filter(function(item) {
            return get_1(item, _this10.realValue) === val;
          });
          value6 = target.length ? target[0] : "";
        }
      } else {
        value6 = val;
      }
      emitEvent(this, "change", value6);
    },
    createOption: function createOption(value6) {
      emitEvent(this, "create", value6);
    },
    debounceOnRemote: debounce_1(function() {
      emitEvent(this, "search", this.searchInput);
    }, 300),
    focus: function focus2(value6, context) {
      this.focusing = true;
      emitEvent(this, "focus", {
        value: this.value,
        e: context === null || context === void 0 ? void 0 : context.e
      });
    },
    blur: function blur2(value6, context) {
      this.focusing = false;
      emitEvent(this, "blur", {
        value: this.value,
        e: context === null || context === void 0 ? void 0 : context.e
      });
    },
    enter: function enter(value6, context) {
      emitEvent(this, "enter", {
        inputValue: this.searchInput,
        value: this.value,
        e: context === null || context === void 0 ? void 0 : context.e
      });
    },
    keydownEvent: function keydownEvent(e) {
      var _this11 = this;
      if (!this.hoverOptions.length)
        return;
      var preventKeys = ["ArrowDown", "ArrowUp", "Enter", "Escape", "Tab"];
      if (preventKeys.includes(e.code)) {
        e.preventDefault();
      }
      switch (e.code) {
        case "ArrowDown":
          if (this.hoverIndex === -1) {
            this.initHoverindex();
            return;
          }
          if (this.hoverIndex < this.hoverOptions.length - 1) {
            this.hoverIndex += 1;
            this.arrowDownOption();
          } else {
            this.hoverIndex = 0;
            this.arrowDownOption();
          }
          break;
        case "ArrowUp":
          if (this.hoverIndex === -1) {
            this.initHoverindex();
            return;
          }
          if (this.hoverIndex > 0) {
            this.hoverIndex -= 1;
            this.arrowUpOption();
          } else {
            this.hoverIndex = this.hoverOptions.length - 1;
            this.arrowUpOption();
          }
          break;
        case "Enter":
          if (this.showCreateOption) {
            this.createOption(this.searchInput);
            this.$nextTick(function() {
              _this11.searchInput = "";
            });
          }
          this.hoverOptions[this.hoverIndex] && this.onOptionClick(this.hoverOptions[this.hoverIndex][this.realValue], e);
          break;
        case "Escape":
        case "Tab":
          this.visible = false;
          emitEvent(this, "visible-change", false);
          this.searchInput = "";
          if (this.focusing) {
            this.blur(this.searchInput, {
              e
            });
          }
          break;
      }
    },
    arrowDownOption: function arrowDownOption() {
      var count = 0;
      while (this.hoverIndex < this.hoverOptions.length) {
        if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
          break;
        }
        if (this.hoverIndex === this.hoverOptions.length - 1) {
          this.hoverIndex = 0;
        } else {
          this.hoverIndex += 1;
        }
        count += 1;
        if (count >= this.hoverOptions.length)
          break;
      }
    },
    arrowUpOption: function arrowUpOption() {
      var count = 0;
      while (this.hoverIndex > -1) {
        if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
          break;
        }
        if (this.hoverIndex === 0) {
          this.hoverIndex = this.hoverOptions.length - 1;
        } else {
          this.hoverIndex -= 1;
        }
        count += 1;
        if (count >= this.hoverOptions.length)
          break;
      }
    },
    hoverEvent: function hoverEvent(v) {
      this.isHover = v;
    },
    getOverlayElm: function getOverlayElm() {
      var r;
      try {
        r = this.$refs.popup.$refs.overlay || this.$refs.popup.$refs.component.$refs.overlay;
      } catch (e) {
        console.warn("TDesign Warn:", e);
      }
      return r;
    },
    monitorWidth: function monitorWidth() {
      var _this12 = this;
      this.$nextTick(function() {
        var styles = _this12.popupProps && _this12.popupProps.overlayStyle || {};
        if (_this12.popupProps && isFunction_1(_this12.popupProps.overlayStyle)) {
          styles = _this12.popupProps.overlayStyle(_this12.$refs.select) || {};
        }
        if (_typeof$1(styles) === "object" && !styles.width) {
          var elWidth = _this12.$refs.select.getBoundingClientRect().width;
          var popupWidth = _this12.getOverlayElm().getBoundingClientRect().width;
          var width = elWidth > DEFAULT_MAX_OVERLAY_WIDTH ? elWidth : Math.min(DEFAULT_MAX_OVERLAY_WIDTH, Math.max(elWidth, popupWidth));
          _this12.defaultProps.overlayStyle = {
            width: "".concat(Math.ceil(width), "px")
          };
          if (_this12.checkScroll) {
            var timer = setTimeout(function() {
              var _this12$getOverlayElm = _this12.getOverlayElm(), scrollHeight = _this12$getOverlayElm.scrollHeight, clientHeight = _this12$getOverlayElm.clientHeight;
              if (scrollHeight > clientHeight) {
                _this12.defaultProps.overlayStyle = {
                  width: "".concat(Math.ceil(width) + DEFAULT_SCROLLY_WIDTH, "px")
                };
              }
              _this12.checkScroll = false;
              clearTimeout(timer);
            }, _this12.popupOpenTime);
          }
        }
      });
    },
    getEmpty: function getEmpty() {
      var useLocale = !this.empty && !this.$slots.empty;
      return useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty");
    },
    getLoadingText: function getLoadingText() {
      var useLocale = !this.loadingText && !this.$slots.loadingText;
      return useLocale ? this.t(this.global.loadingText) : renderTNodeJSX(this, "loadingText");
    },
    getPlaceholderText: function getPlaceholderText() {
      return this.placeholder || this.t(this.global.placeholder);
    },
    getCloseIcon: function getCloseIcon() {
      var _this13 = this;
      var closeIconClass2 = ["".concat(this.COMPONENT_NAME, "__right-icon"), "".concat(this.COMPONENT_NAME, "__right-icon-clear"), "".concat(this.COMPONENT_NAME, "__right-icon-polyfill")];
      if (isFunction_1(this.global.clearIcon)) {
        return createVNode("span", {
          "class": closeIconClass2,
          "onClick": this.clearSelect
        }, [this.global.clearIcon()]);
      }
      return createVNode(resolveComponent("close-circle-filled-icon"), {
        "class": closeIconClass2,
        "size": this.size,
        "onClick": function onClick2(_ref5) {
          var e = _ref5.e;
          return _this13.clearSelect(e);
        }
      }, null);
    },
    doFocus: function doFocus() {
      var input = this.$refs.input;
      input === null || input === void 0 ? void 0 : input.focus();
      this.focusing = true;
    },
    renderGroupOptions: function renderGroupOptions(options) {
      var _this14 = this;
      return createVNode("ul", {
        "class": this.listName
      }, [options.map(function(groupList) {
        var _slot;
        var children = groupList.children.filter(function(item) {
          return _this14.displayOptions.find(function(child) {
            return child.value === item.value;
          });
        });
        return createVNode(resolveComponent("t-option-group"), {
          "label": groupList.group,
          "divider": groupList.divider
        }, _isSlot$l(_slot = _this14.renderOptions(children)) ? _slot : {
          "default": function _default65() {
            return [_slot];
          }
        });
      })]);
    },
    renderOptions: function renderOptions(options) {
      var _this15 = this;
      return createVNode("ul", {
        "class": this.listName
      }, [options.map(function(item, index2) {
        return createVNode(resolveComponent("t-option"), {
          "value": get_1(item, _this15.realValue),
          "label": get_1(item, _this15.realLabel),
          "content": item.content,
          "disabled": item.disabled || _this15.multiLimitDisabled(get_1(item, _this15.realValue)),
          "key": index2
        }, null);
      })]);
    },
    renderDataWithOptions: function renderDataWithOptions() {
      return this.isGroupOption ? this.renderGroupOptions(this.options) : this.renderOptions(this.displayOptions);
    },
    initHoverindex: function initHoverindex() {
      var _this16 = this;
      if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
        var targetIndex = Object.keys(this.hoverOptions).filter(function(i) {
          return get_1(_this16.hoverOptions[i], _this16.realValue) === _this16.value;
        });
        this.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : -1;
      } else if (this.multiple && Array.isArray(this.value) && this.value.length) {
        this.value.some(function(item) {
          var targetIndex2 = Object.keys(_this16.hoverOptions).filter(function(i) {
            return _typeof$1(item) === "object" && get_1(_this16.hoverOptions[i], _this16.realValue) === get_1(item, _this16.realValue) || get_1(_this16.hoverOptions[i], _this16.realValue) === item;
          });
          _this16.hoverIndex = targetIndex2.length ? parseInt(targetIndex2[targetIndex2.length - 1], 10) : -1;
          return _this16.hoverIndex !== -1;
        });
      }
    }
  },
  render: function render36() {
    var _this17 = this;
    var classes6 = this.classes, popupObject2 = this.popupObject, disabled2 = this.disabled, popClass2 = this.popClass, size2 = this.size, showPlaceholder3 = this.showPlaceholder, selectedMultiple2 = this.selectedMultiple, multiple = this.multiple, showFilter3 = this.showFilter, selectedSingle2 = this.selectedSingle, filterPlaceholder2 = this.filterPlaceholder, tipsClass2 = this.tipsClass, loading2 = this.loading, loadingText = this.loadingText, emptyClass2 = this.emptyClass, hasOptions = this.hasOptions, realLabel = this.realLabel, showCreateOption = this.showCreateOption, displayOptions2 = this.displayOptions;
    var children = renderTNodeJSX(this, "default");
    var prefixIconSlot = renderTNodeJSX(this, "prefixIcon");
    var emptySlot = this.getEmpty();
    var loadingTextSlot = this.getLoadingText();
    var placeholderText = this.getPlaceholderText();
    var slots = {
      content: function content() {
        return createVNode("div", {
          "className": "".concat(_this17.COMPONENT_NAME, "__dropdown-inner")
        }, [renderTNodeJSX(_this17, "panelTopContent"), withDirectives(createVNode("ul", {
          "class": ["".concat(_this17.COMPONENT_NAME, "__create-option"), _this17.listName]
        }, [createVNode(resolveComponent("t-option"), {
          "value": _this17.searchInput,
          "label": _this17.searchInput,
          "class": "".concat(_this17.COMPONENT_NAME, "__create-option--special")
        }, null)]), [[vShow, showCreateOption]]), loading2 && createVNode("div", {
          "class": tipsClass2
        }, [loadingTextSlot || loadingText]), !loading2 && !displayOptions2.length && !showCreateOption && createVNode("li", {
          "class": emptyClass2
        }, [emptySlot]), !hasOptions && displayOptions2.length && !loading2 ? _this17.renderDataWithOptions() : createVNode("ul", {
          "class": ["".concat(_this17.COMPONENT_NAME, "__groups"), _this17.listName]
        }, [children]), renderTNodeJSX(_this17, "panelBottomContent")]);
      }
    };
    return createVNode("div", {
      "ref": "select",
      "class": "".concat(this.COMPONENT_NAME, "__wrap")
    }, [createVNode(Popup, mergeProps({
      "ref": "popup"
    }, popupObject2, {
      "class": "".concat(this.COMPONENT_NAME, "__popup-reference"),
      "visible": this.visible,
      "placement": popupObject2.placement,
      "trigger": popupObject2.trigger,
      "disabled": disabled2,
      "overlayClassName": popClass2,
      "overlayStyle": popupObject2.overlayStyle,
      "onVisibleChange": this.visibleChange,
      "expandAnimation": true
    }), _objectSpread$1l({
      "default": function _default65() {
        return [createVNode("div", {
          "class": classes6,
          "onMouseenter": _this17.hoverEvent.bind(null, true),
          "onMouseleave": _this17.hoverEvent.bind(null, false)
        }, [prefixIconSlot && createVNode("span", {
          "class": "".concat(_this17.COMPONENT_NAME, "__left-icon")
        }, [prefixIconSlot[0]]), showPlaceholder3 && createVNode("span", {
          "class": "".concat(_this17.COMPONENT_NAME, "__placeholder")
        }, [" ", placeholderText]), multiple && (_this17.valueDisplay || _this17.$slots.valueDisplay ? renderTNodeJSX(_this17, "valueDisplay", {
          params: {
            value: selectedMultiple2,
            onClose: function onClose(index2) {
              return _this17.removeTag(index2);
            }
          }
        }) : selectedMultiple2.map(function(item, index2) {
          var _slot2;
          return withDirectives(createVNode(resolveComponent("tag"), {
            "key": index2,
            "size": size2,
            "closable": !item.disabled && !disabled2,
            "disabled": disabled2,
            "style": "max-width: 100%;",
            "maxWidth": "100%",
            "title": get_1(item, realLabel),
            "onClose": _this17.removeTag.bind(null, index2)
          }, _isSlot$l(_slot2 = get_1(item, realLabel)) ? _slot2 : {
            "default": function _default66() {
              return [_slot2];
            }
          }), [[vShow, _this17.minCollapsedNum <= 0 || index2 < _this17.minCollapsedNum]]);
        })), _this17.collapsedItems || _this17.$slots.collapsedItems ? renderTNodeJSX(_this17, "collapsedItems", {
          params: {
            value: selectedMultiple2,
            collapsedSelectedItems: selectedMultiple2.slice(_this17.minCollapsedNum),
            count: selectedMultiple2.length - _this17.minCollapsedNum
          }
        }) : withDirectives(createVNode(resolveComponent("tag"), {
          "size": size2
        }, {
          "default": function _default66() {
            return ["+".concat(selectedMultiple2.length - _this17.minCollapsedNum)];
          }
        }), [[vShow, _this17.minCollapsedNum > 0 && selectedMultiple2.length > _this17.minCollapsedNum]]), !multiple && !showPlaceholder3 && !showFilter3 && (_this17.valueDisplay || _this17.$slots.valueDisplay ? renderTNodeJSX(_this17, "valueDisplay", {
          params: {
            value: selectedSingle2
          }
        }) : createVNode("span", {
          "title": selectedSingle2,
          "class": "".concat(_this17.COMPONENT_NAME, "__single")
        }, [selectedSingle2])), showFilter3 && createVNode(resolveComponent("t-input"), {
          "ref": "input",
          "modelValue": _this17.searchInput,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return _this17.searchInput = $event;
          },
          "size": size2,
          "placeholder": filterPlaceholder2,
          "disabled": disabled2,
          "class": "".concat(_this17.COMPONENT_NAME, "__input"),
          "readonly": !_this17.visible || !_this17.showFilter,
          "onFocus": _this17.focus,
          "onBlur": _this17.blur,
          "onEnter": _this17.enter
        }, null), _this17.showArrow && !_this17.showLoading && createVNode(FakeArrow, {
          "overlayClassName": "".concat(_this17.COMPONENT_NAME, "__right-icon ").concat(_this17.COMPONENT_NAME, "__right-icon-polyfill"),
          "isActive": _this17.visible && !_this17.disabled
        }, null), _this17.showClose && !_this17.showLoading && _this17.getCloseIcon(), _this17.showLoading && createVNode(Loading, {
          "class": "".concat(_this17.COMPONENT_NAME, "__right-icon ").concat(_this17.COMPONENT_NAME, "__active-icon ").concat(_this17.COMPONENT_NAME, "__right-icon-polyfill"),
          "size": "small"
        }, null)])];
      }
    }, slots))]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$E = {
  divider: {
    type: Boolean,
    "default": true
  },
  label: {
    type: String,
    "default": ""
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1l(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1k(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1l(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _OptionGroup = defineComponent({
  name: "TOptionGroup",
  inject: {
    tSelect: {
      "default": void 0
    }
  },
  props: _objectSpread$1k({}, props$E),
  setup: function setup45() {
    var COMPONENT_NAME2 = usePrefixClass("select-option-group");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
    return {
      SIZE,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data10() {
    return {
      visible: true
    };
  },
  computed: {
    classes: function classes3() {
      var _ref;
      return [this.COMPONENT_NAME, (_ref = {}, _defineProperty$3(_ref, this.SIZE[this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$3(_ref, "".concat(this.COMPONENT_NAME, "__divider"), this.divider), _ref)];
    }
  },
  methods: {
    childrenChange: function childrenChange() {
      this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function(option2) {
        return option2.show === true;
      });
    }
  },
  render: function render37() {
    var children = renderTNodeJSX(this, "default");
    return createVNode("li", {
      "class": this.classes
    }, [createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__header")
    }, [this.label]), createVNode("ul", null, [children])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Select = withInstall(mapProps([{
  name: "value",
  event: "change",
  alias: ["modelValue"]
}])(_Select));
var Option = withInstall(_Option);
var OptionGroup = withInstall(_OptionGroup);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$D = {
  current: {
    type: Number,
    "default": void 0
  },
  modelValue: {
    type: Number,
    "default": void 0
  },
  defaultCurrent: {
    type: Number,
    "default": 1
  },
  disabled: Boolean,
  foldedMaxPageBtn: {
    type: Number,
    "default": 5
  },
  maxPageBtn: {
    type: Number,
    "default": 10
  },
  pageSize: {
    type: Number,
    "default": void 0
  },
  defaultPageSize: {
    type: Number,
    "default": 10
  },
  pageSizeOptions: {
    type: Array,
    "default": function _default11() {
      return [5, 10, 20, 50];
    }
  },
  showJumper: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator46(val) {
      return ["small", "medium"].includes(val);
    }
  },
  theme: {
    type: String,
    "default": "default",
    validator: function validator47(val) {
      return ["default", "simple"].includes(val);
    }
  },
  total: {
    type: Number,
    "default": 0
  },
  totalContent: {
    type: [Boolean, Function],
    "default": true
  },
  onChange: Function,
  onCurrentChange: Function,
  onPageSizeChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function usePaginationClasses(props2, innerCurrent, innerPageSize, name2) {
  var pageCount = computed(function() {
    var c = Math.ceil(props2.total / innerPageSize.value);
    return c > 0 ? c : 1;
  });
  var paginationClass = computed(function() {
    return ["".concat(name2.value), ClASSNAMES.SIZE[props2.size], _defineProperty$3({}, ClASSNAMES.STATUS.disabled, props2.disabled)];
  });
  var totalClass = computed(function() {
    return ["".concat(name2.value, "__total")];
  });
  var sizerClass = computed(function() {
    return ["".concat(name2.value, "__select")];
  });
  var preBtnClass = computed(function() {
    return ["".concat(name2.value, "__btn"), "".concat(name2.value, "__btn-prev"), _defineProperty$3({}, ClASSNAMES.STATUS.disabled, props2.disabled || innerCurrent.value === 1)];
  });
  var nextBtnClass = computed(function() {
    return ["".concat(name2.value, "__btn"), "".concat(name2.value, "__btn-next"), _defineProperty$3({}, ClASSNAMES.STATUS.disabled, props2.disabled || innerCurrent.value === pageCount.value)];
  });
  var btnWrapClass = computed(function() {
    return ["".concat(name2.value, "__pager")];
  });
  var btnMoreClass = computed(function() {
    return ["".concat(name2.value, "__number"), "".concat(name2.value, "__number--more"), _defineProperty$3({}, ClASSNAMES.STATUS.disabled, props2.disabled)];
  });
  var jumperClass = computed(function() {
    return ["".concat(name2.value, "__jump")];
  });
  var jumperInputClass = computed(function() {
    return ["".concat(name2.value, "__input")];
  });
  var simpleClass = computed(function() {
    return ["".concat(name2.value, "__select")];
  });
  var getButtonClass = function getButtonClass2(index2) {
    var _ref5;
    return ["".concat(name2.value, "__number"), (_ref5 = {}, _defineProperty$3(_ref5, ClASSNAMES.STATUS.disabled, props2.disabled), _defineProperty$3(_ref5, ClASSNAMES.STATUS.current, innerCurrent.value === index2), _ref5)];
  };
  return {
    pageCount,
    paginationClass,
    totalClass,
    sizerClass,
    preBtnClass,
    nextBtnClass,
    btnWrapClass,
    btnMoreClass,
    jumperClass,
    jumperInputClass,
    simpleClass,
    getButtonClass
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useMoreAction(props2, pageCount, innerCurrent) {
  var prevMore = ref(false);
  var nextMore = ref(false);
  var curPageLeftCount = computed(function() {
    return Math.ceil((props2.foldedMaxPageBtn - 1) / 2);
  });
  var curPageRightCount = computed(function() {
    return Math.ceil((props2.foldedMaxPageBtn - 1) / 2);
  });
  var isPrevMoreShow = computed(function() {
    return 2 + curPageLeftCount.value < innerCurrent.value;
  });
  var isNextMoreShow = computed(function() {
    return pageCount.value - 1 - curPageRightCount.value > innerCurrent.value;
  });
  return {
    prevMore,
    nextMore,
    curPageLeftCount,
    curPageRightCount,
    isPrevMoreShow,
    isNextMoreShow
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useDefaultValue(value6, defaultValue, onChange, propsName) {
  var _getCurrentInstance = getCurrentInstance(), emit = _getCurrentInstance.emit;
  var internalValue = ref();
  internalValue.value = defaultValue;
  if (typeof value6.value !== "undefined") {
    return [value6, function(newValue) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:".concat(propsName), newValue].concat(args));
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }
  return [internalValue, function(newValue) {
    internalValue.value = newValue;
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
  }];
}
var index$y = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _excluded$2 = ["pageCount"];
function ownKeys$1k(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1j(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1k(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$k(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var min = 1;
var _Pagination = defineComponent({
  name: "TPagination",
  props: props$D,
  setup: function setup46(props2) {
    var _toRefs = toRefs(props2), modelValue = _toRefs.modelValue, pageSize = _toRefs.pageSize, current2 = _toRefs.current;
    var _useVModel = useVModel(current2, modelValue, props2.defaultCurrent, props2.onCurrentChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerCurrent = _useVModel2[0], setInnerCurrent = _useVModel2[1];
    var _useDefaultValue = useDefaultValue(pageSize, props2.defaultPageSize, props2.onPageSizeChange, "pageSize"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), innerPageSize = _useDefaultValue2[0], setInnerPageSize = _useDefaultValue2[1];
    var _useConfig = useConfig("pagination"), t = _useConfig.t, global2 = _useConfig.global;
    var COMPONENT_NAME2 = usePrefixClass("pagination");
    var _usePaginationClasses = usePaginationClasses(props2, innerCurrent, innerPageSize, COMPONENT_NAME2), pageCount = _usePaginationClasses.pageCount, paginationClasses = _objectWithoutProperties$1(_usePaginationClasses, _excluded$2);
    var _useMoreAction = useMoreAction(props2, pageCount, innerCurrent), prevMore = _useMoreAction.prevMore, isPrevMoreShow = _useMoreAction.isPrevMoreShow, curPageLeftCount = _useMoreAction.curPageLeftCount, nextMore = _useMoreAction.nextMore, isNextMoreShow = _useMoreAction.isNextMoreShow, curPageRightCount = _useMoreAction.curPageRightCount;
    var jumpIndex = ref(innerCurrent.value);
    var isSimple = computed(function() {
      return props2.theme === "simple";
    });
    var isFolded = computed(function() {
      return pageCount.value > props2.maxPageBtn;
    });
    var pageCountOption = computed(function() {
      var ans = [];
      for (var i = 1; i <= pageCount.value; i++) {
        ans.push({
          value: i,
          label: "".concat(i, "/").concat(pageCount.value)
        });
      }
      return ans;
    });
    var sizeOptions = computed(function() {
      var pageSizeOptions = props2.pageSizeOptions;
      var options = pageSizeOptions.map(function(option2) {
        return _typeof$1(option2) === "object" ? option2 : {
          label: t(global2.value.itemsPerPage, {
            size: option2
          }),
          value: Number(option2)
        };
      });
      return options.sort(function(a, b) {
        return a.value - b.value;
      });
    });
    var pages = computed(function() {
      var array = [];
      var start3;
      var end3;
      if (isFolded.value) {
        if (isPrevMoreShow.value && isNextMoreShow.value) {
          start3 = innerCurrent.value - curPageLeftCount.value;
          end3 = innerCurrent.value + curPageRightCount.value;
        } else {
          start3 = isPrevMoreShow.value ? pageCount.value - props2.foldedMaxPageBtn + 1 : 2;
          end3 = isPrevMoreShow.value ? pageCount.value - 1 : props2.foldedMaxPageBtn;
        }
      } else {
        start3 = 1;
        end3 = pageCount.value;
      }
      for (var i = start3; i <= end3; i++) {
        array.push(i);
      }
      return array;
    });
    watch(function() {
      return innerCurrent.value;
    }, function(val) {
      return jumpIndex.value = val;
    });
    var toPage = function toPage2(pageIndex, isTriggerChange) {
      if (props2.disabled) {
        return;
      }
      var current22 = pageIndex;
      if (pageIndex < min) {
        current22 = min;
      } else if (pageIndex > pageCount.value) {
        current22 = pageCount.value;
      }
      if (innerCurrent.value !== current22) {
        var prev = innerCurrent.value;
        var pageInfo = {
          current: current22,
          previous: prev,
          pageSize: innerPageSize.value
        };
        if (isTriggerChange !== false) {
          var _props2$onChange;
          (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, pageInfo);
        }
        setInnerCurrent(current22, pageInfo);
      }
    };
    var handlePageChange = function handlePageChange2(type) {
      var pageChangeMap = {
        prevPage: function prevPage() {
          return toPage(innerCurrent.value - 1);
        },
        nextPage: function nextPage() {
          return toPage(innerCurrent.value + 1);
        },
        prevMorePage: function prevMorePage() {
          return toPage(innerCurrent.value - props2.foldedMaxPageBtn);
        },
        nextMorePage: function nextMorePage() {
          return toPage(innerCurrent.value + props2.foldedMaxPageBtn);
        }
      };
      pageChangeMap[type]();
    };
    var onSelectorChange = function onSelectorChange2(e) {
      var _props2$onChange2;
      if (props2.disabled) {
        return;
      }
      var pageSize2 = parseInt(e, 10);
      var pageCount2 = 1;
      if (pageSize2 > 0) {
        pageCount2 = Math.ceil(props2.total / pageSize2);
      }
      var isIndexChange = false;
      if (innerCurrent.value > pageCount2) {
        isIndexChange = true;
      }
      var pageInfo = {
        current: isIndexChange ? pageCount2 : innerCurrent.value,
        previous: innerCurrent.value,
        pageSize: pageSize2
      };
      (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 ? void 0 : _props2$onChange2.call(props2, pageInfo);
      setInnerPageSize(pageSize2, pageInfo);
      if (isIndexChange) {
        toPage(pageCount2, false);
      }
    };
    var onJumperChange = function onJumperChange2(val) {
      var currentIndex = Math.trunc(+val);
      if (_isNaN(currentIndex))
        return;
      jumpIndex.value = currentIndex;
      toPage(currentIndex);
    };
    return _objectSpread$1j(_objectSpread$1j({
      global: global2,
      t
    }, paginationClasses), {}, {
      sizeOptions,
      isSimple,
      isFolded,
      isPrevMoreShow,
      prevMore,
      pages,
      isNextMoreShow,
      nextMore,
      pageCount,
      pageCountOption,
      jumpIndex,
      toPage,
      handlePageChange,
      onSelectorChange,
      onJumperChange,
      innerCurrent,
      innerPageSize
    });
  },
  render: function render38() {
    var _this = this;
    var _slot;
    var pageCount = this.pageCount, innerPageSize = this.innerPageSize, innerCurrent = this.innerCurrent;
    var _this$$props = this.$props, total = _this$$props.total, pageSizeOptions = _this$$props.pageSizeOptions, size2 = _this$$props.size, disabled2 = _this$$props.disabled, showJumper = _this$$props.showJumper;
    if (pageCount < 1)
      return null;
    return createVNode("div", {
      "class": this.paginationClass
    }, [renderTNodeJSX(this, "totalContent", createVNode("div", {
      "class": this.totalClass
    }, [this.t(this.global.total, {
      total
    })])), pageSizeOptions.length > 0 && createVNode(Select, {
      "size": size2,
      "value": innerPageSize,
      "disabled": disabled2,
      "class": this.sizerClass,
      "onChange": this.onSelectorChange
    }, _isSlot$k(_slot = this.sizeOptions.map(function(item, index2) {
      return createVNode(Option, {
        "value": item.value,
        "label": item.label,
        "key": index2
      }, null);
    })) ? _slot : {
      "default": function _default65() {
        return [_slot];
      }
    }), createVNode("div", {
      "class": this.preBtnClass,
      "onClick": function onClick2() {
        return _this.handlePageChange("prevPage");
      },
      "disabled": disabled2 || innerCurrent === min
    }, [createVNode(chevronLeft, null, null)]), !this.isSimple ? createVNode("ul", {
      "class": this.btnWrapClass
    }, [this.isFolded && createVNode("li", {
      "class": this.getButtonClass(1),
      "onClick": function onClick2() {
        return _this.toPage(min);
      }
    }, [min]), this.isFolded && this.isPrevMoreShow ? createVNode("li", {
      "class": this.btnMoreClass,
      "onClick": function onClick2() {
        return _this.handlePageChange("prevMorePage");
      },
      "onMouseOver": function onMouseOver() {
        return _this.prevMore = true;
      },
      "onMouseOut": function onMouseOut() {
        return _this.prevMore = false;
      }
    }, [this.prevMore ? createVNode(chevronLeftDouble, null, null) : createVNode(ellipsis, null, null)]) : null, this.pages.map(function(i) {
      return createVNode("li", {
        "class": _this.getButtonClass(i),
        "key": i,
        "onClick": function onClick2() {
          return _this.toPage(i);
        }
      }, [i]);
    }), this.isFolded && this.isNextMoreShow ? createVNode("li", {
      "class": this.btnMoreClass,
      "onClick": function onClick2() {
        return _this.handlePageChange("nextMorePage");
      },
      "onMouseOver": function onMouseOver() {
        return _this.nextMore = true;
      },
      "onMouseOut": function onMouseOut() {
        return _this.nextMore = false;
      }
    }, [this.nextMore ? createVNode(chevronRightDouble, null, null) : createVNode(ellipsis, null, null)]) : null, this.isFolded ? createVNode("li", {
      "class": this.getButtonClass(this.pageCount),
      "onClick": function onClick2() {
        return _this.toPage(_this.pageCount);
      }
    }, [this.pageCount]) : null]) : createVNode(Select, {
      "size": size2,
      "value": innerCurrent,
      "disabled": disabled2,
      "class": this.simpleClass,
      "onChange": this.toPage,
      "options": this.pageCountOption
    }, null), createVNode("div", {
      "class": this.nextBtnClass,
      "onClick": function onClick2() {
        return _this.handlePageChange("nextPage");
      },
      "disabled": disabled2 || innerCurrent === this.pageCount
    }, [createVNode(chevronRight, null, null)]), showJumper ? createVNode("div", {
      "class": this.jumperClass
    }, [this.t(this.global.jumpTo), createVNode(InputNumber, {
      "class": this.jumperInputClass,
      "modelValue": _this.jumpIndex,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.jumpIndex = $event;
      },
      "onBlur": this.onJumperChange,
      "onEnter": this.onJumperChange,
      "max": this.pageCount,
      "min": min,
      "theme": "normal",
      "placeholder": ""
    }, null), this.t(this.global.page)]) : null]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Pagination = withInstall(_Pagination);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$C = {
  current: {
    type: [String, Number]
  },
  defaultCurrent: {
    type: [String, Number]
  },
  direction: {
    type: String,
    validator: function validator48(val) {
      return ["horizontal", "vertical"].includes(val);
    }
  },
  layout: {
    type: String,
    "default": "horizontal",
    validator: function validator49(val) {
      return ["horizontal", "vertical"].includes(val);
    }
  },
  options: {
    type: Array
  },
  readonly: Boolean,
  sequence: {
    type: String,
    "default": "positive",
    validator: function validator50(val) {
      return ["positive", "reverse"].includes(val);
    }
  },
  theme: {
    type: String,
    "default": "default",
    validator: function validator51(val) {
      return ["default", "dot"].includes(val);
    }
  },
  onChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$B = {
  content: {
    type: [String, Function],
    "default": ""
  },
  "default": {
    type: [String, Function]
  },
  extra: {
    type: [String, Function]
  },
  icon: {
    type: [Boolean, Function],
    "default": true
  },
  status: {
    type: String,
    "default": "default",
    validator: function validator52(val) {
      return ["default", "process", "finish", "error"].includes(val);
    }
  },
  title: {
    type: [String, Function],
    "default": ""
  },
  value: {
    type: [String, Number]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1j(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1i(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1j(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _StepItem = defineComponent({
  name: "TStepItem",
  components: {
    CheckIcon: check,
    CloseIcon: close
  },
  inject: {
    steps: {
      "default": void 0
    }
  },
  props: _objectSpread$1i({}, props$B),
  setup: function setup47() {
    var COMPONENT_NAME2 = usePrefixClass("steps-item");
    var _useConfig = useConfig("steps"), global2 = _useConfig.global;
    return {
      global: global2,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data11() {
    return {
      index: -1
    };
  },
  computed: {
    current: function current() {
      return this.steps && this.steps.current;
    },
    baseClass: function baseClass() {
      return [this.COMPONENT_NAME, _defineProperty$3({}, "".concat(this.COMPONENT_NAME, "--").concat(this.status), this.status)];
    },
    iconClass: function iconClass() {
      return ["".concat(this.COMPONENT_NAME, "__icon"), _defineProperty$3({}, "".concat(this.COMPONENT_NAME, "--").concat(this.status), this.status)];
    },
    canClick: function canClick() {
      var _this$steps;
      return this.status !== "process" && !((_this$steps = this.steps) !== null && _this$steps !== void 0 && _this$steps.readonly);
    }
  },
  mounted: function mounted8() {
    this.steps.addItem(this);
  },
  unmounted: function unmounted3() {
    this.steps.removeItem(this);
  },
  methods: {
    renderIcon: function renderIcon2() {
      var defaultIcon;
      if (this.steps.theme === "default") {
        var icon = "";
        switch (this.status) {
          case "finish":
            icon = createVNode(resolveComponent("check-icon"), null, null);
            break;
          case "error":
            if (isFunction_1(this.global.errorIcon)) {
              icon = this.global.errorIcon(h);
            } else {
              icon = createVNode(resolveComponent("close-icon"), null, null);
            }
            break;
          default:
            icon = String(this.index + 1);
            break;
        }
        defaultIcon = createVNode("span", {
          "class": "".concat(this.COMPONENT_NAME, "__icon--number")
        }, [icon]);
      }
      return renderTNodeJSX(this, "icon", defaultIcon);
    },
    onStepClick: function onStepClick(e) {
      var val = this.value === void 0 ? this.index : this.value;
      this.steps.handleChange(val, this.current, e);
    }
  },
  render: function render39() {
    var content = renderContent(this, "default", "content");
    return createVNode("div", {
      "class": this.baseClass
    }, [createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__inner ").concat(this.canClick ? "".concat(this.COMPONENT_NAME, "--clickable") : ""),
      "onClick": this.onStepClick
    }, [createVNode("div", {
      "class": this.iconClass
    }, [this.renderIcon()]), createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__content")
    }, [createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__title")
    }, [renderTNodeJSX(this, "title")]), createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__description")
    }, [content]), createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__extra")
    }, [renderTNodeJSX(this, "extra")])])])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1i(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1h(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1i(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Steps = defineComponent({
  name: "TSteps",
  components: {
    TStepItem: _StepItem
  },
  provide: function provide7() {
    return {
      steps: this
    };
  },
  props: _objectSpread$1h({}, props$C),
  setup: function setup48() {
    var COMPONENT_NAME2 = usePrefixClass("steps");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data12() {
    return {
      stepChildren: [],
      indexMap: {}
    };
  },
  computed: {
    baseClass: function baseClass2() {
      if (this.direction) {
        console.warn("TDesign Steps Warn: `direction` is going to be deprecated. please use `layout` instead. ");
      }
      var layout = this.layout || this.direction || "horizontal";
      return [this.COMPONENT_NAME, "".concat(this.COMPONENT_NAME, "--").concat(layout), "".concat(this.COMPONENT_NAME, "--").concat(this.handleTheme(), "-anchor"), _defineProperty$3({}, "".concat(this.COMPONENT_NAME, "--").concat(this.sequence), layout === "vertical")];
    }
  },
  watch: {
    options: {
      immediate: true,
      handler: function handler7() {
        var _this = this;
        if (!this.options)
          return;
        this.options.forEach(function(item, index2) {
          if (item.value !== void 0) {
            _this.indexMap[item.value] = index2;
          }
        });
      }
    }
  },
  methods: {
    getOptions: function getOptions2() {
      var options;
      if (this.options && this.options.length) {
        options = this.options;
      } else {
        var nodes = this.$slots["default"] && this.$slots["default"](null);
        options = this.getOptionListBySlots(nodes);
      }
      return options;
    },
    getOptionListBySlots: function getOptionListBySlots(nodes) {
      var arr = [];
      nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function(node) {
        var option2 = node === null || node === void 0 ? void 0 : node.props;
        option2 && arr.push(option2);
      });
      return arr;
    },
    handleTheme: function handleTheme() {
      var theme = this.theme;
      var options = this.getOptions();
      options.forEach(function(item) {
        if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
          theme = "default";
        }
      });
      return theme;
    },
    handleStatus: function handleStatus(item, index2) {
      if (item.status && item.status !== "default")
        return item.status;
      if (this.current === "FINISH")
        return "finish";
      if (item.value === void 0 && index2 < this.current)
        return "finish";
      if (item.value !== void 0) {
        var matchIndex = this.indexMap[this.current];
        if (matchIndex === void 0) {
          console.warn("TDesign Steps Warn: The current `value` is not exist.");
          return "default";
        }
        if (index2 < matchIndex)
          return "finish";
      }
      var key = item.value === void 0 ? index2 : item.value;
      if (key === this.current)
        return "process";
      return "default";
    },
    addItem: function addItem(item) {
      var index2 = this.stepChildren.length;
      item.index = index2;
      this.stepChildren.push(item);
    },
    removeItem: function removeItem(item) {
      this.stepChildren = this.stepChildren.filter(function(t) {
        return t !== item;
      });
    },
    handleChange: function handleChange2(cur, prev, e) {
      if (this.readonly)
        return;
      emitEvent(this, "change", cur, prev, {
        e
      });
    },
    renderContent: function renderContent3() {
      var _this2 = this;
      var content = null;
      var options = this.getOptions();
      if (this.$slots["default"]) {
        var _content;
        content = renderTNodeJSX(this, "default");
        content = content.map(function(item) {
          if (item.children && Array.isArray(item.children))
            return item.children;
          return item;
        }).flat().filter(function(item) {
          return item.type.name === "TStepItem";
        });
        (_content = content) === null || _content === void 0 ? void 0 : _content.forEach(function(item, index2) {
          item.props.status = _this2.handleStatus(item.props, index2);
        });
        return content;
      }
      content = options.map(function(item, index2) {
        return createVNode(resolveComponent("t-step-item"), mergeProps(_objectSpread$1h(_objectSpread$1h({}, item), {}, {
          status: _this2.handleStatus(item, index2)
        }), {
          "key": item.value || index2
        }), null);
      });
      return content;
    }
  },
  render: function render40() {
    var baseClass3 = this.baseClass, renderContent6 = this.renderContent;
    return createVNode("div", {
      "class": baseClass3
    }, [renderContent6()]);
  }
});
var index$x = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Steps = withInstall(mapProps([{
  name: "current",
  event: "change",
  alias: ["modelValue"]
}])(_Steps));
var StepItem = withInstall(_StepItem);
function arraySome$1(array, predicate) {
  var index2 = -1, length = array == null ? 0 : array.length;
  while (++index2 < length) {
    if (predicate(array[index2], index2, array)) {
      return true;
    }
  }
  return false;
}
var _arraySome = arraySome$1;
var SetCache$1 = _SetCache, arraySome = _arraySome, cacheHas$1 = _cacheHas;
var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index2 = -1, result = true, seen2 = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache$1() : void 0;
  stack.set(array, other);
  stack.set(other, array);
  while (++index2 < arrLength) {
    var arrValue = array[index2], othValue = other[index2];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
    }
    if (compared !== void 0) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    if (seen2) {
      if (!arraySome(other, function(othValue2, othIndex) {
        if (!cacheHas$1(seen2, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
          return seen2.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack["delete"](array);
  stack["delete"](other);
  return result;
}
var _equalArrays = equalArrays$2;
function mapToArray$1(map) {
  var index2 = -1, result = Array(map.size);
  map.forEach(function(value6, key) {
    result[++index2] = [key, value6];
  });
  return result;
}
var _mapToArray = mapToArray$1;
function setToArray$1(set4) {
  var index2 = -1, result = Array(set4.size);
  set4.forEach(function(value6) {
    result[++index2] = value6;
  });
  return result;
}
var _setToArray = setToArray$1;
var Symbol$2 = _Symbol, Uint8Array = _Uint8Array, eq$1 = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
var boolTag$1 = "[object Boolean]", dateTag = "[object Date]", errorTag$1 = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;
    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;
    case boolTag$1:
    case dateTag:
    case numberTag:
      return eq$1(+object, +other);
    case errorTag$1:
      return object.name == other.name && object.message == other.message;
    case regexpTag:
    case stringTag:
      return object == other + "";
    case mapTag:
      var convert = mapToArray;
    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = setToArray);
      if (object.size != other.size && !isPartial) {
        return false;
      }
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;
      stack.set(object, other);
      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack["delete"](object);
      return result;
    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}
var _equalByTag = equalByTag$1;
var getAllKeys = _getAllKeys;
var COMPARE_PARTIAL_FLAG$3 = 1;
var objectProto$3 = Object.prototype;
var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index2 = objLength;
  while (index2--) {
    var key = objProps[index2];
    if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
      return false;
    }
  }
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;
  while (++index2 < objLength) {
    key = objProps[index2];
    var objValue = object[key], othValue = other[key];
    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }
    if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == "constructor");
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor, othCtor = other.constructor;
    if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack["delete"](object);
  stack["delete"](other);
  return result;
}
var _equalObjects = equalObjects$1;
var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$3 = isArray_1, isBuffer = isBuffer$5.exports, isTypedArray = isTypedArray_1;
var COMPARE_PARTIAL_FLAG$2 = 1;
var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
var objectProto$2 = Object.prototype;
var hasOwnProperty$3 = objectProto$2.hasOwnProperty;
function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray$3(object), othIsArr = isArray$3(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack$1());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$3.call(other, "__wrapped__");
    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack$1());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack$1());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
var _baseIsEqualDeep = baseIsEqualDeep$1;
var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike$2 = isObjectLike_1;
function baseIsEqual$3(value6, other, bitmask, customizer, stack) {
  if (value6 === other) {
    return true;
  }
  if (value6 == null || other == null || !isObjectLike$2(value6) && !isObjectLike$2(other)) {
    return value6 !== value6 && other !== other;
  }
  return baseIsEqualDeep(value6, other, bitmask, customizer, baseIsEqual$3, stack);
}
var _baseIsEqual = baseIsEqual$3;
var baseIsEqual$2 = _baseIsEqual;
function isEqual(value6, other) {
  return baseIsEqual$2(value6, other);
}
var isEqual_1 = isEqual;
var SetCache = _SetCache, arrayIncludes = _arrayIncludes, arrayIncludesWith = _arrayIncludesWith, arrayMap$2 = _arrayMap, baseUnary = _baseUnary, cacheHas = _cacheHas;
var LARGE_ARRAY_SIZE = 200;
function baseDifference$2(array, values, iteratee, comparator) {
  var index2 = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap$2(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
    while (++index2 < length) {
      var value6 = array[index2], computed2 = iteratee == null ? value6 : iteratee(value6);
      value6 = comparator || value6 !== 0 ? value6 : 0;
      if (isCommon && computed2 === computed2) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === computed2) {
            continue outer;
          }
        }
        result.push(value6);
      } else if (!includes(values, computed2, comparator)) {
        result.push(value6);
      }
    }
  return result;
}
var _baseDifference = baseDifference$2;
var Symbol$1 = _Symbol, isArguments$1 = isArguments_1, isArray$2 = isArray_1;
var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
function isFlattenable$1(value6) {
  return isArray$2(value6) || isArguments$1(value6) || !!(spreadableSymbol && value6 && value6[spreadableSymbol]);
}
var _isFlattenable = isFlattenable$1;
var arrayPush = _arrayPush, isFlattenable = _isFlattenable;
function baseFlatten$2(array, depth, predicate, isStrict, result) {
  var index2 = -1, length = array.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);
  while (++index2 < length) {
    var value6 = array[index2];
    if (depth > 0 && predicate(value6)) {
      if (depth > 1) {
        baseFlatten$2(value6, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value6);
      }
    } else if (!isStrict) {
      result[result.length] = value6;
    }
  }
  return result;
}
var _baseFlatten = baseFlatten$2;
var baseDifference$1 = _baseDifference, baseFlatten$1 = _baseFlatten, baseRest$2 = _baseRest, isArrayLikeObject$1 = isArrayLikeObject_1;
var difference = baseRest$2(function(array, values) {
  return isArrayLikeObject$1(array) ? baseDifference$1(array, baseFlatten$1(values, 1, isArrayLikeObject$1, true)) : [];
});
var difference_1 = difference;
var toString$2 = toString_1;
var idCounter = 0;
function uniqueId(prefix2) {
  var id = ++idCounter;
  return toString$2(prefix2) + id;
}
var uniqueId_1 = uniqueId;
var baseGet$2 = _baseGet, baseSet = _baseSet, castPath$3 = _castPath;
function basePickBy$1(object, paths, predicate) {
  var index2 = -1, length = paths.length, result = {};
  while (++index2 < length) {
    var path = paths[index2], value6 = baseGet$2(object, path);
    if (predicate(value6, path)) {
      baseSet(result, castPath$3(path, object), value6);
    }
  }
  return result;
}
var _basePickBy = basePickBy$1;
function baseHasIn$1(object, key) {
  return object != null && key in Object(object);
}
var _baseHasIn = baseHasIn$1;
var castPath$2 = _castPath, isArguments = isArguments_1, isArray$1 = isArray_1, isIndex = _isIndex, isLength = isLength_1, toKey$3 = _toKey;
function hasPath$1(object, path, hasFunc) {
  path = castPath$2(path, object);
  var index2 = -1, length = path.length, result = false;
  while (++index2 < length) {
    var key = toKey$3(path[index2]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index2 != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments(object));
}
var _hasPath = hasPath$1;
var baseHasIn = _baseHasIn, hasPath = _hasPath;
function hasIn$2(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}
var hasIn_1 = hasIn$2;
var basePickBy = _basePickBy, hasIn$1 = hasIn_1;
function basePick$1(object, paths) {
  return basePickBy(object, paths, function(value6, path) {
    return hasIn$1(object, path);
  });
}
var _basePick = basePick$1;
var baseFlatten = _baseFlatten;
function flatten$1(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}
var flatten_1 = flatten$1;
var flatten = flatten_1, overRest = _overRest, setToString = _setToString;
function flatRest$2(func) {
  return setToString(overRest(func, void 0, flatten), func + "");
}
var _flatRest = flatRest$2;
var basePick = _basePick, flatRest$1 = _flatRest;
var pick = flatRest$1(function(object, paths) {
  return object == null ? {} : basePick(object, paths);
});
var pick_1 = pick;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1h(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1g(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1h(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getExposedProps(node) {
  var props2 = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
  return props2;
}
function createNodeModel(node) {
  var props2 = getExposedProps(node);
  var model = _objectSpread$1g(_objectSpread$1g({}, props2), {}, {
    getLevel: function getLevel() {
      return node.getLevel();
    },
    getIndex: function getIndex2() {
      return node.getIndex();
    },
    isFirst: function isFirst() {
      return node.isFirst();
    },
    isLast: function isLast() {
      return node.isLast();
    },
    isLeaf: function isLeaf() {
      return node.isLeaf();
    },
    insertBefore: function insertBefore2(newData) {
      return node.insertBefore(newData);
    },
    insertAfter: function insertAfter2(newData) {
      return node.insertAfter(newData);
    },
    appendData: function appendData(data26) {
      return node.append(data26);
    },
    getPath: function getPath2() {
      var nodes = node.getPath();
      return nodes.map(function(item) {
        return item.getModel();
      });
    },
    getParent: function getParent2() {
      var _node$parent;
      return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
    },
    getParents: function getParents2() {
      var nodes = node.getParents();
      return nodes.map(function(item) {
        return item.getModel();
      });
    },
    getRoot: function getRoot() {
      var root2 = node.getRoot();
      return root2 === null || root2 === void 0 ? void 0 : root2.getModel();
    },
    getSiblings: function getSiblings() {
      var nodes = node.getSiblings();
      return nodes.map(function(item) {
        return item.getModel();
      });
    },
    getChildren: function getChildren(deep) {
      var childrenModel = false;
      var children = node.children;
      if (Array.isArray(children)) {
        if (children.length > 0) {
          if (deep) {
            var nodes = node.walk();
            nodes.shift();
            childrenModel = nodes.map(function(item) {
              return item.getModel();
            });
          } else {
            childrenModel = children.map(function(item) {
              return item.getModel();
            });
          }
        } else {
          childrenModel = false;
        }
      } else if (typeof children === "boolean") {
        childrenModel = children;
      }
      return childrenModel;
    },
    remove: function remove3(value6) {
      if (!value6) {
        node.remove();
        return;
      }
      var tree = node.tree;
      var targetNode = tree.getNode(value6);
      if (!targetNode) {
        log.warnOnce("Tree", "`".concat(value6, "` is not exist"));
        return;
      }
      var parents = targetNode.getParents();
      var parentValues = parents.map(function(pnode) {
        return pnode.value;
      });
      if (parentValues.indexOf(node.value) < 0) {
        log.warnOnce("Tree", "`".concat(value6, "` is not a childNode of current node"));
        return;
      }
      targetNode.remove();
    },
    setData: function setData(data26) {
      Object.assign(node.data, data26);
    }
  });
  return model;
}
function updateNodeModel(model, node) {
  var props2 = getExposedProps(node);
  Object.assign(model, props2);
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1g(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1f(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1g(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
var defaultStatus = {
  expandMutex: false,
  activable: false,
  checkable: false,
  disabled: false,
  draggable: false,
  loading: false
};
var TreeNode = /* @__PURE__ */ function() {
  function TreeNode2(tree, data26, parent2) {
    _classCallCheck(this, TreeNode2);
    _defineProperty$3(this, "tree", void 0);
    _defineProperty$3(this, "value", void 0);
    _defineProperty$3(this, "label", void 0);
    _defineProperty$3(this, "data", void 0);
    _defineProperty$3(this, "parent", void 0);
    _defineProperty$3(this, "children", void 0);
    _defineProperty$3(this, "model", void 0);
    _defineProperty$3(this, "vmIsLeaf", void 0);
    _defineProperty$3(this, "vmIsFirst", void 0);
    _defineProperty$3(this, "vmIsLast", void 0);
    _defineProperty$3(this, "vmIsRest", void 0);
    _defineProperty$3(this, "vmIsLocked", void 0);
    _defineProperty$3(this, "expanded", void 0);
    _defineProperty$3(this, "expandMutex", void 0);
    _defineProperty$3(this, "actived", void 0);
    _defineProperty$3(this, "activable", void 0);
    _defineProperty$3(this, "checkable", void 0);
    _defineProperty$3(this, "vmCheckable", void 0);
    _defineProperty$3(this, "checked", void 0);
    _defineProperty$3(this, "indeterminate", void 0);
    _defineProperty$3(this, "disabled", void 0);
    _defineProperty$3(this, "draggable", void 0);
    _defineProperty$3(this, "visible", void 0);
    _defineProperty$3(this, "level", void 0);
    _defineProperty$3(this, "loading", void 0);
    this.data = data26;
    this.tree = tree;
    var config = tree.config || {};
    var prefix2 = config.prefix || "t";
    var keys2 = get_1(tree, "config.keys") || {};
    var propChildren = keys2.children || "children";
    var propLabel = keys2.label || "label";
    var propValue = keys2.value || "value";
    this.model = null;
    this.children = null;
    this.vmCheckable = false;
    this.vmIsLeaf = false;
    this.vmIsFirst = false;
    this.vmIsLast = false;
    this.vmIsRest = true;
    this.vmIsLocked = false;
    var spec = _objectSpread$1f(_objectSpread$1f({}, defaultStatus), {}, {
      actived: false,
      expanded: false,
      checked: false
    }, data26);
    var children = spec[propChildren];
    this.set(spec);
    this.label = spec[propLabel] || "";
    this.value = spec[propValue] || uniqueId_1(prefix2);
    this.tree.nodeMap.set(this.value, this);
    if (parent2 && parent2 instanceof TreeNode2) {
      this.parent = parent2;
    } else {
      this.parent = null;
    }
    if (children === true) {
      this.children = children;
    }
    this.level = 0;
    this.visible = true;
    this.actived = spec.actived;
    this.initActived();
    this.expanded = spec.expanded;
    this.initExpanded();
    this.checked = spec.checked;
    this.initChecked();
    this.update();
    tree.reflow(this);
    if (Array.isArray(children)) {
      this.append(children);
    } else if (children === true && !config.lazy) {
      this.loadChildren();
    }
    this.checked = false;
    this.indeterminate = false;
    this.updateChecked();
  }
  _createClass(TreeNode2, [{
    key: "initChecked",
    value: function initChecked() {
      var tree = this.tree, value6 = this.value, parent2 = this.parent;
      var checkStrictly = tree.config.checkStrictly;
      var checked = this.checked;
      checked = parent2 === null || parent2 === void 0 ? void 0 : parent2.isChecked();
      if (checked && !checkStrictly) {
        tree.checkedMap.set(value6, true);
      }
      this.checked = checked;
    }
  }, {
    key: "initExpanded",
    value: function initExpanded() {
      var tree = this.tree;
      var expanded2 = this.expanded;
      var config = tree.config;
      if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
        tree.expandedMap.set(this.value, true);
        expanded2 = true;
      }
      if (config.expandAll) {
        expanded2 = true;
      }
      if (this.children === true && config.lazy) {
        expanded2 = false;
      }
      if (expanded2) {
        tree.expandedMap.set(this.value, true);
      } else {
        tree.expandedMap["delete"](this.value);
      }
      this.expanded = expanded2;
    }
  }, {
    key: "initActived",
    value: function initActived() {
      var tree = this.tree, actived2 = this.actived;
      if (actived2) {
        tree.activedMap.set(this.value, true);
      }
    }
  }, {
    key: "append",
    value: function append(data26) {
      var _this = this;
      var list = [];
      if (!Array.isArray(data26)) {
        list.push(data26);
      } else {
        list.push.apply(list, _toConsumableArray(data26));
      }
      if (list.length <= 0) {
        return;
      }
      if (!Array.isArray(this.children)) {
        this.children = [];
      }
      var children = this.children, tree = this.tree;
      list.forEach(function(item) {
        var node = null;
        if (item instanceof TreeNode2) {
          node = item;
          node.appendTo(_this.tree, _this);
        } else {
          node = new TreeNode2(_this.tree, item, _this);
          children.push(node);
        }
      });
      tree.reflow(this);
      this.updateRelated();
    }
  }, {
    key: "appendTo",
    value: function appendTo2(tree, parent2, index2) {
      var _this2 = this;
      var parentNode = parent2;
      if (!parentNode)
        return;
      var targetParents = parentNode.getParents();
      var includeCurrent = targetParents.some(function(node) {
        return node.value === _this2.value;
      });
      if (includeCurrent) {
        return;
      }
      if (Array.isArray(parentNode.children)) {
        var targetIndex = 0;
        if (typeof index2 === "number") {
          targetIndex = index2;
        }
        var targetPosNode = parentNode.children[targetIndex];
        if (targetPosNode.value === this.value) {
          return;
        }
      }
      this.remove();
      this.parent = parentNode;
      var siblings = null;
      if (parentNode instanceof TreeNode2) {
        if (!Array.isArray(parentNode.children)) {
          parentNode.children = [];
        }
        siblings = parent2.children;
      } else {
        siblings = tree.children;
      }
      if (Array.isArray(siblings)) {
        if (typeof index2 === "number") {
          siblings.splice(index2, 0, this);
        } else {
          siblings.push(this);
        }
      }
      var nodes = this.walk();
      nodes.forEach(function(item) {
        var node = item;
        node.tree = tree;
        tree.nodeMap.set(node.value, node);
        if (node.expanded) {
          tree.expandedMap.set(node.value, true);
        }
      });
      var updateNodes = parentNode.walk();
      updateNodes.forEach(function(node) {
        node.update();
        node.updateChecked();
      });
      tree.reflow();
    }
  }, {
    key: "insert",
    value: function insert(item, index2) {
      var tree = this.tree, parent2 = this.parent;
      var siblings = this.getSiblings();
      var node = null;
      if (item instanceof TreeNode2) {
        node = item;
        node.appendTo(tree, parent2, index2);
      } else if (item) {
        node = new TreeNode2(tree, item, parent2);
        if (typeof index2 === "number") {
          siblings.splice(index2, 0, node);
        }
        siblings.forEach(function(sibling) {
          sibling.update();
        });
      }
      tree.reflow();
    }
  }, {
    key: "insertBefore",
    value: function insertBefore2(newData) {
      var index2 = this.getIndex();
      this.insert(newData, index2);
    }
  }, {
    key: "insertAfter",
    value: function insertAfter2(newData) {
      var index2 = this.getIndex();
      this.insert(newData, index2 + 1);
    }
  }, {
    key: "remove",
    value: function remove3() {
      var tree = this.tree;
      var nodes = this.walk();
      var siblings = this.getSiblings();
      var index2 = this.getIndex();
      if (Array.isArray(siblings)) {
        siblings.splice(index2, 1);
      }
      nodes.forEach(function(node) {
        node.clean();
      });
      siblings.forEach(function(node) {
        node.update();
      });
      this.updateParents();
      tree.reflow();
    }
  }, {
    key: "clean",
    value: function clean() {
      var tree = this.tree, value6 = this.value;
      tree.activedMap["delete"](value6);
      tree.checkedMap["delete"](value6);
      tree.expandedMap["delete"](value6);
      tree.nodeMap["delete"](value6);
    }
  }, {
    key: "loadChildren",
    value: function() {
      var _loadChildren = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
        var config, list;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                config = get_1(this, "tree.config") || {};
                if (!(this.children === true && !this.loading)) {
                  _context.next = 13;
                  break;
                }
                if (!(typeof config.load === "function")) {
                  _context.next = 13;
                  break;
                }
                this.loading = true;
                this.update();
                list = [];
                _context.next = 8;
                return config.load(this);
              case 8:
                list = _context.sent;
                this.tree.emit("load", {
                  node: this,
                  data: list
                });
                this.loading = false;
                if (Array.isArray(list) && list.length > 0) {
                  this.append(list);
                } else {
                  this.children = false;
                }
                this.update();
              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function loadChildren() {
        return _loadChildren.apply(this, arguments);
      }
      return loadChildren;
    }()
  }, {
    key: "set",
    value: function set4(item) {
      var _this3 = this;
      var tree = this.tree;
      var keys2 = Object.keys(item);
      keys2.forEach(function(key) {
        if (hasOwnProperty$2.call(defaultStatus, key) || key === "label") {
          _this3[key] = item[key];
        }
      });
      tree.updated(this);
    }
  }, {
    key: "getParent",
    value: function getParent2() {
      return this.parent;
    }
  }, {
    key: "getParents",
    value: function getParents2() {
      var parents = [];
      var node = this.parent;
      while (node) {
        parents.push(node);
        node = node.parent;
      }
      return parents;
    }
  }, {
    key: "getSiblings",
    value: function getSiblings() {
      var parent2 = this.parent, tree = this.tree;
      var list = [];
      if (parent2) {
        if (Array.isArray(parent2.children)) {
          list = parent2.children;
        }
      } else if (tree) {
        list = tree.children;
      }
      return list;
    }
  }, {
    key: "getRoot",
    value: function getRoot() {
      var parents = this.getParents();
      return parents[parents.length - 1] || null;
    }
  }, {
    key: "getIndex",
    value: function getIndex2() {
      var list = this.getSiblings();
      return list.indexOf(this);
    }
  }, {
    key: "getPath",
    value: function getPath2() {
      var nodes = this.getParents();
      nodes.unshift(this);
      return nodes.reverse();
    }
  }, {
    key: "getLevel",
    value: function getLevel() {
      var parents = this.getParents();
      return parents.length;
    }
  }, {
    key: "isRest",
    value: function isRest() {
      var _this$tree = this.tree, config = _this$tree.config, filterMap = _this$tree.filterMap;
      var rest = true;
      if (typeof config.filter === "function") {
        var nodeModel = this.getModel();
        rest = config.filter(nodeModel);
      }
      if (rest) {
        filterMap.set(this.value, true);
      } else if (filterMap.get(this.value)) {
        filterMap["delete"](this.value);
      }
      return rest;
    }
  }, {
    key: "isVisible",
    value: function isVisible() {
      var nodeMap = this.tree.nodeMap;
      var visible4 = true;
      if (this.vmIsLocked) {
        return true;
      }
      if (nodeMap.get(this.value)) {
        var filterVisible = this.isRest();
        var expandVisible = true;
        var parents = this.getParents();
        if (parents.length > 0) {
          expandVisible = parents.every(function(node) {
            return node.isExpanded();
          });
        }
        visible4 = expandVisible && filterVisible;
      } else {
        visible4 = false;
      }
      return visible4;
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      if (this.vmIsLocked)
        return true;
      var treeDisabled = get_1(this, "tree.config.disabled");
      return !!(treeDisabled || this.disabled);
    }
  }, {
    key: "isExpandMutex",
    value: function isExpandMutex() {
      return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
    }
  }, {
    key: "isActivable",
    value: function isActivable() {
      return !!(get_1(this, "tree.config.activable") || this.activable);
    }
  }, {
    key: "isCheckable",
    value: function isCheckable() {
      return !!(get_1(this, "tree.config.checkable") || this.checkable);
    }
  }, {
    key: "isActived",
    value: function isActived(map) {
      var tree = this.tree, value6 = this.value;
      var activedMap = map || tree.activedMap;
      return !!(tree.nodeMap.get(value6) && activedMap.get(value6));
    }
  }, {
    key: "isExpanded",
    value: function isExpanded(map) {
      var tree = this.tree, value6 = this.value, vmIsLocked = this.vmIsLocked;
      if (vmIsLocked)
        return true;
      var expandedMap = map || tree.expandedMap;
      return !!(tree.nodeMap.get(value6) && expandedMap.get(value6));
    }
  }, {
    key: "isChecked",
    value: function isChecked(map) {
      var children = this.children, tree = this.tree;
      var checkStrictly = tree.config.checkStrictly;
      var checked = false;
      var checkedMap = map || tree.checkedMap;
      if (tree.nodeMap.get(this.value)) {
        if (checkedMap.get(this.value)) {
          checked = true;
        } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
          checked = children.every(function(node) {
            var childIsChecked = node.isChecked(checkedMap);
            return childIsChecked;
          });
        } else if (!checkStrictly) {
          var parents = this.getParents();
          checked = parents.some(function(node) {
            return checkedMap.get(node.value);
          });
        }
      }
      return !!checked;
    }
  }, {
    key: "isIndeterminate",
    value: function isIndeterminate() {
      var children = this.children, tree = this.tree;
      var checkStrictly = tree.config.checkStrictly;
      if (checkStrictly) {
        return false;
      }
      var indeterminate = false;
      if (Array.isArray(children)) {
        var childChecked = null;
        indeterminate = children.some(function(node) {
          if (node.isIndeterminate()) {
            return true;
          }
          if (childChecked === null) {
            childChecked = node.isChecked();
          }
          if (childChecked !== node.isChecked()) {
            return true;
          }
          return false;
        });
      }
      return indeterminate;
    }
  }, {
    key: "isFirst",
    value: function isFirst() {
      var siblings = this.getSiblings();
      return siblings[0] === this;
    }
  }, {
    key: "isLast",
    value: function isLast() {
      var siblings = this.getSiblings();
      return siblings[siblings.length - 1] === this;
    }
  }, {
    key: "isLeaf",
    value: function isLeaf() {
      var isLeaf2 = false;
      if (Array.isArray(this.children)) {
        isLeaf2 = this.children.length <= 0;
      } else {
        isLeaf2 = !this.children;
      }
      return isLeaf2;
    }
  }, {
    key: "lock",
    value: function lock(lockState) {
      this.vmIsLocked = lockState;
      this.expanded = this.isExpanded();
      this.visible = this.isVisible();
    }
  }, {
    key: "afterExpanded",
    value: function afterExpanded() {
      this.update();
      if (this.expanded && this.children === true) {
        this.loadChildren();
      }
    }
  }, {
    key: "toggleExpanded",
    value: function toggleExpanded2() {
      return this.setExpanded(!this.isExpanded());
    }
  }, {
    key: "setExpanded",
    value: function setExpanded2(expanded2, opts) {
      var tree = this.tree;
      var options = _objectSpread$1f({
        directly: false
      }, opts);
      var map = tree.expandedMap;
      if (!options.directly) {
        map = new Map(tree.expandedMap);
      }
      if (expanded2) {
        var shouldExpandNodes = [];
        shouldExpandNodes.push(this);
        if (get_1(tree, "config.expandParent")) {
          this.getParents().forEach(function(node) {
            shouldExpandNodes.push(node);
          });
        }
        shouldExpandNodes.forEach(function(node) {
          var isExpandMutex = false;
          if (node.parent) {
            isExpandMutex = node.parent.isExpandMutex();
          } else {
            var _tree$config;
            isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
          }
          if (isExpandMutex) {
            var siblings = node.getSiblings();
            siblings.forEach(function(snode) {
              map["delete"](snode.value);
            });
          }
          map.set(node.value, true);
        });
      } else {
        map["delete"](this.value);
      }
      if (options.directly) {
        this.afterExpanded();
        this.update();
        this.updateChildren();
      }
      return tree.getExpanded(map);
    }
  }, {
    key: "toggleActived",
    value: function toggleActived2() {
      return this.setActived(!this.isActived());
    }
  }, {
    key: "setActived",
    value: function setActived2(actived2, opts) {
      var tree = this.tree;
      var options = _objectSpread$1f({
        directly: false
      }, opts);
      var config = tree.config || {};
      var map = tree.activedMap;
      if (!options.directly) {
        map = new Map(tree.activedMap);
      }
      if (this.isActivable()) {
        if (actived2) {
          if (!config.activeMultiple) {
            map.clear();
          }
          map.set(this.value, true);
        } else {
          map["delete"](this.value);
        }
      }
      if (options.directly) {
        this.update();
      }
      return tree.getActived(map);
    }
  }, {
    key: "toggleChecked",
    value: function toggleChecked2() {
      return this.setChecked(!this.isChecked());
    }
  }, {
    key: "setChecked",
    value: function setChecked2(checked, opts) {
      var tree = this.tree;
      var config = tree.config || {};
      var options = _objectSpread$1f({
        directly: false
      }, opts);
      var map = tree.checkedMap;
      if (!options.directly) {
        map = new Map(tree.checkedMap);
      }
      if (this.isCheckable() && checked !== this.isChecked()) {
        if (config.checkStrictly) {
          if (checked) {
            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        } else {
          var children = this.walk();
          children.forEach(function(node) {
            if (checked) {
              map.set(node.value, true);
            } else {
              map["delete"](node.value);
            }
          });
          var parents = this.getParents();
          parents.forEach(function(node) {
            map["delete"](node.value);
          });
        }
      }
      if (options.directly) {
        if (config.checkStrictly) {
          this.updateChecked();
        } else {
          var relatedNodes = tree.getRelatedNodes([this.value]);
          relatedNodes.forEach(function(node) {
            node.updateChecked();
          });
        }
      }
      return tree.getChecked(map);
    }
  }, {
    key: "update",
    value: function update() {
      this.level = this.getLevel();
      this.actived = this.isActived();
      this.expanded = this.isExpanded();
      this.vmCheckable = this.isCheckable();
      this.visible = this.isVisible();
      this.vmIsRest = this.isRest();
      this.vmIsFirst = this.isFirst();
      this.vmIsLast = this.isLast();
      this.vmIsLeaf = this.isLeaf();
      this.tree.updated(this);
    }
  }, {
    key: "updateChecked",
    value: function updateChecked() {
      var tree = this.tree;
      this.vmCheckable = this.isCheckable();
      if (this.vmCheckable && !this.disabled) {
        this.checked = this.isChecked();
        if (this.checked) {
          tree.checkedMap.set(this.value, true);
        }
        this.indeterminate = this.isIndeterminate();
        tree.updated(this);
      }
    }
  }, {
    key: "updateChildren",
    value: function updateChildren() {
      var children = this.children;
      if (Array.isArray(children)) {
        children.forEach(function(node) {
          node.update();
          node.updateChecked();
          node.updateChildren();
        });
      }
    }
  }, {
    key: "updateParents",
    value: function updateParents() {
      var parent2 = this.parent;
      if (parent2) {
        parent2.update();
        parent2.updateChecked();
        parent2.updateParents();
      }
    }
  }, {
    key: "updateRelated",
    value: function updateRelated() {
      var tree = this.tree;
      var relatedNodes = tree.getRelatedNodes([this.value]);
      relatedNodes.forEach(function(node) {
        node.update();
        node.updateChecked();
      });
      tree.reflow();
    }
  }, {
    key: "walk",
    value: function walk() {
      var children = this.children;
      var list = [];
      list.push(this);
      if (Array.isArray(children) && children.length > 0) {
        children.forEach(function(node) {
          list = list.concat(node.walk());
        });
      }
      return list;
    }
  }, {
    key: "getModel",
    value: function getModel() {
      var model = this.model;
      if (!model) {
        model = createNodeModel(this);
        this.model = model;
      }
      updateNodeModel(model, this);
      return model;
    }
  }]);
  return TreeNode2;
}();
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1f(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1e(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1f(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var TreeStore = /* @__PURE__ */ function() {
  function TreeStore2(options) {
    _classCallCheck(this, TreeStore2);
    _defineProperty$3(this, "children", void 0);
    _defineProperty$3(this, "nodes", void 0);
    _defineProperty$3(this, "nodeMap", void 0);
    _defineProperty$3(this, "config", void 0);
    _defineProperty$3(this, "activedMap", void 0);
    _defineProperty$3(this, "updatedMap", void 0);
    _defineProperty$3(this, "checkedMap", void 0);
    _defineProperty$3(this, "expandedMap", void 0);
    _defineProperty$3(this, "filterMap", void 0);
    _defineProperty$3(this, "updateTimer", void 0);
    _defineProperty$3(this, "shouldReflow", void 0);
    _defineProperty$3(this, "prevFilter", void 0);
    var config = _objectSpread$1e({
      prefix: "t",
      keys: {},
      expandAll: false,
      expandLevel: 0,
      expandMutex: false,
      expandParent: false,
      activable: false,
      activeMultiple: false,
      checkable: false,
      checkStrictly: false,
      disabled: false,
      load: null,
      lazy: false,
      valueMode: "onlyLeaf",
      filter: null,
      onLoad: null,
      onReflow: null,
      onUpdate: null,
      allowFoldNodeOnFilter: false
    }, options);
    this.config = config;
    this.nodes = [];
    this.children = [];
    this.nodeMap = /* @__PURE__ */ new Map();
    this.activedMap = /* @__PURE__ */ new Map();
    this.expandedMap = /* @__PURE__ */ new Map();
    this.checkedMap = /* @__PURE__ */ new Map();
    this.updatedMap = /* @__PURE__ */ new Map();
    this.filterMap = /* @__PURE__ */ new Map();
    this.prevFilter = null;
    this.updateTimer = null;
    this.shouldReflow = false;
  }
  _createClass(TreeStore2, [{
    key: "setConfig",
    value: function setConfig(options) {
      var _this = this;
      var hasChanged2 = false;
      Object.keys(options).forEach(function(key) {
        var val = options[key];
        if (val !== _this.config[key]) {
          hasChanged2 = true;
          _this.config[key] = val;
        }
      });
      if (hasChanged2) {
        this.refreshState();
      }
    }
  }, {
    key: "getChildren",
    value: function getChildren() {
      return this.children;
    }
  }, {
    key: "getNode",
    value: function getNode2(item) {
      var node = null;
      if (typeof item === "string" || typeof item === "number") {
        node = this.nodeMap.get(item);
      } else if (item instanceof TreeNode) {
        node = this.nodeMap.get(item.value);
      }
      return node;
    }
  }, {
    key: "getIndex",
    value: function getIndex2(node) {
      return this.nodes.indexOf(node);
    }
  }, {
    key: "getParent",
    value: function getParent2(value6) {
      var parent2 = null;
      var node = this.getNode(value6);
      if (node) {
        parent2 = node.getParent();
      }
      return parent2;
    }
  }, {
    key: "getParents",
    value: function getParents2(value6) {
      var node = this.getNode(value6);
      var parents = [];
      if (node) {
        parents = node.getParents();
      }
      return parents;
    }
  }, {
    key: "getNodeIndex",
    value: function getNodeIndex(value6) {
      var node = this.getNode(value6);
      var index2 = -1;
      if (node) {
        index2 = node.getIndex();
      }
      return index2;
    }
  }, {
    key: "getNodes",
    value: function getNodes(item, options) {
      var nodes = [];
      var val = "";
      if (typeof item === "string" || typeof item === "number") {
        val = item;
      } else if (item instanceof TreeNode) {
        val = item.value;
      }
      if (!val) {
        nodes = this.nodes.slice(0);
      } else {
        var node = this.getNode(val);
        if (node) {
          nodes = node.walk();
        }
      }
      if (options) {
        var conf = _objectSpread$1e({
          filter: null,
          level: Infinity
        }, options);
        if (typeof conf.level === "number" && conf.level !== Infinity) {
          nodes = nodes.filter(function(node2) {
            return node2.level <= conf.level;
          });
        }
        if (typeof conf.filter === "function") {
          nodes = nodes.filter(function(node2) {
            var nodeModel = node2.getModel();
            return conf.filter(nodeModel);
          });
        }
        if (isPlainObject_1(conf.props)) {
          nodes = nodes.filter(function(node2) {
            var result = Object.keys(conf.props).every(function(key) {
              var propEqual = node2[key] === conf.props[key];
              return propEqual;
            });
            return result;
          });
        }
      }
      return nodes;
    }
  }, {
    key: "append",
    value: function append(list) {
      var _this2 = this;
      list.forEach(function(item) {
        var node = new TreeNode(_this2, item);
        _this2.children.push(node);
      });
      this.reflow();
    }
  }, {
    key: "reload",
    value: function reload(list) {
      this.expandedMap.clear();
      this.checkedMap.clear();
      this.activedMap.clear();
      this.filterMap.clear();
      this.removeAll();
      this.append(list);
    }
  }, {
    key: "parseNodeData",
    value: function parseNodeData(para, item) {
      var value6 = "";
      var node = null;
      var data26 = null;
      if (typeof para === "string" || typeof para === "number") {
        value6 = para;
        data26 = item;
        node = this.getNode(value6);
      } else if (para instanceof TreeNode) {
        node = para;
        data26 = item;
      } else {
        data26 = para;
      }
      var spec = {
        node,
        data: data26
      };
      return spec;
    }
  }, {
    key: "appendNodes",
    value: function appendNodes(para, item) {
      var spec = this.parseNodeData(para, item);
      if (spec.data) {
        if (!spec.node) {
          if (spec.data instanceof TreeNode) {
            spec.data.appendTo(this);
          } else if (Array.isArray(spec.data)) {
            this.append(spec.data);
          } else {
            this.append([spec.data]);
          }
        } else {
          if (spec.data instanceof TreeNode) {
            spec.data.appendTo(this, spec.node);
          } else if (Array.isArray(spec.data)) {
            spec.node.append(spec.data);
          } else {
            spec.node.append([spec.data]);
          }
          spec.node.updateRelated();
        }
      }
    }
  }, {
    key: "insertBefore",
    value: function insertBefore2(value6, item) {
      var node = this.getNode(value6);
      if (node) {
        node.insertBefore(item);
      }
    }
  }, {
    key: "insertAfter",
    value: function insertAfter2(value6, item) {
      var node = this.getNode(value6);
      if (node) {
        node.insertAfter(item);
      }
    }
  }, {
    key: "refreshNodes",
    value: function refreshNodes() {
      var children = this.children, nodes = this.nodes;
      nodes.length = 0;
      children.forEach(function(node) {
        var list = node.walk();
        Array.prototype.push.apply(nodes, list);
      });
    }
  }, {
    key: "refreshState",
    value: function refreshState() {
      var nodes = this.nodes;
      nodes.forEach(function(node) {
        node.update();
        node.updateChecked();
      });
    }
  }, {
    key: "reflow",
    value: function reflow(node) {
      this.shouldReflow = true;
      this.updated(node);
    }
  }, {
    key: "updated",
    value: function updated2(node) {
      var _this3 = this;
      if (node !== null && node !== void 0 && node.value) {
        this.updatedMap.set(node.value, true);
      }
      if (this.updateTimer)
        return;
      this.updateTimer = +setTimeout(function() {
        var _this3$config;
        clearTimeout(_this3.updateTimer);
        _this3.updateTimer = null;
        if (_this3.shouldReflow) {
          _this3.refreshNodes();
          _this3.emit("reflow");
        }
        if (!((_this3$config = _this3.config) !== null && _this3$config !== void 0 && _this3$config.allowFoldNodeOnFilter))
          _this3.lockFilterPathNodes();
        var updatedList = Array.from(_this3.updatedMap.keys());
        if (updatedList.length > 0) {
          var updatedNodes = updatedList.map(function(value6) {
            return _this3.getNode(value6);
          });
          _this3.emit("update", {
            nodes: updatedNodes,
            map: _this3.updatedMap
          });
        } else if (_this3.shouldReflow) {
          _this3.emit("update", {
            nodes: [],
            map: _this3.updatedMap
          });
        }
        _this3.shouldReflow = false;
        _this3.updatedMap.clear();
      });
    }
  }, {
    key: "getActived",
    value: function getActived(map) {
      var activedMap = map || this.activedMap;
      return Array.from(activedMap.keys());
    }
  }, {
    key: "getActivedNodes",
    value: function getActivedNodes(item) {
      var nodes = this.getNodes(item);
      nodes = nodes.filter(function(node) {
        return node.isActived();
      });
      return nodes;
    }
  }, {
    key: "replaceActived",
    value: function replaceActived(list) {
      this.resetActived();
      this.setActived(list);
    }
  }, {
    key: "setActived",
    value: function setActived2(actived2) {
      var _this4 = this;
      var activeMultiple = this.config.activeMultiple;
      var list = actived2.slice(0);
      if (!activeMultiple) {
        list.length = 1;
      }
      list.forEach(function(val) {
        _this4.activedMap.set(val, true);
        var node = _this4.getNode(val);
        if (node) {
          node.update();
        }
      });
    }
  }, {
    key: "resetActived",
    value: function resetActived() {
      var actived2 = this.getActived();
      this.activedMap.clear();
      var relatedNodes = this.getRelatedNodes(actived2);
      relatedNodes.forEach(function(node) {
        node.update();
      });
    }
  }, {
    key: "getExpanded",
    value: function getExpanded(map) {
      var expandedMap = map || this.expandedMap;
      return Array.from(expandedMap.keys());
    }
  }, {
    key: "replaceExpanded",
    value: function replaceExpanded(list) {
      var expanded2 = this.getExpanded();
      var added = difference_1(list, expanded2);
      var removed = difference_1(expanded2, list);
      this.setExpandedDirectly(removed, false);
      this.updateExpanded(removed);
      this.setExpanded(added);
    }
  }, {
    key: "setExpanded",
    value: function setExpanded2(list) {
      this.setExpandedDirectly(list);
      this.updateExpanded(list);
    }
  }, {
    key: "setExpandedDirectly",
    value: function setExpandedDirectly(list) {
      var _this5 = this;
      var expanded2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      list.forEach(function(val) {
        if (expanded2) {
          _this5.expandedMap.set(val, true);
          var node = _this5.getNode(val);
          if (node) {
            node.afterExpanded();
          }
        } else {
          _this5.expandedMap["delete"](val);
        }
      });
    }
  }, {
    key: "resetExpanded",
    value: function resetExpanded() {
      var expanded2 = this.getExpanded();
      this.expandedMap.clear();
      this.updateExpanded(expanded2);
    }
  }, {
    key: "updateExpanded",
    value: function updateExpanded2(list) {
      var relatedNodes = this.getRelatedNodes(list, {
        withParents: false
      });
      relatedNodes.forEach(function(node) {
        node.update();
      });
    }
  }, {
    key: "getChecked",
    value: function getChecked(map) {
      var nodes = this.nodes, config = this.config;
      var valueMode = config.valueMode, checkStrictly = config.checkStrictly;
      var list = [];
      var checkedMap = map || this.checkedMap;
      nodes.forEach(function(node) {
        if (node.isChecked(checkedMap)) {
          if (valueMode === "parentFirst" && !checkStrictly) {
            if (!node.parent || !node.parent.isChecked(checkedMap)) {
              list.push(node.value);
            }
          } else if (valueMode === "onlyLeaf" && !checkStrictly) {
            if (node.isLeaf()) {
              list.push(node.value);
            }
          } else {
            list.push(node.value);
          }
        }
      });
      return list;
    }
  }, {
    key: "getCheckedNodes",
    value: function getCheckedNodes(item) {
      var nodes = this.getNodes(item);
      nodes = nodes.filter(function(node) {
        return node.isChecked();
      });
      return nodes;
    }
  }, {
    key: "replaceChecked",
    value: function replaceChecked(list) {
      this.resetChecked();
      this.setChecked(list);
    }
  }, {
    key: "setChecked",
    value: function setChecked2(list) {
      var _this6 = this;
      var _this$config = this.config, valueMode = _this$config.valueMode, checkStrictly = _this$config.checkStrictly, checkable = _this$config.checkable;
      if (!checkable)
        return;
      list.forEach(function(val) {
        var node = _this6.getNode(val);
        if (node) {
          if (valueMode === "parentFirst" && !checkStrictly) {
            var childrenNodes = node.walk();
            childrenNodes.forEach(function(childNode) {
              _this6.checkedMap.set(childNode.value, true);
            });
          } else {
            _this6.checkedMap.set(val, true);
            node.updateChecked();
          }
        }
      });
      if (!checkStrictly) {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        relatedNodes.forEach(function(node) {
          node.updateChecked();
        });
      }
    }
  }, {
    key: "resetChecked",
    value: function resetChecked() {
      var checked = this.getChecked();
      var relatedNodes = this.getRelatedNodes(checked);
      this.checkedMap.clear();
      relatedNodes.forEach(function(node) {
        node.updateChecked();
      });
    }
  }, {
    key: "updateAll",
    value: function updateAll() {
      var nodes = this.getNodes();
      nodes.forEach(function(node) {
        node.update();
      });
    }
  }, {
    key: "remove",
    value: function remove3(value6) {
      var node = this.getNode(value6);
      if (node) {
        node.remove();
      }
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      var nodes = this.getNodes();
      nodes.forEach(function(node) {
        node.remove();
      });
    }
  }, {
    key: "getRelatedNodes",
    value: function getRelatedNodes(list, options) {
      var _this7 = this;
      var conf = _objectSpread$1e({
        withParents: true
      }, options);
      var map = /* @__PURE__ */ new Map();
      list.forEach(function(value6) {
        if (map.get(value6))
          return;
        var node = _this7.getNode(value6);
        if (node) {
          var parents = node.getParents();
          var children = node.walk();
          var related = [];
          if (conf.withParents) {
            related = parents.concat(children);
          } else {
            related = children;
          }
          related.forEach(function(relatedNode) {
            map.set(relatedNode.value, relatedNode);
          });
        }
      });
      var relatedNodes = Array.from(map.values());
      return relatedNodes;
    }
  }, {
    key: "emit",
    value: function emit(name2, state) {
      var config = this.config || {};
      var methodName = camelCase_1("on-".concat(name2));
      var method = config[methodName];
      if (typeof method === "function") {
        method(state);
      }
    }
  }, {
    key: "lockFilterPathNodes",
    value: function lockFilterPathNodes() {
      var _this8 = this;
      var config = this.config;
      var allNodes = this.getNodes();
      if (this.prevFilter) {
        allNodes.forEach(function(node) {
          node.lock(false);
        });
      }
      if (!config.filter) {
        return;
      }
      this.prevFilter = config.filter;
      var map = /* @__PURE__ */ new Map();
      allNodes.reverse().forEach(function(item) {
        var node = item;
        var parent2 = node.getParent();
        if (node.vmIsRest) {
          if (parent2) {
            parent2.expanded = true;
          }
          node.visible = true;
        }
        if (node.vmIsRest || map.get(node.value)) {
          if (parent2 && !parent2.vmIsRest) {
            map.set(parent2.value, true);
          }
        }
      });
      var filterPathValues = Array.from(map.keys());
      filterPathValues.forEach(function(value6) {
        var node = _this8.getNode(value6);
        if (node) {
          node.lock(true);
        }
      });
    }
  }]);
  return TreeStore2;
}();
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getFullPathLabel(node) {
  return node.getPath().map(function(node2) {
    return node2.label;
  }).join("/");
}
var getTreeValue = function getTreeValue2(value6) {
  var treeValue = [];
  if (Array.isArray(value6)) {
    if (value6.length > 0 && _typeof$1(value6[0]) === "object") {
      treeValue = value6.map(function(val) {
        return val.value;
      });
    } else if (value6.length) {
      treeValue = value6;
    }
  } else if (value6) {
    if (_typeof$1(value6) === "object") {
      treeValue = [value6.value];
    } else {
      treeValue = [value6];
    }
  }
  return treeValue;
};
var getValue = function getValue2(value6, valueType, multiple) {
  if (valueType === "single") {
    return value6;
  }
  if (multiple) {
    return value6.map(function(item) {
      return item[item.length - 1];
    });
  }
  return value6[value6.length - 1];
};
function isEmptyValues(value6) {
  if (typeof value6 === "number" && !isNaN(value6))
    return false;
  return isEmpty_1(value6);
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var treeNodesEffect = function treeNodesEffect2(inputVal2, treeStore, setTreeNodes) {
  if (!treeStore)
    return;
  var nodes = [];
  if (inputVal2) {
    nodes = treeStore.nodes.filter(function(node) {
      var fullPathLabel = getFullPathLabel(node);
      return fullPathLabel.indexOf(inputVal2) > -1 && node.isLeaf();
    });
  } else {
    nodes = treeStore.getNodes().filter(function(node) {
      return node.visible;
    });
  }
  setTreeNodes(nodes);
};
var treeStoreExpendEffect = function treeStoreExpendEffect2(treeStore, value6, expend) {
  var treeValue = getTreeValue(value6);
  if (!treeStore)
    return;
  if (Array.isArray(treeValue) && expend.length === 0) {
    var expandedMap = /* @__PURE__ */ new Map();
    var _treeValue = _slicedToArray(treeValue, 1), val = _treeValue[0];
    if (val) {
      expandedMap.set(val, true);
      var node = treeStore.getNode(val);
      if (!node) {
        treeStore.refreshNodes();
        return;
      }
      node.getParents().forEach(function(tn) {
        expandedMap.set(tn.value, true);
      });
      var expandedArr = Array.from(expandedMap.keys());
      treeStore.replaceExpanded(expandedArr);
    } else {
      treeStore.resetExpanded();
    }
  }
  if (treeStore.getExpanded() && expend.length) {
    treeStore.replaceExpanded(expend);
  }
  treeStore.refreshNodes();
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getPanels(treeNodes) {
  var panels2 = [];
  treeNodes.forEach(function(node) {
    if (panels2[node.level]) {
      panels2[node.level].push(node);
    } else {
      panels2[node.level] = [node];
    }
  });
  return panels2;
}
function expendClickEffect(propsTrigger, trigger2, node, cascaderContext2) {
  var checkStrictly = cascaderContext2.checkStrictly, filterActive2 = cascaderContext2.filterActive, multiple = cascaderContext2.multiple, treeStore = cascaderContext2.treeStore, setFilterActive = cascaderContext2.setFilterActive, setVisible = cascaderContext2.setVisible, setValue = cascaderContext2.setValue, setTreeNodes = cascaderContext2.setTreeNodes, setExpend = cascaderContext2.setExpend, value6 = cascaderContext2.value, max4 = cascaderContext2.max, valueType = cascaderContext2.valueType;
  var isDisabled = node.disabled || multiple && value6.length >= max4 && max4 !== 0;
  if (isDisabled)
    return;
  if (propsTrigger === trigger2 && !node.isLeaf()) {
    var expanded2 = node.setExpanded(true);
    treeStore.refreshNodes();
    treeStore.replaceExpanded(expanded2);
    var nodes = treeStore.getNodes().filter(function(node2) {
      return node2.visible;
    });
    setTreeNodes(nodes);
    if (multiple) {
      setExpend(expanded2);
    }
  }
  if (!multiple && (node.isLeaf() || checkStrictly) && trigger2 === "click") {
    treeStore.resetChecked();
    var checked = node.setChecked(!node.isChecked());
    var _checked = _slicedToArray(checked, 1), value22 = _checked[0];
    if (filterActive2) {
      setFilterActive(false);
    }
    if (!filterActive2 && !checkStrictly) {
      setVisible(false);
    }
    setValue(valueType === "single" ? value22 : node.getPath().map(function(item) {
      return item.value;
    }), "checked", node.getModel());
  }
}
function valueChangeEffect(node, cascaderContext2) {
  var disabled2 = cascaderContext2.disabled, max4 = cascaderContext2.max, multiple = cascaderContext2.multiple, setVisible = cascaderContext2.setVisible, setValue = cascaderContext2.setValue, filterActive2 = cascaderContext2.filterActive, setFilterActive = cascaderContext2.setFilterActive, treeNodes = cascaderContext2.treeNodes, treeStore = cascaderContext2.treeStore, valueType = cascaderContext2.valueType;
  if (!node || disabled2 || node.disabled) {
    return;
  }
  var checked = node.setChecked(!node.isChecked());
  if (isNumber_1(max4) && max4 < 0) {
    console.warn("TDesign Warn:", "max should > 0");
  }
  if (checked.length > max4 && isNumber_1(max4) && max4 > 0) {
    return;
  }
  if (checked.length === 0) {
    var expanded2 = treeStore.getExpanded();
    setTimeout(function() {
      treeStore.replaceExpanded(expanded2);
      treeStore.refreshNodes();
    }, 0);
  }
  if (!multiple) {
    setVisible(false);
  }
  var isSelectAll = treeNodes.every(function(item) {
    return checked.indexOf(item.value) > -1;
  });
  if (filterActive2 && isSelectAll) {
    setVisible(false);
    setFilterActive(false);
  }
  var resValue = valueType === "single" ? checked : checked.map(function(val) {
    return treeStore.getNode(val).getPath().map(function(item) {
      return item.value;
    });
  });
  setValue(resValue, "checked", node.getModel());
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getLabelIsEllipsis(node, size2) {
  var sizeMap = {
    small: 11,
    medium: 9,
    large: 8
  };
  return sizeMap[size2] < node.label.length;
}
function getNodeStatusClass(node, CLASSNAMES, cascaderContext2) {
  var _ref;
  var checkStrictly = cascaderContext2.checkStrictly, multiple = cascaderContext2.multiple, value6 = cascaderContext2.value, max4 = cascaderContext2.max;
  var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
  var isLeaf = node.isLeaf();
  var isDisabled = node.disabled || multiple && value6.length >= max4 && max4 !== 0;
  var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
  return [(_ref = {}, _defineProperty$3(_ref, CLASSNAMES.STATUS.selected, !isDisabled && isSelected), _defineProperty$3(_ref, CLASSNAMES.STATUS.expanded, !isDisabled && expandedActive), _defineProperty$3(_ref, CLASSNAMES.STATUS.disabled, isDisabled), _ref)];
}
function getCascaderItemClass(prefix2, node, CLASSNAMES, cascaderContext2) {
  var _ref2;
  var size2 = cascaderContext2.size;
  return ["".concat(prefix2, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, CLASSNAMES, cascaderContext2)), [CLASSNAMES.SIZE[size2], (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix2, "-cascader__item--with-icon"), !!node.children), _defineProperty$3(_ref2, "".concat(prefix2, "-cascader__item--leaf"), node.isLeaf()), _ref2)]);
}
function getCascaderItemIconClass(prefix2, node, CLASSNAMES, cascaderContext2) {
  return ["".concat(prefix2, "-cascader__item-icon")].concat(_toConsumableArray(getNodeStatusClass(node, CLASSNAMES, cascaderContext2)));
}
var index$w = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$j(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var Item = defineComponent({
  name: "TCascaderItem",
  props: {
    node: {
      type: Object,
      "default": function _default12() {
        return {};
      }
    },
    cascaderContext: {
      type: Object
    }
  },
  emits: ["change", "click", "mouseenter"],
  setup: function setup49() {
    var liRef = ref();
    useRipple(liRef);
    var ComponentClassName = usePrefixClass("cascader__item");
    var classPrefix2 = usePrefixClass();
    return {
      liRef,
      ComponentClassName,
      classPrefix: classPrefix2
    };
  },
  computed: {
    itemClass: function itemClass() {
      return getCascaderItemClass(this.classPrefix, this.node, ClASSNAMES, this.cascaderContext);
    },
    iconClass: function iconClass2() {
      return getCascaderItemIconClass(this.classPrefix, this.node, ClASSNAMES, this.cascaderContext);
    }
  },
  render: function render41() {
    var _this = this;
    var node = this.node, itemClass2 = this.itemClass, iconClass3 = this.iconClass, cascaderContext2 = this.cascaderContext, ComponentClassName = this.ComponentClassName;
    var handleClick5 = function handleClick6(e) {
      e.stopPropagation();
      var ctx = {
        e,
        node
      };
      _this.$emit("click", ctx);
    };
    var handleChange5 = function handleChange6(e) {
      var ctx = {
        e,
        node
      };
      _this.$emit("change", ctx);
    };
    var handleMouseenter = function handleMouseenter2(e) {
      e.stopPropagation();
      var ctx = {
        e,
        node
      };
      _this.$emit("mouseenter", ctx);
    };
    function RenderLabelInner(node2, cascaderContext22) {
      var filterActive2 = cascaderContext22.filterActive, inputVal2 = cascaderContext22.inputVal;
      var labelText2 = filterActive2 ? getFullPathLabel(node2) : node2.label;
      if (filterActive2) {
        var texts = labelText2.split(inputVal2);
        var doms = [];
        for (var index2 = 0; index2 < texts.length; index2++) {
          doms.push(createVNode("span", {
            "key": index2
          }, [texts[index2]]));
          if (index2 === texts.length - 1)
            break;
          doms.push(createVNode("span", {
            "key": "".concat(index2, "filter"),
            "class": "".concat(ComponentClassName, "__label--filter")
          }, [inputVal2]));
        }
        return doms;
      }
      return labelText2;
    }
    function RenderLabelContent(node2, cascaderContext22) {
      var label2 = RenderLabelInner(node2, cascaderContext22);
      var isEllipsis = getLabelIsEllipsis(node2, cascaderContext22.size);
      if (isEllipsis) {
        return createVNode("span", {
          "class": "".concat(ComponentClassName, "-label"),
          "role": "label"
        }, [label2, createVNode("div", {
          "class": "".concat(ComponentClassName, "-label--ellipsis")
        }, [createVNode(Tooltip, {
          "content": node2.label,
          "placement": "top-left"
        }, null)])]);
      }
      return createVNode("span", {
        "class": ["".concat(ComponentClassName, "-label")],
        "role": "label"
      }, [label2]);
    }
    function RenderCheckBox(node2, cascaderContext22, handleChange22) {
      var checkProps = cascaderContext22.checkProps, value6 = cascaderContext22.value, max4 = cascaderContext22.max, size2 = cascaderContext22.size;
      var label2 = RenderLabelInner(node2, cascaderContext22);
      return createVNode(Checkbox, mergeProps({
        "checked": node2.checked,
        "indeterminate": node2.indeterminate,
        "disabled": node2.isDisabled() || value6.length >= max4 && max4 !== 0,
        "name": node2.value,
        "size": size2,
        "onChange": handleChange22
      }, checkProps), _isSlot$j(label2) ? label2 : {
        "default": function _default65() {
          return [label2];
        }
      });
    }
    return createVNode("li", {
      "ref": "liRef",
      "class": itemClass2,
      "onClick": handleClick5,
      "onMouseenter": handleMouseenter
    }, [cascaderContext2.multiple ? RenderCheckBox(node, cascaderContext2, handleChange5) : RenderLabelContent(node, cascaderContext2), node.children && (node.loading ? createVNode(Loading, {
      "class": iconClass3,
      "size": "small"
    }, null) : createVNode(chevronRight, {
      "class": iconClass3
    }, null))]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$A = {
  checkProps: {
    type: Object
  },
  checkStrictly: Boolean,
  clearable: Boolean,
  collapsedItems: {
    type: Function
  },
  disabled: Boolean,
  empty: {
    type: [String, Function]
  },
  filterable: Boolean,
  keys: {
    type: Object
  },
  lazy: {
    type: Boolean,
    "default": true
  },
  load: {
    type: Function
  },
  loading: Boolean,
  loadingText: {
    type: [String, Function],
    "default": ""
  },
  max: {
    type: Number,
    "default": 0
  },
  minCollapsedNum: {
    type: Number,
    "default": 0
  },
  multiple: Boolean,
  options: {
    type: Array,
    "default": function _default13() {
      return [];
    }
  },
  placeholder: {
    type: String,
    "default": void 0
  },
  popupProps: {
    type: Object
  },
  showAllLevels: {
    type: Boolean,
    "default": true
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator53(val) {
      return ["large", "medium", "small"].includes(val);
    }
  },
  trigger: {
    type: String,
    "default": "click",
    validator: function validator54(val) {
      return ["click", "hover"].includes(val);
    }
  },
  value: {
    type: [String, Number, Array],
    "default": function _default14() {
      return [];
    }
  },
  defaultValue: {
    type: [String, Number, Array],
    "default": function _default15() {
      return [];
    }
  },
  valueMode: {
    type: String,
    "default": "onlyLeaf",
    validator: function validator55(val) {
      return ["onlyLeaf", "parentFirst", "all"].includes(val);
    }
  },
  valueType: {
    type: String,
    "default": "single",
    validator: function validator56(val) {
      return ["single", "full"].includes(val);
    }
  },
  onBlur: Function,
  onChange: Function,
  onFocus: Function,
  onRemove: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Panel = defineComponent({
  name: "TCascaderPanel",
  props: {
    empty: props$A.empty,
    trigger: props$A.trigger,
    onChange: props$A.onChange,
    cascaderContext: {
      type: Object
    }
  },
  emits: ["change"],
  setup: function setup50() {
    var ComponentClassName = usePrefixClass("cascader");
    var classPrefix2 = usePrefixClass();
    var _useConfig = useConfig("cascader"), global2 = _useConfig.global;
    return {
      global: global2,
      ComponentClassName,
      classPrefix: classPrefix2
    };
  },
  computed: {
    panels: function panels() {
      return getPanels(this.cascaderContext.treeNodes);
    }
  },
  render: function render42() {
    var _this = this;
    var ComponentClassName = this.ComponentClassName, _this$cascaderContext = this.cascaderContext, filterActive2 = _this$cascaderContext.filterActive, treeNodes = _this$cascaderContext.treeNodes, inputWidth = _this$cascaderContext.inputWidth, cascaderContext2 = this.cascaderContext, panels2 = this.panels;
    var handleExpand = function handleExpand2(ctx, trigger2) {
      var node = ctx.node;
      var propsTrigger = _this.trigger, cascaderContext22 = _this.cascaderContext;
      expendClickEffect(propsTrigger, trigger2, node, cascaderContext22);
    };
    var handleChange5 = function handleChange6(ctx) {
      var node = ctx.node;
      var cascaderContext22 = _this.cascaderContext;
      valueChangeEffect(node, cascaderContext22);
    };
    var renderEmpty = renderTNodeJSXDefault(this, "empty", createVNode("div", {
      "class": "".concat(ComponentClassName, "__panel--empty")
    }, [this.global.empty]));
    var renderItem3 = function renderItem4(node) {
      return createVNode(Item, {
        "key": node.value,
        "node": node,
        "cascaderContext": cascaderContext2,
        "onClick": function onClick2(ctx) {
          handleExpand(ctx, "click");
        },
        "onMouseenter": function onMouseenter(ctx) {
          handleExpand(ctx, "hover");
        },
        "onChange": handleChange5
      }, null);
    };
    var panelsContainer = panels2.map(function(panel, index2) {
      return createVNode("ul", {
        "class": ["".concat(ComponentClassName, "__menu"), "narrow-scrollbar", _defineProperty$3({}, "".concat(ComponentClassName, "__menu--segment"), index2 !== panels2.length - 1)],
        "key": index2
      }, [panel.map(function(node) {
        return renderItem3(node);
      })]);
    });
    var filterPanelsContainer = createVNode("ul", {
      "class": ["".concat(ComponentClassName, "__menu"), "narrow-scrollbar", "".concat(ComponentClassName, "__menu--segment"), "".concat(ComponentClassName, "__menu--filter")]
    }, [treeNodes.map(function(node) {
      return renderItem3(node);
    })]);
    var renderPanels = filterActive2 ? filterPanelsContainer : panelsContainer;
    return createVNode("div", {
      "class": ["".concat(ComponentClassName, "__panel"), _defineProperty$3({}, "".concat(ComponentClassName, "--normal"), panels2.length)],
      "style": {
        width: panels2.length === 0 ? "".concat(inputWidth, "px") : null
      }
    }, [panels2 && panels2.length ? renderPanels : renderEmpty]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getCloseIconClass(prefix2, CLASSNAMES, cascaderContext2) {
  var _ref;
  var visible4 = cascaderContext2.visible, disabled2 = cascaderContext2.disabled;
  return ["".concat(prefix2, "-cascader__icon"), (_ref = {}, _defineProperty$3(_ref, CLASSNAMES.STATUS.visible, visible4), _defineProperty$3(_ref, CLASSNAMES.STATUS.disabled, disabled2), _ref)];
}
function getFakeArrowIconClass(prefix2, CLASSNAMES, cascaderContext2) {
  var disabled2 = cascaderContext2.disabled;
  return ["".concat(prefix2, "-cascader__icon"), _defineProperty$3({}, CLASSNAMES.STATUS.disabled, disabled2)];
}
function getCascaderInnerClasses(prefix2, CLASSNAMES, cascaderContext2) {
  var _ref3;
  var disabled2 = cascaderContext2.disabled, visible4 = cascaderContext2.visible, size2 = cascaderContext2.size, multiple = cascaderContext2.multiple;
  return ["".concat(prefix2, "-cascader"), CLASSNAMES.SIZE[size2], (_ref3 = {}, _defineProperty$3(_ref3, CLASSNAMES.STATUS.disabled, disabled2), _defineProperty$3(_ref3, CLASSNAMES.STATUS.active, visible4), _defineProperty$3(_ref3, "".concat(prefix2, "-cascader--multiple"), multiple), _ref3)];
}
function getCloseShow(isHover, cascaderContext2) {
  var value6 = cascaderContext2.value, disabled2 = cascaderContext2.disabled, clearable = cascaderContext2.clearable, visible4 = cascaderContext2.visible;
  return !!(!visible4 && clearable && isHover && !disabled2 && !isEmptyValues(value6));
}
function getPlaceholderShow(cascaderContext2, singleContent2, multipleContent2) {
  var filterable = cascaderContext2.filterable, visible4 = cascaderContext2.visible, multiple = cascaderContext2.multiple;
  var valEmpty = !(multiple ? multipleContent2.length : singleContent2);
  if (filterable) {
    return valEmpty && !visible4;
  }
  return valEmpty;
}
function getSingleContent(cascaderContext2) {
  var value6 = cascaderContext2.value, multiple = cascaderContext2.multiple, treeStore = cascaderContext2.treeStore, showAllLevels = cascaderContext2.showAllLevels, setValue = cascaderContext2.setValue;
  if (multiple || !value6)
    return "";
  if (Array.isArray(value6))
    return "";
  var node = treeStore && treeStore.getNodes(value6);
  if (!(node && node.length)) {
    if (value6) {
      setValue(multiple ? [] : "", "invalid-value");
    }
    return "";
  }
  var path = node && node[0].getPath();
  if (path && path.length) {
    return showAllLevels ? path.map(function(node2) {
      return node2.label;
    }).join(" / ") : path[path.length - 1].label;
  }
  return value6;
}
function getMultipleContent(cascaderContext2) {
  var value6 = cascaderContext2.value, multiple = cascaderContext2.multiple, treeStore = cascaderContext2.treeStore;
  if (!multiple)
    return [];
  if (multiple && !Array.isArray(value6))
    return [];
  var node = treeStore && treeStore.getNodes(value6);
  if (!node)
    return [];
  var path = value6.map(function(item) {
    var node2 = treeStore.getNodes(item);
    return node2[0];
  });
  if (value6 && value6.length) {
    return path && path.length ? path : value6;
  }
  return [];
}
function outerClickListenerEffect(ref2, cascaderContext2, event) {
  var _event$target;
  var visible4 = cascaderContext2.visible, setVisible = cascaderContext2.setVisible, setInputVal = cascaderContext2.setInputVal, setFilterActive = cascaderContext2.setFilterActive;
  if (!ref2 || ref2.contains(event.target) || (_event$target = event.target) !== null && _event$target !== void 0 && _event$target.classList.contains("t-tag")) {
    return;
  }
  if (visible4) {
    setVisible(false);
    setInputVal("");
    setFilterActive(false);
  }
}
function closeIconClickEffect(cascaderContext2) {
  var setVisible = cascaderContext2.setVisible, multiple = cascaderContext2.multiple, setExpend = cascaderContext2.setExpend, setValue = cascaderContext2.setValue;
  setVisible(false);
  if (multiple) {
    setExpend([]);
  }
  setValue(multiple ? [] : "", "clear");
}
function handleRemoveTagEffect(cascaderContext2, node, onRemove) {
  var disabled2 = cascaderContext2.disabled, setValue = cascaderContext2.setValue, valueType = cascaderContext2.valueType, treeStore = cascaderContext2.treeStore;
  if (disabled2)
    return;
  var checked = node.setChecked(!node.isChecked());
  var resValue = valueType === "single" ? checked : checked.map(function(val) {
    return treeStore.getNode(val).getPath().map(function(item) {
      return item.value;
    });
  });
  setValue(resValue, "unchecked", node.getModel());
  if (isFunction_1(onRemove)) {
    onRemove({
      value: checked,
      node
    });
  }
}
function innerContentClickEffect(cascaderContext2) {
  var setVisible = cascaderContext2.setVisible, visible4 = cascaderContext2.visible, filterActive2 = cascaderContext2.filterActive, disabled2 = cascaderContext2.disabled;
  if (!disabled2) {
    if (visible4 && filterActive2)
      return;
    setVisible(!visible4);
  }
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var InputContent = defineComponent({
  name: "".concat(name, "-input-content"),
  components: {
    Tag,
    Input,
    CloseCircleFilledIcon: closeCircleFilled
  },
  props: {
    cascaderContext: {
      type: Object
    },
    placeholder: props$A.placeholder,
    listeners: {
      type: Object
    },
    collapsedItems: props$A.collapsedItems
  },
  emits: ["change"],
  setup: function setup51() {
    var COMPONENT_NAME2 = usePrefixClass("cascader");
    var classPrefix2 = usePrefixClass();
    var _useConfig = useConfig("cascader"), global2 = _useConfig.global;
    return {
      global: global2,
      COMPONENT_NAME: COMPONENT_NAME2,
      classPrefix: classPrefix2
    };
  },
  data: function data13() {
    return {
      isHover: false
    };
  },
  computed: {
    closeIconClass: function closeIconClass() {
      return getCloseIconClass(this.classPrefix, ClASSNAMES, this.cascaderContext);
    },
    fakeArrowIconClass: function fakeArrowIconClass() {
      return getFakeArrowIconClass(this.classPrefix, ClASSNAMES, this.cascaderContext);
    },
    cascaderInnerClasses: function cascaderInnerClasses() {
      return getCascaderInnerClasses(this.classPrefix, ClASSNAMES, this.cascaderContext);
    },
    closeShow: function closeShow() {
      return getCloseShow(this.isHover, this.cascaderContext);
    },
    singleContent: function singleContent() {
      return getSingleContent(this.cascaderContext);
    },
    multipleContent: function multipleContent() {
      return getMultipleContent(this.cascaderContext);
    },
    showPlaceholder: function showPlaceholder2() {
      return getPlaceholderShow(this.cascaderContext, this.singleContent, this.multipleContent);
    }
  },
  mounted: function mounted9() {
    var _this = this;
    document.addEventListener("click", function(event) {
      _this.outerClickListenerFn(event);
    });
    setTimeout(function() {
      _this.getInputWidth();
    }, 0);
  },
  unmounted: function unmounted4() {
    var _this2 = this;
    document.removeEventListener("click", function(event) {
      _this2.outerClickListenerFn(event);
    });
  },
  methods: {
    getInputWidth: function getInputWidth() {
      var _this$$refs$inputCont = this.$refs.inputContent.getBoundingClientRect(), width = _this$$refs$inputCont.width;
      var setInputWidth = this.cascaderContext.setInputWidth;
      setInputWidth(width);
    },
    outerClickListenerFn: function outerClickListenerFn(event) {
      return outerClickListenerEffect(this.$refs.inputContent, this.cascaderContext, event);
    },
    renderContent: function renderContent4() {
      var placeholder = this.placeholder, showPlaceholder3 = this.showPlaceholder;
      var content = !showPlaceholder3 ? this.InnerContent() : createVNode("span", {
        "class": "".concat(this.classPrefix, "-cascader__placeholder")
      }, [placeholder || this.global.placeholder]);
      return content;
    },
    InnerContent: function InnerContent() {
      var _this3 = this;
      var cascaderContext2 = this.cascaderContext, placeholder = this.placeholder, singleContent2 = this.singleContent, multipleContent2 = this.multipleContent, listeners = this.listeners, collapsedItems = this.collapsedItems;
      var multiple = cascaderContext2.multiple, size2 = cascaderContext2.size, disabled2 = cascaderContext2.disabled, filterable = cascaderContext2.filterable, setFilterActive = cascaderContext2.setFilterActive, visible4 = cascaderContext2.visible, inputVal2 = cascaderContext2.inputVal, setInputVal = cascaderContext2.setInputVal, minCollapsedNum = cascaderContext2.minCollapsedNum, value6 = cascaderContext2.value, showAllLevels = cascaderContext2.showAllLevels;
      var _onFocus = listeners.onFocus, _onBlur = listeners.onBlur, onRemove = listeners.onRemove;
      var renderSelfTag = function renderSelfTag2(node, index2) {
        return createVNode(Tag, {
          "closable": !disabled2,
          "key": index2,
          "disabled": disabled2,
          "onClose": function onClose(ctx) {
            ctx.e.stopPropagation();
            handleRemoveTagEffect(cascaderContext2, node, onRemove);
          },
          "size": size2
        }, {
          "default": function _default65() {
            return [showAllLevels ? getFullPathLabel(node) : node.label];
          }
        });
      };
      var renderCollItems = function renderCollItems2() {
        var tempList = [];
        multipleContent2.forEach(function(node) {
          tempList.push(node.data);
        });
        return tempList;
      };
      var generalContent = !multiple ? createVNode("span", {
        "class": "".concat(this.classPrefix, "-cascader__content")
      }, [singleContent2]) : createVNode("span", null, [minCollapsedNum > 0 && multipleContent2.length > minCollapsedNum ? createVNode("span", null, [multipleContent2.slice(0, minCollapsedNum).map(function(node, index2) {
        return renderSelfTag(node, index2);
      }), collapsedItems || this.$slots.collapsedItems ? renderTNodeJSX(this, "collapsedItems", {
        params: {
          value: renderCollItems(),
          collapsedSelectedItems: renderCollItems().slice(minCollapsedNum),
          count: renderCollItems().length - minCollapsedNum
        }
      }) : createVNode(Tag, {
        "size": size2,
        "disabled": disabled2
      }, {
        "default": function _default65() {
          return ["+", multipleContent2.length - minCollapsedNum];
        }
      })]) : multipleContent2.map(function(node, index2) {
        return renderSelfTag(node, index2);
      })]);
      var inputPlaceholder = multiple ? multipleContent2.map(function(node) {
        return node.label;
      }).join("\u3001") : singleContent2;
      var filterContent = function filterContent2() {
        return createVNode(Input, {
          "size": size2,
          "placeholder": inputPlaceholder || placeholder || _this3.global.placeholder,
          "value": inputVal2,
          "onChange": function onChange(value22) {
            setInputVal(value22);
            setFilterActive(!!value22);
          },
          "onFocus": function onFocus2(v, context) {
            return isFunction_1(_onFocus) && _onFocus({
              value: value6,
              e: context === null || context === void 0 ? void 0 : context.e
            });
          },
          "onBlur": function onBlur2(v, context) {
            return isFunction_1(_onBlur) && _onBlur({
              value: value6,
              e: context === null || context === void 0 ? void 0 : context.e
            });
          },
          "autofocus": visible4
        }, null);
      };
      return filterable && visible4 ? filterContent() : generalContent;
    },
    renderSuffixIcon: function renderSuffixIcon() {
      var _this4 = this;
      var closeShow2 = this.closeShow, closeIconClass2 = this.closeIconClass, fakeArrowIconClass2 = this.fakeArrowIconClass, _this$cascaderContext = this.cascaderContext, size2 = _this$cascaderContext.size, visible4 = _this$cascaderContext.visible, disabled2 = _this$cascaderContext.disabled, loading2 = _this$cascaderContext.loading;
      var closeIconClick = function closeIconClick2(context) {
        context.e.stopPropagation();
        closeIconClickEffect(_this4.cascaderContext);
      };
      if (loading2) {
        return createVNode("span", {
          "class": "".concat(this.classPrefix, "-cascader__icon")
        }, [createVNode(Loading, {
          "size": "small"
        }, null)]);
      }
      if (closeShow2) {
        return createVNode(closeCircleFilled, {
          "class": closeIconClass2,
          "size": size2,
          "onClick": closeIconClick
        }, null);
      }
      return createVNode(FakeArrow, {
        "overlayClassName": fakeArrowIconClass2,
        "isActive": visible4,
        "disabled": disabled2
      }, null);
    }
  },
  render: function render43() {
    var _this5 = this;
    var $attrs = this.$attrs, cascaderContext2 = this.cascaderContext;
    return createVNode("div", mergeProps({
      "ref": "inputContent",
      "class": this.cascaderInnerClasses
    }, $attrs, {
      "onMouseenter": function onMouseenter() {
        _this5.isHover = true;
      },
      "onMouseleave": function onMouseleave() {
        _this5.isHover = false;
      },
      "onClick": function onClick2(e) {
        e.stopPropagation();
        innerContentClickEffect(cascaderContext2);
      }
    }), [this.renderContent(), this.renderSuffixIcon()]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var EVENT_NAME_WITH_KEBAB = ["remove", "blur", "focus"];
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1e(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1d(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1e(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Cascader = defineComponent({
  name: "TCascader",
  components: {
    Popup,
    Panel,
    Transition,
    InputContent
  },
  props: _objectSpread$1d({}, props$A),
  emits: ["change", "remove", "blur", "focus"],
  setup: function setup52() {
    var disabled2 = useFormDisabled();
    var COMPONENT_NAME2 = usePrefixClass("cascader");
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      disabled: disabled2
    };
  },
  data: function data14() {
    return {
      inputWidth: 0,
      visible: false,
      treeStore: null,
      inputVal: "",
      scopeVal: this.defaultValue,
      treeNodes: [],
      filterActive: false,
      expend: []
    };
  },
  computed: {
    stateFns: function stateFns() {
      var _this = this;
      return {
        setTreeNodes: function setTreeNodes(nodes) {
          _this.treeNodes = nodes;
        },
        setValue: function setValue(val, source, node) {
          if (isEqual_1(val, _this.scopeVal))
            return;
          emitEvent(_this, "change", val, {
            source,
            node
          });
        },
        setVisible: function setVisible(val) {
          _this.visible = val;
        },
        setFilterActive: function setFilterActive(val) {
          _this.filterActive = val;
        },
        setInputVal: function setInputVal(val) {
          _this.inputVal = val;
        },
        setExpend: function setExpend(val) {
          _this.expend = val;
        },
        setInputWidth: function setInputWidth(val) {
          _this.inputWidth = val;
        }
      };
    },
    cascaderContext: function cascaderContext() {
      var value6 = this.scopeVal;
      var _this$size = this.size, size2 = _this$size === void 0 ? "medium" : _this$size, _this$checkStrictly = this.checkStrictly, checkStrictly = _this$checkStrictly === void 0 ? false : _this$checkStrictly, _this$lazy = this.lazy, lazy = _this$lazy === void 0 ? true : _this$lazy, _this$multiple = this.multiple, multiple = _this$multiple === void 0 ? false : _this$multiple, _this$filterable = this.filterable, filterable = _this$filterable === void 0 ? false : _this$filterable, _this$clearable = this.clearable, clearable = _this$clearable === void 0 ? false : _this$clearable, _this$checkProps = this.checkProps, checkProps = _this$checkProps === void 0 ? {} : _this$checkProps, _this$max = this.max, max4 = _this$max === void 0 ? 0 : _this$max, disabled2 = this.disabled, _this$showAllLevels = this.showAllLevels, showAllLevels = _this$showAllLevels === void 0 ? true : _this$showAllLevels, _this$minCollapsedNum = this.minCollapsedNum, minCollapsedNum = _this$minCollapsedNum === void 0 ? 0 : _this$minCollapsedNum, loading2 = this.loading, _this$valueType = this.valueType, valueType = _this$valueType === void 0 ? "single" : _this$valueType;
      var visible4 = this.visible, treeStore = this.treeStore, treeNodes = this.treeNodes, filterActive2 = this.filterActive, inputVal2 = this.inputVal, inputWidth = this.inputWidth;
      return _objectSpread$1d({
        valueType,
        loading: loading2,
        size: size2,
        disabled: disabled2,
        checkStrictly,
        lazy,
        multiple,
        filterable,
        checkProps,
        clearable,
        showAllLevels,
        max: max4,
        value: value6,
        visible: visible4,
        treeStore,
        treeNodes,
        filterActive: filterActive2,
        inputVal: inputVal2,
        inputWidth,
        minCollapsedNum
      }, this.stateFns);
    }
  },
  watch: {
    value: {
      handler: function handler8(val) {
        var valueType = this.valueType, multiple = this.multiple;
        if (isEqual_1(val, this.scopeVal))
          return;
        this.scopeVal = getValue(val, valueType, multiple);
        this.updateExpend();
        this.updatedTreeNodes();
      }
    },
    inputVal: function inputVal() {
      var _this$cascaderContext = this.cascaderContext, value6 = _this$cascaderContext.value, setExpend = _this$cascaderContext.setExpend;
      if (!getTreeValue(value6).length) {
        setExpend([]);
      }
      this.updatedTreeNodes();
    },
    filterActive: function filterActive() {
      var filterActive2 = this.cascaderContext.filterActive;
      if (!filterActive2) {
        this.inputVal = "";
      }
    }
  },
  mounted: function mounted10() {
    var _this2 = this;
    var value6 = this.value, multiple = this.multiple, _this$cascaderContext2 = this.cascaderContext, setValue = _this$cascaderContext2.setValue, showAllLevels = _this$cascaderContext2.showAllLevels, valueType = this.valueType;
    if (multiple && !Array.isArray(value6) || !multiple && Array.isArray(value6) && !showAllLevels) {
      var val = multiple ? [] : "";
      setValue(val, "invalid-value");
      console.warn("TDesign Cascader Warn:", "cascader props value invalid, v-model automatic calibration");
    }
    if (!isEmptyValues(value6)) {
      this.scopeVal = getValue(value6, valueType, multiple);
    }
    this.init();
    ["checkStrictly", "disabled", "keys", "lazy", "load", "options", "valueMode"].forEach(function(key) {
      _this2.$watch(key, function() {
        _this2.init();
      });
    });
  },
  methods: {
    init: function init() {
      var _this3 = this;
      var disabled2 = this.disabled, keys2 = this.keys, _this$checkStrictly2 = this.checkStrictly, checkStrictly = _this$checkStrictly2 === void 0 ? false : _this$checkStrictly2, _this$lazy2 = this.lazy, lazy = _this$lazy2 === void 0 ? true : _this$lazy2, load = this.load, options = this.options, _this$valueMode = this.valueMode, valueMode = _this$valueMode === void 0 ? "onlyLeaf" : _this$valueMode;
      if (!options || Array.isArray(options) && !options.length)
        return;
      this.treeStore = new TreeStore({
        keys: keys2 || {},
        checkable: true,
        checkStrictly,
        expandMutex: true,
        expandParent: true,
        disabled: disabled2,
        load,
        lazy,
        valueMode,
        onLoad: function onLoad() {
          setTimeout(function() {
            _this3.treeStore.refreshNodes();
            _this3.updatedTreeNodes();
          }, 0);
        }
      });
      this.treeStore.append(options);
      this.$nextTick(function() {
        _this3.updateExpend();
        _this3.updatedTreeNodes();
      });
    },
    updatedTreeNodes: function updatedTreeNodes() {
      var _this$cascaderContext3 = this.cascaderContext, inputVal2 = _this$cascaderContext3.inputVal, treeStore = _this$cascaderContext3.treeStore, setTreeNodes = _this$cascaderContext3.setTreeNodes;
      treeNodesEffect(inputVal2, treeStore, setTreeNodes);
    },
    updateExpend: function updateExpend() {
      var _this$cascaderContext4 = this.cascaderContext, treeStore = _this$cascaderContext4.treeStore, value6 = _this$cascaderContext4.value, expend = this.expend;
      if (!treeStore)
        return;
      treeStoreExpendEffect(treeStore, value6, expend);
      treeStore.replaceChecked(getTreeValue(value6));
    }
  },
  render: function render44() {
    var _this4 = this;
    var visible4 = this.visible, trigger2 = this.trigger, empty2 = this.empty, $attrs = this.$attrs, cascaderContext2 = this.cascaderContext, $slots = this.$slots, placeholder = this.placeholder, collapsedItems = this.collapsedItems, COMPONENT_NAME2 = this.COMPONENT_NAME;
    var popupProps2 = this.popupProps;
    var listeners = {};
    EVENT_NAME_WITH_KEBAB.forEach(function(eventName) {
      listeners[getPropsApiByEvent(eventName)] = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        emitEvent.apply(void 0, [_this4, eventName].concat(args));
      };
    });
    return createVNode(Popup, mergeProps({
      "class": "".concat(COMPONENT_NAME2, "__popup"),
      "overlayClassName": "".concat(COMPONENT_NAME2, "__dropdown"),
      "placement": "bottom-left",
      "visible": visible4,
      "expandAnimation": true,
      "trigger": (popupProps2 === null || popupProps2 === void 0 ? void 0 : popupProps2.trigger) || "click"
    }, popupProps2), {
      "default": function _default65() {
        return [createVNode(InputContent, mergeProps($attrs, {
          "cascaderContext": cascaderContext2,
          "placeholder": placeholder,
          "collapsedItems": collapsedItems,
          "listeners": listeners
        }), {
          collapsedItems: $slots.collapsedItems
        })];
      },
      content: function content() {
        return createVNode(resolveComponent("panel"), {
          "empty": empty2,
          "trigger": trigger2,
          "cascaderContext": cascaderContext2
        }, {
          empty: $slots.empty
        });
      }
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Cascader = withInstall(mapProps([{
  name: "value",
  event: "change",
  alias: ["modelValue"]
}])(_Cascader));
var dayjs_min = { exports: {} };
(function(module, exports) {
  !function(t, e) {
    module.exports = e();
  }(commonjsGlobal$1, function() {
    var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h2 = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m = function(t2, e2, n2) {
      var r2 = String(t2);
      return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
    }, g = { s: m, z: function(t2) {
      var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
      return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
    }, m: function t2(e2, n2) {
      if (e2.date() < n2.date())
        return -t2(n2, e2);
      var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
      return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
    }, a: function(t2) {
      return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
    }, p: function(t2) {
      return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h2 }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
    }, u: function(t2) {
      return t2 === void 0;
    } }, v = "en", D = {};
    D[v] = M;
    var p2 = function(t2) {
      return t2 instanceof _;
    }, S = function t2(e2, n2, r2) {
      var i2;
      if (!e2)
        return v;
      if (typeof e2 == "string") {
        var s2 = e2.toLowerCase();
        D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
        var u2 = e2.split("-");
        if (!i2 && u2.length > 1)
          return t2(u2[0]);
      } else {
        var a2 = e2.name;
        D[a2] = e2, i2 = a2;
      }
      return !r2 && i2 && (v = i2), i2 || !r2 && v;
    }, w = function(t2, e2) {
      if (p2(t2))
        return t2.clone();
      var n2 = typeof e2 == "object" ? e2 : {};
      return n2.date = t2, n2.args = arguments, new _(n2);
    }, O = g;
    O.l = S, O.i = p2, O.w = function(t2, e2) {
      return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
    };
    var _ = function() {
      function M2(t2) {
        this.$L = S(t2.locale, null, true), this.parse(t2);
      }
      var m2 = M2.prototype;
      return m2.parse = function(t2) {
        this.$d = function(t3) {
          var e2 = t3.date, n2 = t3.utc;
          if (e2 === null)
            return new Date(NaN);
          if (O.u(e2))
            return new Date();
          if (e2 instanceof Date)
            return new Date(e2);
          if (typeof e2 == "string" && !/Z$/i.test(e2)) {
            var r2 = e2.match(l);
            if (r2) {
              var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
              return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
            }
          }
          return new Date(e2);
        }(t2), this.$x = t2.x || {}, this.init();
      }, m2.init = function() {
        var t2 = this.$d;
        this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
      }, m2.$utils = function() {
        return O;
      }, m2.isValid = function() {
        return !(this.$d.toString() === $);
      }, m2.isSame = function(t2, e2) {
        var n2 = w(t2);
        return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
      }, m2.isAfter = function(t2, e2) {
        return w(t2) < this.startOf(e2);
      }, m2.isBefore = function(t2, e2) {
        return this.endOf(e2) < w(t2);
      }, m2.$g = function(t2, e2, n2) {
        return O.u(t2) ? this[e2] : this.set(n2, t2);
      }, m2.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, m2.valueOf = function() {
        return this.$d.getTime();
      }, m2.startOf = function(t2, e2) {
        var n2 = this, r2 = !!O.u(e2) || e2, h3 = O.p(t2), $2 = function(t3, e3) {
          var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
          return r2 ? i2 : i2.endOf(a);
        }, l2 = function(t3, e3) {
          return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
        }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
        switch (h3) {
          case c:
            return r2 ? $2(1, 0) : $2(31, 11);
          case f:
            return r2 ? $2(1, M3) : $2(0, M3 + 1);
          case o:
            var v2 = this.$locale().weekStart || 0, D2 = (y2 < v2 ? y2 + 7 : y2) - v2;
            return $2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
          case a:
          case d:
            return l2(g2 + "Hours", 0);
          case u:
            return l2(g2 + "Minutes", 1);
          case s:
            return l2(g2 + "Seconds", 2);
          case i:
            return l2(g2 + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, m2.endOf = function(t2) {
        return this.startOf(t2, false);
      }, m2.$set = function(t2, e2) {
        var n2, o2 = O.p(t2), h3 = "set" + (this.$u ? "UTC" : ""), $2 = (n2 = {}, n2[a] = h3 + "Date", n2[d] = h3 + "Date", n2[f] = h3 + "Month", n2[c] = h3 + "FullYear", n2[u] = h3 + "Hours", n2[s] = h3 + "Minutes", n2[i] = h3 + "Seconds", n2[r] = h3 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
        if (o2 === f || o2 === c) {
          var y2 = this.clone().set(d, 1);
          y2.$d[$2](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
        } else
          $2 && this.$d[$2](l2);
        return this.init(), this;
      }, m2.set = function(t2, e2) {
        return this.clone().$set(t2, e2);
      }, m2.get = function(t2) {
        return this[O.p(t2)]();
      }, m2.add = function(r2, h3) {
        var d2, $2 = this;
        r2 = Number(r2);
        var l2 = O.p(h3), y2 = function(t2) {
          var e2 = w($2);
          return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
        };
        if (l2 === f)
          return this.set(f, this.$M + r2);
        if (l2 === c)
          return this.set(c, this.$y + r2);
        if (l2 === a)
          return y2(1);
        if (l2 === o)
          return y2(7);
        var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
        return O.w(m3, this);
      }, m2.subtract = function(t2, e2) {
        return this.add(-1 * t2, e2);
      }, m2.format = function(t2) {
        var e2 = this, n2 = this.$locale();
        if (!this.isValid())
          return n2.invalidDate || $;
        var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h3 = function(t3, n3, i3, s3) {
          return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
        }, c2 = function(t3) {
          return O.s(s2 % 12 || 12, t3, "0");
        }, d2 = n2.meridiem || function(t3, e3, n3) {
          var r3 = t3 < 12 ? "AM" : "PM";
          return n3 ? r3.toLowerCase() : r3;
        }, l2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h3(n2.monthsShort, a2, f2, 3), MMMM: h3(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h3(n2.weekdaysMin, this.$W, o2, 2), ddd: h3(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
        return r2.replace(y, function(t3, e3) {
          return e3 || l2[t3] || i2.replace(":", "");
        });
      }, m2.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, m2.diff = function(r2, d2, $2) {
        var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, v2 = O.m(this, M3);
        return v2 = (l2 = {}, l2[c] = v2 / 12, l2[f] = v2, l2[h2] = v2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i] = g2 / t, l2)[y2] || g2, $2 ? v2 : O.a(v2);
      }, m2.daysInMonth = function() {
        return this.endOf(f).$D;
      }, m2.$locale = function() {
        return D[this.$L];
      }, m2.locale = function(t2, e2) {
        if (!t2)
          return this.$L;
        var n2 = this.clone(), r2 = S(t2, e2, true);
        return r2 && (n2.$L = r2), n2;
      }, m2.clone = function() {
        return O.w(this.$d, this);
      }, m2.toDate = function() {
        return new Date(this.valueOf());
      }, m2.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, m2.toISOString = function() {
        return this.$d.toISOString();
      }, m2.toString = function() {
        return this.$d.toUTCString();
      }, M2;
    }(), T = _.prototype;
    return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
      T[t2[1]] = function(e2) {
        return this.$g(e2, t2[0], t2[1]);
      };
    }), w.extend = function(t2, e2) {
      return t2.$i || (t2(e2, _, w), t2.$i = true), w;
    }, w.locale = S, w.isDayjs = p2, w.unix = function(t2) {
      return w(1e3 * t2);
    }, w.en = D[v], w.Ls = D, w.p = {}, w;
  });
})(dayjs_min);
var dayjs = dayjs_min.exports;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$z = {
  allowInput: Boolean,
  clearable: Boolean,
  disabled: Boolean,
  disableDate: {
    type: [Object, Array, Function]
  },
  enableTimePicker: Boolean,
  firstDayOfWeek: {
    type: Number,
    validator: function validator57(val) {
      return [1, 2, 3, 4, 5, 6, 7].includes(val);
    }
  },
  format: {
    type: String,
    "default": void 0
  },
  inputProps: {
    type: Object
  },
  mode: {
    type: String,
    "default": "month",
    validator: function validator58(val) {
      return ["year", "month", "date"].includes(val);
    }
  },
  placeholder: {
    type: [String, Array],
    "default": void 0
  },
  popupProps: {
    type: Object
  },
  prefixIcon: {
    type: Function
  },
  presets: {
    type: Object
  },
  range: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator59(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  suffixIcon: {
    type: Function
  },
  timePickerProps: Boolean,
  value: {
    type: [String, Array, Date]
  },
  defaultValue: {
    type: [String, Array, Date]
  },
  onBlur: Function,
  onChange: Function,
  onFocus: Function,
  onInput: Function,
  onPick: Function
};
var index$v = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TCalendarPresets = defineComponent({
  name: "TCalendarPresets",
  components: {
    TButton: Button
  },
  props: {
    global: {
      type: Object
    },
    presets: {
      type: Object
    },
    onClick: Function
  },
  setup: function setup53() {
    var COMPONENT_NAME2 = usePrefixClass("date-picker__presets");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  methods: {
    _isDate: function _isDate(obj) {
      return obj.$d instanceof Date && !isNaN(obj.valueOf());
    },
    clickPreset: function clickPreset(value6) {
      var dateCheckResult = true;
      if (value6 instanceof Array) {
        for (var i = 0; i < value6.length; i++) {
          if (!this._isDate(value6[i])) {
            dateCheckResult = false;
            break;
          }
        }
      } else if (_typeof$1(value6) === "object") {
        dateCheckResult = this._isDate(value6);
      } else {
        dateCheckResult = false;
      }
      if (dateCheckResult) {
        this.onClick(value6);
      } else {
        this.$message.info("\u65E5\u671F\u683C\u5F0F\u9519\u8BEF");
      }
    }
  },
  render: function render45() {
    var _this = this;
    var presets = this.presets;
    return createVNode("div", {
      "class": this.COMPONENT_NAME
    }, [createVNode("ul", null, [presets && Object.keys(presets).map(function(key) {
      return createVNode("li", {
        "key": key
      }, [createVNode("a", {
        "onClick": function onClick2() {
          return _this.clickPreset(presets[key]);
        }
      }, [key])]);
    })])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TDateHeader = defineComponent({
  name: "TDatePickerHeader",
  components: {
    TButton,
    RoundIcon: round$1,
    ChevronLeftIcon: chevronLeft,
    ChevronRightIcon: chevronRight
  },
  props: {
    year: Number,
    month: Number,
    type: {
      type: String,
      "default": "date",
      validator: function validator60(v) {
        return ["year", "month", "date"].indexOf(v) > -1;
      }
    },
    onBtnClick: Function,
    onTypeChange: Function
  },
  setup: function setup54() {
    var COMPONENT_NAME2 = usePrefixClass("date-picker__header");
    var _useConfig = useConfig("datePicker"), global2 = _useConfig.global;
    return {
      global: global2,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  render: function render46() {
    var _this = this;
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var _this$$props = this.$props, type = _this$$props.type, year = _this$$props.year, month = _this$$props.month, onBtnClick = _this$$props.onBtnClick, onTypeChange3 = _this$$props.onTypeChange;
    var startYear = parseInt((this.year / 10).toString(), 10) * 10;
    var _this$global = this.global, rangeSeparator = _this$global.rangeSeparator, yearAriaLabel = _this$global.yearAriaLabel, now2 = _this$global.now, preMonth = _this$global.preMonth, preYear = _this$global.preYear, nextMonth = _this$global.nextMonth, nextYear = _this$global.nextYear, preDecade = _this$global.preDecade, nextDecade = _this$global.nextDecade;
    var preLabel;
    var nextLabel;
    if (type === "year") {
      preLabel = preDecade;
      nextLabel = nextDecade;
    } else if (type === "date") {
      preLabel = preMonth;
      nextLabel = nextMonth;
    } else {
      preLabel = preYear;
      nextLabel = nextYear;
    }
    return createVNode("div", {
      "class": COMPONENT_NAME2
    }, [createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "-title")
    }, [type === "year" && createVNode("span", null, [createVNode("span", null, [startYear]), rangeSeparator, createVNode("span", null, [startYear + 9])]), type !== "year" && createVNode(resolveComponent("t-button"), {
      "class": "".concat(COMPONENT_NAME2, "-btn"),
      "variant": "text",
      "size": "small",
      "onClick": function onClick2() {
        return onTypeChange3("year");
      }
    }, {
      "default": function _default65() {
        return ["".concat(year, " ").concat(yearAriaLabel)];
      }
    }), type === "date" && createVNode(resolveComponent("t-button"), {
      "class": "".concat(COMPONENT_NAME2, "-btn"),
      "variant": "text",
      "size": "small",
      "onClick": function onClick2() {
        return onTypeChange3("month");
      }
    }, {
      "default": function _default65() {
        return [_this.global.months[month]];
      }
    })]), createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "-controller")
    }, [createVNode(resolveComponent("t-button"), {
      "class": "".concat(COMPONENT_NAME2, "-controller__btn"),
      "variant": "text",
      "onClick": function onClick2() {
        return onBtnClick(-1);
      },
      "title": preLabel
    }, {
      icon: function icon() {
        return createVNode(resolveComponent("chevron-left-icon"), null, null);
      }
    }), createVNode(resolveComponent("t-button"), {
      "class": ["".concat(COMPONENT_NAME2, "-controller__btn"), "".concat(COMPONENT_NAME2, "-controller__btn--now")],
      "variant": "text",
      "onClick": function onClick2() {
        return onBtnClick(0);
      },
      "title": now2
    }, {
      icon: function icon() {
        return createVNode(resolveComponent("round-icon"), null, null);
      }
    }), createVNode(resolveComponent("t-button"), {
      "class": "".concat(COMPONENT_NAME2, "-controller__btn"),
      "variant": "text",
      "onClick": function onClick2() {
        return onBtnClick(1);
      },
      "title": nextLabel
    }, {
      icon: function icon() {
        return createVNode(resolveComponent("chevron-right-icon"), null, null);
      }
    })])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TDatePickerCell = defineComponent({
  name: "TDatePickerCell",
  props: {
    text: [String, Number],
    value: Date,
    active: Boolean,
    highlight: Boolean,
    disabled: Boolean,
    startOfRange: Boolean,
    endOfRange: Boolean,
    additional: Boolean,
    now: Boolean,
    firstDayOfMonth: Boolean,
    lastDayOfMonth: Boolean,
    onClick: Function,
    onMouseEnter: {
      type: Function
    }
  },
  setup: function setup55() {
    var COMPONENT_NAME2 = usePrefixClass("date-picker__cell");
    var name2 = usePrefixClass("date-picker-cell");
    return {
      name: name2,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  render: function render47() {
    var _ref;
    var name2 = this.name, COMPONENT_NAME2 = this.COMPONENT_NAME, text = this.text, value6 = this.value, active = this.active, highlight = this.highlight, disabled2 = this.disabled, startOfRange = this.startOfRange, endOfRange = this.endOfRange, additional = this.additional, now2 = this.now, firstDayOfMonth = this.firstDayOfMonth, lastDayOfMonth = this.lastDayOfMonth, _onClick = this.onClick, onMouseEnter2 = this.onMouseEnter;
    var cellClass = [name2, (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--now"), now2), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--active"), active), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--disabled"), disabled2), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--highlight"), highlight), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--active-start"), startOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--active-end"), endOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--additional"), additional), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--first-day-of-month"), firstDayOfMonth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--last-day-of-month"), lastDayOfMonth), _ref)];
    return createVNode("td", {
      "class": cellClass
    }, [createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "-wrapper"),
      "onClick": function onClick2(e) {
        if (!disabled2) {
          _onClick(value6, {
            e
          });
        }
      },
      "onMouseenter": function onMouseenter() {
        return onMouseEnter2 && onMouseEnter2(value6);
      }
    }, [createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "-text")
    }, [text])])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var DAY_NAMES = ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"];
var TDateTable = defineComponent({
  name: "TDatePickerTable",
  components: {
    TDatePickerCell
  },
  props: {
    type: {
      type: String,
      "default": "day"
    },
    data: Array,
    firstDayOfWeek: Number,
    dayNames: {
      type: Array,
      "default": function _default16() {
        return DAY_NAMES;
      }
    },
    onCellClick: {
      type: Function
    },
    onCellMouseEnter: {
      type: Function
    }
  },
  setup: function setup56() {
    var _useConfig = useConfig("datePicker"), global2 = _useConfig.global;
    return {
      global: global2
    };
  },
  render: function render48() {
    var _this = this;
    var _this$$props = this.$props, type = _this$$props.type, data26 = _this$$props.data, onCellClick = _this$$props.onCellClick, onCellMouseEnter = _this$$props.onCellMouseEnter, firstDayOfWeek = _this$$props.firstDayOfWeek;
    var weekdays = this.global.weekdays;
    var weekArr = [];
    var wi = firstDayOfWeek - 1;
    var len2 = weekdays.length;
    while (weekArr.length < len2) {
      weekArr.push(weekdays[wi]);
      wi = (wi + len2 + 1) % len2;
    }
    var panelClass = "t-date-picker--".concat(type);
    return createVNode("div", {
      "class": panelClass
    }, [createVNode("table", null, [type === "date" && createVNode("thead", null, [createVNode("tr", null, [weekArr.map(function(value6, i) {
      return createVNode("th", {
        "key": i
      }, [value6]);
    })])]), createVNode("tbody", null, [data26.map(function(row, i) {
      return createVNode("tr", {
        "key": i
      }, [row.map(function(col, j) {
        return createVNode(resolveComponent("t-date-picker-cell"), mergeProps(col, _this.$attrs, {
          "key": j,
          "onClick": onCellClick,
          "onMouseEnter": onCellMouseEnter
        }), null);
      })]);
    })])])]);
  }
});
function _extends$1() {
  _extends$1 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
var toNumber$1 = toNumber_1;
var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
function toFinite$1(value6) {
  if (!value6) {
    return value6 === 0 ? value6 : 0;
  }
  value6 = toNumber$1(value6);
  if (value6 === INFINITY || value6 === -INFINITY) {
    var sign = value6 < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value6 === value6 ? value6 : 0;
}
var toFinite_1 = toFinite$1;
var toFinite = toFinite_1;
function toInteger$2(value6) {
  var result = toFinite(value6), remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}
var toInteger_1 = toInteger$2;
var baseSlice$1 = _baseSlice, isIterateeCall$1 = _isIterateeCall, toInteger$1 = toInteger_1;
var nativeCeil = Math.ceil, nativeMax$1 = Math.max;
function chunk(array, size2, guard) {
  if (guard ? isIterateeCall$1(array, size2, guard) : size2 === void 0) {
    size2 = 1;
  } else {
    size2 = nativeMax$1(toInteger$1(size2), 0);
  }
  var length = array == null ? 0 : array.length;
  if (!length || size2 < 1) {
    return [];
  }
  var index2 = 0, resIndex = 0, result = Array(nativeCeil(length / size2));
  while (index2 < length) {
    result[resIndex++] = baseSlice$1(array, index2, index2 += size2);
  }
  return result;
}
var chunk_1 = chunk;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function firstUpperCase(str) {
  if (!str)
    return str;
  return str[0].toUpperCase().concat(str.substring(1, str.length));
}
function getFirstDayOfMonth(_ref) {
  var year = _ref.year, month = _ref.month;
  return new Date(year, month, 1);
}
function getDaysInMonth(_ref2) {
  var year = _ref2.year, month = _ref2.month;
  return new Date(year, month + 1, 0).getDate();
}
function getLastDayOfMonth(_ref3) {
  var year = _ref3.year, month = _ref3.month;
  return new Date(year, month, getDaysInMonth({
    year,
    month
  }));
}
function isSameYear(date1, date2) {
  return date1.getFullYear() === date2.getFullYear();
}
function isSameMonth(date1, date2) {
  return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
}
function isSameDate(date1, date2) {
  return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
}
function isBetween$2(value6, _ref4) {
  var start3 = _ref4.start, end3 = _ref4.end;
  var date = new Date(value6.getFullYear(), value6.getMonth(), value6.getDate());
  var startTime = new Date(start3.getFullYear(), start3.getMonth(), start3.getDate());
  var endTime = new Date(end3.getFullYear(), end3.getMonth(), end3.getDate());
  return startTime <= date && endTime >= date;
}
function compareAsc(date1, date2) {
  var d1 = date1.getTime();
  var d2 = date2.getTime();
  if (d1 < d2)
    return -1;
  if (d1 > d2)
    return 1;
  return 0;
}
function isSame(date1, date2) {
  var type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "date";
  var func = {
    isSameYear,
    isSameMonth,
    isSameDate
  };
  return func["isSame".concat(firstUpperCase(type))](date1, date2);
}
function outOfRanges(d, min4, max4) {
  return min4 && compareAsc(d, min4) === -1 || max4 && compareAsc(d, max4) === 1;
}
function getToday() {
  var now2 = new Date();
  return new Date(now2.getFullYear(), now2.getMonth(), now2.getDate(), 0, 0, 0);
}
function getDateObj(date) {
  var tempDate = date;
  if (!(date instanceof Date)) {
    tempDate = getToday();
  }
  return {
    year: tempDate.getFullYear(),
    month: tempDate.getMonth(),
    date: tempDate.getDate(),
    hours: tempDate.getHours(),
    minutes: tempDate.getMinutes(),
    seconds: tempDate.getSeconds(),
    meridiem: tempDate.getHours() > 11 ? "PM" : "AM"
  };
}
function setDateTime(d, hour, min4, sec) {
  var _getDateObj = getDateObj(d), year = _getDateObj.year, month = _getDateObj.month, date = _getDateObj.date;
  return new Date(year, month, date, hour, min4, sec, 0);
}
function subtractMonth(date, num) {
  var day = date.getDate();
  var newDate = new Date(date);
  var _num = num;
  while (_num--) {
    newDate.setDate(0);
  }
  newDate.setDate(day);
  return newDate;
}
function addMonth(date, num) {
  var _num = num;
  if (num < 0)
    _num = 0;
  var newDate = new Date(date);
  var year = date.getFullYear();
  var month = date.getMonth() + _num;
  var day = newDate.getDate();
  newDate.setDate(1);
  newDate.setMonth(month);
  newDate.setDate(Math.min(day, getDaysInMonth({
    year,
    month
  })));
  return newDate;
}
function getWeeks(_ref5, _ref6) {
  var year = _ref5.year, month = _ref5.month;
  var firstDayOfWeek = _ref6.firstDayOfWeek, _ref6$disableDate = _ref6.disableDate, disableDate = _ref6$disableDate === void 0 ? function() {
    return false;
  } : _ref6$disableDate, minDate = _ref6.minDate, maxDate = _ref6.maxDate;
  var prependDay = getFirstDayOfMonth({
    year,
    month
  });
  var appendDay = getLastDayOfMonth({
    year,
    month
  });
  var maxDays = getDaysInMonth({
    year,
    month
  });
  var daysArr = [];
  var i = 1;
  var today = getToday();
  for (i; i <= maxDays; i++) {
    var currentDay = new Date(year, month, i);
    daysArr.push({
      text: i,
      active: false,
      value: currentDay,
      disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
      now: isSame(today, currentDay),
      firstDayOfMonth: i === 1,
      lastDayOfMonth: i === maxDays,
      type: "current-month"
    });
  }
  if (prependDay.getDay() !== firstDayOfWeek) {
    prependDay.setDate(0);
    while (true) {
      daysArr.unshift({
        text: prependDay.getDate().toString(),
        active: false,
        value: new Date(prependDay),
        disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
        additional: true,
        type: "prev-month"
      });
      prependDay.setDate(prependDay.getDate() - 1);
      if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7)
        break;
    }
  }
  var LEN = 42;
  while (daysArr.length < LEN) {
    appendDay.setDate(appendDay.getDate() + 1);
    daysArr.push({
      text: appendDay.getDate(),
      active: false,
      value: new Date(appendDay),
      disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
      additional: true,
      type: "next-month"
    });
  }
  return chunk_1(daysArr, 7);
}
function getYears(year, _ref7) {
  var _ref7$disableDate = _ref7.disableDate, disableDate = _ref7$disableDate === void 0 ? function() {
    return false;
  } : _ref7$disableDate, minDate = _ref7.minDate, maxDate = _ref7.maxDate;
  var startYear = parseInt((year / 10).toString(), 10) * 10;
  var endYear = startYear + 9;
  var yearArr = [];
  var today = getToday();
  for (var i = startYear; i <= endYear; i++) {
    var date = new Date(i, 1);
    var disabledMonth = 0;
    var outOfRangeMonth = 0;
    for (var j = 0; j < 12; j++) {
      var d = new Date(i, j);
      if (typeof disableDate === "function" && disableDate(d))
        disabledMonth += 1;
      if (outOfRanges(d, minDate, maxDate))
        outOfRangeMonth += 1;
    }
    yearArr.push({
      value: date,
      now: isSame(date, today, "year"),
      disabled: disabledMonth === 12 || outOfRangeMonth === 12,
      active: false,
      text: "".concat(date.getFullYear())
    });
  }
  return chunk_1(yearArr, 4);
}
function getMonths(year, params) {
  var _params$disableDate = params.disableDate, disableDate = _params$disableDate === void 0 ? function() {
    return false;
  } : _params$disableDate, minDate = params.minDate, maxDate = params.maxDate, monthLocal = params.monthLocal;
  var MonthArr = [];
  var today = getToday();
  for (var i = 0; i <= 11; i++) {
    var date = new Date(year, i);
    var disabledDay = 0;
    var outOfRangeDay = 0;
    var daysInMonth = getDaysInMonth({
      year,
      month: i
    });
    for (var j = 1; j <= daysInMonth; j++) {
      var d = new Date(year, i, j);
      if (typeof disableDate === "function" && disableDate(d))
        disabledDay += 1;
      if (outOfRanges(d, minDate, maxDate))
        outOfRangeDay += 1;
    }
    MonthArr.push({
      value: date,
      now: isSame(date, today, "month"),
      disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
      active: false,
      text: monthLocal[date.getMonth()]
    });
  }
  return chunk_1(MonthArr, 4);
}
function flagActive(data26, _ref8) {
  var args = _extends$1({}, _ref8);
  var start3 = args.start, end3 = args.end, _args$type = args.type, type = _args$type === void 0 ? "date" : _args$type;
  if (!end3) {
    return data26.map(function(row) {
      return row.map(function(item) {
        var _item = item;
        _item.active = isSame(item.value, start3, type);
        return _item;
      });
    });
  }
  return data26.map(function(row) {
    return row.map(function(item) {
      var _item = item;
      var date = item.value;
      var isStart = isSame(start3, date, type);
      var isEnd = isSame(end3, date, type);
      _item.active = isStart || isEnd;
      _item.highlight = isBetween$2(date, {
        start: start3,
        end: end3
      });
      _item.startOfRange = isStart;
      _item.endOfRange = isEnd;
      return _item;
    });
  });
}
function extractTimeFormat(dateFormat) {
  var res = dateFormat.match(/(a\s)?h{1,2}:m{1,2}(:s{1,2})?(\sa)?/i);
  if (!res)
    return null;
  return res[0];
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TDate = defineComponent({
  name: "TDatePickerPanel",
  components: {
    TDateHeader,
    TDateTable
  },
  inheritAttrs: false,
  props: {
    global: {
      type: Object,
      "default": function _default17() {
        return {};
      }
    },
    value: {
      type: Date,
      "default": function _default18() {
        return getToday();
      }
    },
    mode: props$z.mode,
    minDate: Date,
    maxDate: Date,
    firstDayOfWeek: props$z.firstDayOfWeek,
    disableDate: props$z.disableDate,
    onChange: props$z.onChange
  },
  emits: ["change"],
  setup: function setup57() {
    var COMPONENT_NAME2 = usePrefixClass("date-picker__panel");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data15() {
    return {
      year: this.value.getFullYear(),
      month: this.value.getMonth(),
      type: this.mode
    };
  },
  computed: {
    tableData: function tableData() {
      var year = this.year, month = this.month, type = this.type, value6 = this.value, mode3 = this.mode, disableDate = this.disableDate, minDate = this.minDate, maxDate = this.maxDate, firstDayOfWeek = this.firstDayOfWeek, global2 = this.global;
      var data26;
      var options = {
        disableDate,
        minDate,
        maxDate,
        firstDayOfWeek,
        monthLocal: global2.months
      };
      switch (type) {
        case "date":
          data26 = getWeeks({
            year,
            month
          }, options);
          break;
        case "month":
          data26 = getMonths(year, options);
          break;
        case "year":
          data26 = getYears(year, options);
          break;
      }
      var start3 = type === "date" || type === mode3 ? value6 : new Date(year, month);
      return flagActive(data26, {
        start: start3,
        type
      });
    }
  },
  watch: {
    mode: function mode(value6) {
      this.type = value6;
    },
    value: function value2(_value) {
      this.year = _value.getFullYear();
      this.month = _value.getMonth();
    }
  },
  methods: {
    getClickHandler: function getClickHandler() {
      return this["click".concat(firstUpperCase(this.type))];
    },
    clickDate: function clickDate(date) {
      this.$emit("change", date);
    },
    clickMonth: function clickMonth(date) {
      if (this.mode === "month") {
        this.$emit("change", date);
      } else {
        this.type = "date";
        this.year = date.getFullYear();
        this.month = date.getMonth();
      }
    },
    clickYear: function clickYear(date) {
      if (this.mode === "year") {
        this.$emit("change", date);
      } else {
        this.type = "month";
        this.year = date.getFullYear();
      }
    },
    clickHeader: function clickHeader(flag) {
      var monthCount = 0;
      var next = null;
      switch (this.type) {
        case "date":
          monthCount = 1;
          break;
        case "month":
          monthCount = 12;
          break;
        case "year":
          monthCount = 120;
      }
      var current2 = new Date(this.year, this.month);
      switch (flag) {
        case 1:
          next = addMonth(current2, monthCount);
          break;
        case -1:
          next = subtractMonth(current2, monthCount);
          break;
        case 0:
          next = new Date();
          break;
      }
      this.year = next.getFullYear();
      this.month = next.getMonth();
    },
    onTypeChange: function onTypeChange(type) {
      this.type = type;
    }
  },
  render: function render49() {
    var year = this.year, month = this.month, type = this.type, tableData2 = this.tableData, firstDayOfWeek = this.firstDayOfWeek, COMPONENT_NAME2 = this.COMPONENT_NAME;
    return createVNode("div", {
      "class": COMPONENT_NAME2
    }, [createVNode(resolveComponent("t-date-header"), {
      "year": year,
      "month": month,
      "type": type,
      "onBtnClick": this.clickHeader,
      "onTypeChange": this.onTypeChange
    }, null), createVNode(resolveComponent("t-date-table"), {
      "type": type,
      "firstDayOfWeek": firstDayOfWeek,
      "data": tableData2,
      "onCellClick": this.getClickHandler()
    }, null)]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TODAY = getToday();
var LEFT = "left";
var RIGHT = "right";
var TDateRange = defineComponent({
  name: "TDatePickerDateRange",
  components: {
    TDateHeader,
    TDateTable
  },
  inheritAttrs: false,
  props: {
    global: {
      type: Object,
      "default": function _default19() {
        return {};
      }
    },
    mode: {
      type: String,
      "default": "date",
      validator: function validator61(v) {
        return ["year", "month", "date"].indexOf(v) > -1;
      }
    },
    value: {
      type: Array,
      "default": function _default20() {
        return [TODAY, TODAY];
      }
    },
    minDate: Date,
    maxDate: Date,
    firstDayOfWeek: props$z.firstDayOfWeek,
    disableDate: props$z.disableDate,
    onChange: props$z.onChange,
    onPick: Function
  },
  emits: ["change"],
  setup: function setup58() {
    var COMPONENT_NAME2 = usePrefixClass("date-picker");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data16() {
    return {
      leftYear: null,
      leftMonth: null,
      rightMonth: null,
      rightYear: null,
      leftType: this.mode,
      rightType: this.mode,
      startValue: null,
      endValue: null,
      isFirstClick: true,
      firstClickValue: null
    };
  },
  computed: {
    leftData: function leftData() {
      return this.getData({
        year: this.leftYear,
        month: this.leftMonth,
        type: this.leftType
      });
    },
    rightData: function rightData() {
      return this.getData({
        year: this.rightYear,
        month: this.rightMonth,
        type: this.rightType
      });
    }
  },
  watch: {
    value: {
      handler: function handler9(value6) {
        var _value = _slicedToArray(value6, 2), _value$ = _value[0], startValue = _value$ === void 0 ? TODAY : _value$, _value$2 = _value[1], endValue = _value$2 === void 0 ? TODAY : _value$2;
        this.startValue = startValue;
        this.endValue = endValue;
      },
      immediate: true
    },
    mode: function mode2(value6) {
      this.leftType = value6;
      this.rightType = value6;
    }
  },
  created: function created4() {
    this.initialPicker();
  },
  beforeUnmount: function beforeUnmount2() {
    this.initialPicker();
  },
  methods: {
    initialPicker: function initialPicker() {
      var data26 = this.getLeftAndRightDataFromValue(this.value);
      this.leftYear = data26.leftYear;
      this.leftMonth = data26.leftMonth;
      this.rightYear = data26.rightYear;
      this.rightMonth = data26.rightMonth;
      this.leftType = this.mode;
      this.rightType = this.mode;
      var _this$value = _slicedToArray(this.value, 2), startValue = _this$value[0], endValue = _this$value[1];
      this.startValue = startValue;
      this.endValue = endValue;
      this.isFirstClick = true;
      this.firstClickValue = TODAY;
    },
    getLeftAndRightDataFromValue: function getLeftAndRightDataFromValue(value6) {
      var _ref = value6 || this.value, _ref2 = _slicedToArray(_ref, 2), _ref2$ = _ref2[0], startValue = _ref2$ === void 0 ? TODAY : _ref2$, _ref2$2 = _ref2[1], endValue = _ref2$2 === void 0 ? TODAY : _ref2$2;
      var leftYear = startValue.getFullYear();
      var leftMonth = startValue.getMonth();
      var rightMonth = endValue.getMonth();
      var rightYear = endValue.getFullYear();
      if (this.mode === "date" && isSame(startValue, endValue, "month")) {
        var next = addMonth(endValue, 1);
        rightMonth = addMonth(endValue, 1).getMonth();
        rightYear = next.getFullYear();
      }
      if (this.mode === "month" && isSame(startValue, endValue, "year")) {
        rightYear = leftYear + 1;
      }
      if (this.mode === "year" && isSame(startValue, endValue, "year")) {
        rightYear = leftYear + 10;
      }
      return {
        leftYear,
        leftMonth,
        rightMonth,
        rightYear
      };
    },
    getData: function getData(_ref3) {
      var year = _ref3.year, month = _ref3.month, type = _ref3.type;
      var disableDate = this.disableDate, minDate = this.minDate, maxDate = this.maxDate, startValue = this.startValue, endValue = this.endValue, firstDayOfWeek = this.firstDayOfWeek;
      var data26;
      var start3 = startValue;
      var end3 = endValue;
      var options = {
        disableDate,
        minDate,
        maxDate,
        firstDayOfWeek,
        monthLocal: this.global.months
      };
      switch (type) {
        case "date":
          data26 = getWeeks({
            year,
            month
          }, options);
          break;
        case "month":
          data26 = getMonths(year, options);
          break;
        case "year":
          data26 = getYears(year, options);
          break;
      }
      return flagActive(data26, {
        start: start3,
        end: end3,
        type
      });
    },
    getClickHandler: function getClickHandler2(direction, date, e) {
      var type = this["".concat(direction, "Type")];
      return this["click".concat(firstUpperCase(type))](date, e, direction);
    },
    clickHeader: function clickHeader2(flag, direction) {
      var year = this["".concat(direction, "Year")];
      var month = this["".concat(direction, "Month")];
      var type = this["".concat(direction, "Type")];
      var monthCount;
      var next;
      switch (type) {
        case "date":
          monthCount = 1;
          break;
        case "month":
          monthCount = 12;
          break;
        case "year":
          monthCount = 120;
      }
      var current2 = new Date(year, month);
      if (flag === 1) {
        next = addMonth(current2, monthCount);
      } else if (flag === -1) {
        next = subtractMonth(current2, monthCount);
      } else {
        next = new Date();
      }
      this["".concat(direction, "Year")] = next.getFullYear();
      this["".concat(direction, "Month")] = next.getMonth();
    },
    clickDate: function clickDate2(date, e) {
      var partial = "start";
      if (this.isFirstClick) {
        this.startValue = date;
        this.endValue = date;
        this.isFirstClick = false;
        this.firstClickValue = date;
      } else {
        if (dayjs(this.firstClickValue).isBefore(dayjs(date), "day")) {
          this.endValue = date;
        } else {
          this.endValue = this.firstClickValue;
          this.startValue = date;
        }
        this.$props.onChange([setDateTime(this.startValue, 0, 0, 0), setDateTime(this.endValue, 23, 59, 59)]);
        this.isFirstClick = true;
        partial = "end";
      }
      this.$props.onPick && this.$props.onPick(date, {
        e,
        partial
      });
    },
    clickYear: function clickYear2(date, e, type) {
      if (this.mode === "year") {
        if (this.isFirstClick) {
          this.startValue = date;
          this.isFirstClick = false;
          this.firstClickValue = date;
        } else {
          this.$props.onChange([this.startValue, this.endValue]);
          this.isFirstClick = true;
        }
      } else {
        this["".concat(type, "Type")] = "month";
        this["".concat(type, "Year")] = date.getFullYear();
      }
    },
    clickMonth: function clickMonth2(date, e, type) {
      if (this.mode === "month") {
        if (this.isFirstClick) {
          this.startValue = date;
          this.isFirstClick = false;
          this.firstClickValue = date;
        } else {
          if (this.endValue < this.startValue) {
            this.endValue = this.startValue;
          }
          this.$props.onChange([this.startValue, this.endValue]);
          this.isFirstClick = true;
        }
      } else {
        this["".concat(type, "Type")] = "date";
        this["".concat(type, "Month")] = date.getMonth();
        this["".concat(type, "Year")] = date.getFullYear();
      }
    },
    onMouseEnter: function onMouseEnter(date) {
      if (this.isFirstClick) {
        return;
      }
      if (this.firstClickValue.getTime() > date.getTime()) {
        this.startValue = date;
        this.endValue = this.firstClickValue;
      } else {
        this.startValue = this.firstClickValue;
        this.endValue = date;
      }
    },
    onTypeChange: function onTypeChange2() {
      this.startValue = this.firstClickValue;
      this.endValue = this.firstClickValue;
    },
    handleTypeChange: function handleTypeChange(direction, type) {
      this["".concat(direction, "Type")] = type;
    }
  },
  render: function render50() {
    var _this = this;
    var COMPONENT_NAME2 = this.COMPONENT_NAME, leftYear = this.leftYear, leftMonth = this.leftMonth, leftType = this.leftType, leftData2 = this.leftData, rightYear = this.rightYear, rightMonth = this.rightMonth, rightType = this.rightType, rightData2 = this.rightData, firstDayOfWeek = this.firstDayOfWeek;
    return createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__panels")
    }, [createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__panel")
    }, [createVNode(resolveComponent("t-date-header"), {
      "year": leftYear,
      "month": leftMonth,
      "type": leftType,
      "onBtnClick": function onBtnClick(flag) {
        return _this.clickHeader(flag, LEFT);
      },
      "onTypeChange": function onTypeChange3(type) {
        return _this.handleTypeChange(LEFT, type);
      }
    }, null), createVNode(resolveComponent("t-date-table"), {
      "type": leftType,
      "first-day-of-week": firstDayOfWeek,
      "data": leftData2,
      "onCellClick": function onCellClick(date, e) {
        return _this.getClickHandler(LEFT, date, e);
      },
      "onCellMouseEnter": this.onMouseEnter
    }, null)]), createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__panel")
    }, [createVNode(resolveComponent("t-date-header"), {
      "year": rightYear,
      "month": rightMonth,
      "type": rightType,
      "onBtnClick": function onBtnClick(flag) {
        return _this.clickHeader(flag, RIGHT);
      },
      "onTypeChange": function onTypeChange3(type) {
        return _this.handleTypeChange(RIGHT, type);
      }
    }, null), createVNode(resolveComponent("t-date-table"), {
      "type": rightType,
      "first-day-of-week": firstDayOfWeek,
      "data": rightData2,
      "onUpdateType": this.onTypeChange,
      "onCellClick": function onCellClick(date, e) {
        return _this.getClickHandler(RIGHT, date, e);
      },
      "onCellMouseEnter": this.onMouseEnter
    }, null)])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$y = {
  allowInput: Boolean,
  clearable: Boolean,
  disabled: Boolean,
  disableTime: {
    type: Function
  },
  format: {
    type: String,
    "default": "HH:mm:ss"
  },
  hideDisabledTime: {
    type: Boolean,
    "default": true
  },
  placeholder: {
    type: String,
    "default": ""
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator62(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  steps: {
    type: Array,
    "default": function _default21() {
      return [1, 1, 1];
    }
  },
  value: {
    type: String,
    "default": ""
  },
  defaultValue: {
    type: String,
    "default": ""
  },
  onBlur: Function,
  onChange: Function,
  onClose: Function,
  onFocus: Function,
  onInput: Function,
  onOpen: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var EPickerCols = /* @__PURE__ */ function(EPickerCols2) {
  EPickerCols2["hour"] = "hour";
  EPickerCols2["minute"] = "minute";
  EPickerCols2["second"] = "second";
  EPickerCols2["meridiem"] = "meridiem";
  return EPickerCols2;
}(EPickerCols || {});
var AM = "AM";
var PM = "PM";
var MERIDIEM_LIST = [AM, PM];
var amFormat = /^(a|A)\s+?[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?$/;
var pmFormat = /^[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?(\s+(a|A))?$/;
var TIME_PICKER_EMPTY = [void 0, void 0];
var KeyboardDirection = /* @__PURE__ */ function(KeyboardDirection2) {
  KeyboardDirection2[KeyboardDirection2["left"] = 37] = "left";
  KeyboardDirection2[KeyboardDirection2["up"] = 38] = "up";
  KeyboardDirection2[KeyboardDirection2["right"] = 39] = "right";
  KeyboardDirection2[KeyboardDirection2["down"] = 40] = "down";
  return KeyboardDirection2;
}(KeyboardDirection || {});
var EMPTY_VALUE = -1;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1d(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1c(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1d(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var BooleanType = {
  type: Boolean,
  "default": true,
  validator: function validator63(v) {
    return typeof v === "boolean";
  }
};
var panelProps = function panelProps2() {
  return {
    disabled: _objectSpread$1c(_objectSpread$1c({}, BooleanType), {
      "default": false
    }),
    isFocus: _objectSpread$1c(_objectSpread$1c({}, BooleanType), {
      "default": false
    }),
    value: {
      type: Array,
      "default": function _default65() {
        return [dayjs()];
      }
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    steps: _objectSpread$1c({
      type: Array
    }, {
      "default": [1, 1, 1]
    }),
    isShowPanel: _objectSpread$1c(_objectSpread$1c({}, BooleanType), {
      "default": false
    }),
    hideDisabledTime: _objectSpread$1c({}, props$y.hideDisabledTime),
    disableTime: _objectSpread$1c({}, props$y.disableTime),
    isFooterDisplay: _objectSpread$1c({}, BooleanType)
  };
};
var panelColProps = function panelColProps2() {
  return {
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    cols: {
      type: Array,
      "default": function _default65() {
        return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
      }
    },
    value: _objectSpread$1c({
      type: Object
    }, {
      "default": function _default65() {
        return dayjs();
      }
    }),
    range: {
      type: Array,
      "default": function _default65() {
        return [];
      }
    },
    steps: _objectSpread$1c({
      type: Array
    }, {
      "default": [1, 1, 1]
    }),
    hideDisabledTime: _objectSpread$1c({}, props$y.hideDisabledTime),
    disableTime: _objectSpread$1c({}, props$y.disableTime),
    localeMeridiems: {
      type: Array
    }
  };
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var customParseFormat$1 = { exports: {} };
(function(module, exports) {
  !function(e, t) {
    module.exports = t();
  }(commonjsGlobal, function() {
    var e = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    }, t = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n = /\d\d/, r = /\d\d?/, i = /\d*[^\s\d-_:/()]+/, o = {}, s = function s2(e2) {
      return (e2 = +e2) + (e2 > 68 ? 1900 : 2e3);
    };
    var a = function a2(e2) {
      return function(t2) {
        this[e2] = +t2;
      };
    }, f = [/[+-]\d\d:?(\d\d)?|Z/, function(e2) {
      (this.zone || (this.zone = {})).offset = function(e3) {
        if (!e3)
          return 0;
        if (e3 === "Z")
          return 0;
        var t2 = e3.match(/([+-]|\d\d)/g), n2 = 60 * t2[1] + (+t2[2] || 0);
        return n2 === 0 ? 0 : t2[0] === "+" ? -n2 : n2;
      }(e2);
    }], h2 = function h3(e2) {
      var t2 = o[e2];
      return t2 && (t2.indexOf ? t2 : t2.s.concat(t2.f));
    }, u = function u2(e2, t2) {
      var n2, r2 = o.meridiem;
      if (r2) {
        for (var i2 = 1; i2 <= 24; i2 += 1) {
          if (e2.indexOf(r2(i2, 0, t2)) > -1) {
            n2 = i2 > 12;
            break;
          }
        }
      } else
        n2 = e2 === (t2 ? "pm" : "PM");
      return n2;
    }, d = {
      A: [i, function(e2) {
        this.afternoon = u(e2, false);
      }],
      a: [i, function(e2) {
        this.afternoon = u(e2, true);
      }],
      S: [/\d/, function(e2) {
        this.milliseconds = 100 * +e2;
      }],
      SS: [n, function(e2) {
        this.milliseconds = 10 * +e2;
      }],
      SSS: [/\d{3}/, function(e2) {
        this.milliseconds = +e2;
      }],
      s: [r, a("seconds")],
      ss: [r, a("seconds")],
      m: [r, a("minutes")],
      mm: [r, a("minutes")],
      H: [r, a("hours")],
      h: [r, a("hours")],
      HH: [r, a("hours")],
      hh: [r, a("hours")],
      D: [r, a("day")],
      DD: [n, a("day")],
      Do: [i, function(e2) {
        var t2 = o.ordinal, n2 = e2.match(/\d+/);
        if (this.day = n2[0], t2)
          for (var r2 = 1; r2 <= 31; r2 += 1) {
            t2(r2).replace(/\[|\]/g, "") === e2 && (this.day = r2);
          }
      }],
      M: [r, a("month")],
      MM: [n, a("month")],
      MMM: [i, function(e2) {
        var t2 = h2("months"), n2 = (h2("monthsShort") || t2.map(function(e3) {
          return e3.slice(0, 3);
        })).indexOf(e2) + 1;
        if (n2 < 1)
          throw new Error();
        this.month = n2 % 12 || n2;
      }],
      MMMM: [i, function(e2) {
        var t2 = h2("months").indexOf(e2) + 1;
        if (t2 < 1)
          throw new Error();
        this.month = t2 % 12 || t2;
      }],
      Y: [/[+-]?\d+/, a("year")],
      YY: [n, function(e2) {
        this.year = s(e2);
      }],
      YYYY: [/\d{4}/, a("year")],
      Z: f,
      ZZ: f
    };
    function c(n2) {
      var r2, i2;
      r2 = n2, i2 = o && o.formats;
      for (var s2 = (n2 = r2.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t2, n3, r3) {
        var o2 = r3 && r3.toUpperCase();
        return n3 || i2[r3] || e[r3] || i2[o2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t3, n4) {
          return t3 || n4.slice(1);
        });
      })).match(t), a2 = s2.length, f2 = 0; f2 < a2; f2 += 1) {
        var h3 = s2[f2], u2 = d[h3], c2 = u2 && u2[0], l = u2 && u2[1];
        s2[f2] = l ? {
          regex: c2,
          parser: l
        } : h3.replace(/^\[|\]$/g, "");
      }
      return function(e2) {
        for (var t2 = {}, n3 = 0, r3 = 0; n3 < a2; n3 += 1) {
          var i3 = s2[n3];
          if (typeof i3 == "string")
            r3 += i3.length;
          else {
            var o2 = i3.regex, f3 = i3.parser, h4 = e2.slice(r3), u3 = o2.exec(h4)[0];
            f3.call(t2, u3), e2 = e2.replace(u3, "");
          }
        }
        return function(e3) {
          var t3 = e3.afternoon;
          if (t3 !== void 0) {
            var n4 = e3.hours;
            t3 ? n4 < 12 && (e3.hours += 12) : n4 === 12 && (e3.hours = 0), delete e3.afternoon;
          }
        }(t2), t2;
      };
    }
    return function(e2, t2, n2) {
      n2.p.customParseFormat = true, e2 && e2.parseTwoDigitYear && (s = e2.parseTwoDigitYear);
      var r2 = t2.prototype, i2 = r2.parse;
      r2.parse = function(e3) {
        var t3 = e3.date, r3 = e3.utc, s2 = e3.args;
        this.$u = r3;
        var a2 = s2[1];
        if (typeof a2 == "string") {
          var f2 = s2[2] === true, h3 = s2[3] === true, u2 = f2 || h3, d2 = s2[2];
          h3 && (d2 = s2[2]), o = this.$locale(), !f2 && d2 && (o = n2.Ls[d2]), this.$d = function(e4, t4, n3) {
            try {
              if (["x", "X"].indexOf(t4) > -1)
                return new Date((t4 === "X" ? 1e3 : 1) * e4);
              var r4 = c(t4)(e4), i3 = r4.year, o2 = r4.month, s3 = r4.day, a3 = r4.hours, f3 = r4.minutes, h4 = r4.seconds, u3 = r4.milliseconds, d3 = r4.zone, l2 = new Date(), m2 = s3 || (i3 || o2 ? 1 : l2.getDate()), M2 = i3 || l2.getFullYear(), Y = 0;
              i3 && !o2 || (Y = o2 > 0 ? o2 - 1 : l2.getMonth());
              var p2 = a3 || 0, v = f3 || 0, D = h4 || 0, g = u3 || 0;
              return d3 ? new Date(Date.UTC(M2, Y, m2, p2, v, D, g + 60 * d3.offset * 1e3)) : n3 ? new Date(Date.UTC(M2, Y, m2, p2, v, D, g)) : new Date(M2, Y, m2, p2, v, D, g);
            } catch (e5) {
              return new Date("");
            }
          }(t3, a2, r3), this.init(), d2 && d2 !== true && (this.$L = this.locale(d2).$L), u2 && t3 != this.format(a2) && (this.$d = new Date("")), o = {};
        } else if (a2 instanceof Array)
          for (var l = a2.length, m = 1; m <= l; m += 1) {
            s2[1] = a2[m - 1];
            var M = n2.apply(this, s2);
            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }
            m === l && (this.$d = new Date(""));
          }
        else
          i2.call(this, e3);
      };
    };
  });
})(customParseFormat$1, customParseFormat$1.exports);
var customParseFormat = customParseFormat$1.exports;
dayjs.extend(customParseFormat);
var PanelCol = defineComponent({
  name: "TTimePickerPanelCol",
  props: panelColProps(),
  emits: ["time-pick"],
  setup: function setup59() {
    var COMPONENT_NAME2 = usePrefixClass("time-picker");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      STATUS
    };
  },
  data: function data17() {
    return {
      splitValue: /* @__PURE__ */ Object.create(null),
      timeArr: [EPickerCols.hour, EPickerCols.minute, EPickerCols.second]
    };
  },
  computed: {
    valStr: function valStr() {
      return dayjs(this.value, this.format).format(this.format);
    },
    isPm: function isPm() {
      return dayjs(this.valStr, this.format).hour() >= 12;
    },
    currentTimes: function currentTimes() {
      return [Number(this.value.get("hour")), Number(this.value.get("minute")), Number(this.value.get("second"))];
    },
    timeItemMargin: function timeItemMargin() {
      var _this$$el, _this$$el$querySelect;
      var maskDom = (_this$$el = this.$el) === null || _this$$el === void 0 ? void 0 : (_this$$el$querySelect = _this$$el.querySelector) === null || _this$$el$querySelect === void 0 ? void 0 : _this$$el$querySelect.call(_this$$el, ".".concat(this.COMPONENT_NAME, "__panel-body-active-mask > div"));
      return maskDom && parseInt(getComputedStyle(maskDom).margin, 10);
    }
  },
  methods: {
    getTimeItemHeight: function getTimeItemHeight(col) {
      var cols2 = this.$refs["".concat(col, "_scroller")];
      return cols2.querySelector("li").offsetHeight;
    },
    generateColTime: function generateColTime(col) {
      var res;
      var count;
      if (this.timeArr.includes(col)) {
        var colIdx = this.timeArr.indexOf(col);
        if (col === EPickerCols.hour) {
          count = /[h]{1}/.test(this.format) ? 11 : 23;
        } else {
          count = 59;
        }
        res = this.generateTimeList(count, Number(this.steps[colIdx]));
      } else {
        res = this.localeMeridiems;
      }
      return res;
    },
    generateTimeList: function generateTimeList(num, step) {
      var res = [];
      var count = 0;
      while (count <= num) {
        if (!/[h]{1}/.test(this.format) && count < 10) {
          res.push("0".concat(count));
        } else {
          res.push(count);
        }
        count += step;
      }
      return res;
    },
    disableFilter: function disableFilter(preIdx, col) {
      var _this = this;
      var filteredIdx = preIdx;
      if (this.hideDisabledTime && this.disableTime) {
        var timeList = this.generateColTime(col);
        var index2 = this.timeArr.indexOf(col);
        filteredIdx = timeList.filter(function(t) {
          var params = _this.currentTimes;
          params[index2] = Number(t);
          return _this.disableTime && !_this.disableTime.apply(_this, params);
        }).indexOf(preIdx);
      }
      return filteredIdx;
    },
    calculateTimeIdx: function calculateTimeIdx(time2, step, type) {
      var timeIdx = time2;
      timeIdx = this.disableFilter(Number(timeIdx), type);
      return Math.floor(Number(timeIdx) / Number(step));
    },
    getScrollDistance: function getScrollDistance(col, time2) {
      var timeIndex;
      if (this.timeArr.includes(col)) {
        var colIdx = this.timeArr.indexOf(col);
        timeIndex = this.calculateTimeIdx(time2, this.steps[colIdx], col);
        if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
          timeIndex %= 12;
        }
      } else {
        timeIndex = this.localeMeridiems.indexOf(time2.toUpperCase());
      }
      var timeItemTotalHeight = this.getTimeItemHeight(col) + this.timeItemMargin;
      var distance = timeIndex * timeItemTotalHeight + timeItemTotalHeight / 2;
      return distance;
    },
    scrollToTime: function scrollToTime(col, time2) {
      var behavior = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "auto";
      var distance = this.getScrollDistance(col, time2);
      var scroller = this.$refs["".concat(col, "_scroller")];
      if (!distance || !scroller)
        return;
      if (scroller.scrollTop === distance)
        return;
      scroller.scrollTo({
        top: distance,
        behavior
      });
    },
    updateTimeScrollPos: function updateTimeScrollPos() {
      var _this2 = this;
      var hour = EPickerCols.hour, minute = EPickerCols.minute, second = EPickerCols.second;
      var isNormalScroll = this.steps.filter(function(step) {
        return step !== 1;
      }).length < 1 || Number(this.splitValue[hour]) !== Number(this.steps[0]) - 1 || Number(this.splitValue[minute]) !== Number(this.steps[1]) - 1 || Number(this.splitValue[second]) !== Number(this.steps[2]) - 1;
      this.cols.forEach(function(col) {
        isNormalScroll ? _this2.scrollToTime(col, _this2.splitValue[col]) : _this2.scrollToTime(col, 0);
      });
    },
    generateColRows: function generateColRows(col) {
      var _this3 = this;
      return this.generateColTime(col).map(function(el) {
        var _ref;
        if (!_this3.timeItemCanUsed(col, el) && _this3.hideDisabledTime)
          return null;
        var isCurrent2 = _this3.isCurrent(col, el);
        if (isCurrent2) {
          _this3.splitValue[col] = el;
        }
        var classNames2 = ["".concat(_this3.COMPONENT_NAME, "__panel-body-scroll-item"), (_ref = {}, _defineProperty$3(_ref, _this3.STATUS.disabled, !_this3.timeItemCanUsed(col, el)), _defineProperty$3(_ref, _this3.STATUS.current, isCurrent2), _ref)];
        return createVNode("li", {
          "class": classNames2,
          "onClick": function onClick2(e) {
            return _this3.handleTimeItemClick(e, col, el);
          }
        }, [el]);
      });
    },
    handleTimeItemClick: function handleTimeItemClick(_e, col, time2) {
      var canUse = this.timeItemCanUsed(col, time2);
      if (canUse) {
        this.scrollToTime(col, time2, "smooth");
        this.$emit("time-pick", col, time2);
      }
    },
    isCurrent: function isCurrent(col, colItem) {
      var colVal;
      switch (col) {
        case EPickerCols.meridiem:
          return this.isPm === (colItem === this.localeMeridiems[1]);
        case EPickerCols.hour:
        case EPickerCols.minute:
        case EPickerCols.second:
          colVal = this.value.get(col);
          if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
            colVal %= 12;
          }
          return colVal === Number(colItem);
      }
    },
    timeItemCanUsed: function timeItemCanUsed(col, time2) {
      if (this.timeArr.includes(col)) {
        var index2 = this.timeArr.indexOf(col);
        var params = this.currentTimes;
        params[index2] = Number(time2);
        return !(this.disableTime && this.disableTime.apply(this, params));
      }
      return true;
    },
    renderScrollers: function renderScrollers() {
      var _this4 = this;
      return this.cols.map(function(col) {
        return _this4.renderScroller(col);
      });
    },
    renderScroller: function renderScroller(col) {
      var _this5 = this;
      return createVNode("ul", {
        "class": "".concat(this.COMPONENT_NAME, "__panel-body-scroll"),
        "ref": "".concat(col, "_scroller"),
        "onScroll": debounce_1(function() {
          return _this5.handleScroll(col);
        }, 50)
      }, [this.generateColRows(col)]);
    },
    closestLookup: function closestLookup(availableArr, calcVal, step) {
      if (step <= 1)
        return calcVal;
      if (calcVal < step)
        return 0;
      return availableArr.sort(function(a, b) {
        return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
      })[0];
    },
    handleScroll: function handleScroll2(col) {
      var _this6 = this;
      var scrollVal;
      var cols2 = this.$refs["".concat(col, "_scroller")];
      var availableList = this.generateColTime(col);
      var scrollTop = cols2.scrollTop;
      var itemHeight = this.getTimeItemHeight(col);
      if (this.timeArr.includes(col)) {
        var colIdx = this.timeArr.indexOf(col);
        var max4 = 59;
        if (col === EPickerCols.hour) {
          max4 = /[h]{1}/.test(this.format) ? 11 : 23;
        }
        scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin) * Number(this.steps[colIdx]))), max4);
        scrollVal = this.closestLookup(availableList, scrollVal, Number(this.steps[colIdx]));
        if (this.disableTime && this.hideDisabledTime) {
          scrollVal = availableList.filter(function(t) {
            var _this6$disableTime;
            var params = _this6.currentTimes;
            params[colIdx] = Number(t);
            return !((_this6$disableTime = _this6.disableTime) !== null && _this6$disableTime !== void 0 && _this6$disableTime.apply(_this6, params));
          })[scrollVal];
        }
      } else {
        scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin))), 1);
        scrollVal = this.localeMeridiems[scrollVal];
      }
      var distance = this.getScrollDistance(col, scrollVal);
      if (distance !== scrollTop) {
        var scroller = this.$refs["".concat(col, "_scroller")];
        scroller.scrollTo({
          top: distance,
          behavior: "smooth"
        });
      }
      this.timeItemCanUsed(col, scrollVal) && this.$emit("time-pick", col, scrollVal);
    },
    renderActiveMask: function renderActiveMask() {
      return createVNode("div", {
        "class": "".concat(this.COMPONENT_NAME, "__panel-body-active-mask")
      }, [this.cols.map(function(_col, idx) {
        return createVNode("div", {
          "key": idx
        }, null);
      })]);
    }
  },
  render: function render51() {
    return createVNode("div", {
      "class": "".concat(this.COMPONENT_NAME, "__panel-body")
    }, [this.renderActiveMask(), this.renderScrollers()]);
  }
});
var index$u = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$i(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
dayjs.extend(customParseFormat);
var PickerPanel = defineComponent({
  name: "TimePickerPanel",
  components: {
    PanelCol,
    TButton
  },
  props: panelProps(),
  emits: ["sure", "now-action", "time-pick"],
  setup: function setup60() {
    var COMPONENT_NAME2 = usePrefixClass("time-picker");
    var COMPONENT_NAME_PANEL = usePrefixClass("time-picker__panel");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig("timePicker"), t = _useConfig.t, global2 = _useConfig.global;
    return {
      t,
      global: global2,
      COMPONENT_NAME_PANEL,
      COMPONENT_NAME: COMPONENT_NAME2,
      STATUS
    };
  },
  data: function data18() {
    return {
      panel: null,
      isSetup: false
    };
  },
  computed: {
    sectionComponentName: function sectionComponentName() {
      return "".concat(this.COMPONENT_NAME_PANEL, "-section");
    },
    classNames: function classNames() {
      return this.rangePicker ? [this.COMPONENT_NAME_PANEL, this.sectionComponentName] : [this.COMPONENT_NAME_PANEL];
    },
    colValues: function colValues() {
      return this.value.map(function(el) {
        return el || dayjs();
      });
    },
    rangePicker: function rangePicker() {
      return this.colValues.length > 1;
    },
    formatField: function formatField() {
      var match = this.format.match(/(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?(\s+a|\s+A)?/);
      var _match = _slicedToArray(match, 6), startAChart = _match[1], hour = _match[2], minute = _match[3], second = _match[4], endAChart = _match[5];
      return {
        startAChart,
        hour,
        minute,
        second,
        endAChart
      };
    },
    cols: function cols() {
      if (!this.formatField) {
        return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
      }
      var _this$formatField = this.formatField, startAChart = _this$formatField.startAChart, hour = _this$formatField.hour, minute = _this$formatField.minute, second = _this$formatField.second, endAChart = _this$formatField.endAChart;
      var res = [];
      startAChart && res.push(EPickerCols.meridiem);
      hour && res.push(EPickerCols.hour);
      minute && res.push(EPickerCols.minute);
      second && res.push(EPickerCols.second);
      endAChart && res.push(EPickerCols.meridiem);
      return res;
    },
    localeMeridiems: function localeMeridiems() {
      return [this.global.anteMeridiem, this.global.postMeridiem];
    }
  },
  watch: {
    isShowPanel: {
      handler: function handler10(val) {
        if (val) {
          this.panelColUpdate();
        }
      },
      immediate: true
    }
  },
  methods: {
    panelColUpdate: function panelColUpdate() {
      var _this = this;
      nextTick(function() {
        var panelCol0 = _this.$refs.panelCol_0;
        var panelCol1 = _this.$refs.panelCol_1;
        panelCol0 && panelCol0.updateTimeScrollPos();
        panelCol1 && panelCol1.updateTimeScrollPos();
      });
    },
    scrollToTime: function scrollToTime2(colIndex, col, time2, behavior) {
      var scroller = this.$refs["panelCol_".concat(colIndex)];
      scroller && scroller.scrollToTime(col, time2, behavior);
    },
    renderFooter: function renderFooter() {
      var _slot, _slot2;
      var confirmAction = this.confirmBtnClick.bind(this);
      return createVNode("div", {
        "class": "".concat(this.sectionComponentName, "-footer")
      }, [createVNode(resolveComponent("t-button"), {
        "theme": "primary",
        "variant": "base",
        "onClick": confirmAction
      }, _isSlot$i(_slot = this.t(this.global.confirm)) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      }), this.rangePicker || createVNode(resolveComponent("t-button"), {
        "theme": "primary",
        "variant": "text",
        "onClick": this.nowAction
      }, _isSlot$i(_slot2 = this.t(this.global.now)) ? _slot2 : {
        "default": function _default65() {
          return [_slot2];
        }
      })]);
    },
    renderBody: function renderBody() {
      return createVNode("div", {
        "class": "".concat(this.sectionComponentName, "-body")
      }, [this.renderSinglePicker(0), this.rangePicker && this.renderSinglePicker(1)]);
    },
    renderSinglePicker: function renderSinglePicker(index2) {
      var _this2 = this;
      var val = this.colValues[index2];
      var ref2 = "panelCol_".concat(index2);
      return createVNode(resolveComponent("panel-col"), {
        "ref": ref2,
        "value": val,
        "cols": this.cols,
        "steps": this.steps,
        "hideDisabledTime": this.hideDisabledTime,
        "disableTime": this.disableTime,
        "format": this.format,
        "onTimePick": function onTimePick(col, time2) {
          return _this2.handleTimePick(col, time2, index2);
        },
        "localeMeridiems": this.localeMeridiems
      }, null);
    },
    confirmBtnClick: function confirmBtnClick(e) {
      this.$emit("sure", e);
    },
    nowAction: function nowAction() {
      this.$emit("now-action");
      this.panelColUpdate();
    },
    handleTimePick: function handleTimePick(col, time2, index2) {
      this.$emit("time-pick", col, time2, index2, this.colValues[index2]);
    }
  },
  render: function render52() {
    var isFooterDisplay = this.isFooterDisplay, classNames2 = this.classNames;
    return createVNode("div", {
      "class": classNames2
    }, [this.renderBody(), isFooterDisplay ? this.renderFooter() : null]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var isBetween$1 = { exports: {} };
(function(module, exports) {
  !function(e, i) {
    module.exports = i();
  }(commonjsGlobal, function() {
    return function(e, i, t) {
      i.prototype.isBetween = function(e2, i2, s, f) {
        var n = t(e2), o = t(i2), r = (f = f || "()")[0] === "(", u = f[1] === ")";
        return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
      };
    };
  });
})(isBetween$1, isBetween$1.exports);
var isBetween = isBetween$1.exports;
function ownKeys$1c(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1b(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1c(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
dayjs.extend(isBetween);
var _DatePicker = defineComponent({
  name: "TDatePicker",
  components: {
    TPopup: Popup,
    TButton: Button,
    TInput: Input,
    TCalendarPresets,
    TDate,
    TDateRange,
    TTimePickerPanel: PickerPanel
  },
  props: props$z,
  emits: ["input", "open", "close", "focus", "click", "change", "pick"],
  setup: function setup61() {
    var disabled2 = useFormDisabled();
    var classPrefix2 = usePrefixClass();
    var COMPONENT_NAME2 = usePrefixClass("date-picker");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig("datePicker"), global2 = _useConfig.global;
    return {
      global: global2,
      classPrefix: classPrefix2,
      COMPONENT_NAME: COMPONENT_NAME2,
      SIZE,
      STATUS,
      disabled: disabled2
    };
  },
  data: function data19() {
    return {
      tempValue: "",
      monthDate: new Date(),
      start: new Date(),
      end: new Date(),
      selectedDates: [],
      inSelection: false,
      inline: false,
      dateFormat: "",
      multiSeparator: ",",
      inlineView: false,
      showTime: false,
      isOpen: false,
      startTimeValue: dayjs(),
      endTimeValue: dayjs()
    };
  },
  computed: {
    startText: function startText() {
      return this.formatDate(this.start);
    },
    endText: function endText() {
      return this.formatDate(this.end);
    },
    formattedValue: {
      get: function get() {
        var _this = this;
        var tempValue = this.tempValue, range = this.range, mode3 = this.mode, isOpen = this.isOpen, startText2 = this.startText, endText2 = this.endText, global2 = this.global, outValue = this.value;
        var selectedDates = this.getDates(outValue);
        var selectedFmtDates = selectedDates.map(function(d) {
          return _this.formatDate(d);
        });
        if (tempValue) {
          return tempValue;
        }
        var strMode = range ? "range" : mode3;
        var value6 = "";
        switch (strMode) {
          case "time":
          case "date":
          case "month":
          case "year":
            value6 = selectedFmtDates.join("");
            break;
          case "range":
            if (isOpen) {
              value6 = [startText2, endText2].join(global2.rangeSeparator);
            } else if (selectedFmtDates.length > 1) {
              value6 = [selectedFmtDates[0], selectedFmtDates[1]].join(global2.rangeSeparator);
            }
            break;
        }
        return value6;
      },
      set: function set2(value6) {
        var min4 = this.min, dateFormat = this.dateFormat;
        if (value6) {
          if (String(value6).length >= String(this.formatDate(min4 || new Date())).length && dayjs(value6, dateFormat)) {
            this.tempValue = "";
            this.setDate(value6, true);
          } else {
            this.tempValue = value6;
          }
        }
      }
    },
    rangeText: {
      get: function get2() {
        var range = this.startText;
        if (this.range) {
          range += " ".concat(this.global.rangeSeparator, " ").concat(this.endText);
        }
        return range;
      },
      set: function set3(value6) {
        if (this.value) {
          this.setDate(value6, false);
        }
      }
    },
    min: function min2() {
      var disableDate = this.disableDate || {};
      var before = disableDate.before;
      return before ? new Date(before) : null;
    },
    max: function max2() {
      var disableDate = this.disableDate || {};
      var after = disableDate.after;
      return after ? new Date(after) : null;
    },
    classes: function classes4() {
      var _ref;
      return [this.COMPONENT_NAME, this.SIZE[this.size] || "", (_ref = {}, _defineProperty$3(_ref, "".concat(this.COMPONENT_NAME, "--month-picker"), this.mode === "year" || this.mode === "month"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-inline"), this.inline || this.inlineView), _ref)];
    },
    pickerStyles: function pickerStyles() {
      var _ref2;
      return _ref2 = {}, _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "__container"), true), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--open"), this.isOpen || this.inlineView), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--calendar-inline-view"), this.inlineView), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--range"), this.range), _ref2;
    }
  },
  mounted: function mounted11() {
    this.attachDatePicker();
  },
  methods: {
    handleTimePick: function handleTimePick2(col, time2, index2) {
      if (!this.range || index2 === 0) {
        var start3 = new Date(this.start);
        start3["set".concat(firstUpperCase(col), "s")](time2);
        this.start = start3;
        this.startTimeValue = dayjs(start3);
        this.dateClick(new Date(start3));
      } else {
        var end3 = new Date(this.end);
        end3["set".concat(firstUpperCase(col), "s")](time2);
        this.end = end3;
        this.endTimeValue = dayjs(end3);
        this.dateClick(new Date(end3));
      }
    },
    attachDatePicker: function attachDatePicker() {
      var startDate = new Date();
      var endDate = new Date();
      this.dateFormat = this.format;
      var start3 = new Date(startDate);
      var end3 = new Date(endDate);
      if (!this.range) {
        end3 = new Date(startDate);
      }
      this.start = start3;
      this.end = end3;
      var val = this.value || this.defaultValue || "";
      this.setDate(val, false);
      if (this.inlineView) {
        this.open();
      }
    },
    onNativeInput: function onNativeInput(event) {
      var val = event.target.value;
      this.formattedValue = val;
      var d1 = this.parseDate(val);
      if (d1 instanceof Date) {
        var d2 = this.formatDate(d1);
        emitEvent(this, "input", d2);
      }
    },
    onNativeFocus: function onNativeFocus(event) {
      if (!this.isOpen) {
        this.open();
      }
      emitEvent(this, "focus", event);
    },
    onClick: function onClick(event) {
      if (!this.isOpen) {
        this.open();
      }
      emitEvent(this, "click", event);
    },
    normalizeDateTime: function normalizeDateTime(value6, oldValue) {
      var newDate = dayjs(value6);
      var oldDate = dayjs(oldValue);
      if (this.enableTimePicker) {
        newDate.hour(oldDate.hour());
        newDate.minute(oldDate.minute());
        newDate.second(oldDate.second());
        newDate.millisecond(oldDate.millisecond());
      }
      return newDate.toDate();
    },
    dateClick: function dateClick(value6) {
      var mode3 = this.range ? "range" : this.mode;
      var start3 = this.start;
      var end3 = this.end;
      if (this.showTime) {
        mode3 = "time";
      }
      switch (mode3) {
        case "time":
          this.selectedDates = this.range ? [this.start, this.end] : [value6];
          this.clickedApply(false);
          break;
        case "year":
        case "month":
        case "date":
          this.start = this.normalizeDateTime(value6, start3);
          this.selectedDates = [this.start];
          this.clickedApply(!this.enableTimePicker);
          break;
        case "range":
          if (this.inSelection) {
            this.inSelection = false;
            this.start = this.normalizeDateTime(value6[0], end3);
            this.end = this.normalizeDateTime(value6[1], end3);
            if (this.end < this.start) {
              this.inSelection = true;
              this.start = this.normalizeDateTime(value6[0], start3);
            }
          } else {
            this.start = this.normalizeDateTime(value6[0], start3);
            this.end = this.normalizeDateTime(value6[1], end3);
            this.inSelection = true;
          }
          this.clickedApply(!this.enableTimePicker);
          break;
      }
    },
    toggle: function toggle() {
      if (!this.disabled) {
        if (this.isOpen) {
          this.close();
        } else {
          this.open();
        }
      }
    },
    open: function open() {
      var _this2 = this;
      if (!this.disabled) {
        var formattedValue = this.formattedValue;
        if (formattedValue) {
          this.setDate(formattedValue);
        }
        this.tempValue = "";
        this.isOpen = true;
        nextTick().then(function() {
          return emitEvent(_this2, "open", _this2.selectedDates);
        });
      }
    },
    close: function close3() {
      if (!this.disabled) {
        this.tempValue = "";
        this.isOpen = false;
        this.showTime = false;
        emitEvent(this, "close", this.selectedDates);
      }
    },
    clickedApply: function clickedApply() {
      var _this3 = this;
      var closePicker = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (this.range) {
        this.selectedDates = [this.start, this.end];
      }
      var selectedDates = this.selectedDates.map(function(d) {
        var fd = _this3.formatDate(d);
        return fd;
      });
      this.submitInput(selectedDates, true);
      if (closePicker) {
        this.close();
      }
    },
    toggleTime: function toggleTime() {
      this.startTimeValue = dayjs(this.start);
      this.endTimeValue = dayjs(this.end);
      this.showTime = !this.showTime;
    },
    clickRange: function clickRange(value6) {
      if (Array.isArray(value6)) {
        var _value = _slicedToArray(value6, 2), start3 = _value[0], end3 = _value[1];
        this.start = dayjs(start3).toDate();
        this.end = dayjs(end3 || start3).toDate();
        this.monthDate = dayjs(start3).toDate();
      } else {
        this.start = dayjs(value6).toDate();
        this.end = dayjs(value6).toDate();
        this.monthDate = dayjs(value6).toDate();
      }
      this.clickedApply();
    },
    clear: function clear2() {
      var triggerChange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      this.close();
      if (!this.disabled) {
        var selectedDates = [];
        this.selectedDates = selectedDates;
        this.formattedValue = "";
        this.start = new Date();
        this.end = new Date();
        this.submitInput(selectedDates, triggerChange);
      }
    },
    submitInput: function submitInput(selectedDates) {
      var triggerChange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var multiSeparator = this.multiSeparator;
      var mode3 = this.range ? "range" : this.mode;
      switch (mode3) {
        case "date":
        case "month":
        case "year":
          emitEvent(this, "input", selectedDates.join(multiSeparator));
          if (triggerChange) {
            emitEvent(this, "change", selectedDates.join(multiSeparator));
          }
          break;
        case "range":
          emitEvent(this, "input", selectedDates);
          if (triggerChange) {
            emitEvent(this, "change", selectedDates);
          }
          break;
      }
    },
    parseDate: function parseDate() {
      var value6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      if (value6 instanceof Date) {
        return new Date(value6);
      }
      if (format) {
        var oDate = dayjs(value6, format);
        if (oDate.isValid()) {
          return new Date(oDate.toDate());
        }
        return false;
      }
      var d2 = dayjs(value6);
      if (d2.isValid()) {
        return new Date(d2.toDate());
      }
      return false;
    },
    isEnabled: function isEnabled(value6) {
      var min4 = this.min, max4 = this.max, disableDate = this.disableDate, dateFormat = this.dateFormat;
      if (!disableDate) {
        return true;
      }
      if (typeof disableDate === "function") {
        return !disableDate(value6);
      }
      if (Array.isArray(disableDate)) {
        var isIncludes = false;
        var formatedDisabledDate = disableDate.map(function(item) {
          return dayjs(item, dateFormat);
        });
        formatedDisabledDate.forEach(function(item) {
          if (item.isSame(dayjs(value6))) {
            isIncludes = true;
          }
        });
        return !isIncludes;
      }
      if (max4 && min4) {
        var compareMin = dayjs(new Date(min4)).startOf("day");
        var compareMax = dayjs(new Date(max4)).startOf("day");
        return dayjs(value6).isBetween(compareMin, compareMax, null, "[]");
      }
      var from = disableDate.from, to = disableDate.to;
      if (from && to) {
        var _compareMin = dayjs(new Date(from)).startOf("day");
        var _compareMax = dayjs(new Date(to)).startOf("day");
        return !dayjs(value6).isBetween(_compareMin, _compareMax, null, "[]");
      }
      return true;
    },
    setDate: function setDate() {
      var inputDate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var triggerChange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
        return this.clear(triggerChange);
      }
      var selectedDates = this.getDates(inputDate);
      this.selectedDates = selectedDates;
      if (selectedDates.length > 0) {
        var _selectedDates = _slicedToArray(selectedDates, 2), start3 = _selectedDates[0], end3 = _selectedDates[1];
        this.start = start3;
        this.end = end3 || start3;
      }
    },
    getDates: function getDates() {
      var _this4 = this;
      var inputDate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
        return [];
      }
      var format = this.dateFormat || "";
      var dates = [];
      if (inputDate instanceof Array) {
        dates = inputDate.map(function(d) {
          var d1 = _this4.parseDate(d, format);
          return d1;
        });
      } else if (inputDate instanceof Date || typeof inputDate === "number") {
        dates = [this.parseDate(inputDate, format)];
      } else if (typeof inputDate === "string") {
        var mode3 = this.range ? "range" : this.mode;
        switch (mode3) {
          case "date":
          case "month":
          case "year":
            dates = [this.parseDate(inputDate, format)];
            break;
          case "range":
            dates = inputDate.split(this.global.rangeSeparator || "-").map(function(d) {
              var d1 = _this4.parseDate(d, format);
              return d1;
            });
            break;
        }
      }
      var selectedDates = dates.filter(function(d) {
        var isEnable = d instanceof Date && _this4.isEnabled(d);
        return isEnable;
      });
      selectedDates.sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
      return selectedDates;
    },
    formatDate: function formatDate(date) {
      var format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      var dateFormat = format || this.dateFormat || this.global.format;
      var arrTime = ["H", "h", "m", "s"];
      var hasTime = arrTime.some(function(f) {
        return String(dateFormat).includes(f);
      });
      if (this.enableTimePicker && !hasTime) {
        dateFormat = [dateFormat, "HH:mm:ss"].join(" ");
      }
      var d1 = new Date(date);
      return dayjs(d1).format(dateFormat);
    },
    getPlaceholderText: function getPlaceholderText2() {
      var _this$global, _this$global$placehol;
      var placeholder = this.placeholder, mode3 = this.mode;
      var placeholderStr = placeholder || ((_this$global = this.global) === null || _this$global === void 0 ? void 0 : (_this$global$placehol = _this$global.placeholder) === null || _this$global$placehol === void 0 ? void 0 : _this$global$placehol[mode3]);
      if (placeholder && Array.isArray(placeholder)) {
        placeholderStr = placeholder.join(this.global.rangeSeparator);
      }
      return placeholderStr;
    },
    handleTInputFocus: function handleTInputFocus() {
      var _this5 = this;
      nextTick(function() {
        _this5.$refs["native"].blur();
      });
    }
  },
  render: function render53() {
    var _this6 = this;
    var popupProps2 = this.popupProps, disabled2 = this.disabled, clearable = this.clearable, allowInput = this.allowInput, size2 = this.size, inputProps = this.inputProps, enableTimePicker = this.enableTimePicker, mode3 = this.mode, range = this.range, presets = this.presets, firstDayOfWeek = this.firstDayOfWeek;
    var start3 = this.start, end3 = this.end, showTime = this.showTime, startTimeValue = this.startTimeValue, global2 = this.global, isOpen = this.isOpen, endTimeValue = this.endTimeValue;
    var panelProps3 = {
      value: range ? [start3, end3] : start3,
      mode: mode3,
      firstDayOfWeek: firstDayOfWeek === void 0 ? 1 : firstDayOfWeek,
      disableDate: function disableDate(d) {
        return !_this6.isEnabled(d);
      },
      onChange: this.dateClick,
      global: this.global
    };
    var onPick = function onPick2(date, context) {
      emitEvent(_this6, "pick", date, context);
    };
    var panelComponent = range ? createVNode(resolveComponent("t-date-range"), _objectSpread$1b(_objectSpread$1b({}, panelProps3), {}, {
      onPick
    }), null) : createVNode(resolveComponent("t-date"), panelProps3, null);
    var popupContent = function popupContent2() {
      return createVNode("div", {
        "ref": "dropdownPopup",
        "class": _this6.pickerStyles
      }, [enableTimePicker && showTime && createVNode("div", null, [createVNode(PickerPanel, {
        "ref": "timePickerPanel",
        "format": extractTimeFormat(_this6.dateFormat) || "HH:mm:ss",
        "cols": [EPickerCols.hour, EPickerCols.minute, EPickerCols.second],
        "steps": [1, 1, 1],
        "value": !range ? [startTimeValue] : [startTimeValue, endTimeValue],
        "onTimePick": _this6.handleTimePick,
        "isShowPanel": showTime,
        "isFooterDisplay": false
      }, null)]), !showTime && panelComponent, (!!presets || enableTimePicker) && createVNode("div", {
        "class": "".concat(_this6.classPrefix, "-date-picker__footer")
      }, [createVNode(TCalendarPresets, {
        "presets": presets,
        "global": global2,
        "onClick": range ? _this6.clickRange : _this6.dateClick
      }, null), enableTimePicker && createVNode("div", {
        "class": "".concat(_this6.COMPONENT_NAME, "--apply")
      }, [enableTimePicker && createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "onClick": _this6.toggleTime
      }, {
        "default": function _default65() {
          return [showTime ? global2.selectDate : global2.selectTime];
        }
      }), createVNode(Button, {
        "theme": "primary",
        "onClick": function onClick2() {
          return _this6.clickedApply();
        }
      }, {
        "default": function _default65() {
          return [global2.confirm];
        }
      })])])]);
    };
    var inputClassNames = ["".concat(this.classPrefix, "-form-controls"), _defineProperty$3({}, this.STATUS.active, this.isOpen)];
    var prefixIcon = renderTNodeJSX(this, "prefixIcon");
    var suffixIconSlot = renderTNodeJSX(this, "suffixIcon");
    var suffixIcon = function suffixIcon2() {
      if (suffixIconSlot) {
        return suffixIconSlot;
      }
      if (enableTimePicker) {
        return createVNode(time, null, null);
      }
      return createVNode(calendar, null, null);
    };
    return createVNode("div", {
      "class": this.classes
    }, [createVNode(resolveComponent("t-popup"), {
      "ref": "popup",
      "class": "".concat(this.COMPONENT_NAME, "__popup-reference"),
      "trigger": "click",
      "placement": "bottom-left",
      "disabled": disabled2,
      "showArrow": false,
      "visible": isOpen,
      "popupProps": popupProps2,
      "overlayClassName": this.COMPONENT_NAME,
      "content": popupContent,
      "expandAnimation": true,
      "onVisibleChange": function onVisibleChange(visible4, context) {
        if (context.trigger === "document") {
          _this6.toggle();
        }
      }
    }, {
      "default": function _default65() {
        return [createVNode("div", {
          "class": inputClassNames,
          "onClick": _this6.toggle
        }, [createVNode(resolveComponent("t-input"), {
          "ref": "native",
          "modelValue": _this6.formattedValue,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return _this6.formattedValue = $event;
          },
          "disabled": disabled2,
          "clearable": clearable,
          "placeholder": _this6.getPlaceholderText(),
          "allowInput": allowInput ? 1 : 0,
          "size": size2,
          "inputProps": inputProps,
          "onClear": function onClear(context) {
            context.e.stopPropagation();
            _this6.clear(true);
          },
          "focus": _this6.onNativeFocus,
          "input": _this6.onNativeInput,
          "click": _this6.onClick,
          "suffixIcon": suffixIcon,
          "prefixIcon": prefixIcon,
          "onFocus": _this6.handleTInputFocus
        }, null)])];
      }
    })]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var DatePicker = withInstall(mapProps([{
  name: "value",
  event: "change",
  alias: ["modelValue"]
}])(_DatePicker));
var baseGetTag$1 = _baseGetTag, isObjectLike$1 = isObjectLike_1;
var boolTag = "[object Boolean]";
function isBoolean(value6) {
  return value6 === true || value6 === false || isObjectLike$1(value6) && baseGetTag$1(value6) == boolTag;
}
var isBoolean_1 = isBoolean;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$x = {
  colon: Boolean,
  data: {
    type: Object,
    "default": function _default22() {
      return {};
    }
  },
  disabled: {
    type: Boolean,
    "default": void 0
  },
  errorMessage: {
    type: Object
  },
  formControlledComponents: {
    type: Array
  },
  labelAlign: {
    type: String,
    "default": "right",
    validator: function validator64(val) {
      if (!val)
        return true;
      return ["left", "right", "top"].includes(val);
    }
  },
  labelWidth: {
    type: [String, Number],
    "default": "100px"
  },
  layout: {
    type: String,
    "default": "vertical",
    validator: function validator65(val) {
      if (!val)
        return true;
      return ["vertical", "inline"].includes(val);
    }
  },
  preventSubmitDefault: {
    type: Boolean,
    "default": true
  },
  requiredMark: {
    type: Boolean,
    "default": void 0
  },
  resetType: {
    type: String,
    "default": "empty",
    validator: function validator66(val) {
      if (!val)
        return true;
      return ["empty", "initial"].includes(val);
    }
  },
  rules: {
    type: Object
  },
  scrollToFirstError: {
    type: String,
    validator: function validator67(val) {
      if (!val)
        return true;
      return ["smooth", "auto"].includes(val);
    }
  },
  showErrorMessage: {
    type: Boolean,
    "default": true
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator68(val) {
      if (!val)
        return true;
      return ["medium", "large"].includes(val);
    }
  },
  statusIcon: {
    type: [Boolean, Function],
    "default": void 0
  },
  submitWithWarningMessage: Boolean,
  onReset: Function,
  onSubmit: Function,
  onValidate: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var FORM_CONTROL_COMPONENTS = ["TInput", "TInputNumber", "TTextarea", "TCascader", "TSelect", "TOption", "TSwitch", "TCheckbox", "TCheckboxGroup", "TRadio", "TRadioGroup", "TTreeSelect", "TDatePicker", "TTimePicker", "TUpload", "TTransfer", "TSlider"];
var useCLASSNAMES$1 = function useCLASSNAMES() {
  var classPrefix2 = usePrefixClass();
  return computed(function() {
    var form = "".concat(classPrefix2.value, "-form");
    var input = "".concat(classPrefix2.value, "-input");
    var is2 = "".concat(classPrefix2.value, "-is");
    return {
      form,
      label: "".concat(form, "__label"),
      labelTop: "".concat(form, "__label--top"),
      inline: "".concat(form, "-inline"),
      formItem: "".concat(form, "__item"),
      formItemWithHelp: "".concat(form, "__item-with-help"),
      formItemWithExtra: "".concat(form, "__item-with-extra"),
      controls: "".concat(form, "__controls"),
      controlsContent: "".concat(form, "__controls-content"),
      status: "".concat(form, "__status"),
      extra: "".concat(input, "__extra"),
      success: "".concat(is2, "-success"),
      successBorder: "".concat(form, "--success-border"),
      error: "".concat(is2, "-error"),
      warning: "".concat(is2, "-warning")
    };
  });
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1b(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1a(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1b(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Form = defineComponent({
  name: "TForm",
  provide: function provide8() {
    return {
      form: this
    };
  },
  props: _objectSpread$1a({}, props$x),
  emits: ["validate", "submit", "reset", "form-item-destroyed"],
  setup: function setup62(props2) {
    var _toRefs = toRefs(props2), disabled2 = _toRefs.disabled;
    var COMPONENT_NAME2 = usePrefixClass("form");
    provide("formDisabled", {
      disabled: disabled2
    });
    var CLASS_NAMES = useCLASSNAMES$1();
    var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");
    return {
      CLASS_NAMES,
      COMPONENT_NAME: COMPONENT_NAME2,
      FORM_ITEM_CLASS_PREFIX
    };
  },
  data: function data20() {
    return {
      children: []
    };
  },
  computed: {
    formClass: function formClass() {
      return [this.CLASS_NAMES.form, _defineProperty$3({}, "".concat(this.COMPONENT_NAME, "-inline"), this.layout === "inline")];
    },
    controlledComponents: function controlledComponents() {
      var _this$formControlledC;
      var fields = FORM_CONTROL_COMPONENTS;
      if ((_this$formControlledC = this.formControlledComponents) !== null && _this$formControlledC !== void 0 && _this$formControlledC.length) {
        fields = fields.concat(this.formControlledComponents);
      }
      return fields;
    }
  },
  methods: {
    getFirstError: function getFirstError(result) {
      if (isBoolean_1(result))
        return "";
      var _Object$keys = Object.keys(result), _Object$keys2 = _slicedToArray(_Object$keys, 1), firstKey = _Object$keys2[0];
      if (this.scrollToFirstError) {
        this.scrollTo(".".concat(this.FORM_ITEM_CLASS_PREFIX + firstKey));
      }
      var resArr = result[firstKey];
      if (!isArray_1(resArr))
        return "";
      return resArr.filter(function(item) {
        return !item.result;
      })[0].message;
    },
    scrollTo: function scrollTo2(selector) {
      var dom = this.$el.querySelector(selector);
      var behavior = this.scrollToFirstError;
      dom && dom.scrollIntoView({
        behavior
      });
    },
    isFunction: function isFunction2(val) {
      return typeof val === "function";
    },
    needValidate: function needValidate(name2, fields) {
      if (!fields || !Array.isArray(fields))
        return true;
      return fields.indexOf(name2) !== -1;
    },
    validate: function validate(param) {
      var _this = this;
      return _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
        var _ref2, fields, _ref2$trigger, trigger2, list, arr, r, result;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _ref2 = param || {}, fields = _ref2.fields, _ref2$trigger = _ref2.trigger, trigger2 = _ref2$trigger === void 0 ? "all" : _ref2$trigger;
                list = _this.children.filter(function(child) {
                  return _this.isFunction(child.validate) && _this.needValidate(child.name, fields);
                }).map(function(child) {
                  return child.validate(trigger2);
                });
                _context.next = 4;
                return Promise.all(list);
              case 4:
                arr = _context.sent;
                r = arr.reduce(function(r2, err) {
                  return Object.assign(r2 || {}, err);
                }, {});
                Object.keys(r).forEach(function(key) {
                  if (r[key] === true) {
                    delete r[key];
                  }
                });
                result = isEmpty_1(r) ? true : r;
                emitEvent(_this, "validate", {
                  validateResult: result,
                  firstError: _this.getFirstError(result)
                });
                return _context.abrupt("return", result);
              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    submitHandler: function submitHandler(e) {
      var _this2 = this;
      if (this.preventSubmitDefault) {
        e && e.preventDefault();
        e && e.stopPropagation();
      }
      this.validate().then(function(r) {
        emitEvent(_this2, "submit", {
          validateResult: r,
          firstError: _this2.getFirstError(r),
          e
        });
      });
    },
    resetHandler: function resetHandler(e) {
      var _this3 = this;
      if (this.preventSubmitDefault) {
        e && e.preventDefault();
        e && e.stopPropagation();
      }
      this.children.filter(function(child) {
        return _this3.isFunction(child.resetField);
      }).map(function(child) {
        return child.resetField();
      });
      emitEvent(this, "reset", {
        e
      });
    },
    clearValidate: function clearValidate(fields) {
      var _this4 = this;
      this.children.forEach(function(child) {
        if (_this4.isFunction(child.resetHandler) && _this4.needValidate(child.name, fields)) {
          child.resetHandler();
        }
      });
    },
    reset: function reset2() {
      this.resetHandler();
    },
    submit: function submit() {
      this.submitHandler();
    }
  },
  render: function render54() {
    var _this5 = this;
    return createVNode("form", mergeProps({
      "ref": "form",
      "class": this.formClass,
      "onSubmit": function onSubmit(e) {
        return _this5.submitHandler(e);
      },
      "onReset": function onReset(e) {
        return _this5.resetHandler(e);
      }
    }, this.$attrs), [this.$slots["default"] ? this.$slots["default"]() : []]);
  }
});
function isNil(value6) {
  return value6 == null;
}
var isNil_1 = isNil;
var copyObject$1 = _copyObject, createAssigner = _createAssigner, keysIn = keysIn_1;
var assignInWith$1 = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject$1(source, keysIn(source), object, customizer);
});
var assignInWith_1 = assignInWith$1;
var baseGetTag = _baseGetTag, isObjectLike = isObjectLike_1, isPlainObject$1 = isPlainObject_1;
var domExcTag = "[object DOMException]", errorTag = "[object Error]";
function isError$2(value6) {
  if (!isObjectLike(value6)) {
    return false;
  }
  var tag = baseGetTag(value6);
  return tag == errorTag || tag == domExcTag || typeof value6.message == "string" && typeof value6.name == "string" && !isPlainObject$1(value6);
}
var isError_1 = isError$2;
var apply = _apply, baseRest$1 = _baseRest, isError$1 = isError_1;
var attempt$1 = baseRest$1(function(func, args) {
  try {
    return apply(func, void 0, args);
  } catch (e) {
    return isError$1(e) ? e : new Error(e);
  }
});
var attempt_1 = attempt$1;
var arrayMap$1 = _arrayMap;
function baseValues$1(object, props2) {
  return arrayMap$1(props2, function(key) {
    return object[key];
  });
}
var _baseValues = baseValues$1;
var eq = eq_1;
var objectProto$1 = Object.prototype;
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
function customDefaultsAssignIn$1(objValue, srcValue, key, object) {
  if (objValue === void 0 || eq(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
    return srcValue;
  }
  return objValue;
}
var _customDefaultsAssignIn = customDefaultsAssignIn$1;
var stringEscapes = {
  "\\": "\\",
  "'": "'",
  "\n": "n",
  "\r": "r",
  "\u2028": "u2028",
  "\u2029": "u2029"
};
function escapeStringChar$1(chr) {
  return "\\" + stringEscapes[chr];
}
var _escapeStringChar = escapeStringChar$1;
var reInterpolate$2 = /<%=([\s\S]+?)%>/g;
var _reInterpolate = reInterpolate$2;
var basePropertyOf = _basePropertyOf;
var htmlEscapes = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var escapeHtmlChar$1 = basePropertyOf(htmlEscapes);
var _escapeHtmlChar = escapeHtmlChar$1;
var escapeHtmlChar = _escapeHtmlChar, toString$1 = toString_1;
var reUnescapedHtml = /[&<>"']/g, reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
function escape$2(string) {
  string = toString$1(string);
  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
}
var _escape = escape$2;
var reEscape$1 = /<%-([\s\S]+?)%>/g;
var _reEscape = reEscape$1;
var reEvaluate$1 = /<%([\s\S]+?)%>/g;
var _reEvaluate = reEvaluate$1;
var escape$1 = _escape, reEscape = _reEscape, reEvaluate = _reEvaluate, reInterpolate$1 = _reInterpolate;
var templateSettings$1 = {
  "escape": reEscape,
  "evaluate": reEvaluate,
  "interpolate": reInterpolate$1,
  "variable": "",
  "imports": {
    "_": { "escape": escape$1 }
  }
};
var templateSettings_1 = templateSettings$1;
var assignInWith = assignInWith_1, attempt = attempt_1, baseValues = _baseValues, customDefaultsAssignIn = _customDefaultsAssignIn, escapeStringChar = _escapeStringChar, isError = isError_1, isIterateeCall = _isIterateeCall, keys$1 = keys_1, reInterpolate = _reInterpolate, templateSettings = templateSettings_1, toString = toString_1;
var INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
var reNoMatch = /($^)/;
var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function template(string, options, guard) {
  var settings = templateSettings.imports._.templateSettings || templateSettings;
  if (guard && isIterateeCall(string, options, guard)) {
    options = void 0;
  }
  string = toString(string);
  options = assignInWith({}, options, settings, customDefaultsAssignIn);
  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys$1(imports), importsValues = baseValues(imports, importsKeys);
  var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
  var reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
  var sourceURL = hasOwnProperty.call(options, "sourceURL") ? "//# sourceURL=" + (options.sourceURL + "").replace(/\s/g, " ") + "\n" : "";
  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
    interpolateValue || (interpolateValue = esTemplateValue);
    source += string.slice(index2, offset2).replace(reUnescapedString, escapeStringChar);
    if (escapeValue) {
      isEscaping = true;
      source += "' +\n__e(" + escapeValue + ") +\n'";
    }
    if (evaluateValue) {
      isEvaluating = true;
      source += "';\n" + evaluateValue + ";\n__p += '";
    }
    if (interpolateValue) {
      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    }
    index2 = offset2 + match.length;
    return match;
  });
  source += "';\n";
  var variable = hasOwnProperty.call(options, "variable") && options.variable;
  if (!variable) {
    source = "with (obj) {\n" + source + "\n}\n";
  } else if (reForbiddenIdentifierChars.test(variable)) {
    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
  }
  source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
  source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
  var result = attempt(function() {
    return Function(importsKeys, sourceURL + "return " + source).apply(void 0, importsValues);
  });
  result.source = source;
  if (isError(result)) {
    throw result;
  }
  return result;
}
var template_1 = template;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var isDate$1 = { exports: {} };
var merge$1 = { exports: {} };
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = merge3;
  function merge3() {
    var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var defaults2 = arguments.length > 1 ? arguments[1] : void 0;
    for (var key in defaults2) {
      if (typeof obj[key] === "undefined") {
        obj[key] = defaults2[key];
      }
    }
    return obj;
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(merge$1, merge$1.exports);
/* @__PURE__ */ getDefaultExportFromCjs(merge$1.exports);
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = isDate2;
  var _merge = _interopRequireDefault(merge$1.exports);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  function _slicedToArray2(arr, i) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _iterableToArrayLimit2(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _createForOfIteratorHelper2(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it)
          o = it;
        var i = 0;
        var F = function F2() {
        };
        return {
          s: F,
          n: function n() {
            if (i >= o.length)
              return {
                done: true
              };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function e(_e2) {
            throw _e2;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
      s: function s() {
        it = o[Symbol.iterator]();
      },
      n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function e(_e3) {
        didErr = true;
        err = _e3;
      },
      f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      }
    };
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray2(o, minLen);
  }
  function _arrayLikeToArray2(arr, len2) {
    if (len2 == null || len2 > arr.length)
      len2 = arr.length;
    for (var i = 0, arr2 = new Array(len2); i < len2; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  var default_date_options = {
    format: "YYYY/MM/DD",
    delimiters: ["/", "-"],
    strictMode: false
  };
  function isValidFormat(format) {
    return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
  }
  function zip(date, format) {
    var zippedArr = [], len2 = Math.min(date.length, format.length);
    for (var i = 0; i < len2; i++) {
      zippedArr.push([date[i], format[i]]);
    }
    return zippedArr;
  }
  function isDate2(input, options) {
    if (typeof options === "string") {
      options = (0, _merge["default"])({
        format: options
      }, default_date_options);
    } else {
      options = (0, _merge["default"])(options, default_date_options);
    }
    if (typeof input === "string" && isValidFormat(options.format)) {
      var formatDelimiter = options.delimiters.find(function(delimiter) {
        return options.format.indexOf(delimiter) !== -1;
      });
      var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function(delimiter) {
        return input.indexOf(delimiter) !== -1;
      });
      var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
      var dateObj = {};
      var _iterator = _createForOfIteratorHelper2(dateAndFormat), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _step$value = _slicedToArray2(_step.value, 2), dateWord = _step$value[0], formatWord = _step$value[1];
          if (dateWord.length !== formatWord.length) {
            return false;
          }
          dateObj[formatWord.charAt(0)] = dateWord;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
    }
    if (!options.strictMode) {
      return Object.prototype.toString.call(input) === "[object Date]" && isFinite(input);
    }
    return false;
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(isDate$1, isDate$1.exports);
var isDate = /* @__PURE__ */ getDefaultExportFromCjs(isDate$1.exports);
var isEmail$1 = { exports: {} };
var assertString$1 = { exports: {} };
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = assertString;
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function assertString(input) {
    var isString2 = typeof input === "string" || input instanceof String;
    if (!isString2) {
      var invalidType = _typeof2(input);
      if (input === null)
        invalidType = "null";
      else if (invalidType === "object")
        invalidType = input.constructor.name;
      throw new TypeError("Expected a string but received a ".concat(invalidType));
    }
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(assertString$1, assertString$1.exports);
/* @__PURE__ */ getDefaultExportFromCjs(assertString$1.exports);
var isByteLength$1 = { exports: {} };
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = isByteLength;
  var _assertString = _interopRequireDefault(assertString$1.exports);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof3(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof3(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function isByteLength(str, options) {
    (0, _assertString["default"])(str);
    var min4;
    var max4;
    if (_typeof2(options) === "object") {
      min4 = options.min || 0;
      max4 = options.max;
    } else {
      min4 = arguments[1];
      max4 = arguments[2];
    }
    var len2 = encodeURI(str).split(/%..|./).length - 1;
    return len2 >= min4 && (typeof max4 === "undefined" || len2 <= max4);
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(isByteLength$1, isByteLength$1.exports);
/* @__PURE__ */ getDefaultExportFromCjs(isByteLength$1.exports);
var isFQDN$1 = { exports: {} };
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = isFQDN;
  var _assertString = _interopRequireDefault(assertString$1.exports);
  var _merge = _interopRequireDefault(merge$1.exports);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  var default_fqdn_options = {
    require_tld: true,
    allow_underscores: false,
    allow_trailing_dot: false,
    allow_numeric_tld: false,
    allow_wildcard: false
  };
  function isFQDN(str, options) {
    (0, _assertString["default"])(str);
    options = (0, _merge["default"])(options, default_fqdn_options);
    if (options.allow_trailing_dot && str[str.length - 1] === ".") {
      str = str.substring(0, str.length - 1);
    }
    if (options.allow_wildcard === true && str.indexOf("*.") === 0) {
      str = str.substring(2);
    }
    var parts = str.split(".");
    var tld = parts[parts.length - 1];
    if (options.require_tld) {
      if (parts.length < 2) {
        return false;
      }
      if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
        return false;
      }
      if (/\s/.test(tld)) {
        return false;
      }
    }
    if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
      return false;
    }
    return parts.every(function(part) {
      if (part.length > 63) {
        return false;
      }
      if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
        return false;
      }
      if (/[\uff01-\uff5e]/.test(part)) {
        return false;
      }
      if (/^-|-$/.test(part)) {
        return false;
      }
      if (!options.allow_underscores && /_/.test(part)) {
        return false;
      }
      return true;
    });
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(isFQDN$1, isFQDN$1.exports);
/* @__PURE__ */ getDefaultExportFromCjs(isFQDN$1.exports);
var isIP$1 = { exports: {} };
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = isIP;
  var _assertString = _interopRequireDefault(assertString$1.exports);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  var IPv4SegmentFormat = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
  var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
  var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
  var IPv6SegmentFormat = "(?:[0-9a-fA-F]{1,4})";
  var IPv6AddressRegExp = new RegExp("^(" + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ")(%[0-9a-zA-Z-.:]{1,})?$");
  function isIP(str) {
    var version2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    (0, _assertString["default"])(str);
    version2 = String(version2);
    if (!version2) {
      return isIP(str, 4) || isIP(str, 6);
    }
    if (version2 === "4") {
      if (!IPv4AddressRegExp.test(str)) {
        return false;
      }
      var parts = str.split(".").sort(function(a, b) {
        return a - b;
      });
      return parts[3] <= 255;
    }
    if (version2 === "6") {
      return !!IPv6AddressRegExp.test(str);
    }
    return false;
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(isIP$1, isIP$1.exports);
/* @__PURE__ */ getDefaultExportFromCjs(isIP$1.exports);
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = isEmail2;
  var _assertString = _interopRequireDefault(assertString$1.exports);
  var _merge = _interopRequireDefault(merge$1.exports);
  var _isByteLength = _interopRequireDefault(isByteLength$1.exports);
  var _isFQDN = _interopRequireDefault(isFQDN$1.exports);
  var _isIP = _interopRequireDefault(isIP$1.exports);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  var default_email_options = {
    allow_display_name: false,
    require_display_name: false,
    allow_utf8_local_part: true,
    require_tld: true,
    blacklisted_chars: "",
    ignore_max_length: false,
    host_blacklist: []
  };
  var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
  var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
  var gmailUserPart = /^[a-z\d]+$/;
  var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
  var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
  var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
  var defaultMaxEmailLength = 254;
  function validateDisplayName(display_name) {
    var display_name_without_quotes = display_name.replace(/^"(.+)"$/, "$1");
    if (!display_name_without_quotes.trim()) {
      return false;
    }
    var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
    if (contains_illegal) {
      if (display_name_without_quotes === display_name) {
        return false;
      }
      var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
      if (!all_start_with_back_slash) {
        return false;
      }
    }
    return true;
  }
  function isEmail2(str, options) {
    (0, _assertString["default"])(str);
    options = (0, _merge["default"])(options, default_email_options);
    if (options.require_display_name || options.allow_display_name) {
      var display_email = str.match(splitNameAddress);
      if (display_email) {
        var display_name = display_email[1];
        str = str.replace(display_name, "").replace(/(^<|>$)/g, "");
        if (display_name.endsWith(" ")) {
          display_name = display_name.substr(0, display_name.length - 1);
        }
        if (!validateDisplayName(display_name)) {
          return false;
        }
      } else if (options.require_display_name) {
        return false;
      }
    }
    if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
      return false;
    }
    var parts = str.split("@");
    var domain = parts.pop();
    var lower_domain = domain.toLowerCase();
    if (options.host_blacklist.includes(lower_domain)) {
      return false;
    }
    var user = parts.join("@");
    if (options.domain_specific_validation && (lower_domain === "gmail.com" || lower_domain === "googlemail.com")) {
      user = user.toLowerCase();
      var username = user.split("+")[0];
      if (!(0, _isByteLength["default"])(username.replace(/\./g, ""), {
        min: 6,
        max: 30
      })) {
        return false;
      }
      var _user_parts = username.split(".");
      for (var i = 0; i < _user_parts.length; i++) {
        if (!gmailUserPart.test(_user_parts[i])) {
          return false;
        }
      }
    }
    if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
      max: 64
    }) || !(0, _isByteLength["default"])(domain, {
      max: 254
    }))) {
      return false;
    }
    if (!(0, _isFQDN["default"])(domain, {
      require_tld: options.require_tld
    })) {
      if (!options.allow_ip_domain) {
        return false;
      }
      if (!(0, _isIP["default"])(domain)) {
        if (!domain.startsWith("[") || !domain.endsWith("]")) {
          return false;
        }
        var noBracketdomain = domain.substr(1, domain.length - 2);
        if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
          return false;
        }
      }
    }
    if (user[0] === '"') {
      user = user.slice(1, user.length - 1);
      return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
    }
    var pattern2 = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
    var user_parts = user.split(".");
    for (var _i = 0; _i < user_parts.length; _i++) {
      if (!pattern2.test(user_parts[_i])) {
        return false;
      }
    }
    if (options.blacklisted_chars) {
      if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), "g")) !== -1)
        return false;
    }
    return true;
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(isEmail$1, isEmail$1.exports);
var isEmail = /* @__PURE__ */ getDefaultExportFromCjs(isEmail$1.exports);
var isURL$1 = { exports: {} };
(function(module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = isURL2;
  var _assertString = _interopRequireDefault(assertString$1.exports);
  var _isFQDN = _interopRequireDefault(isFQDN$1.exports);
  var _isIP = _interopRequireDefault(isIP$1.exports);
  var _merge = _interopRequireDefault(merge$1.exports);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }
  function _slicedToArray2(arr, i) {
    return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
  }
  function _nonIterableRest2() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _unsupportedIterableToArray2(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray2(o, minLen);
  }
  function _arrayLikeToArray2(arr, len2) {
    if (len2 == null || len2 > arr.length)
      len2 = arr.length;
    for (var i = 0, arr2 = new Array(len2); i < len2; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }
  function _iterableToArrayLimit2(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
      return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles2(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var default_url_options = {
    protocols: ["http", "https", "ftp"],
    require_tld: true,
    require_protocol: false,
    require_host: true,
    require_port: false,
    require_valid_protocol: true,
    allow_underscores: false,
    allow_trailing_dot: false,
    allow_protocol_relative_urls: false,
    allow_fragments: true,
    allow_query_components: true,
    validate_length: true
  };
  var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
  function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  function checkHost(host, matches2) {
    for (var i = 0; i < matches2.length; i++) {
      var match = matches2[i];
      if (host === match || isRegExp(match) && match.test(host)) {
        return true;
      }
    }
    return false;
  }
  function isURL2(url, options) {
    (0, _assertString["default"])(url);
    if (!url || /[\s<>]/.test(url)) {
      return false;
    }
    if (url.indexOf("mailto:") === 0) {
      return false;
    }
    options = (0, _merge["default"])(options, default_url_options);
    if (options.validate_length && url.length >= 2083) {
      return false;
    }
    if (!options.allow_fragments && url.includes("#")) {
      return false;
    }
    if (!options.allow_query_components && (url.includes("?") || url.includes("&"))) {
      return false;
    }
    var protocol, auth, host, hostname, port, port_str, split, ipv6;
    split = url.split("#");
    url = split.shift();
    split = url.split("?");
    url = split.shift();
    split = url.split("://");
    if (split.length > 1) {
      protocol = split.shift().toLowerCase();
      if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
        return false;
      }
    } else if (options.require_protocol) {
      return false;
    } else if (url.substr(0, 2) === "//") {
      if (!options.allow_protocol_relative_urls) {
        return false;
      }
      split[0] = url.substr(2);
    }
    url = split.join("://");
    if (url === "") {
      return false;
    }
    split = url.split("/");
    url = split.shift();
    if (url === "" && !options.require_host) {
      return true;
    }
    split = url.split("@");
    if (split.length > 1) {
      if (options.disallow_auth) {
        return false;
      }
      if (split[0] === "") {
        return false;
      }
      auth = split.shift();
      if (auth.indexOf(":") >= 0 && auth.split(":").length > 2) {
        return false;
      }
      var _auth$split = auth.split(":"), _auth$split2 = _slicedToArray2(_auth$split, 2), user = _auth$split2[0], password = _auth$split2[1];
      if (user === "" && password === "") {
        return false;
      }
    }
    hostname = split.join("@");
    port_str = null;
    ipv6 = null;
    var ipv6_match = hostname.match(wrapped_ipv6);
    if (ipv6_match) {
      host = "";
      ipv6 = ipv6_match[1];
      port_str = ipv6_match[2] || null;
    } else {
      split = hostname.split(":");
      host = split.shift();
      if (split.length) {
        port_str = split.join(":");
      }
    }
    if (port_str !== null && port_str.length > 0) {
      port = parseInt(port_str, 10);
      if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
        return false;
      }
    } else if (options.require_port) {
      return false;
    }
    if (options.host_whitelist) {
      return checkHost(host, options.host_whitelist);
    }
    if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
      return false;
    }
    host = host || ipv6;
    if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
      return false;
    }
    return true;
  }
  module.exports = exports["default"];
  module.exports["default"] = exports["default"];
})(isURL$1, isURL$1.exports);
var isURL = /* @__PURE__ */ getDefaultExportFromCjs(isURL$1.exports);
function ownKeys$1a(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$19(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1a(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function isValueEmpty(val) {
  var type = Object.prototype.toString.call(val);
  var typeMap = {
    Date: "[object Date]"
  };
  if (type === typeMap.Date) {
    return false;
  }
  return _typeof$1(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
}
var VALIDATE_MAP = {
  date: isDate,
  url: isURL,
  email: isEmail,
  required: function required(val) {
    return !isValueEmpty(val);
  },
  "boolean": function boolean(val) {
    return typeof val === "boolean";
  },
  max: function max3(val, num) {
    return isNumber_1(val) ? val <= num : getCharacterLength(val) <= num;
  },
  min: function min3(val, num) {
    return isNumber_1(val) ? val >= num : getCharacterLength(val) >= num;
  },
  len: function len(val, num) {
    return getCharacterLength(val) === num;
  },
  number: function number(val) {
    return !Number.isNaN(val);
  },
  "enum": function _enum(val, strs) {
    return strs.includes(val);
  },
  idcard: function idcard(val) {
    return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
  },
  telnumber: function telnumber(val) {
    return /^1[3-9]\d{9}$/.test(val);
  },
  pattern: function pattern(val, regexp) {
    return regexp.test(val);
  },
  validator: function validator69(val, validate22) {
    return validate22(val);
  }
};
function validateOneRule(_x, _x2) {
  return _validateOneRule.apply(this, arguments);
}
function _validateOneRule() {
  _validateOneRule = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(value6, rule) {
    var validateResult, keys2, vOptions, vValidateFun, i, key, validateRule;
    return regenerator.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            validateResult = {
              result: true
            };
            keys2 = Object.keys(rule);
            vOptions = {};
            i = 0;
          case 4:
            if (!(i < keys2.length)) {
              _context.next = 16;
              break;
            }
            key = keys2[i];
            if (!(!rule.required && isValueEmpty(value6) && !rule.validator)) {
              _context.next = 8;
              break;
            }
            return _context.abrupt("return", validateResult);
          case 8:
            validateRule = VALIDATE_MAP[key];
            if (!(validateRule && rule[key])) {
              _context.next = 13;
              break;
            }
            vOptions = rule[key] === true ? {} : rule[key];
            vValidateFun = validateRule;
            return _context.abrupt("break", 16);
          case 13:
            i++;
            _context.next = 4;
            break;
          case 16:
            if (!vValidateFun) {
              _context.next = 24;
              break;
            }
            _context.next = 19;
            return vValidateFun(value6, vOptions);
          case 19:
            validateResult = _context.sent;
            if (!(typeof validateResult === "boolean")) {
              _context.next = 22;
              break;
            }
            return _context.abrupt("return", _objectSpread$19(_objectSpread$19({}, rule), {}, {
              result: validateResult
            }));
          case 22:
            if (!(_typeof$1(validateResult) === "object")) {
              _context.next = 24;
              break;
            }
            return _context.abrupt("return", validateResult);
          case 24:
            return _context.abrupt("return", validateResult);
          case 25:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _validateOneRule.apply(this, arguments);
}
function validate2(_x3, _x4) {
  return _validate.apply(this, arguments);
}
function _validate() {
  _validate = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2(value6, rules) {
    var all, r;
    return regenerator.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            all = rules.map(function(rule) {
              return validateOneRule(value6, rule);
            });
            _context2.next = 3;
            return Promise.all(all);
          case 3:
            r = _context2.sent;
            return _context2.abrupt("return", r);
          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _validate.apply(this, arguments);
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$w = {
  "for": {
    type: String,
    "default": ""
  },
  help: {
    type: String,
    "default": ""
  },
  label: {
    type: [String, Function],
    "default": ""
  },
  labelAlign: {
    type: String,
    validator: function validator70(val) {
      if (!val)
        return true;
      return ["left", "right", "top"].includes(val);
    }
  },
  labelWidth: {
    type: [String, Number]
  },
  name: {
    type: String,
    "default": ""
  },
  requiredMark: {
    type: Boolean,
    "default": void 0
  },
  rules: {
    type: Array,
    "default": function _default23() {
      return [];
    }
  },
  statusIcon: {
    type: [Boolean, Function],
    "default": void 0
  },
  successBorder: Boolean
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$19(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$18(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$19(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _FormItem = defineComponent({
  name: "TFormItem",
  inject: {
    form: {
      "default": void 0
    }
  },
  props: _objectSpread$18({}, props$w),
  setup: function setup63() {
    var FROM_LABEL = usePrefixClass("form__label");
    var CLASS_NAMES = useCLASSNAMES$1();
    var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");
    var _useConfig = useConfig("form"), global2 = _useConfig.global;
    return {
      global: global2,
      CLASS_NAMES,
      FROM_LABEL,
      FORM_ITEM_CLASS_PREFIX
    };
  },
  data: function data21() {
    return {
      errorList: [],
      successList: [],
      verifyStatus: "not",
      resetValidating: false,
      needResetField: false,
      initialValue: void 0
    };
  },
  computed: {
    classes: function classes5() {
      var _ref;
      return [this.CLASS_NAMES.formItem, this.FORM_ITEM_CLASS_PREFIX + this.name, (_ref = {}, _defineProperty$3(_ref, this.CLASS_NAMES.formItemWithHelp, this.help), _defineProperty$3(_ref, this.CLASS_NAMES.formItemWithExtra, this.renderTipsInfo()), _ref)];
    },
    labelClasses: function labelClasses() {
      var _ref2;
      var FROM_LABEL = this.FROM_LABEL;
      var parent2 = this.form;
      var labelAlign = isNil_1(this.labelAlign) ? parent2 === null || parent2 === void 0 ? void 0 : parent2.labelAlign : this.labelAlign;
      var labelWidth = isNil_1(this.labelWidth) ? parent2 === null || parent2 === void 0 ? void 0 : parent2.labelWidth : this.labelWidth;
      return [this.CLASS_NAMES.label, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(FROM_LABEL, "--required"), this.needRequiredMark), _defineProperty$3(_ref2, "".concat(FROM_LABEL, "--colon"), this.hasColon), _defineProperty$3(_ref2, "".concat(FROM_LABEL, "--top"), labelAlign === "top" || !labelWidth), _defineProperty$3(_ref2, "".concat(FROM_LABEL, "--left"), labelAlign === "left" && labelWidth), _defineProperty$3(_ref2, "".concat(FROM_LABEL, "--right"), labelAlign === "right" && labelWidth), _ref2)];
    },
    errorClasses: function errorClasses() {
      var parent2 = this.form;
      if (!parent2.showErrorMessage)
        return "";
      if (this.verifyStatus === "success") {
        return this.successBorder ? [this.CLASS_NAMES.success, this.CLASS_NAMES.successBorder].join(" ") : this.CLASS_NAMES.success;
      }
      if (!this.errorList.length)
        return;
      var type = this.errorList[0].type || "error";
      return type === "error" ? this.CLASS_NAMES.error : this.CLASS_NAMES.warning;
    },
    disabled: function disabled() {
      return this.form.disabled;
    },
    contentClasses: function contentClasses() {
      var getErrorClass = this.errorClasses;
      return [this.CLASS_NAMES.controls, getErrorClass];
    },
    contentStyle: function contentStyle() {
      var parent2 = this.form;
      var labelAlign = isNil_1(this.labelAlign) ? parent2 === null || parent2 === void 0 ? void 0 : parent2.labelAlign : this.labelAlign;
      var labelWidth = isNil_1(this.labelWidth) ? parent2 === null || parent2 === void 0 ? void 0 : parent2.labelWidth : this.labelWidth;
      var contentStyle2 = {};
      if (labelWidth && labelAlign !== "top") {
        if (typeof labelWidth === "number") {
          contentStyle2 = {
            marginLeft: "".concat(labelWidth, "px")
          };
        } else {
          contentStyle2 = {
            marginLeft: labelWidth
          };
        }
      }
      return contentStyle2;
    },
    value: function value3() {
      var parent2 = this.form;
      return parent2 && parent2.data && get_1(parent2.data, this.name);
    },
    hasColon: function hasColon() {
      var parent2 = this.form;
      return !!(parent2 && parent2.colon && this.getLabelContent());
    },
    needRequiredMark: function needRequiredMark() {
      var requiredMark = this.$props.requiredMark;
      if (typeof requiredMark === "boolean")
        return requiredMark;
      var parent2 = this.form;
      var parentRequiredMark = (parent2 === null || parent2 === void 0 ? void 0 : parent2.requiredMark) === void 0 ? this.global.requiredMark : parent2.requiredMark;
      var isRequired = this.innerRules.filter(function(rule) {
        return rule.required;
      }).length > 0;
      return Boolean(parentRequiredMark && isRequired);
    },
    innerRules: function innerRules() {
      var _this$rules;
      var parent2 = this.form;
      if ((_this$rules = this.rules) !== null && _this$rules !== void 0 && _this$rules.length)
        return this.rules || [];
      if (!this.name)
        return [];
      var index2 = this.name.lastIndexOf(".") || -1;
      var pRuleName = this.name.slice(index2 + 1);
      return get_1(parent2 === null || parent2 === void 0 ? void 0 : parent2.rules, this.name) || get_1(parent2 === null || parent2 === void 0 ? void 0 : parent2.rules, pRuleName) || [];
    },
    errorMessages: function errorMessages() {
      var _this$form$errorMessa;
      return (_this$form$errorMessa = this.form.errorMessage) !== null && _this$form$errorMessa !== void 0 ? _this$form$errorMessa : this.global.errorMessage;
    }
  },
  watch: {
    value: function value4() {
      this.validate("change");
    }
  },
  mounted: function mounted12() {
    this.initialValue = cloneDeep_1(this.value);
    this.form.children.push(this);
  },
  beforeUnmount: function beforeUnmount3() {
    var _this = this;
    var index2 = this.form.children.findIndex(function(item) {
      return item === _this;
    });
    this.form.children.splice(index2, 1);
  },
  methods: {
    validate: function validate$1(trigger2) {
      var _this2 = this;
      return _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
        var rules, r, errorList;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this2.resetValidating = true;
                rules = trigger2 === "all" ? _this2.innerRules : _this2.innerRules.filter(function(item) {
                  return (item.trigger || "change") === trigger2;
                });
                _context.next = 4;
                return validate2(_this2.value, rules);
              case 4:
                r = _context.sent;
                errorList = r.filter(function(item) {
                  return item.result !== true;
                }).map(function(item) {
                  Object.keys(item).forEach(function(key) {
                    if (!item.message && _this2.errorMessages[key]) {
                      var compiled = template_1(_this2.errorMessages[key]);
                      item.message = compiled({
                        name: _this2.label,
                        validate: item[key]
                      });
                    }
                  });
                  return item;
                });
                _this2.errorList = errorList;
                _this2.successList = r.filter(function(item) {
                  return item.result === true && item.message && item.type === "success";
                });
                if (rules.length) {
                  _this2.verifyStatus = errorList.length ? "fail" : "success";
                } else {
                  _this2.verifyStatus = "not";
                }
                if (_this2.needResetField) {
                  _this2.resetHandler();
                }
                _this2.resetValidating = false;
                return _context.abrupt("return", _defineProperty$3({}, _this2.name, errorList.length === 0 ? true : r));
              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    getLabelContent: function getLabelContent() {
      if (typeof this.label === "function") {
        return this.label(h);
      }
      if (typeof this.$slots.label === "function") {
        return this.$slots.label(null);
      }
      return this.label;
    },
    getLabel: function getLabel() {
      var parent2 = this.form;
      var labelWidth = isNil_1(this.labelWidth) ? parent2 === null || parent2 === void 0 ? void 0 : parent2.labelWidth : this.labelWidth;
      var labelAlign = isNil_1(this.labelAlign) ? parent2 === null || parent2 === void 0 ? void 0 : parent2.labelAlign : this.labelAlign;
      if (Number(labelWidth) === 0)
        return;
      var labelStyle = {};
      if (labelWidth && labelAlign !== "top") {
        if (typeof labelWidth === "number") {
          labelStyle = {
            width: "".concat(labelWidth, "px")
          };
        } else {
          labelStyle = {
            width: labelWidth
          };
        }
      }
      return createVNode("div", {
        "class": this.labelClasses,
        "style": labelStyle
      }, [createVNode("label", {
        "for": this["for"]
      }, [this.getLabelContent()])]);
    },
    renderTipsInfo: function renderTipsInfo() {
      var parent2 = this.form;
      var helpVNode = createVNode("div", {
        "class": this.CLASS_NAMES.extra
      }, null);
      if (this.help) {
        helpVNode = createVNode("div", {
          "class": this.CLASS_NAMES.extra
        }, [this.help]);
      }
      var list = this.errorList;
      if (parent2.showErrorMessage && list && list[0] && list[0].message) {
        return createVNode("div", {
          "class": this.CLASS_NAMES.extra
        }, [list[0].message]);
      }
      if (this.successList.length) {
        return createVNode("div", {
          "class": this.CLASS_NAMES.extra
        }, [this.successList[0].message]);
      }
      return helpVNode;
    },
    getDefaultIcon: function getDefaultIcon() {
      var _this3 = this;
      var resultIcon = function resultIcon2(Icon2) {
        return createVNode("span", {
          "class": _this3.CLASS_NAMES.status
        }, [createVNode(Icon2, null, null)]);
      };
      var list = this.errorList;
      if (this.verifyStatus === "success") {
        return resultIcon(checkCircleFilled);
      }
      if (list && list[0]) {
        var type = this.errorList[0].type || "error";
        var icon = {
          error: closeCircleFilled,
          warning: errorCircleFilled
        }[type] || checkCircleFilled;
        return resultIcon(icon);
      }
      return null;
    },
    getIcon: function getIcon(statusIcon, slotStatusIcon, props2) {
      var _this4 = this;
      var resultIcon = function resultIcon2(otherContent) {
        return createVNode("span", {
          "class": _this4.CLASS_NAMES.status
        }, [otherContent]);
      };
      if (statusIcon === true) {
        return this.getDefaultIcon();
      }
      if (typeof statusIcon === "function") {
        return resultIcon(statusIcon(h, props2));
      }
      if (typeof slotStatusIcon === "function") {
        return resultIcon(slotStatusIcon());
      }
      return null;
    },
    getSuffixIcon: function getSuffixIcon() {
      var parent2 = this.form;
      var statusIcon = this.statusIcon;
      var slotStatusIcon = this.$slots.statusIcon;
      var parentStatusIcon = parent2.statusIcon;
      var parentSlotStatusIcon = parent2.$slots.statusIcon;
      if (statusIcon === false)
        return;
      var resultIcon = this.getIcon(statusIcon, slotStatusIcon);
      if (resultIcon)
        return resultIcon;
      if (resultIcon === false)
        return;
      resultIcon = this.getIcon(parentStatusIcon, parentSlotStatusIcon);
      if (resultIcon)
        return resultIcon;
    },
    getEmptyValue: function getEmptyValue() {
      var parent2 = this.form;
      var type = Object.prototype.toString.call(get_1(parent2.data, this.name));
      var emptyValue;
      if (type === "[object Array]") {
        emptyValue = [];
      }
      if (type === "[object Object]") {
        emptyValue = {};
      }
      return emptyValue;
    },
    resetField: function resetField() {
      var _this5 = this;
      var parent2 = this.form;
      if (!this.name) {
        return;
      }
      if (parent2.resetType === "empty") {
        set_1(parent2.data, this.name, this.getEmptyValue());
      }
      if (parent2.resetType === "initial") {
        set_1(parent2.data, this.name, this.initialValue);
      }
      nextTick(function() {
        if (_this5.resetValidating) {
          _this5.needResetField = true;
        } else {
          _this5.resetHandler();
        }
      });
    },
    resetHandler: function resetHandler2() {
      this.needResetField = false;
      this.errorList = [];
      this.successList = [];
      this.verifyStatus = "not";
    }
  },
  render: function render55() {
    return createVNode("div", {
      "class": this.classes
    }, [this.getLabel(), createVNode("div", {
      "class": this.contentClasses,
      "style": this.contentStyle
    }, [createVNode("div", {
      "class": this.CLASS_NAMES.controlsContent
    }, [this.$slots["default"] ? this.$slots["default"]() : null, this.getSuffixIcon()]), this.renderTipsInfo()])]);
  }
});
var index$t = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Form = withInstall(_Form);
var FormItem = withInstall(_FormItem);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$v = {
  allowUncheck: Boolean,
  checked: {
    type: Boolean,
    "default": void 0
  },
  modelValue: {
    type: Boolean,
    "default": void 0
  },
  defaultChecked: Boolean,
  "default": {
    type: [String, Function]
  },
  disabled: {
    type: Boolean,
    "default": void 0
  },
  label: {
    type: [String, Function]
  },
  name: {
    type: String,
    "default": ""
  },
  value: {
    type: [String, Number, Boolean],
    "default": void 0
  },
  onChange: Function,
  onClick: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var RadioGroupInjectionKey = Symbol("RadioGroupProvide");
var RadioButtonInjectionKey = Symbol("RadioButtonProvide");
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$18(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$17(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$18(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getValidAttrs$1(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function(key) {
    if (typeof obj[key] !== "undefined") {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
var _Radio = defineComponent({
  name: "TRadio",
  inheritAttrs: false,
  props: _objectSpread$17({}, props$v),
  emits: [UPDATE_MODEL],
  setup: function setup64(props2, _ref) {
    var attrs = _ref.attrs;
    var _toRefs = toRefs(props2), checked = _toRefs.checked, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerChecked = _useVModel2[0], setInnerChecked = _useVModel2[1];
    var radioChecked = computed(function() {
      return radioGroup ? props2.value === radioGroup.value : innerChecked.value;
    });
    var radioGroup = inject(RadioGroupInjectionKey, void 0);
    var handleChange5 = function handleChange6(e) {
      if (radioGroup !== null && radioGroup !== void 0 && radioGroup.setValue) {
        radioGroup.setValue(props2.value, {
          e
        });
      } else {
        var checked2 = e.target.checked;
        setInnerChecked(checked2, {
          e
        });
      }
    };
    var handleClick5 = function handleClick6(e) {
      var _props2$onClick;
      (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
        e
      });
      if (!radioChecked.value || !props2.allowUncheck)
        return;
      if (radioGroup) {
        radioGroup.setValue(void 0, {
          e
        });
      } else {
        setInnerChecked(false, {
          e
        });
      }
    };
    var inputEvents2 = computed(function() {
      return getValidAttrs$1({
        focus: attrs.onFocus,
        blur: attrs.onBlur,
        keydown: attrs.onKeydown,
        keyup: attrs.onKeyup,
        keypresss: attrs.onKeypresss
      });
    });
    var wrapperAttrs = computed(function() {
      var events = [].concat(_toConsumableArray(Object.keys(inputEvents2.value)), ["input", "change"]).map(function(str) {
        return "on".concat(str[0].toUpperCase()).concat(str.slice(1));
      });
      return omit$1(attrs, events);
    });
    var groupDisabled = computed(function() {
      return radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.disabled;
    });
    var disabled2 = useFormDisabled(groupDisabled);
    var inputProps = computed(function() {
      return {
        name: radioGroup ? radioGroup.name : props2.name,
        checked: radioChecked.value,
        disabled: disabled2.value,
        value: props2.value
      };
    });
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var radioButton = inject(RadioButtonInjectionKey, void 0);
    var radioBtnName = usePrefixClass("radio-button");
    var COMPONENT_NAME2 = usePrefixClass("radio");
    var prefixCls = computed(function() {
      return radioButton ? radioBtnName.value : COMPONENT_NAME2.value;
    });
    var inputClass = computed(function() {
      var _ref2;
      return ["".concat(prefixCls.value), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.checked, inputProps.value.checked), _defineProperty$3(_ref2, STATUS.value.disabled, inputProps.value.disabled), _ref2)];
    });
    var renderContent6 = useContent();
    return function() {
      return createVNode("label", mergeProps({
        "class": inputClass.value
      }, wrapperAttrs.value), [createVNode("input", mergeProps({
        "type": "radio",
        "class": "".concat(prefixCls.value, "__former")
      }, inputEvents2.value, inputProps.value, {
        "onChange": handleChange5,
        "onClick": handleClick5
      }), null), createVNode("span", {
        "class": "".concat(prefixCls.value, "__input")
      }, null), createVNode("span", {
        "class": "".concat(prefixCls.value, "__label")
      }, [renderContent6("default", "label")])]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$u = {
  disabled: {
    type: Boolean,
    "default": void 0
  },
  name: {
    type: String,
    "default": ""
  },
  options: {
    type: Array
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator71(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  value: {
    type: [String, Number, Boolean],
    "default": void 0
  },
  modelValue: {
    type: [String, Number, Boolean],
    "default": void 0
  },
  defaultValue: {
    type: [String, Number, Boolean],
    "default": void 0
  },
  variant: {
    type: String,
    "default": "outline",
    validator: function validator72(val) {
      return ["outline", "primary-filled", "default-filled"].includes(val);
    }
  },
  onChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$17(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$16(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$17(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Group = defineComponent({
  name: "TRadioGroup",
  props: _objectSpread$16({}, props$u),
  emits: [UPDATE_MODEL],
  setup: function setup65(props2) {
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
    var radioGroupRef = ref();
    var radioBtnName = usePrefixClass("radio-button");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    var checkedClassName = computed(function() {
      return ".".concat(radioBtnName.value, ".").concat(STATUS.value.checked);
    });
    var barStyle = ref({
      width: "0px",
      left: "0px"
    });
    var calcDefaultBarStyle = function calcDefaultBarStyle2() {
      var div = document.createElement("div");
      div.setAttribute("style", "position: absolute; visibility: hidden;");
      div.appendChild(radioGroupRef.value.cloneNode(true));
      document.body.appendChild(div);
      var defaultCheckedRadio = div.querySelector(checkedClassName.value);
      var offsetWidth = defaultCheckedRadio.offsetWidth, offsetLeft = defaultCheckedRadio.offsetLeft;
      barStyle.value = {
        width: "".concat(offsetWidth, "px"),
        left: "".concat(offsetLeft, "px")
      };
      document.body.removeChild(div);
    };
    var calcBarStyle = function calcBarStyle2() {
      if (props2.variant === "outline")
        return;
      var checkedRadio = radioGroupRef.value.querySelector(checkedClassName.value);
      if (!checkedRadio)
        return;
      var offsetWidth = checkedRadio.offsetWidth, offsetLeft = checkedRadio.offsetLeft;
      if (!offsetWidth) {
        calcDefaultBarStyle();
      } else {
        barStyle.value = {
          width: "".concat(offsetWidth, "px"),
          left: "".concat(offsetLeft, "px")
        };
      }
    };
    watch(innerValue, /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return nextTick();
            case 2:
              calcBarStyle();
            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    onMounted(function() {
      calcBarStyle();
    });
    provide(RadioGroupInjectionKey, reactive({
      name: props2.name,
      disabled: props2.disabled,
      value: innerValue,
      setValue: setInnerValue
    }));
    var radioGroupName = usePrefixClass("radio-group");
    var renderSlot = useTNodeDefault();
    var renderBlock = function renderBlock2() {
      if (props2.variant.includes("filled"))
        return createVNode("div", {
          "style": barStyle.value,
          "class": "".concat(radioGroupName.value, "__bg-block")
        }, null);
    };
    var renderOptions2 = function renderOptions3() {
      var _props2$options;
      return (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.map(function(option2) {
        var opt = option2;
        if (isNumber_1(option2) || isString_1(option2)) {
          opt = {
            value: option2,
            label: option2.toString()
          };
        }
        return createVNode(_Radio, {
          "key": "radio-group-options-".concat(opt.value, "-").concat(Math.random()),
          "name": props2.name,
          "checked": innerValue.value === opt.value,
          "disabled": "disabled" in opt ? opt.disabled : props2.disabled,
          "value": opt.value
        }, {
          "default": function _default65() {
            return [typeof opt.label === "function" ? opt.label(h) : opt.label];
          }
        });
      });
    };
    var groupClass = computed(function() {
      var _ref2;
      return ["".concat(radioGroupName.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, "".concat(radioGroupName.value, "__outline"), props2.variant === "outline"), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--filled"), props2.variant.includes("filled")), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--primary-filled"), props2.variant === "primary-filled"), _ref2)];
    });
    return function() {
      return createVNode("div", {
        "ref": radioGroupRef,
        "class": groupClass.value
      }, [renderSlot("default") || renderOptions2(), renderBlock()]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$16(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$15(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$16(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$h(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _RadioButton = defineComponent({
  name: "TRadioButton",
  inheritAttrs: false,
  props: _objectSpread$15({}, props$v),
  setup: function setup66(props2, _ref) {
    var attrs = _ref.attrs;
    provide(RadioButtonInjectionKey, reactive({}));
    var radioProps = computed(function() {
      var res = _objectSpread$15(_objectSpread$15({}, props2), omit$1(attrs, Object.keys(attrs).filter(function(key) {
        return key.startsWith("on");
      })));
      return res;
    });
    var renderContent6 = useTNodeDefault();
    return function() {
      var _slot;
      return createVNode(_Radio, radioProps.value, _isSlot$h(_slot = renderContent6("default")) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      });
    };
  }
});
var index$s = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Radio = withInstall(_Radio);
var RadioGroup = withInstall(_Group);
var RadioButton = withInstall(_RadioButton);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$t = {
  disabled: Boolean,
  inputNumberProps: {
    type: [Boolean, Object],
    "default": false
  },
  label: {
    type: [String, Boolean, Function],
    "default": false
  },
  layout: {
    type: String,
    "default": "horizontal",
    validator: function validator73(val) {
      return ["vertical", "horizontal"].includes(val);
    }
  },
  marks: {
    type: [Object, Array]
  },
  max: {
    type: Number,
    "default": 100
  },
  min: {
    type: Number,
    "default": 0
  },
  range: Boolean,
  step: {
    type: Number,
    "default": 1
  },
  modelValue: {
    type: [Number, Array],
    "default": void 0
  },
  tooltipProps: {
    type: Object
  },
  value: {
    type: [Number, Array],
    "default": void 0
  },
  defaultValue: {
    type: [Number, Array]
  },
  onChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TSliderMark = defineComponent({
  name: "TSliderMark",
  props: {
    mark: {
      type: [Object, Array, String, Number]
    },
    point: {
      type: Number
    }
  },
  emits: ["change-value"],
  setup: function setup67(props2, ctx) {
    var COMPONENT_NAME2 = usePrefixClass("slider__mark");
    var changeValue = function changeValue2(e) {
      e.stopPropagation();
      ctx.emit("change-value", props2.point);
    };
    return function() {
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "-text"),
        "onClick": changeValue
      }, [props2.mark]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function isEmptyValue(val) {
  return val === void 0 || val === null;
}
var useSliderPopup = function useSliderPopup2(tooltipProps, vertical) {
  var popupRef = ref();
  var showTooltip = ref(true);
  var popupProps2 = reactive({
    visible: false,
    trigger: "hover",
    showArrow: true,
    overlayStyle: void 0,
    overlayClassName: void 0,
    attach: "body"
  });
  var togglePopup = function togglePopup2(toState) {
    popupProps2.visible = toState;
  };
  var placement = computed(function() {
    if (tooltipProps instanceof Object) {
      var placement2 = tooltipProps.placement;
      if (placement2)
        return placement2;
    }
    return vertical ? "right" : "top";
  });
  var setTooltipProps = function setTooltipProps2() {
    if (tooltipProps instanceof Object) {
      var trigger2 = tooltipProps.trigger, showArrow2 = tooltipProps.showArrow, overlayStyle2 = tooltipProps.overlayStyle, overlayClassName = tooltipProps.overlayClassName, attach2 = tooltipProps.attach;
      if (!isEmptyValue(trigger2)) {
        popupProps2.trigger = trigger2;
      }
      if (!isEmptyValue(showArrow2)) {
        popupProps2.showArrow = showArrow2;
      }
      popupProps2.overlayStyle = overlayStyle2;
      popupProps2.overlayClassName = overlayClassName;
      if (!isEmptyValue(attach2)) {
        popupProps2.attach = attach2;
      }
    }
  };
  onMounted(function() {
    showTooltip.value = !tooltipProps === false;
    setTooltipProps();
  });
  return {
    popupRef,
    popupProps: popupProps2,
    togglePopup,
    showTooltip,
    placement
  };
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var sliderPropsInjectKey = Symbol("sliderProps");
var index$r = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _SliderButton = defineComponent({
  name: "TSliderButton",
  components: {
    TPopup: Popup
  },
  props: {
    value: {
      type: [Number],
      "default": 0
    },
    vertical: {
      type: Boolean,
      "default": false
    },
    popupClass: {
      type: String,
      "default": ""
    },
    tooltipProps: {
      type: [Boolean, Object],
      "default": true
    }
  },
  emits: ["input"],
  setup: function setup68(props2, ctx) {
    var COMPONENT_NAME2 = usePrefixClass("slider__button");
    var _useSliderPopup = useSliderPopup(props2.tooltipProps, props2.vertical), popupRef = _useSliderPopup.popupRef, popupProps2 = _useSliderPopup.popupProps, togglePopup = _useSliderPopup.togglePopup, showTooltip = _useSliderPopup.showTooltip, placement = _useSliderPopup.placement;
    var parentProps = inject(sliderPropsInjectKey);
    var buttonRef = ref();
    var slideButtonProps = reactive({
      dragging: false,
      isClick: false,
      startX: 0,
      startY: 0,
      startPos: 0,
      newPos: null
    });
    var rangeDiff = computed(function() {
      return Number(parentProps.max) - Number(parentProps.min);
    });
    var currentPos = computed(function() {
      return "".concat((props2.value - parentProps.min) / rangeDiff.value * 100, "%");
    });
    var step = computed(function() {
      return parentProps.step;
    });
    var wrapperStyle = computed(function() {
      return props2.vertical ? {
        bottom: currentPos.value
      } : {
        left: currentPos.value
      };
    });
    watchEffect(function() {
      parentProps.toggleDragging(slideButtonProps.dragging);
    });
    var setPosition = function setPosition2(pos) {
      var newPos = pos;
      if (newPos === null || Number.isNaN(newPos)) {
        return;
      }
      if (newPos > 100) {
        newPos = 100;
      } else if (newPos < 0) {
        newPos = 0;
      }
      var perStepLen = 100 * step.value / rangeDiff.value;
      var steps = Math.round(newPos / perStepLen);
      var value6 = steps * perStepLen * rangeDiff.value * 0.01;
      value6 += parentProps.min;
      value6 = Number(parseFloat("".concat(value6)).toFixed(parentProps.precision.value));
      ctx.emit("input", value6);
      nextTick(function() {
        popupRef.value && popupRef.value.updatePopper();
      });
    };
    var handleMouseEnter = function handleMouseEnter2() {
      buttonRef.value.focus();
      togglePopup(true);
    };
    var handleMouseLeave = function handleMouseLeave2() {
      if (!slideButtonProps.dragging) {
        togglePopup(false);
      }
    };
    var onDragStart = function onDragStart2(event) {
      slideButtonProps.dragging = true;
      slideButtonProps.isClick = true;
      var type = event.type;
      var clientY = event.clientY, clientX = event.clientX;
      if (type === "touchstart") {
        var touch = event.touches;
        var _ref = [touch[0].clientY, touch[0].clientX];
        clientY = _ref[0];
        clientX = _ref[1];
      }
      if (props2.vertical) {
        slideButtonProps.startY = clientY;
      } else {
        slideButtonProps.startX = clientX;
      }
      slideButtonProps.startPos = parseFloat(currentPos.value);
      slideButtonProps.newPos = slideButtonProps.startPos;
    };
    var onDragging = function onDragging2(e) {
      var event = e;
      if (!slideButtonProps.dragging) {
        return;
      }
      slideButtonProps.isClick = false;
      if (parentProps !== null && parentProps !== void 0 && parentProps.resetSize && typeof (parentProps === null || parentProps === void 0 ? void 0 : parentProps.resetSize) === "function") {
        parentProps.resetSize();
      }
      var diff = 0;
      var parentSliderSize = parentProps.sliderSize.value;
      if (props2.vertical) {
        diff = slideButtonProps.startY - event.clientY;
      } else {
        diff = event.clientX - slideButtonProps.startX;
      }
      diff = diff / parentSliderSize * 100;
      slideButtonProps.newPos = slideButtonProps.startPos + diff;
      setPosition(slideButtonProps.newPos);
    };
    var onDragEnd = function onDragEnd2() {
      if (slideButtonProps.dragging) {
        setTimeout(function() {
          slideButtonProps.dragging = false;
          togglePopup(false);
          if (!slideButtonProps.isClick) {
            setPosition(slideButtonProps.newPos);
          }
        }, 0);
        window.removeEventListener("mousemove", onDragging);
        window.removeEventListener("touchmove", onDragging);
        window.removeEventListener("mouseup", onDragEnd2);
        window.removeEventListener("touchend", onDragEnd2);
        window.removeEventListener("contextmenu", onDragEnd2);
      }
    };
    function onButtonDown(event) {
      if (parentProps.disabled.value) {
        return;
      }
      event.preventDefault();
      onDragStart(event);
      window.addEventListener("mousemove", onDragging);
      window.addEventListener("mouseup", onDragEnd);
      window.addEventListener("touchmove", onDragging);
      window.addEventListener("touchend", onDragEnd);
      window.addEventListener("contextmenu", onDragEnd);
    }
    var onKeyDown = function onKeyDown2(state) {
      if (parentProps.disabled.value) {
        return;
      }
      var stepLength = step.value / rangeDiff.value * 100;
      if (state === "sub") {
        stepLength = -stepLength;
      }
      slideButtonProps.newPos = parseFloat(currentPos.value) + stepLength;
      setPosition(slideButtonProps.newPos);
    };
    var onNativeKeyDown = function onNativeKeyDown2(e) {
      var code = e.code;
      e.preventDefault();
      if (code === "ArrowDown" || code === "ArrowLeft") {
        onKeyDown("sub");
      }
      if (code === "ArrowUp" || code === "ArrowRight") {
        onKeyDown("add");
      }
    };
    ctx.expose({
      setPosition
    });
    return function() {
      return createVNode("div", {
        "ref": buttonRef,
        "class": "".concat(COMPONENT_NAME2.value, "-wrapper"),
        "style": wrapperStyle.value,
        "tabindex": "0",
        "show-tooltip": showTooltip.value,
        "disabled": parentProps.disabled.value,
        "onmouseenter": handleMouseEnter,
        "onmouseleave": handleMouseLeave,
        "onmousedown": onButtonDown,
        "onTouchstart": onButtonDown,
        "onfocus": handleMouseEnter,
        "onblur": handleMouseLeave,
        "onKeydown": onNativeKeyDown
      }, [createVNode(resolveComponent("t-popup"), {
        "visible": popupProps2.visible,
        "ref": popupRef,
        "popper-class": props2.popupClass,
        "disabled": !showTooltip.value,
        "content": String(props2.value),
        "placement": placement.value,
        "trigger": popupProps2.trigger,
        "showArrow": popupProps2.showArrow,
        "overlayStyle": popupProps2.overlayStyle,
        "overlayClassName": popupProps2.overlayClassName,
        "attach": popupProps2.attach
      }, {
        "default": function _default65() {
          return [createVNode("div", {
            "class": [COMPONENT_NAME2.value, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--dragging"), slideButtonProps.dragging)]
          }, null)];
        }
      })]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var getStopStyle = function getStopStyle2(position, isVertical) {
  return isVertical ? {
    top: "calc(".concat(100 - position, "% - 1px)")
  } : {
    left: "".concat(position, "%")
  };
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var useSliderMark = function useSliderMark2(max4, min4, marks, isVertical, prefixName) {
  var name2 = prefixName;
  var markList = computed(function() {
    if (!marks) {
      return [];
    }
    var legalMarks = [];
    if (Array.isArray(marks)) {
      var marksList = cloneDeep_1(marks).sort(function(a, b) {
        return a - b;
      });
      var maxLimit = Math.max.apply(Math, _toConsumableArray(marksList).concat([max4]));
      var minLimit = Math.min.apply(Math, _toConsumableArray(marksList).concat([min4]));
      if (minLimit < min4) {
        log.errorOnce("TSlider", "marks min value should >= props min");
      }
      if (maxLimit > max4) {
        log.errorOnce("TSlider", "marks max value should <= props max");
      }
      marksList.forEach(function(item) {
        legalMarks.push({
          point: item,
          position: (item - minLimit) / (maxLimit - minLimit) * 100,
          mark: item
        });
      });
    } else {
      Object.keys(marks).map(parseFloat).sort(function(a, b) {
        return a - b;
      }).filter(function(point) {
        return point <= max4 && point >= min4;
      }).forEach(function(point) {
        var item = {
          point,
          position: (point - min4) * 100 / (max4 - min4),
          mark: marks[point]
        };
        legalMarks.push(item);
      });
    }
    return legalMarks;
  });
  var renderMask = function renderMask2(onChangeFn) {
    if (markList.value.length) {
      return createVNode("div", null, [createVNode("div", null, [markList.value.map(function(item, index2) {
        return createVNode("div", {
          "class": "".concat(name2, "__stop ").concat(name2, "__mark-stop"),
          "style": getStopStyle(item.position, isVertical),
          "key": index2
        }, null);
      })]), createVNode("div", {
        "class": "".concat(name2, "__mark")
      }, [markList.value.map(function(item, key) {
        return createVNode(resolveComponent("t-slider-mark"), {
          "mark": item.mark,
          "point": item.point,
          "key": key,
          "style": getStopStyle(item.position, isVertical),
          "on-change-value": onChangeFn
        }, null);
      })])]);
    }
  };
  return renderMask;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var useSliderInput = function useSliderInput2(inputNumberProps, max4, min4, step, prefixName, isVertical, disabled2) {
  var name2 = prefixName;
  var sliderInputState = computed(function() {
    var initialState = {
      inputDecimalPlaces: 0,
      inputFormat: null,
      inputPlaceholder: "",
      inputTheme: "column"
    };
    if (typeof inputNumberProps !== "boolean") {
      var inputNumbeConfig = inputNumberProps;
      var inputDecimalPlaces = inputNumbeConfig.decimalPlaces;
      var inputFormat = inputNumbeConfig.format;
      var inputPlaceholder = inputNumbeConfig.placeholder;
      var inputTheme = inputNumbeConfig.theme;
      if (typeof inputDecimalPlaces === "number" && !Number.isNaN(inputDecimalPlaces)) {
        initialState.inputDecimalPlaces = inputDecimalPlaces;
      }
      if (inputPlaceholder) {
        initialState.inputPlaceholder = inputPlaceholder;
      }
      if (typeof inputFormat === "function") {
        initialState.inputFormat = inputFormat;
      }
      if (["column", "row", "normal"].includes(inputTheme)) {
        initialState.inputTheme = inputTheme;
      }
    }
    return initialState;
  });
  var sliderNumberClass = computed(function() {
    return ["".concat(name2, "__input"), {
      "is-vertical": isVertical
    }];
  });
  var renderInputNumber = function renderInputNumber2(val, changeFn) {
    return createVNode(InputNumber, {
      "class": sliderNumberClass.value,
      "value": val,
      "step": step,
      "onChange": changeFn,
      "disabled": disabled2.value,
      "min": min4,
      "max": max4,
      "decimalPlaces": sliderInputState.value.inputDecimalPlaces,
      "format": sliderInputState.value.inputFormat,
      "placeholder": sliderInputState.value.inputPlaceholder,
      "theme": sliderInputState.value.inputTheme
    }, null);
  };
  return renderInputNumber;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$15(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$14(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$15(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Slider = defineComponent({
  name: "TSlider",
  components: {
    TSliderMark,
    TInputNumber: InputNumber,
    TSliderButton: _SliderButton
  },
  model: {
    prop: "value",
    event: "change"
  },
  props: _objectSpread$14({}, props$t),
  setup: function setup69(props2, ctx) {
    var disabled2 = useFormDisabled();
    var COMPONENT_NAME2 = usePrefixClass("slider");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), sliderValue = _useVModel2[0], setSliderValue = _useVModel2[1];
    var sliderContainerRef = ref();
    var sliderRef = ref();
    var firstButtonRef = ref();
    var secondButtonRef = ref();
    var sliderState = reactive({
      prevValue: 0,
      showSteps: false
    });
    var firstValue = ref(0);
    var secondValue = ref(0);
    var dragging = ref(false);
    var sliderSize = ref(1);
    var vertical = computed(function() {
      return props2.layout === "vertical";
    });
    var containerClass = computed(function() {
      return ["".concat(COMPONENT_NAME2.value, "__container"), {
        "is-vertical": vertical.value
      }];
    });
    var sliderClass = computed(function() {
      var _ref;
      return ["".concat(COMPONENT_NAME2.value), (_ref = {
        "is-vertical": vertical.value
      }, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--with-input"), props2.inputNumberProps), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--vertical"), vertical.value), _defineProperty$3(_ref, STATUS.value.disabled, disabled2.value), _ref)];
    });
    var sliderRailClass = computed(function() {
      return ["".concat(COMPONENT_NAME2.value, "__rail"), {
        "show-input": props2.inputNumberProps,
        disabled: disabled2.value
      }];
    });
    var runwayStyle = computed(function() {
      return vertical.value ? {
        height: "100%"
      } : {};
    });
    var barStyle = computed(function() {
      var barStart = props2.range ? "".concat(100 * (minValue.value - props2.min) / rangeDiff.value, "%") : "0%";
      var cuttentDiff = props2.range ? maxValue.value - minValue.value : firstValue.value - props2.min;
      var barSize = "".concat(100 * cuttentDiff / rangeDiff.value, "%");
      return vertical.value ? {
        height: barSize,
        bottom: barStart
      } : {
        width: barSize,
        left: barStart
      };
    });
    var rangeDiff = computed(function() {
      return props2.max - props2.min;
    });
    var minValue = computed(function() {
      return Math.min(firstValue.value, secondValue.value);
    });
    var maxValue = computed(function() {
      return Math.max(firstValue.value, secondValue.value);
    });
    var steps = computed(function() {
      if (!sliderState.showSteps || props2.min > props2.max)
        return [];
      if (props2.step === 0) {
        console.warn("[Element Warn][Slider]step should not be 0.");
        return [];
      }
      var stepCount = rangeDiff.value / props2.step;
      var stepWidth = 100 * props2.step / rangeDiff.value;
      var result = [];
      for (var i = 1; i < stepCount; i++) {
        result.push(i * stepWidth);
      }
      if (props2.range) {
        return result.filter(function(step) {
          return step < 100 * (minValue.value - props2.min) / rangeDiff.value || props2.step > 100 * (maxValue.value - props2.min) / rangeDiff.value;
        });
      }
      return result.filter(function(step) {
        return step > 100 * (firstValue.value - props2.min) / rangeDiff.value;
      });
    });
    var precision = computed(function() {
      var precisions = [props2.min, props2.max, props2.step].map(function(item) {
        var decimalArr = "".concat(item).split(".");
        return decimalArr[1] ? decimalArr[1].length : 0;
      });
      return Math.max.apply(null, precisions);
    });
    var setValues = function setValues2(value22) {
      var _ref2 = [props2.min, props2.max], min4 = _ref2[0], max4 = _ref2[1];
      if (min4 > max4) {
        console.warn("[Slider] max should be greater than min.");
        return;
      }
      if (props2.range && Array.isArray(value22)) {
        var _ref3 = [Math.min.apply(Math, _toConsumableArray(value22)), Math.max.apply(Math, _toConsumableArray(value22))], maxLimit = _ref3[0], minLimit = _ref3[1];
        if (maxLimit > max4) {
          maxLimit = firstValue.value;
        }
        if (maxLimit < min4) {
          maxLimit = min4;
        }
        if (minLimit < min4) {
          minLimit = secondValue.value;
        }
        if (minLimit > max4) {
          minLimit = max4;
        }
        var _ref4 = [maxLimit, minLimit];
        firstValue.value = _ref4[0];
        secondValue.value = _ref4[1];
        return [maxLimit, minLimit];
      }
      var preValue = value22;
      if (preValue < min4) {
        preValue = min4;
      }
      if (preValue > max4) {
        preValue = max4;
      }
      return preValue;
    };
    var emitChange3 = function emitChange4(value22) {
      var changeValue2 = value22;
      if (changeValue2 === void 0) {
        if (props2.range) {
          changeValue2 = [firstValue.value, secondValue.value];
        } else {
          changeValue2 = sliderState.prevValue;
        }
      }
      var fixValue = setValues(changeValue2);
      setSliderValue(fixValue);
    };
    var resetSize = function resetSize2() {
      if (sliderRef.value) {
        sliderSize.value = sliderRef.value["client".concat(vertical.value ? "Height" : "Width")];
      }
    };
    var init2 = function init3() {
      var valuetext;
      if (props2.range) {
        if (Array.isArray(sliderValue.value)) {
          firstValue.value = Math.max(props2.min || 0, sliderValue.value[0]);
          secondValue.value = Math.min(props2.max || 100, sliderValue.value[1]);
        } else {
          firstValue.value = props2.min || 0;
          secondValue.value = props2.max || 100;
        }
        sliderState.prevValue = [firstValue.value, secondValue.value];
        valuetext = "".concat(firstValue.value, "-").concat(secondValue.value);
      } else {
        if (typeof sliderValue.value !== "number") {
          firstValue.value = props2.min;
        } else {
          firstValue.value = Math.min(props2.max, Math.max(props2.min, sliderValue.value));
        }
        sliderState.prevValue = firstValue.value;
        valuetext = String(firstValue.value);
      }
      if (sliderContainerRef.value) {
        sliderContainerRef.value.setAttribute("aria-valuetext", valuetext);
      }
      resetSize();
      window.addEventListener("resize", resetSize);
    };
    var setPosition = function setPosition2(percent) {
      var targetValue = percent * rangeDiff.value / 100;
      targetValue = props2.min + targetValue;
      if (!props2.range && firstButtonRef.value) {
        firstButtonRef.value.setPosition(percent);
        return;
      }
      var button;
      if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
        button = firstValue.value < secondValue.value ? "button1" : "button2";
      } else {
        button = firstValue.value > secondValue.value ? "button1" : "button2";
      }
      if (button === "button1" && firstButtonRef.value) {
        firstButtonRef.value.setPosition(percent);
      }
      if (button === "button2" && secondButtonRef.value) {
        secondButtonRef.value.setPosition(percent);
      }
    };
    var onSliderClick = function onSliderClick2(event) {
      if (disabled2.value || dragging.value) {
        return;
      }
      if (!sliderRef.value)
        return;
      resetSize();
      var value22 = 0;
      if (vertical.value) {
        var sliderOffsetBottom = sliderRef.value.getBoundingClientRect().bottom;
        value22 = (sliderOffsetBottom - event.clientY) / sliderSize.value * 100;
        setPosition(value22);
      } else {
        var sliderOffsetLeft = sliderRef.value.getBoundingClientRect().left;
        value22 = (event.clientX - sliderOffsetLeft) / sliderSize.value * 100;
        setPosition(value22);
      }
    };
    var changeValue = function changeValue2(point) {
      if (disabled2.value || dragging.value) {
        return;
      }
      resetSize();
      var value22 = Number(point / rangeDiff.value * 100);
      setPosition(value22);
      emitChange3(point);
    };
    watch(function() {
      return sliderValue.value;
    }, function(newVal) {
      if (dragging.value === true)
        return;
      if (Array.isArray(newVal) && props2.range) {
        var _newVal = _slicedToArray(newVal, 2);
        firstValue.value = _newVal[0];
        secondValue.value = _newVal[1];
      } else {
        firstValue.value = newVal;
      }
    });
    watch([firstValue, secondValue, dragging], function(newStates, prevStates) {
      if (newStates[0] !== prevStates[0]) {
        if (props2.range) {
          emitChange3([minValue.value, maxValue.value]);
        } else {
          emitChange3(firstValue.value);
        }
      }
      if (newStates[1] !== prevStates[1]) {
        if (props2.range) {
          emitChange3([minValue.value, maxValue.value]);
        }
      }
      if (newStates[2] !== prevStates[2] && newStates[2] === false) {
        init2();
      }
    });
    onMounted(function() {
      init2();
    });
    onBeforeUnmount(function() {
      window.removeEventListener("resize", resetSize);
    });
    var renderMask = useSliderMark(props2.max, props2.min, props2.marks, vertical.value, COMPONENT_NAME2.value);
    var renderInputNumber = useSliderInput(props2.inputNumberProps, props2.max, props2.min, props2.step, COMPONENT_NAME2.value, vertical.value, disabled2);
    var renderInputButton = function renderInputButton2() {
      var firstInputVal = props2.range ? firstValue.value : sliderState.prevValue;
      var firstInputOnChange = function firstInputOnChange2(v) {
        firstValue.value = v;
        props2.range ? firstValue.value = v : sliderState.prevValue = v;
      };
      var secondInputVal = secondValue.value;
      var secondInputOnChange = function secondInputOnChange2(v) {
        secondValue.value = v;
      };
      return createVNode("div", {
        "class": ["".concat(COMPONENT_NAME2.value, "__input-container"), {
          "is-vertical": vertical.value
        }]
      }, [renderInputNumber(firstInputVal, firstInputOnChange), props2.range && createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__center-line")
      }, null), props2.range && renderInputNumber(secondInputVal, secondInputOnChange)]);
    };
    var toggleDragging = function toggleDragging2(toState) {
      dragging.value = toState;
    };
    var provideCollect = computed(function() {
      return {
        max: props2.max,
        min: props2.min,
        step: props2.step,
        dragging,
        toggleDragging,
        precision,
        disabled: disabled2,
        resetSize,
        sliderSize
      };
    });
    provide(sliderPropsInjectKey, provideCollect.value);
    return function() {
      return createVNode("div", {
        "class": containerClass.value,
        "ref": sliderContainerRef
      }, [createVNode("div", {
        "class": sliderClass.value,
        "role": "slider",
        "aria-valuemin": props2.min,
        "aria-valuemax": props2.max,
        "aria-orientation": props2.layout,
        "aria-disabled": disabled2.value,
        "tooltip-props": props2.tooltipProps
      }, [createVNode("div", {
        "class": sliderRailClass.value,
        "style": runwayStyle.value,
        "onClick": onSliderClick,
        "ref": sliderRef
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__track"),
        "style": barStyle.value
      }, null), createVNode(resolveComponent("t-slider-button"), {
        "vertical": vertical.value,
        "value": firstValue.value,
        "ref": firstButtonRef,
        "disabled": disabled2.value,
        "tooltip-props": props2.tooltipProps,
        "onInput": function onInput2(v) {
          firstValue.value = v;
        }
      }, null), props2.range && createVNode(resolveComponent("t-slider-button"), {
        "vertical": vertical.value,
        "value": secondValue.value,
        "ref": secondButtonRef,
        "disabled": disabled2.value,
        "tooltip-props": props2.tooltipProps,
        "onInput": function onInput2(v) {
          secondValue.value = v;
        }
      }, null), sliderState.showSteps && createVNode("div", null, [steps.value.map(function(item, key) {
        return createVNode("div", {
          "class": "".concat(COMPONENT_NAME2.value, "__stop"),
          "key": key,
          "style": getStopStyle(item, vertical.value)
        }, null);
      })]), renderMask(changeValue)])]), props2.inputNumberProps && renderInputButton()]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Slider = withInstall(_Slider);
var SliderButton = withInstall(_SliderButton);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$s = {
  customValue: {
    type: Array
  },
  disabled: Boolean,
  label: {
    type: [Array, Function],
    "default": function _default24() {
      return [];
    }
  },
  loading: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator74(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  modelValue: {
    type: [String, Number, Boolean],
    "default": void 0
  },
  value: {
    type: [String, Number, Boolean],
    "default": void 0
  },
  defaultValue: {
    type: [String, Number, Boolean],
    "default": false
  },
  onChange: Function
};
var index$q = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$14(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$13(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$14(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Switch = defineComponent({
  name: "TSwitch",
  props: _objectSpread$13({}, props$s),
  emits: [UPDATE_MODEL],
  setup: function setup70(props2, _ref) {
    var slots = _ref.slots;
    var disabled2 = useFormDisabled();
    var COMPONENT_NAME2 = usePrefixClass("switch");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setSwitchVal = _useVModel2[1];
    var activeValue = computed(function() {
      if (props2.customValue && props2.customValue.length > 0) {
        return props2.customValue[0];
      }
      return true;
    });
    var inactiveValue = computed(function() {
      if (props2.customValue && props2.customValue.length > 1) {
        return props2.customValue[1];
      }
      return false;
    });
    function handleToggle2() {
      var checked = innerValue.value === activeValue.value ? inactiveValue.value : activeValue.value;
      setSwitchVal(checked);
    }
    function toggle2() {
      if (props2.disabled || props2.loading) {
        return;
      }
      handleToggle2();
    }
    var classes6 = computed(function() {
      var _ref2;
      return ["".concat(COMPONENT_NAME2.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, disabled2.value), _defineProperty$3(_ref2, STATUS.value.loading, props2.loading), _defineProperty$3(_ref2, STATUS.value.checked, innerValue.value === activeValue.value || props2.modelValue === activeValue.value), _ref2)];
    });
    var nodeClasses = computed(function() {
      var _ref3;
      return ["".concat(COMPONENT_NAME2.value, "__handle"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled2.value), _defineProperty$3(_ref3, STATUS.value.loading, props2.loading), _ref3)];
    });
    var contentClasses2 = computed(function() {
      return ["".concat(COMPONENT_NAME2.value, "__content"), SIZE.value[props2.size], _defineProperty$3({}, STATUS.value.disabled, disabled2.value)];
    });
    watch(innerValue, function(val) {
      if (props2.customValue && props2.customValue.length && !props2.customValue.includes(val)) {
        throw new Error("value is not in ".concat(JSON.stringify(props2.customValue)));
      }
    }, {
      immediate: true
    });
    var content = computed(function() {
      if (typeof props2.label === "function") {
        return props2.label(h, {
          value: innerValue.value
        });
      }
      if (typeof props2.label === "string") {
        return props2.label;
      }
      if (Array.isArray(props2.label)) {
        var label2 = innerValue.value === activeValue.value ? props2.label[0] : props2.label[1];
        if (!label2)
          return;
        if (typeof label2 === "string") {
          return label2;
        }
        if (typeof label2 === "function") {
          return label2(h);
        }
      }
      if (slots.label) {
        return slots.label({
          value: innerValue.value
        });
      }
      return null;
    });
    var renderContent6 = function renderContent7() {
      var switchContent;
      var loadingContent;
      if (props2.loading) {
        loadingContent = createVNode(Loading, {
          "size": "small"
        }, null);
      } else if (content.value) {
        switchContent = content.value;
      }
      return createVNode("div", {
        "class": classes6.value,
        "disabled": disabled2.value,
        "onClick": toggle2
      }, [createVNode("span", {
        "class": nodeClasses.value
      }, [loadingContent]), createVNode("div", {
        "class": contentClasses2.value
      }, [switchContent])]);
    };
    return {
      renderContent: renderContent6
    };
  },
  render: function render56() {
    return this.renderContent();
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Switch = withInstall(_Switch);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$r = {
  autoWidth: Boolean,
  clearable: Boolean,
  collapsedItems: {
    type: Function
  },
  disabled: Boolean,
  dragSort: Boolean,
  excessTagsDisplayType: {
    type: String,
    "default": "scroll",
    validator: function validator75(val) {
      if (!val)
        return true;
      return ["scroll", "break-line"].includes(val);
    }
  },
  inputProps: {
    type: Object
  },
  inputValue: {
    type: [String, Number],
    "default": void 0
  },
  defaultInputValue: {
    type: [String, Number]
  },
  label: {
    type: [String, Function]
  },
  max: {
    type: Number
  },
  minCollapsedNum: {
    type: Number,
    "default": 0
  },
  placeholder: {
    type: String,
    "default": void 0
  },
  readonly: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator76(val) {
      if (!val)
        return true;
      return ["small", "medium", "large"].includes(val);
    }
  },
  status: {
    type: String,
    validator: function validator77(val) {
      if (!val)
        return true;
      return ["success", "warning", "error"].includes(val);
    }
  },
  suffix: {
    type: [String, Function]
  },
  suffixIcon: {
    type: Function
  },
  tag: {
    type: [String, Function]
  },
  tagProps: {
    type: Object
  },
  tips: {
    type: [String, Function]
  },
  value: {
    type: Array,
    "default": void 0
  },
  modelValue: {
    type: Array,
    "default": void 0
  },
  defaultValue: {
    type: Array
  },
  valueDisplay: {
    type: [String, Function]
  },
  onBlur: Function,
  onChange: Function,
  onClear: Function,
  onDragSort: Function,
  onEnter: Function,
  onFocus: Function,
  onInputChange: Function,
  onMouseenter: Function,
  onMouseleave: Function,
  onPaste: Function,
  onRemove: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useTagScroll(props2) {
  var tagInputRef = ref();
  var _toRefs = toRefs(props2), excessTagsDisplayType = _toRefs.excessTagsDisplayType, readonly2 = _toRefs.readonly, disabled2 = _toRefs.disabled;
  var scrollDistance = ref(0);
  var scrollElement = ref();
  var mouseEnterTimer = ref();
  var updateScrollElement = function updateScrollElement2(element2) {
    var inputElement = element2.children[0];
    scrollElement.value = inputElement;
  };
  var updateScrollDistance = function updateScrollDistance2() {
    scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
  };
  var scrollTo3 = function scrollTo4(distance) {
    var _scrollElement$value;
    (_scrollElement$value = scrollElement.value) === null || _scrollElement$value === void 0 ? void 0 : _scrollElement$value.scroll({
      left: distance,
      behavior: "smooth"
    });
  };
  var scrollToRight3 = function scrollToRight4() {
    updateScrollDistance();
    scrollTo3(scrollDistance.value);
  };
  var scrollToLeft3 = function scrollToLeft4() {
    scrollTo3(0);
  };
  var onWheel = function onWheel2(_ref) {
    var e = _ref.e;
    if (readonly2.value || disabled2.value)
      return;
    if (!scrollElement.value)
      return;
    if (e.deltaX > 0) {
      var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
      scrollTo3(distance);
    } else {
      var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);
      scrollTo3(_distance);
    }
  };
  var scrollToRightOnEnter = function scrollToRightOnEnter2() {
    if (excessTagsDisplayType.value !== "scroll")
      return;
    mouseEnterTimer.value = setTimeout(function() {
      scrollToRight3();
      clearTimeout(mouseEnterTimer.value);
    }, 100);
  };
  var scrollToLeftOnLeave = function scrollToLeftOnLeave2() {
    if (excessTagsDisplayType.value !== "scroll")
      return;
    scrollTo3(0);
    clearTimeout(mouseEnterTimer.value);
  };
  var init2 = function init3() {
    var _tagInputRef$value;
    var element2 = (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 ? void 0 : _tagInputRef$value.$el;
    if (!element2)
      return;
    updateScrollElement(element2);
  };
  var clear5 = function clear6() {
    clearTimeout(mouseEnterTimer.value);
  };
  onMounted(init2);
  onUnmounted(clear5);
  return {
    tagInputRef,
    scrollElement,
    scrollDistance,
    scrollTo: scrollTo3,
    scrollToRight: scrollToRight3,
    scrollToLeft: scrollToLeft3,
    updateScrollElement,
    updateScrollDistance,
    onWheel,
    scrollToRightOnEnter,
    scrollToLeftOnLeave
  };
}
var index$p = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$13(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$12(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$13(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useTagList(props2) {
  var renderTNode = useTNodeJSX();
  var classPrefix2 = usePrefixClass();
  var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue, onRemove = _toRefs.onRemove, max4 = _toRefs.max, minCollapsedNum = _toRefs.minCollapsedNum, size2 = _toRefs.size, disabled2 = _toRefs.disabled, readonly2 = _toRefs.readonly, tagProps = _toRefs.tagProps;
  var _useVModel = useVModel(value6, modelValue, props2.defaultValue || [], props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), tagValue = _useVModel2[0], setTagValue = _useVModel2[1];
  var oldInputValue = ref();
  var _onClose = function onClose(p2) {
    var _onRemove$value;
    var arr = _toConsumableArray(tagValue.value);
    arr.splice(p2.index, 1);
    setTagValue(arr, _objectSpread$12({
      trigger: "tag-remove"
    }, p2));
    (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 ? void 0 : _onRemove$value.call(onRemove, _objectSpread$12(_objectSpread$12({}, p2), {}, {
      trigger: "tag-remove",
      value: arr
    }));
  };
  var clearAll = function clearAll2(context) {
    setTagValue([], {
      trigger: "clear",
      e: context.e
    });
  };
  var onInnerEnter = function onInnerEnter2(value22, context) {
    var _tagValue$value, _props$onEnter;
    var valueStr = value22 ? String(value22).trim() : "";
    if (!valueStr)
      return;
    var isLimitExceeded = max4 && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max4.value;
    var newValue = tagValue.value;
    if (!isLimitExceeded) {
      newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
      setTagValue(newValue, {
        trigger: "enter",
        index: newValue.length - 1,
        item: valueStr,
        e: context.e
      });
    }
    props2 === null || props2 === void 0 ? void 0 : (_props$onEnter = props2.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props2, newValue, _objectSpread$12(_objectSpread$12({}, context), {}, {
      inputValue: value22
    }));
  };
  var onInputBackspaceKeyUp = function onInputBackspaceKeyUp2(value22, context) {
    var e = context.e;
    if (!tagValue.value || !tagValue.value.length)
      return;
    if (!oldInputValue.value && ["Backspace", "NumpadDelete"].includes(e.code)) {
      var _onRemove$value2;
      var index2 = tagValue.value.length - 1;
      var item = tagValue.value[index2];
      var trigger2 = "backspace";
      setTagValue(tagValue.value.slice(0, -1), {
        e,
        index: index2,
        item,
        trigger: trigger2
      });
      (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 ? void 0 : _onRemove$value2.call(onRemove, {
        e,
        index: index2,
        item,
        trigger: trigger2,
        value: tagValue.value
      });
    }
    oldInputValue.value = value22;
  };
  var renderLabel2 = function renderLabel3(_ref) {
    var displayNode = _ref.displayNode, label2 = _ref.label;
    var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
    var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function(item, index2) {
      var tagContent = renderTNode("tag", {
        params: {
          value: item
        }
      });
      return createVNode(Tag, mergeProps({
        "key": "".concat(item).concat(index2),
        "size": size2.value,
        "disabled": disabled2.value,
        "onClose": function onClose(context) {
          return _onClose({
            e: context.e,
            item,
            index: index2
          });
        },
        "closable": !readonly2.value && !disabled2.value
      }, tagProps.value), {
        "default": function _default65() {
          return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
        }
      });
    });
    if (![null, void 0, ""].includes(label2)) {
      list.unshift(createVNode("div", {
        "class": "".concat(classPrefix2.value, "-tag-input__prefix"),
        "key": "label"
      }, [label2]));
    }
    if (newList.length !== tagValue.value.length) {
      var len2 = tagValue.value.length - newList.length;
      var more = renderTNode("collapsedItems", {
        params: {
          value: tagValue,
          count: tagValue.value.length,
          collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length)
        }
      });
      list.push(more !== null && more !== void 0 ? more : createVNode(Tag, {
        "key": "more"
      }, {
        "default": function _default65() {
          return ["+", len2];
        }
      }));
    }
    return list;
  };
  return {
    tagValue,
    clearAll,
    onClose: _onClose,
    onInnerEnter,
    onInputBackspaceKeyUp,
    renderLabel: renderLabel2
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useHover(props2) {
  var disabled2 = props2.disabled, readonly2 = props2.readonly, onMouseenter = props2.onMouseenter, onMouseleave = props2.onMouseleave;
  var isHover = ref(false);
  var addHover = function addHover2(context) {
    if (readonly2 || disabled2)
      return;
    isHover.value = true;
    onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter(context);
  };
  var cancelHover = function cancelHover2(context) {
    if (readonly2 || disabled2)
      return;
    isHover.value = false;
    onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave(context);
  };
  return {
    isHover,
    addHover,
    cancelHover
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$12(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$11(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$12(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var useComponentClassName$1 = function useComponentClassName2() {
  return {
    NAME_CLASS: usePrefixClass("tag-input"),
    CLEAR_CLASS: usePrefixClass("tag-input__suffix-clear"),
    BREAK_LINE_CLASS: usePrefixClass("tag-input--break-line")
  };
};
var _TagInput = defineComponent({
  name: "TTagInput",
  props: _objectSpread$11({}, props$r),
  setup: function setup71(props2) {
    var _useComponentClassNam = useComponentClassName$1(), NAME_CLASS = _useComponentClassNam.NAME_CLASS, CLEAR_CLASS = _useComponentClassNam.CLEAR_CLASS, BREAK_LINE_CLASS = _useComponentClassNam.BREAK_LINE_CLASS;
    var _toRefs = toRefs(props2), inputValue = _toRefs.inputValue;
    var _useDefault = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"), _useDefault2 = _slicedToArray(_useDefault, 2), tInputValue = _useDefault2[0], setTInputValue = _useDefault2[1];
    var _toRefs2 = toRefs(props2), excessTagsDisplayType = _toRefs2.excessTagsDisplayType, readonly2 = _toRefs2.readonly, disabled2 = _toRefs2.disabled, clearable = _toRefs2.clearable, placeholder = _toRefs2.placeholder;
    var _useHover = useHover({
      readonly: props2.readonly,
      disabled: props2.disabled,
      onMouseenter: props2.onMouseenter,
      onMouseleave: props2.onMouseleave
    }), isHover = _useHover.isHover, addHover = _useHover.addHover, cancelHover = _useHover.cancelHover;
    var _useTagScroll = useTagScroll(props2), scrollToRight3 = _useTagScroll.scrollToRight, onWheel = _useTagScroll.onWheel, scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter, scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave, tagInputRef = _useTagScroll.tagInputRef;
    var _useTagList = useTagList(props2), tagValue = _useTagList.tagValue, onInnerEnter = _useTagList.onInnerEnter, onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp, clearAll = _useTagList.clearAll, renderLabel2 = _useTagList.renderLabel, onClose = _useTagList.onClose;
    var classes6 = computed(function() {
      return [NAME_CLASS.value, _defineProperty$3({}, BREAK_LINE_CLASS.value, excessTagsDisplayType.value === "break-line")];
    });
    var tagInputPlaceholder = computed(function() {
      var _tagValue$value;
      return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
    });
    var showClearIcon = computed(function() {
      var _tagValue$value2;
      return Boolean(!readonly2.value && !disabled2.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
    });
    var onInputEnter = function onInputEnter2(value6, context) {
      setTInputValue("", {
        e: context.e,
        trigger: "enter"
      });
      onInnerEnter(value6, context);
      nextTick(function() {
        scrollToRight3();
      });
    };
    var onClick2 = function onClick3() {
      tagInputRef.value.focus();
    };
    var onClearClick = function onClearClick2(context) {
      var _props2$onClear;
      clearAll(context);
      setTInputValue("", {
        e: context.e,
        trigger: "clear"
      });
      (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
    };
    return {
      CLEAR_CLASS,
      tagValue,
      tInputValue,
      isHover,
      tagInputPlaceholder,
      showClearIcon,
      tagInputRef,
      setTInputValue,
      addHover,
      cancelHover,
      onInputEnter,
      onInnerEnter,
      onInputBackspaceKeyUp,
      renderLabel: renderLabel2,
      onWheel,
      scrollToRightOnEnter,
      scrollToLeftOnLeave,
      onClick: onClick2,
      onClearClick,
      onClose,
      classes: classes6
    };
  },
  render: function render57() {
    var _this = this;
    var suffixIconNode = this.showClearIcon ? createVNode(closeCircleFilled, {
      "class": this.CLEAR_CLASS,
      "onClick": this.onClearClick
    }, null) : renderTNodeJSX(this, "suffixIcon");
    var displayNode = renderTNodeJSX(this, "valueDisplay", {
      params: {
        value: this.tagValue,
        onClose: function onClose(index2, item) {
          return _this.onClose({
            index: index2,
            item
          });
        }
      }
    });
    var _label = renderTNodeJSX(this, "label", {
      silent: true
    });
    return createVNode(Input, mergeProps({
      "ref": "tagInputRef",
      "readonly": this.readonly
    }, this.inputProps, {
      "value": this.tInputValue,
      "onWheel": this.onWheel,
      "autoWidth": this.autoWidth,
      "size": this.size,
      "disabled": this.disabled,
      "label": function label2() {
        return _this.renderLabel({
          displayNode,
          label: _label
        });
      },
      "class": this.classes,
      "tips": this.tips,
      "status": this.status,
      "placeholder": this.tagInputPlaceholder,
      "suffix": this.suffix,
      "suffixIcon": function suffixIcon() {
        return suffixIconNode;
      },
      "onChange": function onChange(val, context) {
        _this.setTInputValue(val, _objectSpread$11(_objectSpread$11({}, context), {}, {
          trigger: "input"
        }));
      },
      "onPaste": this.onPaste,
      "onEnter": this.onInputEnter,
      "onKeyup": this.onInputBackspaceKeyUp,
      "onMouseenter": function onMouseenter(context) {
        _this.addHover(context);
        _this.scrollToRightOnEnter();
      },
      "onMouseleave": function onMouseleave(context) {
        _this.cancelHover(context);
        _this.scrollToLeftOnLeave();
      },
      "onFocus": function onFocus2(inputValue, context) {
        var _this$onFocus;
        (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, _this.tagValue, {
          e: context.e,
          inputValue
        });
      },
      "onBlur": function onBlur2(inputValue, context) {
        var _this$onBlur;
        (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, _this.tagValue, {
          e: context.e,
          inputValue
        });
      },
      "onClick": this.onClick
    }), null);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TagInput = withInstall(_TagInput);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$q = {
  allowInput: Boolean,
  autoWidth: Boolean,
  borderless: Boolean,
  clearable: Boolean,
  collapsedItems: {
    type: Function
  },
  disabled: Boolean,
  inputProps: {
    type: Object
  },
  inputValue: {
    type: [String, Number]
  },
  defaultInputValue: {
    type: [String, Number]
  },
  keys: {
    type: Object
  },
  label: {
    type: [String, Function]
  },
  loading: Boolean,
  minCollapsedNum: {
    type: Number,
    "default": 0
  },
  multiple: Boolean,
  panel: {
    type: [String, Function]
  },
  placeholder: {
    type: String,
    "default": ""
  },
  popupProps: {
    type: Object
  },
  popupVisible: {
    type: Boolean,
    "default": void 0
  },
  readonly: Boolean,
  status: {
    type: String,
    validator: function validator78(val) {
      if (!val)
        return true;
      return ["success", "warning", "error"].includes(val);
    }
  },
  suffix: {
    type: [String, Function]
  },
  suffixIcon: {
    type: Function
  },
  tag: {
    type: [String, Function]
  },
  tagInputProps: {
    type: Object
  },
  tagProps: {
    type: Object
  },
  tips: {
    type: [String, Function]
  },
  value: {
    type: [String, Number, Boolean, Object, Array, Date]
  },
  valueDisplay: {
    type: [String, Function]
  },
  onBlur: Function,
  onClear: Function,
  onEnter: Function,
  onFocus: Function,
  onInputChange: Function,
  onMouseenter: Function,
  onMouseleave: Function,
  onPaste: Function,
  onPopupVisibleChange: Function,
  onTagChange: Function
};
var index$o = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$11(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$10(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$11(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave"];
var DEFAULT_KEYS$1 = {
  label: "label",
  value: "value"
};
function getInputValue(value6, keys2) {
  var iKeys = keys2 || DEFAULT_KEYS$1;
  return isObject_1(value6) ? value6[iKeys.label] : value6;
}
function useSingle(props2, context) {
  var _props$defaultInputVa;
  var _toRefs = toRefs(props2), value6 = _toRefs.value, keys2 = _toRefs.keys, propsInputValue = _toRefs.inputValue;
  var classPrefix2 = usePrefixClass();
  var inputRef = ref();
  var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props2.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props2.onInputChange, "inputValue"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), inputValue = _useDefaultValue2[0], setInputValue4 = _useDefaultValue2[1];
  var renderTNode = useTNodeJSX();
  var commonInputProps = computed(function() {
    return pick_1(props2, COMMON_PROPERTIES);
  });
  var onInnerClear = function onInnerClear2(context2) {
    var _context2$e, _props$onClear;
    context2 === null || context2 === void 0 ? void 0 : (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
    (_props$onClear = props2.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props2, context2);
    setInputValue4("", {
      trigger: "clear"
    });
  };
  var onInnerInputChange = function onInnerInputChange2(value22, context2) {
    if (props2.allowInput) {
      setInputValue4(value22, _objectSpread$10(_objectSpread$10({}, context2), {}, {
        trigger: "input"
      }));
    }
  };
  var renderSelectSingle = function renderSelectSingle2(popupVisible) {
    var singleValueDisplay = renderTNode("valueDisplay");
    var displayedValue = popupVisible && props2.allowInput ? inputValue.value : getInputValue(value6.value, keys2.value);
    var prefixContent = [singleValueDisplay, renderTNode("label")];
    var inputProps = _objectSpread$10(_objectSpread$10(_objectSpread$10({}, commonInputProps.value), props2.inputProps), {}, {
      value: singleValueDisplay ? void 0 : displayedValue,
      label: prefixContent.length ? function() {
        return prefixContent;
      } : void 0,
      autoWidth: props2.autoWidth,
      readonly: !props2.allowInput,
      placeholder: singleValueDisplay ? "" : props2.placeholder,
      suffixIcon: !props2.disabled && props2.loading ? function() {
        return createVNode(Loading, {
          "loading": true,
          "size": "small"
        }, null);
      } : props2.suffixIcon,
      showClearIconOnEmpty: Boolean(props2.clearable && inputValue.value)
    });
    return createVNode(Input, mergeProps({
      "ref": "inputRef"
    }, inputProps, {
      "onChange": onInnerInputChange,
      "onClear": onInnerClear,
      "onBlur": function onBlur2(val, context2) {
        var _props$onBlur;
        (_props$onBlur = props2.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props2, value6.value, _objectSpread$10(_objectSpread$10({}, context2), {}, {
          inputValue: val
        }));
        inputValue.value = getInputValue(value6.value, keys2.value);
      },
      "onEnter": function onEnter(val, context2) {
        var _props$onEnter;
        (_props$onEnter = props2.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props2, value6.value, _objectSpread$10(_objectSpread$10({}, context2), {}, {
          inputValue: val
        }));
      },
      "onFocus": function onFocus2(val, context2) {
        var _props$onFocus;
        (_props$onFocus = props2.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props2, value6.value, _objectSpread$10(_objectSpread$10({}, context2), {}, {
          inputValue: val
        }));
        !popupVisible && setInputValue4(getInputValue(value6.value, keys2.value), _objectSpread$10(_objectSpread$10({}, context2), {}, {
          trigger: "input"
        }));
      },
      "inputClass": _defineProperty$3({}, "".concat(classPrefix2.value, "-input--focused"), popupVisible)
    }), context.slots);
  };
  return {
    inputRef,
    commonInputProps,
    onInnerClear,
    renderSelectSingle
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$10(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$$(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$10(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var DEFAULT_KEYS = {
  label: "label",
  key: "key",
  children: "children"
};
function useMultiple(props2, context) {
  var _toRefs = toRefs(props2), inputValue = _toRefs.inputValue;
  var classPrefix2 = usePrefixClass();
  var tagInputRef = ref();
  var _useDefault = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"), _useDefault2 = _slicedToArray(_useDefault, 2), tInputValue = _useDefault2[0], setTInputValue = _useDefault2[1];
  var iKeys = computed(function() {
    return _objectSpread$$(_objectSpread$$({}, DEFAULT_KEYS), props2.keys);
  });
  var tags = computed(function() {
    if (!(props2.value instanceof Array)) {
      return isObject_1(props2.value) ? [props2.value[iKeys.value.label]] : [props2.value];
    }
    return props2.value.map(function(item) {
      return isObject_1(item) ? item[iKeys.value.label] : item;
    });
  });
  var tPlaceholder2 = computed(function() {
    return !tags.value || !tags.value.length ? props2.placeholder : "";
  });
  var onTagInputChange = function onTagInputChange2(val, context2) {
    var _props$onTagChange;
    if (context2.trigger === "tag-remove") {
      var _context2$e;
      (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
    }
    (_props$onTagChange = props2.onTagChange) === null || _props$onTagChange === void 0 ? void 0 : _props$onTagChange.call(props2, val, context2);
  };
  var renderSelectMultiple = function renderSelectMultiple2(p2) {
    var tagInputProps = _objectSpread$$(_objectSpread$$(_objectSpread$$({}, p2.commonInputProps), props2.tagInputProps), {}, {
      tagProps: props2.tagProps,
      label: props2.label,
      autoWidth: props2.autoWidth,
      placeholder: tPlaceholder2.value,
      minCollapsedNum: props2.minCollapsedNum,
      collapsedItems: props2.collapsedItems,
      tag: props2.tag,
      value: tags.value,
      valueDisplay: props2.valueDisplay,
      inputValue: tInputValue.value || "",
      inputProps: {
        readonly: !props2.allowInput || props2.readonly,
        inputClass: _defineProperty$3({}, "".concat(classPrefix2.value, "-input--focused"), p2.popupVisible)
      },
      suffixIcon: !props2.disabled && props2.loading ? function() {
        return createVNode(Loading, {
          "loading": true,
          "size": "small"
        }, null);
      } : props2.suffixIcon
    });
    return createVNode(TagInput, mergeProps({
      "ref": "tagInputRef"
    }, tagInputProps, {
      "onInputChange": function onInputChange(val, context2) {
        if ((context2 === null || context2 === void 0 ? void 0 : context2.trigger) === "enter")
          return;
        setTInputValue(val, {
          trigger: context2.trigger,
          e: context2.e
        });
      },
      "onChange": onTagInputChange,
      "onClear": p2.onInnerClear,
      "onBlur": function onBlur2(val, context2) {
        var _props$onBlur;
        setTInputValue("", _objectSpread$$(_objectSpread$$({}, context2), {}, {
          trigger: "blur"
        }));
        (_props$onBlur = props2.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props2, props2.value, _objectSpread$$(_objectSpread$$({}, context2), {}, {
          tagInputValue: val
        }));
      },
      "onFocus": function onFocus2(val, context2) {
        var _props$onFocus;
        (_props$onFocus = props2.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props2, props2.value, _objectSpread$$(_objectSpread$$({}, context2), {}, {
          tagInputValue: val
        }));
      }
    }), context.slots);
  };
  return {
    tags,
    tPlaceholder: tPlaceholder2,
    tagInputRef,
    renderSelectMultiple
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$$(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$_(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$$(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var MAX_POPUP_WIDTH = 1e3;
function useOverlayStyle(props2) {
  var _toRefs = toRefs(props2), popupProps2 = _toRefs.popupProps, autoWidth = _toRefs.autoWidth;
  var innerPopupVisible = ref(false);
  var tOverlayStyle = ref();
  var macthWidthFunc = function macthWidthFunc2(triggerElement, popupElement) {
    var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
    var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
    var otherOverlayStyle = {};
    if (popupProps2.value && _typeof$1(popupProps2.value.overlayStyle) === "object" && !popupProps2.value.overlayStyle.width) {
      otherOverlayStyle = popupProps2.value.overlayStyle;
    }
    return _objectSpread$_({
      width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
    }, otherOverlayStyle);
  };
  var onInnerPopupVisibleChange = function onInnerPopupVisibleChange2(visible4, context) {
    var _props$onPopupVisible;
    if (props2.disabled || props2.readonly)
      return;
    var newVisible = context.trigger === "trigger-element-click" ? true : visible4;
    innerPopupVisible.value = newVisible;
    (_props$onPopupVisible = props2.onPopupVisibleChange) === null || _props$onPopupVisible === void 0 ? void 0 : _props$onPopupVisible.call(props2, newVisible, context);
  };
  watch([innerPopupVisible, popupProps2], function() {
    var _popupProps$value;
    if (tOverlayStyle.value)
      return;
    var result = {};
    var overlayStyle2 = ((_popupProps$value = popupProps2.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.overlayStyle) || {};
    if (isFunction_1(overlayStyle2) || isObject_1(overlayStyle2) && overlayStyle2.width) {
      result = overlayStyle2;
    } else if (!autoWidth.value) {
      result = macthWidthFunc;
    }
    tOverlayStyle.value = result;
  });
  return {
    tOverlayStyle,
    innerPopupVisible,
    onInnerPopupVisibleChange
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$_(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$Z(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$_(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var useComponentClassName3 = function useComponentClassName4() {
  return {
    NAME_CLASS: usePrefixClass("select-input"),
    BASE_CLASS_BORDERLESS: usePrefixClass("select-input--borderless"),
    BASE_CLASS_MULTIPLE: usePrefixClass("select-input--multiple"),
    BASE_CLASS_POPUP_VISIBLE: usePrefixClass("select-input--popup-visible"),
    BASE_CLASS_EMPTY: usePrefixClass("select-input--empty")
  };
};
var _SelectInput = defineComponent({
  name: "TSelectInput",
  props: _objectSpread$Z({}, props$q),
  setup: function setup72(props2, context) {
    var _useComponentClassNam = useComponentClassName3(), NAME_CLASS = _useComponentClassNam.NAME_CLASS, BASE_CLASS_BORDERLESS = _useComponentClassNam.BASE_CLASS_BORDERLESS, BASE_CLASS_MULTIPLE = _useComponentClassNam.BASE_CLASS_MULTIPLE, BASE_CLASS_POPUP_VISIBLE = _useComponentClassNam.BASE_CLASS_POPUP_VISIBLE, BASE_CLASS_EMPTY = _useComponentClassNam.BASE_CLASS_EMPTY;
    var classPrefix2 = usePrefixClass();
    var selectInputRef = ref();
    var selectInputWrapRef = ref();
    var _toRefs = toRefs(props2), multiple = _toRefs.multiple, value6 = _toRefs.value, popupVisible = _toRefs.popupVisible, borderless = _toRefs.borderless;
    var _useSingle = useSingle(props2, context), commonInputProps = _useSingle.commonInputProps, onInnerClear = _useSingle.onInnerClear, renderSelectSingle = _useSingle.renderSelectSingle;
    var _useMultiple = useMultiple(props2, context), renderSelectMultiple = _useMultiple.renderSelectMultiple;
    var _useOverlayStyle = useOverlayStyle(props2), tOverlayStyle = _useOverlayStyle.tOverlayStyle, innerPopupVisible = _useOverlayStyle.innerPopupVisible, onInnerPopupVisibleChange = _useOverlayStyle.onInnerPopupVisibleChange;
    var popupClasses = computed(function() {
      var _popupVisible$value, _ref;
      return [NAME_CLASS.value, (_ref = {}, _defineProperty$3(_ref, BASE_CLASS_BORDERLESS.value, borderless.value), _defineProperty$3(_ref, BASE_CLASS_MULTIPLE.value, multiple.value), _defineProperty$3(_ref, BASE_CLASS_POPUP_VISIBLE.value, (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), _defineProperty$3(_ref, BASE_CLASS_EMPTY.value, value6.value instanceof Array ? !value6.value.length : !value6.value), _ref)];
    });
    return {
      classPrefix: classPrefix2,
      NAME_CLASS,
      selectInputWrapRef,
      innerPopupVisible,
      commonInputProps,
      tOverlayStyle,
      selectInputRef,
      popupClasses,
      onInnerClear,
      renderSelectSingle,
      renderSelectMultiple,
      onInnerPopupVisibleChange
    };
  },
  render: function render58() {
    var _this$popupVisible, _this$popupProps, _this = this;
    var visibleProps = {
      visible: (_this$popupVisible = this.popupVisible) !== null && _this$popupVisible !== void 0 ? _this$popupVisible : this.innerPopupVisible
    };
    var mainContent = createVNode(Popup, mergeProps({
      "ref": "selectInputRef",
      "class": this.popupClasses,
      "trigger": ((_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.trigger) || "click",
      "placement": "bottom-left"
    }, visibleProps, {
      "content": this.panel,
      "hideEmptyPopup": true,
      "onVisibleChange": this.onInnerPopupVisibleChange
    }, this.popupProps, {
      "overlayStyle": this.tOverlayStyle
    }), _objectSpread$Z({
      "default": function _default65() {
        return [_this.multiple ? _this.renderSelectMultiple({
          commonInputProps: _this.commonInputProps,
          onInnerClear: _this.onInnerClear,
          popupVisible: visibleProps.visible
        }) : _this.renderSelectSingle(visibleProps.visible)];
      }
    }, _objectSpread$Z(_objectSpread$Z({}, this.$slots), {}, {
      content: this.$slots.panel
    })));
    if (!this.tips)
      return mainContent;
    return createVNode("div", {
      "ref": "selectInputWrapRef",
      "class": "".concat(this.NAME_CLASS, "__wrap")
    }, [mainContent, createVNode("div", {
      "class": "".concat(this.classPrefix, "-input__tips ").concat(this.classPrefix, "-input__tips--").concat(this.status || "normal")
    }, [this.tips])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var SelectInput = withInstall(_SelectInput);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$p = {
  autofocus: Boolean,
  autosize: {
    type: [Boolean, Object],
    "default": false
  },
  disabled: Boolean,
  maxcharacter: {
    type: Number
  },
  maxlength: {
    type: Number
  },
  name: {
    type: String,
    "default": ""
  },
  placeholder: {
    type: String,
    "default": void 0
  },
  readonly: Boolean,
  status: {
    type: String,
    validator: function validator79(val) {
      return ["success", "warning", "error"].includes(val);
    }
  },
  tips: {
    type: [String, Function]
  },
  value: {
    type: [String, Number]
  },
  modelValue: {
    type: [String, Number]
  },
  defaultValue: {
    type: [String, Number]
  },
  onBlur: Function,
  onChange: Function,
  onFocus: Function,
  onKeydown: Function,
  onKeypress: Function,
  onKeyup: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var hiddenTextarea;
var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
var SIZING_PROPS = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
function calculateNodeStyling(targetElement) {
  var style = window.getComputedStyle(targetElement);
  var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
  var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
  var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
  var sizingStyle = SIZING_PROPS.map(function(name2) {
    return "".concat(name2, ":").concat(style.getPropertyValue(name2));
  }).join(";");
  return {
    sizingStyle,
    paddingSize,
    borderSize,
    boxSizing
  };
}
function calcTextareaHeight(targetElement) {
  var minRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var maxRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    document.body.appendChild(hiddenTextarea);
  }
  var _calculateNodeStyling = calculateNodeStyling(targetElement), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;
  hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
  hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
  var height = hiddenTextarea.scrollHeight;
  var result = {};
  if (boxSizing === "border-box") {
    height += borderSize;
  } else if (boxSizing === "content-box") {
    height -= paddingSize;
  }
  hiddenTextarea.value = "";
  var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
  if (minRows !== null) {
    var minHeight = singleRowHeight * minRows;
    if (boxSizing === "border-box") {
      minHeight = minHeight + paddingSize + borderSize;
    }
    height = Math.max(minHeight, height);
    result.minHeight = "".concat(minHeight, "px");
  }
  if (maxRows !== null) {
    var maxHeight = singleRowHeight * maxRows;
    if (boxSizing === "border-box") {
      maxHeight = maxHeight + paddingSize + borderSize;
    }
    height = Math.min(maxHeight, height);
  }
  result.height = "".concat(height, "px");
  hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
  hiddenTextarea = null;
  return result;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$Z(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$Y(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$Z(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getValidAttrs(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function(key) {
    if (typeof obj[key] !== "undefined") {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}
var _Textarea = defineComponent({
  name: "TTextarea",
  props: _objectSpread$Y({}, props$p),
  emits: ["update:modelValue"],
  setup: function setup73(props2, _ref) {
    var attrs = _ref.attrs;
    var prefix2 = usePrefixClass();
    var name2 = usePrefixClass("textarea");
    computed(function() {
      return "".concat(name2.value, "__wrap");
    });
    var TEXTAREA_TIPS_CLASS = computed(function() {
      return "".concat(name2.value, "__tips");
    });
    var TEXTAREA_LIMIT = computed(function() {
      return "".concat(name2.value, "__limit");
    });
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
    var disabled2 = useFormDisabled();
    var textareaStyle = ref({});
    var refTextareaElem = ref();
    var focused = ref(false);
    var adjustTextareaHeight = function adjustTextareaHeight2() {
      if (props2.autosize === true) {
        nextTick(function() {
          textareaStyle.value = calcTextareaHeight(refTextareaElem.value);
        });
      } else if (_typeof$1(props2.autosize) === "object") {
        var _props2$autosize = props2.autosize, minRows = _props2$autosize.minRows, maxRows = _props2$autosize.maxRows;
        textareaStyle.value = calcTextareaHeight(refTextareaElem.value, minRows, maxRows);
      } else if (attrs.rows) {
        textareaStyle.value = {
          height: "auto",
          minHeight: "auto"
        };
      }
    };
    var setInputValue4 = function setInputValue5() {
      var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
      var textareaElem = refTextareaElem.value;
      var sV = String(v);
      if (!textareaElem) {
        return;
      }
      if (textareaElem.value !== sV) {
        textareaElem.value = sV;
        innerValue.value = sV;
      }
    };
    var inputValueChangeHandle2 = function inputValueChangeHandle3(e) {
      var target = e.target;
      var val = target.value;
      if (props2.maxcharacter && props2.maxcharacter >= 0) {
        var stringInfo = getCharacterLength(val, props2.maxcharacter);
        val = _typeof$1(stringInfo) === "object" && stringInfo.characters;
      }
      setInnerValue(val, {
        e
      });
      nextTick(function() {
        return setInputValue4(val);
      });
      adjustTextareaHeight();
    };
    var handleInput3 = function handleInput4(e) {
      if (e.isComposing || e.inputType === "insertCompositionText")
        return;
      inputValueChangeHandle2(e);
    };
    var onCompositionend = function onCompositionend2(e) {
      inputValueChangeHandle2(e);
    };
    var eventDeal = function eventDeal2(name22, e) {
      var _props2$_name;
      if (disabled2.value)
        return;
      var _name = "on".concat(name22[0].toUpperCase()).concat(name22.slice(1));
      (_props2$_name = props2[_name]) === null || _props2$_name === void 0 ? void 0 : _props2$_name.call(props2, innerValue.value, {
        e
      });
    };
    var emitKeyDown = function emitKeyDown2(e) {
      eventDeal("keydown", e);
    };
    var emitKeyUp = function emitKeyUp2(e) {
      eventDeal("keyup", e);
    };
    var emitKeypress = function emitKeypress2(e) {
      eventDeal("keypress", e);
    };
    var emitFocus2 = function emitFocus3(e) {
      var _props2$onFocus;
      if (disabled2.value)
        return;
      focused.value = true;
      (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, innerValue.value, {
        e
      });
    };
    var emitBlur = function emitBlur2(e) {
      var _props2$onBlur;
      focused.value = false;
      (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, innerValue.value, {
        e
      });
    };
    var textareaClasses = computed(function() {
      var _ref2;
      return [name2.value, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix2.value, "-is-disabled"), disabled2.value), _defineProperty$3(_ref2, "".concat(prefix2.value, "-is-readonly"), props2.readonly), _ref2)];
    });
    var inputAttrs3 = computed(function() {
      return getValidAttrs({
        autofocus: props2.autofocus,
        disabled: disabled2.value,
        readonly: props2.readonly,
        placeholder: props2.placeholder,
        maxlength: props2.maxlength || void 0,
        name: props2.name || void 0
      });
    });
    var characterNumber = computed(function() {
      var characterInfo = getCharacterLength(String(innerValue.value || ""));
      if (_typeof$1(characterInfo) === "object") {
        return characterInfo.length;
      }
      return characterInfo;
    });
    watch(function() {
      return innerValue.value;
    }, function() {
      return adjustTextareaHeight();
    });
    watch(refTextareaElem, function(el) {
      if (!el)
        return;
      adjustTextareaHeight();
    });
    onMounted(function() {
      adjustTextareaHeight();
    });
    var renderTNodeJSX3 = useTNodeJSX();
    return function() {
      var _String;
      var inputEvents2 = getValidAttrs({
        onFocus: emitFocus2,
        onBlur: emitBlur,
        onKeydown: emitKeyDown,
        onKeyup: emitKeyUp,
        onKeypress: emitKeypress
      });
      var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
      var classes6 = computed(function() {
        var _ref3;
        return ["".concat(name2.value, "__inner"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix2.value, "-is-").concat(props2.status), props2.status), _defineProperty$3(_ref3, STATUS.value.disabled, disabled2.value), _defineProperty$3(_ref3, STATUS.value.focused, focused.value), _defineProperty$3(_ref3, "".concat(prefix2.value, "-resize-none"), props2.maxlength), _ref3), "narrow-scrollbar"];
      });
      var tips = renderTNodeJSX3("tips");
      return createVNode("div", {
        "class": textareaClasses.value
      }, [createVNode("textarea", mergeProps({
        "onInput": handleInput3,
        "onCompositionend": onCompositionend,
        "ref": refTextareaElem,
        "value": innerValue.value,
        "style": textareaStyle.value,
        "class": classes6.value
      }, inputEvents2, inputAttrs3.value), null), props2.maxcharacter && createVNode("span", {
        "class": TEXTAREA_LIMIT.value
      }, ["".concat(characterNumber.value, "/").concat(props2.maxcharacter)]), !props2.maxcharacter && props2.maxlength ? createVNode("span", {
        "class": TEXTAREA_LIMIT.value
      }, ["".concat(innerValue.value ? (_String = String(innerValue.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(props2.maxlength)]) : null, tips && createVNode("div", {
        "class": "".concat(TEXTAREA_TIPS_CLASS.value, " ").concat(name2.value, "__tips--").concat(props2.status || "normal")
      }, [tips])]);
    };
  }
});
var index$n = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Textarea = withInstall(_Textarea);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$Y(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$X(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$Y(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var TRANSFER_NAME = "TTransfer";
function getTransferListOption(prop) {
  if (Array.isArray(prop)) {
    return {
      source: prop[0],
      target: prop[1]
    };
  }
  return {
    source: prop,
    target: prop
  };
}
function getDataValues(data26, filterValues) {
  var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$isTreeMode = _ref.isTreeMode, isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode, _ref$include = _ref.include, include = _ref$include === void 0 ? true : _ref$include;
  if (isTreeMode) {
    var result = [];
    if (data26) {
      for (var i = 0; i < data26.length; i++) {
        var item = data26[i];
        var isInclude = filterValues.includes(item.value);
        if (!include && isInclude) {
          continue;
        }
        if (item.children && item.children.length > 0) {
          var childResult = getDataValues(item.children, filterValues, {
            isTreeMode,
            include
          });
          result = result.concat(childResult);
        } else if (include && isInclude || !include && !isInclude) {
          result.push(item.value);
        }
      }
    }
    return result;
  }
  return data26.filter(function(item2) {
    var isInclude2 = filterValues.includes(item2.value);
    return (include && isInclude2 || !include && !isInclude2) && !item2.disabled;
  }).map(function(item2) {
    return item2.value;
  });
}
function getTransferData(data26, keys2) {
  var isTreeMode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var list = data26.map(function(transferDataItem, index2) {
    var _transferDataItem$dis;
    var labelKey = (keys2 === null || keys2 === void 0 ? void 0 : keys2.label) || "label";
    var valueKey = (keys2 === null || keys2 === void 0 ? void 0 : keys2.value) || "value";
    if (transferDataItem[labelKey] === void 0) {
      throw new Error("".concat(labelKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
    }
    if (transferDataItem[valueKey] === void 0) {
      throw new Error("".concat(valueKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
    }
    var result = {
      label: transferDataItem[labelKey],
      value: transferDataItem[valueKey],
      key: "key__value_".concat(transferDataItem[valueKey], "_index_").concat(index2),
      disabled: (_transferDataItem$dis = transferDataItem.disabled) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,
      data: transferDataItem
    };
    if (isTreeMode && transferDataItem.children) {
      result.children = getTransferData(transferDataItem.children, keys2, true);
    }
    return result;
  });
  return list;
}
function isAllNodeValid(data26, filterValues, needMatch) {
  if (filterValues.includes(data26.value)) {
    return needMatch;
  }
  return false;
}
function isTreeNodeValid(data26, filterValues, needMatch) {
  if (!data26)
    return !needMatch;
  if (filterValues.includes(data26.value)) {
    return needMatch;
  }
  if (data26.children) {
    return data26.children.some(function(item) {
      return isTreeNodeValid(item, filterValues, needMatch);
    });
  }
  return !needMatch;
}
function cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {
  sourceTree.forEach(function(item) {
    var newNode;
    if (isAllNodeValid(item, filterValues, needMatch)) {
      newNode = cloneDeep_1(item);
      targetTree.push(newNode);
    } else if (isTreeNodeValid(item, filterValues, needMatch)) {
      newNode = _objectSpread$X({}, item);
      delete newNode.children;
      targetTree.push(newNode);
      if (item.children) {
        newNode.children = [];
        cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);
        if (newNode.children.length === 0) {
          delete newNode.children;
        }
      }
    }
  });
}
function filterTransferData(data26, filterValues) {
  var needMatch = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var isTreeMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (!isTreeMode) {
    if (needMatch) {
      return filterValues.map(function(value6) {
        return data26.find(function(item) {
          return item.value === value6;
        });
      });
    }
    return data26.filter(function(item) {
      var isMatch = filterValues.includes(item.value);
      return !isMatch;
    });
  }
  var result = [];
  cloneTreeWithFilter(data26, result, filterValues, needMatch);
  return result;
}
function getLeefCount(nodes) {
  var total = 0;
  nodes.forEach(function(child) {
    if (child.children && child.children.length > 0) {
      total += getLeefCount(child.children);
    } else {
      total += 1;
    }
  });
  return total;
}
var index$m = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Search = defineComponent({
  name: "TTransferSearch",
  props: {
    value: {
      type: String,
      "default": ""
    },
    search: {
      type: [Boolean, Object],
      "default": false
    },
    placeholder: {
      type: String,
      "default": ""
    }
  },
  setup: function setup74(props2) {
    var classPrefix2 = usePrefixClass();
    var handleChange5 = function handleChange6(value6, changeCtx) {
      var _props$onChange;
      (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props2, {
        value: value6,
        e: changeCtx.e
      });
    };
    var inputProps = _typeof$1(props2.search) === "object" ? props2.search : {
      clearable: true
    };
    return function() {
      return createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__search-wrapper")
      }, [createVNode(Input, mergeProps(inputProps, {
        "defaultValue": props2.value,
        "onChange": handleChange5,
        "placeholder": props2.placeholder
      }), {
        "default": function _default65() {
          return [createVNode(search, {
            "slot": "suffix-icon"
          }, null)];
        }
      })]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$X(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$W(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$X(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$g(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var props$o = {
  checkboxProps: {
    type: Object,
    "default": function _default25() {
      return {};
    }
  },
  dataSource: {
    type: Array,
    "default": function _default26() {
      return [];
    }
  },
  listType: {
    type: String,
    "default": "target"
  },
  title: {
    type: [String, Function]
  },
  checkedValue: {
    type: Array,
    "default": function _default27() {
      return [];
    }
  },
  disabled: {
    type: Boolean,
    "default": false
  },
  search: {
    type: [Boolean, Object],
    "default": false
  },
  transferItem: Function,
  empty: {
    type: [Function, String]
  },
  pagination: [Boolean, Object],
  footer: [Function, String],
  checkAll: Boolean,
  t: Function,
  global: Object,
  isTreeMode: {
    type: Boolean,
    "default": false
  }
};
var TransferList = defineComponent({
  name: "TTransferList",
  props: _objectSpread$W({}, props$o),
  setup: function setup75(props2, _ref) {
    var slots = _ref.slots;
    var classPrefix2 = usePrefixClass();
    var filterValue = ref("");
    var defaultCurrent = ref(1);
    var defaultPageSize = ref(0);
    var currentPage = computed(function() {
      var pagination = props2.pagination;
      return (pagination === null || pagination === void 0 ? void 0 : pagination.current) || defaultCurrent.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultCurrent);
    });
    var pageSize = computed(function() {
      var pagination = props2.pagination;
      return (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) || defaultPageSize.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultPageSize);
    });
    var filteredData = computed(function() {
      return props2.dataSource.filter(function(item) {
        var label2 = item && item.label.toString();
        return label2.toLowerCase().indexOf(filterValue.value.toLowerCase()) > -1;
      });
    });
    var pageTotal = computed(function() {
      return filteredData.value && filteredData.value.length || 0;
    });
    var curPageData = computed(function() {
      var pageData = filteredData.value;
      if (!props2.pagination)
        return pageData;
      if (pageSize.value === 0)
        return pageData;
      var startIndex = (currentPage.value - 1) * pageSize.value;
      var endIndex = currentPage.value * pageSize.value;
      pageData = pageData.slice(startIndex, endIndex);
      return pageData;
    });
    var paginationProps = computed(function() {
      var defaultPaginationProps = {
        size: "small",
        theme: "simple",
        totalContent: false,
        pageSizeOptions: []
      };
      return _typeof$1(props2.pagination) === "object" ? _objectSpread$W(_objectSpread$W(_objectSpread$W({}, defaultPaginationProps), props2.pagination), {}, {
        current: currentPage.value,
        total: pageTotal.value,
        pageSize: pageSize.value
      }) : {};
    });
    computed(function() {
      return !!slots["default"];
    });
    var isAllChecked = computed(function() {
      return props2.checkedValue.length > 0 && props2.dataSource.every(function(item) {
        return item.disabled || props2.checkedValue.includes(item.value);
      });
    });
    var indeterminate = computed(function() {
      return !isAllChecked.value && props2.checkedValue.length > 0;
    });
    var totalCount = computed(function() {
      return getLeefCount(props2.dataSource);
    });
    var handlePaginationChange = function handlePaginationChange2(pageInfo) {
      var _props2$onPageChange;
      (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo);
      defaultCurrent.value = pageInfo.current;
      defaultPageSize.value = pageInfo.pageSize;
    };
    var handleCheckedChange = function handleCheckedChange2(val) {
      var _props2$onCheckedChan;
      (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, val);
    };
    var handleCheckedAllChange = function handleCheckedAllChange2(checked) {
      if (checked) {
        var allValue = getDataValues(props2.dataSource, [], {
          isTreeMode: props2.isTreeMode,
          include: false
        });
        handleCheckedChange(allValue);
      } else {
        handleCheckedChange([]);
      }
    };
    var scroll = function scroll2(e) {
      var _props2$onScroll;
      (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, e);
    };
    var handleSearch = function handleSearch2(e) {
      var _props2$onSearch;
      var event = {
        query: e.value,
        type: props2.listType,
        e: e.e,
        trigger: e.trigger
      };
      filterValue.value = e.value;
      (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, event);
    };
    var renderTNodeJSX3 = useTNodeDefault();
    var renderTitle3 = function renderTitle4() {
      var defaultNode = props2.title && typeof props2.title === "string" ? createVNode("template", null, [props2.title]) : null;
      var titleNode = renderTNodeJSX3("title", {
        defaultNode,
        params: {
          type: props2.listType
        }
      });
      return createVNode("span", null, [titleNode]);
    };
    var renderContent6 = function renderContent7() {
      var _slot2;
      var defaultNode = createVNode(CheckboxGroup, {
        "value": props2.checkedValue,
        "onChange": handleCheckedChange
      }, _isSlot$g(_slot2 = curPageData.value.map(function(item, index2) {
        var _slot;
        return createVNode(Checkbox, mergeProps({
          "disabled": props2.disabled || item.disabled,
          "value": item.value,
          "needRipple": true,
          "class": ["".concat(classPrefix2.value, "-transfer__list-item"), props2.checkedValue.includes(item.value) ? "".concat(classPrefix2.value, "-is-checked") : ""],
          "key": item.key
        }, {
          props: props2.checkboxProps
        }), _isSlot$g(_slot = renderTNodeJSX3("transferItem", {
          defaultNode: createVNode("span", null, [item.label]),
          params: {
            data: item.data,
            index: index2,
            type: props2.listType
          }
        })) ? _slot : {
          "default": function _default65() {
            return [_slot];
          }
        });
      })) ? _slot2 : {
        "default": function _default65() {
          return [_slot2];
        }
      });
      return createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__list-content narrow-scrollbar"),
        "onScroll": scroll
      }, [renderTNodeJSX3("tree", {
        defaultNode,
        params: {
          data: curPageData.value,
          value: props2.checkedValue,
          onChange: handleCheckedChange
        }
      })]);
    };
    var renderEmpty = function renderEmpty2() {
      var empty2 = props2.empty || props2.t(props2.global.empty);
      var defaultNode = typeof empty2 === "string" ? createVNode("span", null, [empty2]) : null;
      return createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__empty")
      }, [renderTNodeJSX3("empty", {
        defaultNode,
        params: {
          type: props2.listType
        }
      })]);
    };
    var renderFooter2 = function renderFooter3() {
      var defaultNode = typeof props2.footer === "string" ? createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__footer")
      }, [props2.footer]) : null;
      return renderTNodeJSX3("footer", {
        defaultNode,
        params: {
          type: props2.listType
        }
      });
    };
    return function() {
      return createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__list ").concat(classPrefix2.value, "-transfer__list-").concat(props2.listType)
      }, [createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__list-header")
      }, [createVNode("div", null, [props2.checkAll && createVNode(Checkbox, {
        "disabled": props2.disabled || !props2.dataSource.length,
        "checked": isAllChecked.value,
        "indeterminate": indeterminate.value,
        "onChange": handleCheckedAllChange
      }, null), createVNode("span", null, [props2.t(props2.global.title, {
        checked: props2.checkedValue.length,
        total: totalCount.value
      })])]), renderTitle3()]), createVNode("div", {
        "class": ["".concat(classPrefix2.value, "-transfer__list-body"), props2.search ? "".concat(classPrefix2.value, "-transfer__list--with-search") : ""]
      }, [props2.search && createVNode(Search, {
        "searchValue": filterValue.value,
        "placeholder": props2.t(props2.global.placeholder),
        "onChange": handleSearch,
        "disabled": props2.disabled,
        "search": props2.search
      }, null), curPageData.value.length > 0 ? renderContent6() : renderEmpty()]), props2.pagination && pageSize.value > 0 && pageTotal.value > 0 && createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__list-pagination")
      }, [createVNode(resolveComponent("t-pagination"), mergeProps(paginationProps.value, {
        "onChange": handlePaginationChange
      }), null)]), renderFooter2()]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$f(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var TransferOperations = defineComponent({
  name: "TTransferOperations",
  props: {
    leftDisabled: {
      type: Boolean,
      required: true
    },
    rightDisabled: {
      type: Boolean,
      required: true
    },
    operation: {
      type: [String, Array, Function, Boolean]
    }
  },
  emits: ["moveToRight", "moveToLeft"],
  setup: function setup76(props2, _ref) {
    var slots = _ref.slots, emit = _ref.emit;
    var classPrefix2 = usePrefixClass();
    var moveToRight = function moveToRight2() {
      emit("moveToRight");
    };
    var moveToLeft = function moveToLeft2() {
      emit("moveToLeft");
    };
    var getIconRight = function getIconRight2() {
      return createVNode(chevronRight, null, null);
    };
    var getIconLeft = function getIconLeft2() {
      return createVNode(chevronLeft, null, null);
    };
    var getIcon2 = function getIcon3(direction) {
      if (typeof props2.operation === "function") {
        return null;
      }
      if (direction === "right" && props2.operation && typeof props2.operation[0] === "function") {
        return null;
      }
      if (direction === "left" && props2.operation && typeof props2.operation[1] === "function") {
        return null;
      }
      if (slots.operation) {
        return null;
      }
      return direction === "left" ? getIconLeft : getIconRight;
    };
    var renderButton = function renderButton2(h2, direction) {
      if (typeof slots.operation === "function") {
        return slots.operation({
          direction
        });
      }
      if (typeof props2.operation === "function") {
        var renderContent22 = props2.operation;
        return renderContent22(h2, {
          direction
        });
      }
      var renderContent6;
      if (Array.isArray(props2.operation)) {
        var _props$operation = _slicedToArray(props2.operation, 2), left2 = _props$operation[0], right2 = _props$operation[1];
        renderContent6 = direction === "right" ? right2 : left2;
      } else {
        renderContent6 = "";
      }
      return renderContent6;
    };
    return function() {
      var _slot, _slot2;
      return createVNode("div", {
        "class": "".concat(classPrefix2.value, "-transfer__operations")
      }, [createVNode(resolveComponent("t-button"), {
        "variant": props2.rightDisabled ? "outline" : "base",
        "key": props2.rightDisabled ? "right-outline" : "right-base",
        "disabled": props2.rightDisabled,
        "onClick": moveToRight,
        "icon": getIcon2("right")
      }, _isSlot$f(_slot = renderButton(h, "right")) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      }), createVNode(resolveComponent("t-button"), {
        "variant": props2.leftDisabled ? "outline" : "base",
        "key": props2.rightDisabled ? "left-outline" : "left-base",
        "disabled": props2.leftDisabled,
        "onClick": moveToLeft,
        "icon": getIcon2("left")
      }, _isSlot$f(_slot2 = renderButton(h, "left")) ? _slot2 : {
        "default": function _default65() {
          return [_slot2];
        }
      })]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$n = {
  checkboxProps: {
    type: Object
  },
  checked: {
    type: Array,
    "default": function _default28() {
      return [];
    }
  },
  defaultChecked: {
    type: Array,
    "default": function _default29() {
      return [];
    }
  },
  data: {
    type: Array,
    "default": function _default30() {
      return [];
    }
  },
  direction: {
    type: String,
    "default": "both",
    validator: function validator80(val) {
      return ["left", "right", "both"].includes(val);
    }
  },
  disabled: {
    type: [Boolean, Array],
    "default": false
  },
  empty: {
    type: [String, Array, Function],
    "default": ""
  },
  footer: {
    type: [Array, Function]
  },
  keys: {
    type: Object
  },
  operation: {
    type: [Array, Function]
  },
  pagination: {
    type: [Object, Array]
  },
  search: {
    type: [Boolean, Object, Array],
    "default": false
  },
  showCheckAll: {
    type: [Boolean, Array],
    "default": true
  },
  targetSort: {
    type: String,
    "default": "original",
    validator: function validator81(val) {
      return ["original", "push", "unshift"].includes(val);
    }
  },
  title: {
    type: [Array, Function],
    "default": function _default31() {
      return [];
    }
  },
  transferItem: {
    type: Function
  },
  value: {
    type: Array,
    "default": void 0
  },
  modelValue: {
    type: Array,
    "default": void 0
  },
  defaultValue: {
    type: Array,
    "default": function _default32() {
      return [];
    }
  },
  onChange: Function,
  onCheckedChange: Function,
  onPageChange: Function,
  onScroll: Function,
  onSearch: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$W(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$V(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$W(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$e(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var SOURCE = "source";
var TARGET = "target";
var _Transfer = defineComponent({
  name: TRANSFER_NAME,
  components: {
    TransferList,
    TransferOperations
  },
  props: _objectSpread$V({}, props$n),
  setup: function setup77(props2, _ref) {
    var slots = _ref.slots;
    var disabled2 = useFormDisabled();
    var classPrefix2 = usePrefixClass();
    var _useConfig = useConfig("transfer"), t = _useConfig.t, global2 = _useConfig.global;
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
    var initChecked = computed(function() {
      if (props2.checked && props2.checked.length) {
        return props2.checked;
      }
      if (props2.defaultChecked && props2.defaultChecked.length) {
        return props2.defaultChecked;
      }
      return [];
    });
    var checkedValueList = ref(initChecked.value);
    var valueList = ref(innerValue.value || []);
    var isTreeMode = computed(function() {
      var treeSlot = slots.tree;
      return typeof treeSlot === "function";
    });
    var leftButtonDisabled = computed(function() {
      return props2.direction === "right";
    });
    var rightButtonDisabled = computed(function() {
      return props2.direction === "left";
    });
    var transferData = computed(function() {
      return getTransferData(props2.data, props2.keys, isTreeMode.value);
    });
    var sourceList = computed(function() {
      return filterTransferData(transferData.value, valueList.value, false, isTreeMode.value);
    });
    var targetList = computed(function() {
      return filterTransferData(transferData.value, valueList.value, true, isTreeMode.value);
    });
    var checkedValue = computed(function() {
      var _ref2;
      return _ref2 = {}, _defineProperty$3(_ref2, SOURCE, getDataValues(sourceList.value, checkedValueList.value, {
        isTreeMode: isTreeMode.value
      })), _defineProperty$3(_ref2, TARGET, getDataValues(targetList.value, checkedValueList.value, {
        isTreeMode: isTreeMode.value
      })), _ref2;
    });
    var hasFooter = computed(function() {
      return !!slots.footer || !!props2.footer;
    });
    var showPagination = computed(function() {
      return !!props2.pagination && !slots.content;
    });
    var showSearch = computed(function() {
      return !!props2.search;
    });
    var footerOption = computed(function() {
      var footer = props2.footer || "";
      return getTransferListOption(footer);
    });
    var emptyOption = computed(function() {
      return getTransferListOption(props2.empty);
    });
    var searchOption = computed(function() {
      return getTransferListOption(props2.search);
    });
    var checkAllOption = computed(function() {
      return getTransferListOption(props2.showCheckAll);
    });
    var disabledOption = computed(function() {
      return getTransferListOption(disabled2.value);
    });
    var titleOption = computed(function() {
      return getTransferListOption(props2.title);
    });
    var paginationOption = computed(function() {
      return getTransferListOption(props2.pagination);
    });
    var handleCheckedChange = function handleCheckedChange2(val, listType) {
      var _props2$onUpdateChec, _props2$onCheckedChan;
      var sourceChecked = listType === SOURCE ? val : checkedValue.value[SOURCE];
      var targetChecked = listType === TARGET ? val : checkedValue.value[TARGET];
      var checked = [].concat(_toConsumableArray(sourceChecked), _toConsumableArray(targetChecked));
      var event = {
        checked,
        sourceChecked,
        targetChecked,
        type: listType
      };
      (_props2$onUpdateChec = props2["onUpdate:checked"]) === null || _props2$onUpdateChec === void 0 ? void 0 : _props2$onUpdateChec.call(props2, checked);
      (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, event);
      checkedValueList.value = checked;
    };
    var transferTo = function transferTo2(toDirection) {
      var oldTargetValue = JSON.parse(JSON.stringify(valueList.value));
      var newTargetValue;
      var selfCheckedValue = toDirection === TARGET ? checkedValue.value[SOURCE] : checkedValue.value[TARGET];
      if (toDirection === SOURCE) {
        newTargetValue = oldTargetValue.filter(function(v) {
          return !selfCheckedValue.includes(v);
        });
      } else if (props2.targetSort === "original") {
        newTargetValue = getDataValues(transferData.value, oldTargetValue.concat(selfCheckedValue), {
          isTreeMode: isTreeMode.value
        });
      } else if (props2.targetSort === "unshift") {
        newTargetValue = selfCheckedValue.concat(oldTargetValue);
      } else {
        newTargetValue = oldTargetValue.concat(selfCheckedValue);
      }
      handleCheckedChange([], toDirection === SOURCE ? TARGET : SOURCE);
      var params = {
        type: toDirection,
        movedValue: selfCheckedValue
      };
      valueList.value = newTargetValue;
      setInnerValue(newTargetValue, params);
    };
    var transferToRight = function transferToRight2() {
      transferTo(TARGET);
    };
    var transferToLeft = function transferToLeft2() {
      transferTo(SOURCE);
    };
    var handleScroll3 = function handleScroll4(e, listType) {
      var _props2$onScroll;
      var target = e.target;
      var bottomDistance = target.scrollHeight - target.scrollTop - target.clientHeight;
      var event = {
        e,
        bottomDistance,
        type: listType
      };
      (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, event);
    };
    var handleSearch = function handleSearch2(e) {
      var _props2$onSearch;
      (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, e);
    };
    var handlePageChange = function handlePageChange2(pageInfo, listType) {
      var _props2$onPageChange;
      (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo, {
        type: listType
      });
    };
    var renderTransferList = function renderTransferList2(listType) {
      var scopedSlots = pick_1(slots, ["title", "empty", "footer", "operation", "transferItem", "default", "tree"]);
      return createVNode(resolveComponent("transfer-list"), {
        "checkboxProps": props2.checkboxProps,
        "transferItem": props2.transferItem,
        "list-type": listType,
        "title": titleOption.value[listType],
        "data-source": listType === SOURCE ? sourceList.value : targetList.value,
        "checked-value": checkedValue.value[listType],
        "disabled": disabledOption.value[listType],
        "search": searchOption.value[listType],
        "pagination": paginationOption.value[listType],
        "check-all": checkAllOption.value[listType],
        "footer": footerOption.value[listType],
        "empty": emptyOption.value[listType],
        "onCheckedChange": function onCheckedChange($event) {
          return handleCheckedChange($event, listType);
        },
        "onScroll": function onScroll($event) {
          return handleScroll3($event, listType);
        },
        "onSearch": handleSearch,
        "onPageChange": function onPageChange($event) {
          return handlePageChange($event, listType);
        },
        "t": t,
        "global": global2.value,
        "isTreeMode": isTreeMode.value
      }, _isSlot$e(scopedSlots) ? scopedSlots : {
        "default": function _default65() {
          return [scopedSlots];
        }
      });
    };
    return function() {
      return createVNode("div", {
        "class": ["".concat(classPrefix2.value, "-transfer"), showSearch.value ? "".concat(classPrefix2.value, "-transfer__search") : "", hasFooter.value ? "".concat(classPrefix2.value, "-transfer__footer") : "", showPagination.value ? "".concat(classPrefix2.value, "-transfer__pagination") : "", isTreeMode.value ? "".concat(classPrefix2.value, "-transfer--with-tree") : ""]
      }, [renderTransferList(SOURCE), createVNode(resolveComponent("transfer-operations"), {
        "left-disabled": disabledOption.value[TARGET] || leftButtonDisabled.value || checkedValue.value[TARGET].length === 0,
        "right-disabled": disabledOption.value[SOURCE] || rightButtonDisabled.value || checkedValue.value[SOURCE].length === 0,
        "operation": props2.operation,
        "onMoveToRight": transferToRight,
        "onMoveToLeft": transferToLeft
      }, {
        operation: slots.operation
      }), renderTransferList(TARGET)]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Transfer = withInstall(_Transfer);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var InputItems = defineComponent({
  name: "TTimePickerInputItems",
  props: {
    format: {
      type: String,
      "default": ""
    },
    dayjs: {
      type: [Object, Array, void 0],
      "default": void 0
    },
    placeholder: {
      type: String,
      "default": ""
    },
    allowInput: {
      type: Boolean
    },
    isRangePicker: {
      type: Boolean,
      "default": false
    },
    disabled: {
      type: Boolean
    }
  },
  emits: ["change", "blurDefault", "focusDefault", "toggleMeridiem"],
  setup: function setup78() {
    var COMPONENT_NAME2 = usePrefixClass("time-picker");
    var _useConfig = useConfig("timePicker"), global2 = _useConfig.global;
    return {
      global: global2,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  computed: {
    displayTimeList: function displayTimeList() {
      return this.isRangePicker ? this.dayjs : [this.dayjs];
    }
  },
  methods: {
    onInput: function onInput(e, type, index2) {
      if (!this.allowInput)
        return;
      var target = e.target, data26 = e.data;
      var value6 = target.value;
      var format = this.$props.format;
      var curDayJs = this.displayTimeList[index2];
      var number2 = Number(value6);
      if (curDayJs[type] === "00" && number2 === 0 || value6 === "") {
        emitEvent(this, "change", {
          value: EMPTY_VALUE,
          type,
          index: index2
        });
      } else if ("".concat(number2).length > 2) {
        number2 = Number(data26);
      }
      var emitChange3 = true;
      if (!isNaN(number2)) {
        switch (type) {
          case "hour":
            if (number2 > (/[h]{1}/.test(format) ? 12 : 24) || number2 < 0) {
              emitChange3 = false;
            }
            break;
          case "minute":
            if (number2 > 59 || number2 < 0) {
              emitChange3 = false;
            }
            break;
          case "second":
            if (number2 > 59 || number2 < 0) {
              emitChange3 = false;
            }
            break;
        }
        if (emitChange3) {
          emitEvent(this, "change", {
            value: number2,
            type,
            index: index2
          });
        }
      }
      if (curDayJs[type] !== void 0)
        this.setInputValue(curDayJs[type], target);
    },
    onBlur: function onBlur(e, trigger2, index2, input) {
      this.allowInput && emitEvent(this, "blurDefault", e, trigger2, index2, input);
    },
    onFocus: function onFocus(e, trigger2, index2, input) {
      this.allowInput && emitEvent(this, "focusDefault", e, trigger2, index2, input);
    },
    onKeydown: function onKeydown(e, type, index2) {
      if (!this.allowInput)
        return;
      var which = e.which;
      var format = this.$props.format;
      var curDayJs = this.displayTimeList[index2];
      if ([KeyboardDirection.up, KeyboardDirection.down].includes(which)) {
        if (type === "meridiem")
          return;
        var current2 = curDayJs[type] ? Number(curDayJs[type]) : 0;
        var operate = which === KeyboardDirection.up ? -1 : 1;
        var result = current2 + operate;
        if (type === "hour") {
          if (result > (/[h]{1}/.test(format) ? 11 : 23)) {
            result = 0;
          } else if (result < 0) {
            result = /[h]{1}/.test(format) ? 11 : 23;
          }
        } else if (result > 59) {
          result = 1;
        } else if (result < 0) {
          result = 59;
        }
        emitEvent(this, "change", {
          value: result,
          type,
          index: index2
        });
      } else if ([KeyboardDirection.left, KeyboardDirection.right].includes(which)) {
        var target = e.target;
        var parentNode = target.parentNode;
        var focus3 = which === KeyboardDirection.left ? parentNode.previousSibling : parentNode.nextSibling;
        if (focus3) {
          var input = focus3.querySelector("input");
          if (!input.focus)
            return;
          input.focus();
        }
      }
    },
    onToggleMeridiem: function onToggleMeridiem(index2) {
      emitEvent(this, "toggleMeridiem", index2);
    },
    setInputValue: function setInputValue2(v, input) {
      var sV = String(v);
      if (!input) {
        return;
      }
      if (input.value !== sV) {
        Object.assign(input, {
          value: sV
        });
      }
    },
    switchRenderComponent: function switchRenderComponent() {
      var _this = this;
      var _this$$props = this.$props, format = _this$$props.format, placeholder = _this$$props.placeholder, allowInput = _this$$props.allowInput, disabled2 = _this$$props.disabled;
      function isEmptyDayjs(val) {
        return val === void 0 || val.hour === void 0 && val.minute === void 0 && val.second === void 0;
      }
      var isEmptyVal = this.displayTimeList.every(function(date) {
        return isEmptyDayjs(date);
      });
      if (isEmptyVal) {
        return createVNode("span", {
          "class": "".concat(this.COMPONENT_NAME, "__input-placeholder")
        }, [placeholder]);
      }
      var itemClasses = disabled2 ? ["".concat(this.COMPONENT_NAME, "__input-item"), "".concat(this.COMPONENT_NAME, "__input-item-disabled")] : ["".concat(this.COMPONENT_NAME, "__input-item")];
      var inputClass = "".concat(this.COMPONENT_NAME, "__input-item-input");
      var render102 = [];
      this.displayTimeList.forEach(function(inputTime, index2) {
        if (index2 > 0)
          render102.push("-");
        var hour = inputTime.hour, minute = inputTime.minute, second = inputTime.second;
        render102.push(createVNode("span", {
          "class": itemClasses
        }, [createVNode("input", {
          "class": inputClass,
          "value": hour,
          "disabled": !allowInput,
          "onKeydown": function onKeydown2(e) {
            return _this.onKeydown(e, "hour", index2);
          },
          "onInput": function onInput2(e) {
            return _this.onInput(e, "hour", index2);
          },
          "onBlur": function onBlur2(e) {
            return _this.onBlur(e, "hour", index2, Number(hour));
          },
          "onFocus": function onFocus2(e) {
            return _this.onFocus(e, "hour", index2, Number(hour));
          }
        }, null)]));
        if (/[hH]{1,2}:m{1,2}/.test(format)) {
          render102.push(createVNode("span", {
            "class": itemClasses
          }, [":", createVNode("input", {
            "class": inputClass,
            "value": minute,
            "disabled": !allowInput,
            "onKeydown": function onKeydown2(e) {
              return _this.onKeydown(e, "minute", index2);
            },
            "onInput": function onInput2(e) {
              return _this.onInput(e, "minute", index2);
            },
            "onBlur": function onBlur2(e) {
              return _this.onBlur(e, "minute", index2, Number(minute));
            },
            "onFocus": function onFocus2(e) {
              return _this.onFocus(e, "minute", index2, Number(minute));
            }
          }, null)]));
          if (/[hH]{1,2}:m{1,2}:s{1,2}/.test(format)) {
            render102.push(createVNode("span", {
              "class": itemClasses
            }, [":", createVNode("input", {
              "class": inputClass,
              "value": second,
              "disabled": !allowInput,
              "onKeydown": function onKeydown2(e) {
                return _this.onKeydown(e, "second", index2);
              },
              "onInput": function onInput2(e) {
                return _this.onInput(e, "second", index2);
              },
              "onBlur": function onBlur2(e) {
                return _this.onBlur(e, "second", index2, Number(second));
              },
              "onFocus": function onFocus2(e) {
                return _this.onFocus(e, "second", index2, Number(second));
              }
            }, null)]));
          }
        }
        if (/[h]{1}/.test(format) && (format.includes("A") || format.includes("a"))) {
          var localeMeridiemList = [_this.global.anteMeridiem, _this.global.postMeridiem];
          var text = localeMeridiemList[MERIDIEM_LIST.indexOf(inputTime.meridiem.toUpperCase())];
          render102[amFormat.test(format) ? "unshift" : "push"](createVNode("span", {
            "class": itemClasses,
            "onClick": function onClick2() {
              return allowInput && _this.onToggleMeridiem(index2);
            }
          }, [createVNode("input", {
            "readonly": true,
            "class": [inputClass, "".concat(inputClass, "-meridiem")],
            "value": text,
            "onKeydown": function onKeydown2(e) {
              return _this.onKeydown(e, "meridiem", index2);
            },
            "disabled": !allowInput
          }, null)]));
        }
      });
      return render102;
    }
  },
  render: function render59() {
    var classes6 = ["".concat(this.COMPONENT_NAME, "__input")];
    return createVNode("div", {
      "class": classes6
    }, [this.switchRenderComponent()]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$V(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$U(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$V(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
dayjs.extend(customParseFormat);
var _TimePicker = defineComponent({
  name: "TTimePicker",
  components: {
    PickerPanel,
    TimeIcon: time,
    TPopup: Popup,
    TInput: Input,
    InputItems
  },
  props: _objectSpread$U({}, props$y),
  emits: ["change", "input", "close", "open", "focus", "blur"],
  setup: function setup79() {
    var disabled2 = useFormDisabled();
    var COMPONENT_NAME2 = usePrefixClass("time-picker");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig("timePicker"), global2 = _useConfig.global;
    return {
      global: global2,
      SIZE,
      STATUS,
      COMPONENT_NAME: COMPONENT_NAME2,
      disabled: disabled2
    };
  },
  data: function data22() {
    var _this$$props = this.$props, defaultValue = _this$$props.defaultValue, value6 = _this$$props.value;
    var time2 = value6 || defaultValue;
    return {
      els: [],
      focus: false,
      isShowPanel: false,
      time: time2 ? dayjs(time2, this.format) : void 0,
      inputTime: time2 ? this.setInputValue(dayjs(time2, this.format)) : void 0,
      needClear: false
    };
  },
  computed: {
    panelValue: function panelValue() {
      var time2 = this.$data.time;
      if (time2) {
        return [dayjs(time2, this.format)];
      }
      if (this.steps.filter(function(step) {
        return step !== 1;
      }).length < 1) {
        return [dayjs()];
      }
      return [dayjs().hour(0).minute(0).second(0)];
    },
    textClassName: function textClassName() {
      var _this$inputTime, _this$inputTime2, _this$inputTime3;
      var isDefault = !!((_this$inputTime = this.inputTime) !== null && _this$inputTime !== void 0 && _this$inputTime.hour) && !!((_this$inputTime2 = this.inputTime) !== null && _this$inputTime2 !== void 0 && _this$inputTime2.minute) && !!((_this$inputTime3 = this.inputTime) !== null && _this$inputTime3 !== void 0 && _this$inputTime3.second);
      return isDefault ? "" : "".concat(this.COMPONENT_NAME, "__group-text");
    }
  },
  watch: {
    value: {
      handler: function handler11() {
        this.time = this.value ? dayjs(this.value, this.format) : void 0;
        this.inputTime = this.value ? this.setInputValue(dayjs(this.value, this.format)) : void 0;
      }
    }
  },
  methods: {
    inputChange: function inputChange(event) {
      var type = event.type, value6 = event.value;
      var time2 = this.$data.time;
      var newTime = time2;
      if (value6 === EMPTY_VALUE) {
        this.inputTime[type] = void 0;
        newTime[type](0);
        return;
      }
      if (!newTime) {
        newTime = dayjs();
        newTime.hour(0);
        newTime.minute(0);
        newTime.second(0);
      }
      newTime = newTime.set(type, value6);
      this.time = dayjs(newTime);
      this.inputTime = this.setInputValue(this.time);
      emitEvent(this, "input", {
        input: value6,
        value: this.time.format(this.format),
        e: event
      });
      var panelRef = this.$refs.panel;
      panelRef.panelColUpdate();
    },
    onBlurDefault: function onBlurDefault(e, trigger2, index2, input) {
      emitEvent(this, "blur", {
        trigger: trigger2,
        input,
        value: this.time.format(this.format),
        e
      });
    },
    onFocusDefault: function onFocusDefault(e, trigger2, index2, input) {
      emitEvent(this, "focus", {
        trigger: trigger2,
        input,
        value: this.time.format(this.format),
        e
      });
    },
    panelVisibleChange: function panelVisibleChange(val, context) {
      if (context.trigger) {
        var isClickDoc = context.trigger === "document";
        this.isShowPanel = !isClickDoc;
        emitEvent(this, isClickDoc ? "close" : "open", context);
      } else {
        this.isShowPanel = val;
        emitEvent(this, val ? "open" : "close", context);
      }
    },
    toggleInputMeridiem: function toggleInputMeridiem() {
      var time2 = this.$data.time;
      var current2 = time2.format("A");
      var currentHour = time2.hour() + (current2 === AM ? 12 : -12);
      this.inputChange({
        type: "hour",
        value: currentHour
      });
    },
    pickTime: function pickTime(col, change, index2, value6) {
      var time2 = this.time, format = this.format;
      var setTime = time2;
      if (EPickerCols.hour === col) {
        setTime = value6.set(col, value6.hour() >= 12 && (amFormat.test(format) || pmFormat.test(format)) ? Number(change) + 12 : change);
      } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
        setTime = value6.set(col, change);
      } else {
        var currentHour = value6.hour();
        if (change === this.global.anteMeridiem && currentHour > 12) {
          currentHour -= 12;
        } else if (change === this.global.postMeridiem && currentHour < 12) {
          currentHour += 12;
        }
        setTime = value6.hour(currentHour);
      }
      this.time = setTime;
      this.inputTime = this.setInputValue(setTime);
      var formatValue = dayjs(setTime).format(this.format);
      emitEvent(this, "change", formatValue);
    },
    makeSure: function makeSure(e) {
      this.panelVisibleChange(false, {
        e
      });
      this.output();
    },
    nowAction: function nowAction2() {
      var currentTime = dayjs();
      if (isFunction_1(this.disableTime) && this.disableTime(currentTime.get("hour"), currentTime.get("minute"), currentTime.get("second"))) {
        return;
      }
      this.time = currentTime;
      this.inputTime = this.setInputValue(this.time);
      emitEvent(this, "change", currentTime.format(this.format));
    },
    output: function output() {
      if (this.needClear) {
        this.inputTime = this.setInputValue(void 0);
        this.needClear = false;
      } else {
        var _this$time;
        this.time = (_this$time = this.time) !== null && _this$time !== void 0 ? _this$time : dayjs();
        this.inputTime = this.setInputValue(this.time);
      }
    },
    setInputValue: function setInputValue3(val) {
      var ans = {
        hour: void 0,
        minute: void 0,
        second: void 0,
        meridiem: AM
      };
      if (!val)
        return ans;
      return this.dayjs2InputTime(val);
    },
    dayjs2InputTime: function dayjs2InputTime(val) {
      var format = this.$props.format;
      if (!val) {
        return {
          hour: void 0,
          minute: void 0,
          second: void 0,
          meridiem: AM
        };
      }
      var hour = val.hour();
      var minute = val.minute();
      var second = val.second();
      if (/[h]{1}/.test(format)) {
        hour %= 12;
      }
      if (/[h|H]{2}/.test(format)) {
        hour = hour < 10 ? "0".concat(hour) : hour;
      }
      if (/[m|M]{2}/.test(format)) {
        minute = minute < 10 ? "0".concat(minute) : minute;
      }
      if (/[s|S]{2}/.test(format)) {
        second = second < 10 ? "0".concat(second) : second;
      }
      return {
        hour,
        minute,
        second,
        meridiem: val.format("a")
      };
    },
    clear: function clear3(context) {
      var e = context.e;
      this.time = void 0;
      this.needClear = true;
      this.inputTime = this.setInputValue(void 0);
      emitEvent(this, "change", void 0);
      e.stopPropagation();
    },
    handleTInputFocus: function handleTInputFocus2() {
      var _this = this;
      nextTick(function() {
        _this.$refs.tInput.blur();
      });
    },
    renderInput: function renderInput() {
      var _this2 = this;
      var classes6 = ["".concat(this.COMPONENT_NAME, "__group"), _defineProperty$3({}, this.STATUS.focused, this.isShowPanel)];
      var slots = {
        "suffix-icon": function suffixIcon() {
          return createVNode(resolveComponent("time-icon"), null, null);
        }
      };
      return createVNode("div", {
        "class": classes6,
        "onClick": function onClick2() {
          return _this2.isShowPanel = true;
        }
      }, [createVNode(resolveComponent("t-input"), {
        "disabled": this.disabled,
        "size": this.size,
        "onClear": this.clear,
        "clearable": this.clearable,
        "placeholder": " ",
        "value": this.time ? " " : void 0,
        "ref": "tInput",
        "onFocus": this.handleTInputFocus
      }, slots), createVNode(resolveComponent("input-items"), {
        "size": this.size,
        "dayjs": this.inputTime,
        "disabled": this.disabled,
        "format": this.format,
        "steps": this.steps,
        "allowInput": this.allowInput,
        "placeholder": this.placeholder || this.global.placeholder,
        "onToggleMeridiem": function onToggleMeridiem2() {
          return _this2.toggleInputMeridiem();
        },
        "onBlurDefault": this.onBlurDefault,
        "onFocusDefault": this.onFocusDefault,
        "onChange": function onChange(e) {
          return _this2.inputChange(e);
        }
      }, null)]);
    }
  },
  render: function render60() {
    var _this3 = this;
    var size2 = this.size, className = this.$attrs.className, disabled2 = this.disabled;
    var classes6 = [this.COMPONENT_NAME, this.SIZE[size2] || "", className];
    var slots = {
      content: function content() {
        return createVNode(resolveComponent("picker-panel"), {
          "ref": "panel",
          "format": _this3.format,
          "value": _this3.panelValue,
          "disabled": _this3.disabled,
          "isShowPanel": _this3.isShowPanel,
          "onTimePick": _this3.pickTime,
          "onSure": _this3.makeSure,
          "onNowAction": _this3.nowAction,
          "steps": _this3.steps,
          "hideDisabledTime": _this3.hideDisabledTime,
          "disableTime": _this3.disableTime,
          "isFocus": _this3.focus
        }, null);
      }
    };
    return createVNode(resolveComponent("t-popup"), {
      "ref": "popup",
      "placement": "bottom-left",
      "class": classes6,
      "trigger": "click",
      "disabled": disabled2,
      "visible": this.isShowPanel,
      "overlayClassName": "".concat(this.COMPONENT_NAME, "__panel-container"),
      "onVisibleChange": this.panelVisibleChange,
      "expandAnimation": true
    }, _objectSpread$U({
      "default": function _default65() {
        return [_this3.renderInput()];
      }
    }, slots));
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$m = {
  allowInput: Boolean,
  clearable: Boolean,
  disabled: {
    type: [Boolean, Array],
    "default": false
  },
  disableTime: {
    type: Function
  },
  format: {
    type: String,
    "default": "HH:mm:ss"
  },
  hideDisabledTime: {
    type: Boolean,
    "default": true
  },
  placeholder: {
    type: [String, Array]
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator82(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  steps: {
    type: Array,
    "default": function _default33() {
      return [1, 1, 1];
    }
  },
  value: {
    type: Array
  },
  defaultValue: {
    type: Array
  },
  onBlur: Function,
  onChange: Function,
  onFocus: Function,
  onInput: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$U(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$T(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$U(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
dayjs.extend(customParseFormat);
var _TimeRangePicker = defineComponent({
  name: "TTimeRangePicker",
  components: {
    PickerPanel,
    TimeIcon: time,
    InputItems,
    TPopup: Popup,
    TInput: Input
  },
  props: _objectSpread$T({}, props$m),
  emits: ["input", "click", "blur", "focus", "change", "close", "open"],
  setup: function setup80() {
    var COMPONENT_NAME2 = usePrefixClass("time-picker");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig("timePicker"), global2 = _useConfig.global;
    return {
      global: global2,
      STATUS,
      SIZE,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  data: function data23() {
    return {
      els: [],
      focus: false,
      isShowPanel: false,
      time: TIME_PICKER_EMPTY,
      inputTime: TIME_PICKER_EMPTY
    };
  },
  computed: {
    panelValue: function panelValue2() {
      var time2 = this.time || TIME_PICKER_EMPTY;
      return time2.map(function(val) {
        return val ? dayjs(val) : dayjs();
      });
    },
    textClassName: function textClassName2() {
      var isDefault = this.inputTime.some(function(item) {
        return !!item.hour && !!item.minute && !!item.second;
      });
      return isDefault ? "" : "".concat(this.COMPONENT_NAME, "__group-text");
    }
  },
  watch: {
    value: {
      handler: function handler12(val, oldVal) {
        if (JSON.stringify(val) === JSON.stringify(oldVal))
          return;
        var values = Array.isArray(this.value) ? this.value : [];
        var format = this.format;
        function getVal(value6) {
          return value6 ? dayjs(value6, format) : void 0;
        }
        var dayjsList = [getVal(values[0]), getVal(values[1])];
        this.time = dayjsList;
        this.updateInputTime();
      },
      immediate: true
    }
  },
  methods: {
    inputChange: function inputChange2(event) {
      var type = event.type, value6 = event.value, index2 = event.index;
      var newTime = this.time[index2];
      if (value6 === EMPTY_VALUE) {
        this.inputTime[index2][type] = void 0;
        newTime[type](0);
        return;
      }
      if (!newTime) {
        newTime = dayjs();
        newTime.hour(0);
        newTime.minute(0);
        newTime.second(0);
      }
      newTime = newTime.set(type, value6);
      this.time[index2] = dayjs(newTime);
      this.updateInputTime();
      emitEvent(this, "input", {
        input: value6,
        value: this.time[index2].format(this.format),
        e: event
      });
      var panelRef = this.$refs.panel;
      panelRef.panelColUpdate();
    },
    getFormatValues: function getFormatValues() {
      var _this = this;
      var values = [];
      this.time.forEach(function(time2) {
        if (time2) {
          values.push(time2.format(_this.format));
        }
      });
      return values;
    },
    onBlurDefault: function onBlurDefault2(e) {
      var value6 = this.getFormatValues();
      emitEvent(this, "blur", {
        value: value6,
        e
      });
    },
    onFocusDefault: function onFocusDefault2(e) {
      var value6 = this.getFormatValues();
      emitEvent(this, "focus", {
        value: value6,
        e
      });
    },
    panelVisibleChange: function panelVisibleChange2(val, context) {
      if (context.trigger) {
        var isClickDoc = context.trigger === "document";
        this.isShowPanel = !isClickDoc;
        emitEvent(this, isClickDoc ? "close" : "open", context);
      } else {
        this.isShowPanel = val;
        emitEvent(this, val ? "open" : "close", context);
      }
    },
    toggleInputMeridiem: function toggleInputMeridiem2(index2) {
      var curTime = this.time[index2];
      var current2 = curTime.format("a");
      var currentHour = curTime.hour() + (current2 === AM ? 12 : -12);
      this.inputChange({
        type: "hour",
        value: currentHour,
        index: index2
      });
    },
    pickTime: function pickTime2(col, change, index2, value6) {
      var time2 = this.time, format = this.format;
      var panelRef = this.$refs.panel;
      var shouldUpdatePanel = false;
      var setTime = time2[index2];
      if (EPickerCols.hour === col) {
        setTime = value6.set(col, value6.hour() >= 12 && (amFormat.test(format) || pmFormat.test(format)) ? Number(change) + 12 : change);
      } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
        setTime = value6.set(col, change);
      } else {
        var currentHour = value6.hour();
        if (change === this.global.anteMeridiem) {
          currentHour -= 12;
        } else if (change === this.global.postMeridiem) {
          currentHour += 12;
        }
        setTime = value6.hour(currentHour);
      }
      this.time[index2] = setTime;
      if (index2 === 0 && !this.time[1]) {
        this.time[1] = setTime;
        shouldUpdatePanel = true;
      } else if (index2 === 1 && !this.time[0]) {
        this.time[0] = dayjs().hour(0).minute(0).second(0);
        shouldUpdatePanel = true;
      }
      this.updateInputTime();
      shouldUpdatePanel && panelRef.panelColUpdate();
    },
    makeSure: function makeSure2(e) {
      this.panelVisibleChange(false, {
        e
      });
    },
    updateInputTime: function updateInputTime() {
      var format = this.$props.format;
      var disPlayValues = [];
      (this.time || []).forEach(function(time2) {
        if (!time2) {
          disPlayValues.push({
            hour: void 0,
            minute: void 0,
            second: void 0,
            meridiem: AM
          });
        } else {
          var hour = time2.hour();
          var minute = time2.minute();
          var second = time2.second();
          if (/[h]{1}/.test(format)) {
            hour %= 12;
          }
          if (/[h|H]{2}/.test(format)) {
            hour = hour < 10 ? "0".concat(hour) : hour;
          }
          if (/[m|M]{2}/.test(format)) {
            minute = minute < 10 ? "0".concat(minute) : minute;
          }
          if (/[s|S]{2}/.test(format)) {
            second = second < 10 ? "0".concat(second) : second;
          }
          disPlayValues.push({
            hour,
            minute,
            second,
            meridiem: time2.format("a")
          });
        }
      });
      this.inputTime = disPlayValues;
      this.triggerUpdateValue();
    },
    clear: function clear4(context) {
      var e = context.e;
      this.time = TIME_PICKER_EMPTY;
      this.updateInputTime();
      e.stopPropagation();
    },
    triggerUpdateValue: function triggerUpdateValue() {
      var _this2 = this;
      var values = [];
      this.time.forEach(function(time2) {
        if (time2) {
          values.push(time2.format(_this2.format));
        }
      });
      emitEvent(this, "change", values);
      isFunction_1(this.onChange) && this.onChange(values);
    },
    handleTInputFocus: function handleTInputFocus3() {
      var _this3 = this;
      nextTick(function() {
        _this3.$refs.tInput.blur();
      });
    },
    renderInput: function renderInput2() {
      var _this4 = this;
      var classes6 = ["".concat(this.COMPONENT_NAME, "__group"), _defineProperty$3({}, this.STATUS.focused, this.isShowPanel)];
      return createVNode("div", {
        "class": classes6,
        "onClick": function onClick2() {
          return _this4.isShowPanel = true;
        }
      }, [createVNode(resolveComponent("t-input"), {
        "disabled": this.disabled,
        "size": this.size,
        "onClear": this.clear,
        "clearable": this.clearable,
        "placeholder": " ",
        "value": !isEqual_1(this.time, TIME_PICKER_EMPTY) ? " " : void 0,
        "ref": "tInput",
        "onFocus": this.handleTInputFocus
      }, {
        "default": function _default65() {
          return [createVNode(resolveComponent("time-icon"), {
            "slot": "suffix-icon"
          }, null)];
        }
      }), createVNode(resolveComponent("input-items"), {
        "size": this.size,
        "dayjs": this.inputTime,
        "disabled": this.disabled,
        "format": this.format,
        "allowInput": this.allowInput,
        "placeholder": this.placeholder || this.global.placeholder,
        "isRangePicker": true,
        "onToggleMeridiem": function onToggleMeridiem2(index2) {
          return _this4.toggleInputMeridiem(index2);
        },
        "onBlurDefault": this.onBlurDefault,
        "onFocusDefault": this.onFocusDefault,
        "onChange": function onChange(e) {
          return _this4.inputChange(e);
        },
        "steps": this.steps
      }, null)]);
    }
  },
  render: function render61() {
    var _this5 = this;
    var _this$$props = this.$props, size2 = _this$$props.size, disabled2 = _this$$props.disabled;
    var classes6 = [this.COMPONENT_NAME, this.SIZE[size2]];
    var slots = {
      content: function content() {
        return createVNode(resolveComponent("picker-panel"), {
          "ref": "panel",
          "format": _this5.format,
          "value": _this5.panelValue,
          "disabled": _this5.disabled,
          "isShowPanel": _this5.isShowPanel,
          "onTimePick": _this5.pickTime,
          "onSure": _this5.makeSure,
          "steps": _this5.steps,
          "hideDisabledTime": _this5.hideDisabledTime,
          "disableTime": _this5.disableTime,
          "isFocus": _this5.focus
        }, null);
      }
    };
    return createVNode(resolveComponent("t-popup"), {
      "ref": "popup",
      "class": classes6,
      "placement": "bottom-left",
      "trigger": "click",
      "disabled": disabled2,
      "visible": this.isShowPanel,
      "overlayClassName": "".concat(this.COMPONENT_NAME, "__panel-container"),
      "onVisibleChange": this.panelVisibleChange,
      "expandAnimation": true
    }, _objectSpread$T({
      "default": function _default65() {
        return [_this5.renderInput()];
      }
    }, slots));
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TimePicker = withInstall(mapProps([{
  name: "value",
  event: "change",
  alias: ["modelValue"]
}])(_TimePicker));
var TimeRangePicker = withInstall(mapProps([{
  name: "value",
  event: "change",
  alias: ["modelValue"]
}])(_TimeRangePicker));
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$T(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$S(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$T(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getParentsToRoot(element2, root2) {
  var list = [];
  var el = element2;
  while (el && el.parentNode) {
    list.push(el);
    if (el === root2) {
      break;
    }
    el = el.parentNode;
  }
  return list;
}
function getParentMarks(name2, element2, root2) {
  var list = getParentsToRoot(element2, root2);
  return list.map(function(el) {
    var mark = {
      name: name2,
      value: el.getAttribute(name2) || "",
      el
    };
    return mark;
  }).filter(function(mark) {
    return mark.value;
  });
}
function getMark(name2, element2, root2) {
  var list = getParentMarks(name2, element2, root2);
  var info4 = list.pop() || null;
  return info4;
}
function getTNode(prop) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var tnode = null;
  var item = null;
  var conf = _objectSpread$S({}, options);
  if (typeof prop === "function") {
    var _conf$node;
    item = prop(h, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
  } else if (typeof prop === "string") {
    item = prop;
  }
  if (typeof item === "string") {
    tnode = item;
  } else if (item) {
    tnode = item;
  }
  return tnode;
}
function isTreeNodeValue(item) {
  return typeof item === "string" || typeof item === "number";
}
function getNode(store, item) {
  var node = null;
  var val = null;
  if (typeof item === "string" || typeof item === "number") {
    val = item;
  } else if (item && isTreeNodeValue(item.value)) {
    val = item.value;
  }
  node = store.getNode(val);
  return node;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var useCLASSNAMES2 = function useCLASSNAMES3() {
  var classPrefix2 = usePrefixClass();
  return computed(function() {
    var tree = "".concat(classPrefix2.value, "-tree");
    return {
      icon: "".concat(classPrefix2.value, "-icon"),
      folderIcon: "".concat(classPrefix2.value, "-folder-icon"),
      actived: "".concat(classPrefix2.value, "-is-active"),
      disabled: "".concat(classPrefix2.value, "-is-disabled"),
      treeIconRight: "".concat(classPrefix2.value, "-icon-arrow-right"),
      treeIconDown: "".concat(classPrefix2.value, "-icon-arrow-down"),
      treeNodeToggle: "".concat(classPrefix2.value, "-tree-toggle"),
      tree,
      treeTransition: "".concat(tree, "--transition"),
      treeBlockNode: "".concat(tree, "--block-node"),
      treeEmpty: "".concat(tree, "__empty"),
      treeList: "".concat(tree, "__list"),
      treeNode: "".concat(tree, "__item"),
      treeNodeOpen: "".concat(tree, "__item--open"),
      treeHoverable: "".concat(tree, "--hoverable"),
      treeCheckable: "".concat(tree, "--checkable"),
      treeLabel: "".concat(tree, "__label"),
      treeLabelStrictly: "".concat(tree, "__label--strictly"),
      treeIcon: "".concat(tree, "__icon"),
      treeIconDefault: "".concat(tree, "__icon--default"),
      treeSpace: "".concat(tree, "__space"),
      treeOperations: "".concat(tree, "__operations"),
      treeNodeVisible: "".concat(tree, "__item--visible"),
      treeNodeHidden: "".concat(tree, "__item--hidden"),
      treeNodeEnter: "".concat(tree, "__item--enter-active"),
      treeNodeLeave: "".concat(tree, "__item--leave-active"),
      line: "".concat(tree, "__line"),
      lineIsLeaf: "".concat(tree, "__line--leaf"),
      lineIsFirst: "".concat(tree, "__line--first")
    };
  });
};
var index$l = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$S(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$R(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$S(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$d(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var TreeItemProps = {
  node: {
    type: TreeNode
  },
  treeScope: {
    type: Object
  }
};
var TreeItem = defineComponent({
  name: "TTreeNode",
  props: TreeItemProps,
  emits: ["click", "change"],
  setup: function setup81() {
    var label2 = ref();
    useRipple(label2);
    var CLASS_NAMES = useCLASSNAMES2();
    var _useConfig = useConfig("tree"), global2 = _useConfig.global;
    return {
      global: global2,
      label: label2,
      CLASS_NAMES
    };
  },
  created: function created5() {
    if (this.node) {
      this.data = this.node.data;
    }
  },
  methods: {
    getStyles: function getStyles() {
      var level = this.node.level;
      var styles = "--level: ".concat(level, ";");
      return styles;
    },
    getClassList: function getClassList() {
      var _list$push;
      var node = this.node;
      var list = [];
      list.push(this.CLASS_NAMES.treeNode);
      list.push((_list$push = {}, _defineProperty$3(_list$push, this.CLASS_NAMES.treeNodeOpen, node.expanded), _defineProperty$3(_list$push, this.CLASS_NAMES.actived, node.isActivable() ? node.actived : false), _defineProperty$3(_list$push, this.CLASS_NAMES.disabled, node.isDisabled()), _list$push));
      return list;
    },
    renderLine: function renderLine() {
      var node = this.node, treeScope = this.treeScope;
      var line = treeScope.line, scopedSlots = treeScope.scopedSlots;
      var iconVisible = !!treeScope.icon;
      var lineNode = null;
      if (line === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
          lineNode = scopedSlots.line({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (node.parent && node.tree) {
          var vmIsLeaf = node.vmIsLeaf, vmIsFirst = node.vmIsFirst, level = node.level;
          var lineClasses = [];
          lineClasses.push(this.CLASS_NAMES.line);
          if (vmIsLeaf || !iconVisible) {
            lineClasses.push(this.CLASS_NAMES.lineIsLeaf);
          }
          if (vmIsFirst && iconVisible) {
            lineClasses.push(this.CLASS_NAMES.lineIsFirst);
          }
          var shadowStyles = [];
          var parents = node.getParents();
          parents.pop();
          parents.forEach(function(pnode, index2) {
            if (!pnode.vmIsLast) {
              shadowStyles.push("calc(-".concat(index2 + 1, " * var(--space)) 0 var(--color)"));
            }
          });
          var styles = {
            "--level": level,
            "box-shadow": shadowStyles.join(",")
          };
          lineNode = createVNode("span", {
            "class": lineClasses,
            "style": styles
          }, null);
        }
      } else {
        lineNode = getTNode(line, {
          node
        });
      }
      return lineNode;
    },
    getFolderIcon: function getFolderIcon() {
      if (isFunction_1(this.global.folderIcon)) {
        return this.global.folderIcon(h);
      }
      return createVNode(caretRightSmall, null, null);
    },
    renderIcon: function renderIcon3() {
      var node = this.node, treeScope = this.treeScope;
      var icon = treeScope.icon, scopedSlots = treeScope.scopedSlots;
      var isDefaultIcon = false;
      var iconNode = null;
      if (icon === true) {
        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
          iconNode = scopedSlots.icon({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else if (!node.vmIsLeaf) {
          isDefaultIcon = true;
          iconNode = this.getFolderIcon();
          if (node.loading && node.expanded) {
            iconNode = createVNode(Loading, null, null);
          }
        } else {
          iconNode = "";
        }
      } else {
        iconNode = getTNode(icon, {
          node
        });
      }
      iconNode = createVNode("span", {
        "class": [this.CLASS_NAMES.treeIcon, this.CLASS_NAMES.folderIcon, isDefaultIcon ? this.CLASS_NAMES.treeIconDefault : ""],
        "trigger": "expand",
        "ignore": "active"
      }, [iconNode]);
      return iconNode;
    },
    renderLabel: function renderLabel() {
      var _this = this;
      var node = this.node, treeScope = this.treeScope;
      var label2 = treeScope.label, scopedSlots = treeScope.scopedSlots, disableCheck = treeScope.disableCheck;
      var checkProps = treeScope.checkProps || {};
      var labelNode = null;
      if (label2 === true) {
        if (scopedSlots.label) {
          labelNode = scopedSlots.label({
            node: node.getModel()
          });
        } else {
          labelNode = node.label || "";
        }
      } else {
        labelNode = getTNode(label2, {
          node
        });
      }
      var labelClasses2 = [this.CLASS_NAMES.treeLabel, this.CLASS_NAMES.treeLabelStrictly, _defineProperty$3({}, this.CLASS_NAMES.actived, node.isActivable() ? node.actived : false)];
      if (node.vmCheckable) {
        var checkboxDisabled = false;
        if (typeof disableCheck === "function") {
          checkboxDisabled = disableCheck(node);
        } else {
          checkboxDisabled = !!disableCheck;
        }
        if (node.isDisabled()) {
          checkboxDisabled = true;
        }
        var itemCheckProps = _objectSpread$R(_objectSpread$R({}, checkProps), {}, {
          disabled: checkboxDisabled
        });
        var _labelNode = function() {
          return labelNode;
        }();
        labelNode = createVNode(Checkbox, mergeProps({
          "class": labelClasses2,
          "checked": node.checked,
          "indeterminate": node.indeterminate,
          "disabled": node.isDisabled(),
          "name": node.value,
          "onChange": function onChange() {
            return _this.handleChange();
          },
          "ignore": "expand,active",
          "needRipple": true
        }, itemCheckProps), _isSlot$d(labelNode) ? labelNode : {
          "default": function _default65() {
            return [_labelNode];
          }
        });
      } else {
        var inner = createVNode("span", {
          "style": "position: relative"
        }, [labelNode]);
        labelNode = node.isActivable() ? createVNode("span", {
          "key": "1",
          "ref": "label",
          "class": labelClasses2
        }, [inner]) : createVNode("span", {
          "key": "2",
          "class": labelClasses2
        }, [inner]);
      }
      return labelNode;
    },
    renderOperations: function renderOperations() {
      var node = this.node, treeScope = this.treeScope;
      var operations = treeScope.operations, scopedSlots = treeScope.scopedSlots;
      var opNode = null;
      if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
        opNode = scopedSlots.operations({
          node: node === null || node === void 0 ? void 0 : node.getModel()
        });
      } else {
        opNode = getTNode(operations, {
          node
        });
      }
      if (opNode) {
        opNode = createVNode("span", {
          "class": this.CLASS_NAMES.treeOperations,
          "ignore": "active,expand"
        }, [opNode]);
      }
      return opNode;
    },
    renderItem: function renderItem() {
      var itemNodes = [];
      var iconNode = this.renderIcon();
      var lineNode = this.renderLine();
      if (lineNode) {
        itemNodes.push(lineNode);
      }
      if (iconNode) {
        itemNodes.push(iconNode);
      }
      var labelNode = this.renderLabel();
      if (labelNode) {
        itemNodes.push(labelNode);
      }
      var opNode = this.renderOperations();
      if (opNode) {
        itemNodes.push(opNode);
      }
      return itemNodes;
    },
    handleClick: function handleClick3(evt) {
      var node = this.node;
      var state = {
        mouseEvent: evt,
        event: evt,
        node,
        path: node.getPath()
      };
      this.$emit("click", state);
    },
    handleChange: function handleChange3() {
      var node = this.node;
      var event = new Event("change");
      var state = {
        event,
        node
      };
      this.$emit("change", state);
    }
  },
  render: function render62() {
    var _this2 = this;
    var node = this.node;
    var level = node.level;
    var styles = this.getStyles();
    var classList2 = this.getClassList();
    return createVNode("div", {
      "class": classList2,
      "data-value": node.value,
      "data-level": level,
      "style": styles,
      "onClick": function onClick2(evt) {
        return _this2.handleClick(evt);
      }
    }, [this.renderItem()]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$l = {
  activable: Boolean,
  actived: {
    type: Array
  },
  defaultActived: {
    type: Array
  },
  activeMultiple: Boolean,
  checkable: Boolean,
  checkProps: {
    type: Object
  },
  checkStrictly: Boolean,
  data: {
    type: Array,
    "default": function _default34() {
      return [];
    }
  },
  disableCheck: {
    type: [Boolean, Function],
    "default": false
  },
  disabled: Boolean,
  empty: {
    type: [String, Function],
    "default": ""
  },
  expandAll: Boolean,
  expanded: {
    type: Array,
    "default": function _default35() {
      return [];
    }
  },
  defaultExpanded: {
    type: Array,
    "default": function _default36() {
      return [];
    }
  },
  expandLevel: {
    type: Number,
    "default": 0
  },
  expandMutex: Boolean,
  expandOnClickNode: Boolean,
  expandParent: Boolean,
  filter: {
    type: Function
  },
  hover: Boolean,
  icon: {
    type: [Boolean, Function],
    "default": true
  },
  keys: {
    type: Object
  },
  label: {
    type: [String, Boolean, Function],
    "default": true
  },
  lazy: {
    type: Boolean,
    "default": true
  },
  line: {
    type: [Boolean, Function],
    "default": false
  },
  load: {
    type: Function
  },
  operations: {
    type: Function
  },
  transition: {
    type: Boolean,
    "default": true
  },
  value: {
    type: Array,
    "default": function _default37() {
      return [];
    }
  },
  defaultValue: {
    type: Array,
    "default": function _default38() {
      return [];
    }
  },
  valueMode: {
    type: String,
    "default": "onlyLeaf",
    validator: function validator83(val) {
      return ["onlyLeaf", "parentFirst", "all"].includes(val);
    }
  },
  onActive: Function,
  onChange: Function,
  onClick: Function,
  onExpand: Function,
  onLoad: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$c(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _TdTree = defineComponent({
  name: "TTree",
  components: {
    TransitionGroup
  },
  props: props$l,
  setup: function setup82() {
    var CLASS_NAMES = useCLASSNAMES2();
    var _useConfig = useConfig("tree"), global2 = _useConfig.global, t = _useConfig.t;
    return {
      t,
      global: global2,
      CLASS_NAMES
    };
  },
  data: function data24() {
    var checkProps = this.checkProps, empty2 = this.empty, icon = this.icon, label2 = this.label, line = this.line, operations = this.operations;
    return {
      store: null,
      nodesMap: null,
      mouseEvent: null,
      treeNodes: [],
      treeScope: {
        checkProps,
        empty: empty2,
        icon,
        label: label2,
        line,
        operations,
        scopedSlots: null
      },
      transitionCD: null
    };
  },
  computed: {
    classList: function classList() {
      var list = [this.CLASS_NAMES.tree];
      var disabled2 = this.disabled, hover = this.hover, transition = this.transition, checkable = this.checkable, expandOnClickNode = this.expandOnClickNode;
      if (disabled2) {
        list.push(this.CLASS_NAMES.disabled);
      }
      if (hover) {
        list.push(this.CLASS_NAMES.treeHoverable);
      }
      if (checkable) {
        list.push(this.CLASS_NAMES.treeCheckable);
      }
      if (transition) {
        list.push(this.CLASS_NAMES.treeTransition);
      }
      if (expandOnClickNode) {
        list.push(this.CLASS_NAMES.treeBlockNode);
      }
      return list;
    }
  },
  watch: {
    data: {
      handler: function handler13(list) {
        this.rebuild(list);
      },
      deep: true
    },
    value: function value5(nVal) {
      this.store.replaceChecked(nVal);
    },
    expanded: function expanded(nVal) {
      this.store.replaceExpanded(nVal);
    },
    actived: function actived(nVal) {
      this.store.replaceActived(nVal);
    }
  },
  created: function created6() {
    this.build();
  },
  methods: {
    renderItem: function renderItem2(node) {
      var treeScope = this.treeScope;
      var treeItem = createVNode(TreeItem, {
        "key": node.value,
        "node": node,
        "treeScope": treeScope,
        "onClick": this.handleClick,
        "onChange": this.handleChange
      }, null);
      return treeItem;
    },
    getNodesMap: function getNodesMap() {
      var nodesMap = this.nodesMap;
      if (!nodesMap) {
        nodesMap = /* @__PURE__ */ new Map();
        this.nodesMap = nodesMap;
      }
      return nodesMap;
    },
    updateNodesMap: function updateNodesMap() {
      var store = this.store, treeNodes = this.treeNodes;
      var nodesMap = this.getNodesMap();
      var index2 = 0;
      while (index2 < treeNodes.length) {
        var nodeView = treeNodes[index2];
        if (nodeView && nodeView.componentInstance) {
          var node = nodeView.componentInstance.node;
          if (node && !store.getNode(node.value)) {
            var nodeViewIndex = treeNodes.indexOf(nodeView);
            treeNodes.splice(nodeViewIndex, 1);
            nodeView.componentInstance.$destroy();
            nodesMap.set(node.value, null);
            nodesMap["delete"](node.value);
          } else {
            index2 += 1;
          }
        } else {
          index2 += 1;
        }
      }
    },
    refresh: function refresh() {
      var _this = this;
      var store = this.store, treeNodes = this.treeNodes, treeScope = this.treeScope;
      treeScope.scopedSlots = this.$slots;
      var nodesMap = this.getNodesMap();
      this.updateNodesMap();
      var index2 = 0;
      var allNodes = store.getNodes();
      allNodes.forEach(function(node) {
        if (node.visible) {
          if (nodesMap.has(node.value)) {
            var nodeView = nodesMap.get(node.value);
            var nodeViewIndex = treeNodes.indexOf(nodeView);
            if (nodeViewIndex !== index2) {
              treeNodes.splice(nodeViewIndex, 1);
              treeNodes.splice(index2, 0, nodeView);
            }
          } else {
            var _nodeView = _this.renderItem(node);
            treeNodes.splice(index2, 0, _nodeView);
            nodesMap.set(node.value, _nodeView);
          }
          index2 += 1;
        } else if (nodesMap.has(node.value)) {
          var _nodeView2 = nodesMap.get(node.value);
          var _nodeViewIndex = treeNodes.indexOf(_nodeView2);
          treeNodes.splice(_nodeViewIndex, 1);
          nodesMap["delete"](node.value);
        }
      });
      var nodeMap = store.nodeMap;
      nodesMap.forEach(function(value6, key) {
        if (!nodeMap.has(key)) {
          var nodeView = nodesMap.get(key);
          var nodeViewIndex = treeNodes.indexOf(nodeView);
          treeNodes.splice(nodeViewIndex, 1);
          nodesMap["delete"](key);
        }
      });
    },
    updateStoreConfig: function updateStoreConfig() {
      var store = this.store;
      if (!store)
        return;
      var storeProps = pick_1(this, ["keys", "expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "checkable", "checkStrictly", "load", "lazy", "valueMode", "filter"]);
      store.setConfig(storeProps);
    },
    updateExpanded: function updateExpanded() {
      var store = this.store, expanded2 = this.expanded, expandParent = this.expandParent;
      if (Array.isArray(expanded2)) {
        var expandedMap = /* @__PURE__ */ new Map();
        expanded2.forEach(function(val) {
          expandedMap.set(val, true);
          if (expandParent) {
            var node = store.getNode(val);
            node.getParents().forEach(function(tn) {
              expandedMap.set(tn.value, true);
            });
          }
        });
        var expandedArr = Array.from(expandedMap.keys());
        store.setExpanded(expandedArr);
      }
    },
    build: function build() {
      var _this2 = this;
      var list = this.data;
      var actived2 = this.actived, value6 = this.value, valueMode = this.valueMode, filter2 = this.filter;
      var store = new TreeStore({
        valueMode,
        filter: filter2,
        onLoad: function onLoad(info4) {
          _this2.handleLoad(info4);
        },
        onUpdate: function onUpdate() {
          _this2.refresh();
        }
      });
      this.store = store;
      this.updateStoreConfig();
      if (!Array.isArray(list)) {
        list = [];
      }
      store.append(list);
      store.refreshNodes();
      if (Array.isArray(value6)) {
        store.setChecked(value6);
      }
      this.updateExpanded();
      if (Array.isArray(actived2)) {
        store.setActived(actived2);
      }
      this.refresh();
    },
    rebuild: function rebuild(list) {
      this.getNodesMap().clear();
      this.treeNodes.length = 0;
      var store = this.store, value6 = this.value, actived2 = this.actived;
      store.reload(list);
      if (Array.isArray(value6)) {
        store.setChecked(value6);
      }
      this.updateExpanded();
      if (Array.isArray(actived2)) {
        store.setActived(actived2);
      }
      store.refreshState();
    },
    toggleActived: function toggleActived(item) {
      var node = getNode(this.store, item);
      return this.setActived(node, !node.isActived());
    },
    setActived: function setActived(item, isActived) {
      var node = getNode(this.store, item);
      var actived2 = node.setActived(isActived);
      var mouseEvent3 = this.mouseEvent;
      var ctx = {
        node: node.getModel(),
        e: mouseEvent3
      };
      emitEvent(this, "active", actived2, ctx);
      return actived2;
    },
    toggleExpanded: function toggleExpanded(item) {
      var node = getNode(this.store, item);
      return this.setExpanded(node, !node.isExpanded());
    },
    setExpanded: function setExpanded(item, isExpanded) {
      var node = getNode(this.store, item);
      var expanded2 = node.setExpanded(isExpanded);
      var mouseEvent3 = this.mouseEvent;
      var ctx = {
        node: node.getModel(),
        e: mouseEvent3
      };
      emitEvent(this, "expand", expanded2, ctx);
      return expanded2;
    },
    toggleChecked: function toggleChecked(item) {
      var node = getNode(this.store, item);
      return this.setChecked(node, !node.isChecked());
    },
    setChecked: function setChecked(item, isChecked) {
      var node = getNode(this.store, item);
      var checked = node.setChecked(isChecked);
      var ctx = {
        node: node.getModel()
      };
      emitEvent(this, "change", checked, ctx);
      return checked;
    },
    handleLoad: function handleLoad(info4) {
      var node = info4.node;
      var ctx = {
        node: node.getModel()
      };
      var value6 = this.value, expanded2 = this.expanded, actived2 = this.actived, store = this.store;
      if (value6 && value6.length > 0) {
        store.replaceChecked(value6);
      }
      if (expanded2 && expanded2.length > 0) {
        store.replaceExpanded(expanded2);
      }
      if (actived2 && actived2.length > 0) {
        store.replaceActived(actived2);
      }
      emitEvent(this, "load", ctx);
    },
    handleClick: function handleClick4(state) {
      var expandOnClickNode = this.expandOnClickNode;
      var mouseEvent3 = state.mouseEvent, event = state.event, node = state.node;
      if (!node || this.disabled || node.disabled) {
        return;
      }
      this.mouseEvent = mouseEvent3;
      var shouldExpand = expandOnClickNode;
      var shouldActive = true;
      ["trigger", "ignore"].forEach(function(markName) {
        var mark = getMark(markName, event.target, event.currentTarget);
        var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";
        if (markValue.indexOf("expand") >= 0) {
          if (markName === "trigger") {
            shouldExpand = true;
          } else if (markName === "ignore") {
            shouldExpand = false;
          }
        }
        if (markValue.indexOf("active") >= 0) {
          if (markName === "ignore") {
            shouldActive = false;
          }
        }
      });
      if (shouldExpand) {
        this.toggleExpanded(node);
      }
      if (shouldActive) {
        this.toggleActived(node);
      }
      var ctx = {
        node: node.getModel(),
        e: mouseEvent3
      };
      emitEvent(this, "click", ctx);
      this.mouseEvent = null;
    },
    handleChange: function handleChange4(state) {
      var disabled2 = this.disabled;
      var node = state.node;
      if (!node || disabled2 || node.disabled) {
        return;
      }
      this.toggleChecked(node);
    },
    setItem: function setItem(value6, options) {
      var _this3 = this;
      var node = this.store.getNode(value6);
      var spec = options;
      var keys2 = Object.keys(spec);
      if (node && spec) {
        ["expanded", "actived", "checked"].forEach(function(name2) {
          if (keys2.includes(name2)) {
            _this3["set".concat(upperFirst_1(name2))](node, spec[name2]);
            delete spec[name2];
          }
        });
        node.set(spec);
      }
    },
    getItem: function getItem(value6) {
      var node = this.store.getNode(value6);
      return node === null || node === void 0 ? void 0 : node.getModel();
    },
    getItems: function getItems(value6) {
      var nodes = this.store.getNodes(value6);
      return nodes.map(function(node) {
        return node.getModel();
      });
    },
    appendTo: function appendTo(para, item) {
      var _this4 = this;
      var list = [];
      if (Array.isArray(item)) {
        list = item;
      } else {
        list = [item];
      }
      list.forEach(function(item2) {
        var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
        var node = getNode(_this4.store, val);
        if (node) {
          _this4.store.appendNodes(para, node);
        } else {
          _this4.store.appendNodes(para, item2);
        }
      });
    },
    insertBefore: function insertBefore(value6, item) {
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(this.store, val);
      if (node) {
        this.store.insertBefore(value6, node);
      } else {
        this.store.insertBefore(value6, item);
      }
    },
    insertAfter: function insertAfter(value6, item) {
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(this.store, val);
      if (node) {
        this.store.insertAfter(value6, node);
      } else {
        this.store.insertAfter(value6, item);
      }
    },
    remove: function remove2(value6) {
      return this.store.remove(value6);
    },
    getIndex: function getIndex(value6) {
      return this.store.getNodeIndex(value6);
    },
    getParent: function getParent(value6) {
      var node = this.store.getParent(value6);
      return node === null || node === void 0 ? void 0 : node.getModel();
    },
    getParents: function getParents(value6) {
      var nodes = this.store.getParents(value6);
      return nodes.map(function(node) {
        return node.getModel();
      });
    },
    getPath: function getPath(value6) {
      var node = this.store.getNode(value6);
      var pathNodes = [];
      if (node) {
        pathNodes = node.getPath().map(function(node2) {
          return node2.getModel();
        });
      }
      return pathNodes;
    }
  },
  render: function render63() {
    var classList2 = this.classList, treeNodes = this.treeNodes, treeScope = this.treeScope, $slots = this.$slots;
    var scopeProps = pick_1(this, ["checkProps", "disableCheck", "icon", "label", "line", "operations"]);
    this.updateStoreConfig();
    Object.assign(treeScope, scopeProps);
    treeScope.scopedSlots = $slots;
    var emptyNode = null;
    var treeNodeList = null;
    if (treeNodes.length <= 0) {
      var useLocale = !this.empty && !this.$slots.empty;
      emptyNode = createVNode("div", {
        "class": this.CLASS_NAMES.treeEmpty
      }, [useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty")]);
    }
    treeNodeList = createVNode(resolveComponent("transition-group"), {
      "name": this.CLASS_NAMES.treeNodeToggle,
      "tag": "div",
      "enter-active-class": this.CLASS_NAMES.treeNodeEnter,
      "leave-active-class": this.CLASS_NAMES.treeNodeLeave
    }, _isSlot$c(treeNodes) ? treeNodes : {
      "default": function _default65() {
        return [treeNodes];
      }
    });
    return createVNode("div", {
      "class": classList2
    }, [treeNodeList, emptyNode]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Tree = withInstall(mapProps([{
  name: "value",
  event: ["change", "update:value"],
  alias: ["modelValue"]
}, {
  name: "expanded",
  event: ["expand", "update:expanded"]
}, {
  name: "actived",
  event: ["active", "update:actived"]
}])(_TdTree));
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$k = {
  clearable: Boolean,
  collapsedItems: {
    type: Function
  },
  data: {
    type: Array,
    "default": function _default39() {
      return [];
    }
  },
  disabled: Boolean,
  empty: {
    type: [String, Function],
    "default": ""
  },
  filter: {
    type: Function
  },
  filterable: Boolean,
  loading: Boolean,
  loadingText: {
    type: [String, Function],
    "default": ""
  },
  max: {
    type: Number,
    "default": 0
  },
  minCollapsedNum: {
    type: Number,
    "default": 0
  },
  multiple: Boolean,
  placeholder: {
    type: String,
    "default": ""
  },
  popupProps: {
    type: Object
  },
  prefixIcon: {
    type: Function
  },
  showCheckAlll: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator84(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  treeProps: {
    type: Object
  },
  value: {
    type: [String, Number, Object, Array]
  },
  modelValue: {
    type: [String, Number, Object, Array]
  },
  defaultValue: {
    type: [String, Number, Object, Array]
  },
  valueDisplay: {
    type: Function
  },
  valueType: {
    type: String,
    "default": "value",
    validator: function validator85(val) {
      return ["value", "object"].includes(val);
    }
  },
  onBlur: Function,
  onChange: Function,
  onClear: Function,
  onFocus: Function,
  onRemove: Function,
  onSearch: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$R(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$Q(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$R(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _TreeSelect = defineComponent({
  name: "TTreeSelect",
  props: props$k,
  setup: function setup83(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX3 = useTNodeJSX();
    var classPrefix2 = usePrefixClass();
    var _useConfig = useConfig("treeSelect"), global2 = _useConfig.global;
    var treeRef = ref(null);
    var selectInputRef = ref(null);
    var formDisabled = useFormDisabled();
    var visible4 = ref(false);
    var isHover = ref(false);
    var defaultProps = reactive({
      trigger: "click",
      placement: "bottom-left",
      overlayClassName: "",
      overlayStyle: function overlayStyle2(trigger2) {
        return {
          width: "".concat(trigger2.offsetWidth, "px")
        };
      }
    });
    var filterByText = ref(null);
    var actived2 = ref([]);
    var expanded2 = ref([]);
    var nodeInfo = ref(null);
    var treeKey = ref(0);
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), treeSelectValue = _useVModel2[0], setTreeSelectValue = _useVModel2[1];
    watch(function() {
      return treeSelectValue.value;
    }, /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return changeNodeInfo();
            case 2:
              if (!props2.multiple) {
                actived2.value = nodeInfo.value ? [nodeInfo.value.value] : [];
              }
            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
    watch(function() {
      return props2.data;
    }, /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2() {
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return changeNodeInfo();
            case 2:
              treeRerender();
            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    var tDisabled = computed(function() {
      return formDisabled.value || props2.disabled;
    });
    var popupClass = computed(function() {
      return "".concat(popupObject2.value.overlayClassName, " ").concat(classPrefix2.value, "-select__dropdown-inner ").concat(classPrefix2.value, "-select__dropdown narrow-scrollbar");
    });
    var isObjectValue = computed(function() {
      return props2.valueType === "object";
    });
    var checked = computed(function() {
      if (props2.multiple) {
        if (isObjectValue.value) {
          return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function(item) {
            return item.value;
          }) : [];
        }
        return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function(item) {
          return item;
        }) : [];
      }
      return [];
    });
    var showLoading2 = computed(function() {
      return props2.loading && !tDisabled.value;
    });
    var showFilter3 = computed(function() {
      return props2.filterable || isFunction_1(props2.filter);
    });
    var showTree = computed(function() {
      return !props2.loading;
    });
    var popupObject2 = computed(function() {
      return props2.popupProps ? _objectSpread$Q(_objectSpread$Q({}, defaultProps), props2.popupProps) : defaultProps;
    });
    var selectedMultiple2 = computed(function() {
      if (props2.multiple && isArray_1(treeSelectValue.value) && !isEmpty_1(treeSelectValue.value)) {
        return treeSelectValue.value;
      }
      return [];
    });
    var multiLimitDisabled3 = computed(function() {
      return props2.multiple && !!props2.max && isArray_1(treeSelectValue.value) && props2.max <= treeSelectValue.value.length;
    });
    var loadingTextSlot = computed(function() {
      var useLocale = !props2.loadingText && !slots.loadingText;
      return useLocale ? createVNode("div", {
        "class": "".concat(classPrefix2.value, "-select__empty")
      }, [global2.value.loadingText]) : renderTNodeJSX3("loadingText");
    });
    var emptySlot = computed(function() {
      var useLocale = !props2.empty && !slots.empty;
      return useLocale ? createVNode("div", {
        "class": "".concat(classPrefix2.value, "-select__empty")
      }, [global2.value.empty]) : renderTNodeJSX3("empty");
    });
    var prefixIconSlot = computed(function() {
      return renderTNodeJSX3("prefixIcon");
    });
    var collapsedItemsSlots = computed(function() {
      if (!props2.multiple) {
        return null;
      }
      var notUseLocale = props2.collapsedItems || slots.collapsedItems || props2.minCollapsedNum <= 0 || selectedMultiple2.value.length <= props2.minCollapsedNum;
      return notUseLocale ? renderTNodeJSX3("collapsedItems", {
        params: {
          count: selectedMultiple2.value.length - props2.minCollapsedNum,
          value: selectedMultiple2.value,
          collapsedSelectedItems: selectedMultiple2.value.slice(props2.minCollapsedNum)
        }
      }) : null;
    });
    var valueDisplaySlot = computed(function() {
      var notUseLocale = props2.valueDisplay || slots.valueDisplay;
      var notUseSingleLocale = !props2.multiple && treeSelectValue.value !== "" && notUseLocale;
      var notUseMultipleLocale = props2.multiple && !isEmpty_1(treeSelectValue.value) && notUseLocale;
      if (notUseSingleLocale) {
        var _ref4;
        return renderTNodeJSX3("valueDisplay", {
          params: {
            value: nodeInfo.value || (_ref4 = {}, _defineProperty$3(_ref4, realLabel.value, ""), _defineProperty$3(_ref4, realValue.value, void 0), _ref4)
          }
        });
      }
      if (notUseMultipleLocale) {
        return renderTNodeJSX3("valueDisplay", {
          params: {
            value: nodeInfo.value,
            onClose: function onClose(value22, context) {
              tagChange(value22, context);
            }
          }
        });
      }
      return null;
    });
    var realLabel = computed(function() {
      if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
        return props2.treeProps.keys.label || "label";
      }
      return "label";
    });
    var realValue = computed(function() {
      if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
        return props2.treeProps.keys.value || "value";
      }
      return "value";
    });
    onMounted(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee3() {
      return regenerator.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(!treeSelectValue.value && props2.defaultValue)) {
                _context3.next = 3;
                break;
              }
              _context3.next = 3;
              return change(props2.defaultValue, null);
            case 3:
              if (isObjectValue.value) {
                actived2.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function(item) {
                  return item.value;
                }) : [treeSelectValue.value.value];
              } else {
                actived2.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value : [treeSelectValue.value];
              }
              changeNodeInfo();
            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    var popupVisibleChange = function popupVisibleChange2(state) {
      visible4.value = state;
    };
    var change = function change2(valueParam, node) {
      var _props2$onChange;
      setTreeSelectValue(valueParam, {
        node
      });
      changeNodeInfo();
      (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, valueParam, {
        node
      });
    };
    var clear5 = function clear6(content) {
      var _props2$onClear;
      var defaultValue = props2.multiple ? [] : "";
      actived2.value = [];
      change(defaultValue, null);
      (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, {
        e: content.e
      });
    };
    var focus3 = function focus4(value22, context) {
      var _props2$onFocus;
      (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
        value: value22,
        e: context.e
      });
    };
    var blur3 = function blur4(value22, context) {
      var _props2$onBlur;
      (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
        value: value22,
        e: context.e
      });
    };
    var remove3 = function remove4(options) {
      var _props2$onRemove;
      (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 ? void 0 : _props2$onRemove.call(props2, options);
    };
    var search2 = function search3(filterWordsParam) {
      var _props2$onSearch;
      (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, filterWordsParam);
    };
    var treeNodeChange = function treeNodeChange2(valueParam, context) {
      var current2 = valueParam;
      if (isObjectValue.value) {
        current2 = valueParam.map(function(nodeValue) {
          return getTreeNode(props2.data, nodeValue);
        });
      }
      change(current2, context.node);
    };
    var treeNodeActive = function treeNodeActive2(valueParam, context) {
      visible4.value = false;
      if (props2.multiple) {
        return;
      }
      if (treeSelectValue.value === context.node.data[realValue.value]) {
        return;
      }
      var current2 = valueParam;
      if (isObjectValue.value) {
        var nodeValue = isEmpty_1(valueParam) ? "" : valueParam[0];
        current2 = getTreeNode(props2.data, nodeValue);
      } else {
        current2 = isEmpty_1(valueParam) ? "" : valueParam[0];
      }
      change(current2, context.node);
      actived2.value = valueParam;
    };
    var treeNodeExpand = function treeNodeExpand2(valueParam) {
      expanded2.value = valueParam;
    };
    var inputChange3 = function inputChange4(value22) {
      if (!value22) {
        filterByText.value = null;
        return null;
      }
      filterByText.value = function(node) {
        if (isFunction_1(props2.filter)) {
          var filter2 = props2.filter(String(value22), node);
          if (isBoolean_1(filter2)) {
            return filter2;
          }
        }
        return node.data[realLabel.value].indexOf(value22) >= 0;
      };
      search2(String(value22));
    };
    var tagChange = function tagChange2(value22, context) {
      var trigger2 = context.trigger, index2 = context.index;
      if (["tag-remove", "backspace"].includes(trigger2)) {
        isArray_1(treeSelectValue.value) && treeSelectValue.value.splice(index2, 1);
      }
      remove3({
        value: value22,
        data: null,
        e: context && context.e
      });
      change(treeSelectValue.value, null);
    };
    var changeNodeInfo = /* @__PURE__ */ function() {
      var _ref6 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee4() {
        return regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return treeSelectValue.value;
              case 2:
                if (!props2.multiple) {
                  if (treeSelectValue.value || treeSelectValue.value === 0) {
                    nodeInfo.value = getSingleNodeInfo();
                  }
                } else if (props2.multiple) {
                  if (isArray_1(treeSelectValue.value)) {
                    nodeInfo.value = getMultipleNodeInfo();
                  } else {
                    nodeInfo.value = [];
                  }
                } else {
                  nodeInfo.value = null;
                }
              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));
      return function changeNodeInfo2() {
        return _ref6.apply(this, arguments);
      };
    }();
    var getSingleNodeInfo = function getSingleNodeInfo2() {
      var _props2$treeProps;
      var nodeValue = isObjectValue.value ? treeSelectValue.value.value : treeSelectValue.value;
      if (treeRef.value && (_props2$treeProps = props2.treeProps) !== null && _props2$treeProps !== void 0 && _props2$treeProps.load) {
        if (!isEmpty_1(props2.data)) {
          var node2 = treeRef.value.getItem(nodeValue);
          if (!node2)
            return;
          return {
            label: node2.data[realLabel.value],
            value: node2.data[realValue.value]
          };
        }
        return {
          label: nodeValue,
          value: nodeValue
        };
      }
      var node = getTreeNode(props2.data, nodeValue);
      if (!node) {
        return {
          label: nodeValue,
          value: nodeValue
        };
      }
      return node;
    };
    var getMultipleNodeInfo = function getMultipleNodeInfo2() {
      return treeSelectValue.value.map(function(value22) {
        var _props2$treeProps2;
        var nodeValue = isObjectValue.value ? value22.value : value22;
        if (treeRef.value && (_props2$treeProps2 = props2.treeProps) !== null && _props2$treeProps2 !== void 0 && _props2$treeProps2.load) {
          if (!isEmpty_1(props2.data)) {
            var node2 = treeRef.value.getItem(nodeValue);
            if (!node2)
              return;
            return {
              label: node2.data[realLabel.value],
              value: node2.data[realValue.value]
            };
          }
          return {
            label: nodeValue,
            value: nodeValue
          };
        }
        var node = getTreeNode(props2.data, nodeValue);
        if (!node) {
          return {
            label: nodeValue,
            value: nodeValue
          };
        }
        return node;
      });
    };
    var getTreeNode = function getTreeNode2(data26, targetValue) {
      for (var i = 0, len2 = data26.length; i < len2; i++) {
        var _data$i;
        if (data26[i][realValue.value] === targetValue) {
          return {
            label: data26[i][realLabel.value],
            value: data26[i][realValue.value]
          };
        }
        if ((_data$i = data26[i]) !== null && _data$i !== void 0 && _data$i.children) {
          var _data$i2;
          var result = getTreeNode2((_data$i2 = data26[i]) === null || _data$i2 === void 0 ? void 0 : _data$i2.children, targetValue);
          if (!isNil_1(result)) {
            return result;
          }
        }
      }
      return null;
    };
    var treeRerender = function treeRerender2() {
      treeKey.value += 1;
    };
    var treeSlots = {
      empty: function empty2() {
        return createVNode("span", null, [emptySlot.value]);
      }
    };
    var treeItem = function treeItem2() {
      return withDirectives(createVNode(Tree, mergeProps({
        "ref": treeRef,
        "key": treeKey.value,
        "value": _toConsumableArray(checked.value),
        "hover": true,
        "data": props2.data,
        "activable": !props2.multiple,
        "checkable": props2.multiple,
        "disabled": tDisabled.value || multiLimitDisabled3.value,
        "empty": props2.empty,
        "size": props2.size,
        "filter": filterByText.value,
        "icon": !filterByText.value,
        "actived": actived2.value,
        "expanded": expanded2.value,
        "activeMultiple": props2.multiple,
        "onChange": treeNodeChange,
        "onActive": treeNodeActive,
        "onExpand": treeNodeExpand,
        "expandOnClickNode": true
      }, props2.treeProps), treeSlots), [[vShow, showTree.value]]);
    };
    var SelectInputSlots = {
      panel: function panel() {
        return createVNode("div", null, [withDirectives(createVNode("p", {
          "class": "".concat(classPrefix2.value, "-select-loading-tips ").concat(classPrefix2.value, "-select__right-icon-polyfill")
        }, [loadingTextSlot.value]), [[vShow, showLoading2.value]]), treeItem()]);
      }
    };
    if (prefixIconSlot.value) {
      SelectInputSlots.prefixIcon = function() {
        return createVNode(Fragment, null, [prefixIconSlot.value]);
      };
    }
    if (collapsedItemsSlots.value) {
      SelectInputSlots.collapsedItems = function() {
        return createVNode(Fragment, null, [collapsedItemsSlots.value]);
      };
    }
    if (valueDisplaySlot.value) {
      SelectInputSlots.valueDisplay = function() {
        return createVNode(Fragment, null, [valueDisplaySlot.value]);
      };
    }
    var popupProps2 = {
      placement: popupObject2.value.placement,
      trigger: popupObject2.value.trigger,
      overlayStyle: popupObject2.value.overlayStyle,
      overlayClassName: popupClass.value,
      expandAnimation: true
    };
    var inputProps = {
      size: props2.size
    };
    var tagInputProps = {
      inputProps: {
        size: props2.size,
        onClear: clear5
      }
    };
    var tagProps = {
      size: props2.size,
      closable: true,
      maxWidth: 300
    };
    return function() {
      return createVNode(SelectInput, {
        "ref": selectInputRef,
        "value": nodeInfo.value,
        "multiple": props2.multiple,
        "loading": props2.loading,
        "disabled": tDisabled.value,
        "clearable": props2.clearable,
        "placeholder": props2.placeholder,
        "allowInput": showFilter3.value,
        "popupVisible": visible4.value,
        "minCollapsedNum": props2.minCollapsedNum,
        "tagProps": tagProps,
        "popupProps": popupProps2,
        "inputProps": inputProps,
        "tagInputProps": tagInputProps,
        "onClear": clear5,
        "onBlur": blur3,
        "onFocus": focus3,
        "onInputChange": inputChange3,
        "onTagChange": tagChange,
        "onPopupVisibleChange": popupVisibleChange,
        "onMouseenter": function onMouseenter() {
          return isHover.value = true;
        },
        "onMouseleave": function onMouseleave() {
          return isHover.value = false;
        }
      }, SelectInputSlots);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TreeSelect = withInstall(_TreeSelect);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$j = {
  closeBtn: {
    type: [String, Boolean, Function],
    "default": true
  },
  colorModes: {
    type: Array,
    "default": ["monochrome", "linear-gradient"]
  },
  disabled: Boolean,
  enableAlpha: Boolean,
  format: {
    type: String,
    "default": "RGB",
    validator: function validator86(val) {
      if (!val)
        return true;
      return ["RGB", "RGBA", "HSL", "HSLA", "HSB", "HSV", "HSVA", "HEX", "CMYK", "CSS"].includes(val);
    }
  },
  inputProps: {
    type: Object
  },
  multiple: Boolean,
  popupProps: {
    type: Object
  },
  recentColors: {
    type: Array,
    "default": void 0
  },
  defaultRecentColors: {
    type: Array,
    "default": function _default40() {
      return [];
    }
  },
  selectInputProps: {
    type: Object
  },
  swatchColors: {
    type: Array
  },
  value: {
    type: String,
    "default": void 0
  },
  modelValue: {
    type: String,
    "default": void 0
  },
  defaultValue: {
    type: String,
    "default": ""
  },
  onChange: Function,
  onPaletteBarChange: Function,
  onRecentColorsChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
var COLOR_MODES = {
  monochrome: "\u5355\u8272",
  "linear-gradient": "\u6E10\u53D8"
};
var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];
var DEFAULT_COLOR = "#001F97";
var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
var SATURATION_PANEL_DEFAULT_WIDTH = 248;
var SATURATION_PANEL_DEFAULT_HEIGHT = 140;
var SLIDER_DEFAULT_WIDTH = 248;
var GRADIENT_SLIDER_DEFAULT_WIDTH = 190;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var BASE_COMPONENT_NAME = "color-picker";
var useBaseClassName = function useBaseClassName2(className) {
  var baseClassName = usePrefixClass(BASE_COMPONENT_NAME);
  return computed(function() {
    return className ? "".concat(baseClassName.value, "-").concat(className) : baseClassName.value;
  });
};
var index$k = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$Q(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$P(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$Q(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$b(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var PanelHeader = defineComponent({
  name: "PanelHeader",
  components: {
    CloseIcon: close,
    TRadioGroup: RadioGroup,
    TRadioButton: RadioButton
  },
  props: _objectSpread$P(_objectSpread$P({}, props$j), {}, {
    mode: {
      type: String,
      "default": "color"
    },
    togglePopup: {
      type: Function
    },
    onModeChange: {
      type: Function,
      "default": function _default41() {
        return function() {
        };
      }
    }
  }),
  setup: function setup84(props2) {
    var baseClassName = useBaseClassName();
    var modeValue = ref(props2.mode);
    var handleClosePopup = function handleClosePopup2() {
      var _props2$togglePopup;
      (_props2$togglePopup = props2.togglePopup) === null || _props2$togglePopup === void 0 ? void 0 : _props2$togglePopup.call(props2, false);
    };
    var handleModeChange = function handleModeChange2(v) {
      return props2.onModeChange(v);
    };
    watch(function() {
      return props2.mode;
    }, function(v) {
      return modeValue.value = v;
    });
    return {
      baseClassName,
      modeValue,
      handleModeChange,
      handleClosePopup
    };
  },
  render: function render64() {
    var _slot;
    var _this$colorModes, _this = this;
    var baseClassName = this.baseClassName;
    return createVNode("div", {
      "className": "".concat(baseClassName, "__head")
    }, [createVNode("div", {
      "className": "".concat(baseClassName, "__mode")
    }, [((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1 ? COLOR_MODES[this.colorModes[0]] : createVNode(resolveComponent("t-radio-group"), {
      "variant": "default-filled",
      "size": "small",
      "modelValue": _this.modeValue,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.modeValue = $event;
      },
      "onChange": this.handleModeChange
    }, _isSlot$b(_slot = Object.keys(COLOR_MODES).map(function(key) {
      return createVNode(resolveComponent("t-radio-button"), {
        "key": key,
        "value": key
      }, {
        "default": function _default65() {
          return [COLOR_MODES[key]];
        }
      });
    })) ? _slot : {
      "default": function _default65() {
        return [_slot];
      }
    })]), this.closeBtn ? createVNode("span", {
      "role": "button",
      "class": ["".concat(baseClassName, "__icon"), "".concat(baseClassName, "__close")],
      "onClick": this.handleClosePopup
    }, [createVNode(resolveComponent("close-icon"), null, null)]) : null]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var rgb2cmyk = function rgb2cmyk2(red, green, blue) {
  var computedC = 0;
  var computedM = 0;
  var computedY = 0;
  var computedK = 0;
  var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
  var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
  var b = parseInt("".concat(blue).replace(/\s/g, ""), 10);
  if (r === 0 && g === 0 && b === 0) {
    computedK = 1;
    return [0, 0, 0, 1];
  }
  computedC = 1 - r / 255;
  computedM = 1 - g / 255;
  computedY = 1 - b / 255;
  var minCMY = Math.min(computedC, Math.min(computedM, computedY));
  computedC = (computedC - minCMY) / (1 - minCMY);
  computedM = (computedM - minCMY) / (1 - minCMY);
  computedY = (computedY - minCMY) / (1 - minCMY);
  computedK = minCMY;
  return [computedC, computedM, computedY, computedK];
};
var cmyk2rgb = function cmyk2rgb2(cyan, magenta, yellow, black) {
  var c = cyan / 100;
  var m = magenta / 100;
  var y = yellow / 100;
  var k = black / 100;
  c = c * (1 - k) + k;
  m = m * (1 - k) + k;
  y = y * (1 - k) + k;
  var r = 1 - c;
  var g = 1 - m;
  var b = 1 - y;
  r = Math.round(255 * r);
  g = Math.round(255 * g);
  b = Math.round(255 * b);
  return {
    r,
    g,
    b
  };
};
var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;
var toNumber = function toNumber2(str) {
  return Math.max(0, Math.min(255, parseInt(str, 10)));
};
var cmykInputToColor = function cmykInputToColor2(input) {
  if (/cmyk/i.test(input)) {
    var str = input.replace(/\s/g, "");
    var match = str.match(REG_CMYK_STRING);
    var c = toNumber(match[1]);
    var m = toNumber(match[2]);
    var y = toNumber(match[3]);
    var k = toNumber(match[4]);
    var _cmyk2rgb = cmyk2rgb(c, m, y, k), r = _cmyk2rgb.r, g = _cmyk2rgb.g, b = _cmyk2rgb.b;
    return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
  }
  return input;
};
var tinycolor = { exports: {} };
(function(module) {
  (function(Math2) {
    var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound2 = Math2.round, mathMin = Math2.min, mathMax = Math2.max, mathRandom = Math2.random;
    function tinycolor2(color, opts) {
      color = color ? color : "";
      opts = opts || {};
      if (color instanceof tinycolor2) {
        return color;
      }
      if (!(this instanceof tinycolor2)) {
        return new tinycolor2(color, opts);
      }
      var rgb = inputToRGB(color);
      this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound2(100 * this._a) / 100, this._format = opts.format || rgb.format;
      this._gradientType = opts.gradientType;
      if (this._r < 1) {
        this._r = mathRound2(this._r);
      }
      if (this._g < 1) {
        this._g = mathRound2(this._g);
      }
      if (this._b < 1) {
        this._b = mathRound2(this._b);
      }
      this._ok = rgb.ok;
      this._tc_id = tinyCounter++;
    }
    tinycolor2.prototype = {
      isDark: function() {
        return this.getBrightness() < 128;
      },
      isLight: function() {
        return !this.isDark();
      },
      isValid: function() {
        return this._ok;
      },
      getOriginalInput: function() {
        return this._originalInput;
      },
      getFormat: function() {
        return this._format;
      },
      getAlpha: function() {
        return this._a;
      },
      getBrightness: function() {
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
      },
      getLuminance: function() {
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r / 255;
        GsRGB = rgb.g / 255;
        BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) {
          R = RsRGB / 12.92;
        } else {
          R = Math2.pow((RsRGB + 0.055) / 1.055, 2.4);
        }
        if (GsRGB <= 0.03928) {
          G = GsRGB / 12.92;
        } else {
          G = Math2.pow((GsRGB + 0.055) / 1.055, 2.4);
        }
        if (BsRGB <= 0.03928) {
          B = BsRGB / 12.92;
        } else {
          B = Math2.pow((BsRGB + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * R + 0.7152 * G + 0.0722 * B;
      },
      setAlpha: function(value6) {
        this._a = boundAlpha(value6);
        this._roundA = mathRound2(100 * this._a) / 100;
        return this;
      },
      toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
      },
      toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h2 = mathRound2(hsv.h * 360), s = mathRound2(hsv.s * 100), v = mathRound2(hsv.v * 100);
        return this._a == 1 ? "hsv(" + h2 + ", " + s + "%, " + v + "%)" : "hsva(" + h2 + ", " + s + "%, " + v + "%, " + this._roundA + ")";
      },
      toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
      },
      toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h2 = mathRound2(hsl.h * 360), s = mathRound2(hsl.s * 100), l = mathRound2(hsl.l * 100);
        return this._a == 1 ? "hsl(" + h2 + ", " + s + "%, " + l + "%)" : "hsla(" + h2 + ", " + s + "%, " + l + "%, " + this._roundA + ")";
      },
      toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
      },
      toHexString: function(allow3Char) {
        return "#" + this.toHex(allow3Char);
      },
      toHex8: function(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
      },
      toHex8String: function(allow4Char) {
        return "#" + this.toHex8(allow4Char);
      },
      toRgb: function() {
        return { r: mathRound2(this._r), g: mathRound2(this._g), b: mathRound2(this._b), a: this._a };
      },
      toRgbString: function() {
        return this._a == 1 ? "rgb(" + mathRound2(this._r) + ", " + mathRound2(this._g) + ", " + mathRound2(this._b) + ")" : "rgba(" + mathRound2(this._r) + ", " + mathRound2(this._g) + ", " + mathRound2(this._b) + ", " + this._roundA + ")";
      },
      toPercentageRgb: function() {
        return { r: mathRound2(bound01(this._r, 255) * 100) + "%", g: mathRound2(bound01(this._g, 255) * 100) + "%", b: mathRound2(bound01(this._b, 255) * 100) + "%", a: this._a };
      },
      toPercentageRgbString: function() {
        return this._a == 1 ? "rgb(" + mathRound2(bound01(this._r, 255) * 100) + "%, " + mathRound2(bound01(this._g, 255) * 100) + "%, " + mathRound2(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound2(bound01(this._r, 255) * 100) + "%, " + mathRound2(bound01(this._g, 255) * 100) + "%, " + mathRound2(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
      },
      toName: function() {
        if (this._a === 0) {
          return "transparent";
        }
        if (this._a < 1) {
          return false;
        }
        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
      },
      toFilter: function(secondColor) {
        var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";
        if (secondColor) {
          var s = tinycolor2(secondColor);
          secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }
        return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
      },
      toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;
        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
        if (needsAlphaFormat) {
          if (format === "name" && this._a === 0) {
            return this.toName();
          }
          return this.toRgbString();
        }
        if (format === "rgb") {
          formattedString = this.toRgbString();
        }
        if (format === "prgb") {
          formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
          formattedString = this.toHexString();
        }
        if (format === "hex3") {
          formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
          formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
          formattedString = this.toHex8String();
        }
        if (format === "name") {
          formattedString = this.toName();
        }
        if (format === "hsl") {
          formattedString = this.toHslString();
        }
        if (format === "hsv") {
          formattedString = this.toHsvString();
        }
        return formattedString || this.toHexString();
      },
      clone: function() {
        return tinycolor2(this.toString());
      },
      _applyModification: function(fn2, args) {
        var color = fn2.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
      },
      lighten: function() {
        return this._applyModification(lighten, arguments);
      },
      brighten: function() {
        return this._applyModification(brighten, arguments);
      },
      darken: function() {
        return this._applyModification(darken, arguments);
      },
      desaturate: function() {
        return this._applyModification(desaturate, arguments);
      },
      saturate: function() {
        return this._applyModification(saturate, arguments);
      },
      greyscale: function() {
        return this._applyModification(greyscale, arguments);
      },
      spin: function() {
        return this._applyModification(spin, arguments);
      },
      _applyCombination: function(fn2, args) {
        return fn2.apply(null, [this].concat([].slice.call(args)));
      },
      analogous: function() {
        return this._applyCombination(analogous, arguments);
      },
      complement: function() {
        return this._applyCombination(complement, arguments);
      },
      monochromatic: function() {
        return this._applyCombination(monochromatic, arguments);
      },
      splitcomplement: function() {
        return this._applyCombination(splitcomplement, arguments);
      },
      triad: function() {
        return this._applyCombination(triad, arguments);
      },
      tetrad: function() {
        return this._applyCombination(tetrad, arguments);
      }
    };
    tinycolor2.fromRatio = function(color, opts) {
      if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
          if (color.hasOwnProperty(i)) {
            if (i === "a") {
              newColor[i] = color[i];
            } else {
              newColor[i] = convertToPercentage(color[i]);
            }
          }
        }
        color = newColor;
      }
      return tinycolor2(color, opts);
    };
    function inputToRGB(color) {
      var rgb = { r: 0, g: 0, b: 0 };
      var a = 1;
      var s = null;
      var v = null;
      var l = null;
      var ok = false;
      var format = false;
      if (typeof color == "string") {
        color = stringInputToObject(color);
      }
      if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
          rgb = rgbToRgb(color.r, color.g, color.b);
          ok = true;
          format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
          s = convertToPercentage(color.s);
          v = convertToPercentage(color.v);
          rgb = hsvToRgb(color.h, s, v);
          ok = true;
          format = "hsv";
        } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
          s = convertToPercentage(color.s);
          l = convertToPercentage(color.l);
          rgb = hslToRgb(color.h, s, l);
          ok = true;
          format = "hsl";
        }
        if (color.hasOwnProperty("a")) {
          a = color.a;
        }
      }
      a = boundAlpha(a);
      return {
        ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a
      };
    }
    function rgbToRgb(r, g, b) {
      return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
      };
    }
    function rgbToHsl(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max4 = mathMax(r, g, b), min4 = mathMin(r, g, b);
      var h2, s, l = (max4 + min4) / 2;
      if (max4 == min4) {
        h2 = s = 0;
      } else {
        var d = max4 - min4;
        s = l > 0.5 ? d / (2 - max4 - min4) : d / (max4 + min4);
        switch (max4) {
          case r:
            h2 = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h2 = (b - r) / d + 2;
            break;
          case b:
            h2 = (r - g) / d + 4;
            break;
        }
        h2 /= 6;
      }
      return { h: h2, s, l };
    }
    function hslToRgb(h2, s, l) {
      var r, g, b;
      h2 = bound01(h2, 360);
      s = bound01(s, 100);
      l = bound01(l, 100);
      function hue2rgb(p3, q2, t) {
        if (t < 0)
          t += 1;
        if (t > 1)
          t -= 1;
        if (t < 1 / 6)
          return p3 + (q2 - p3) * 6 * t;
        if (t < 1 / 2)
          return q2;
        if (t < 2 / 3)
          return p3 + (q2 - p3) * (2 / 3 - t) * 6;
        return p3;
      }
      if (s === 0) {
        r = g = b = l;
      } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p2 = 2 * l - q;
        r = hue2rgb(p2, q, h2 + 1 / 3);
        g = hue2rgb(p2, q, h2);
        b = hue2rgb(p2, q, h2 - 1 / 3);
      }
      return { r: r * 255, g: g * 255, b: b * 255 };
    }
    function rgbToHsv(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max4 = mathMax(r, g, b), min4 = mathMin(r, g, b);
      var h2, s, v = max4;
      var d = max4 - min4;
      s = max4 === 0 ? 0 : d / max4;
      if (max4 == min4) {
        h2 = 0;
      } else {
        switch (max4) {
          case r:
            h2 = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h2 = (b - r) / d + 2;
            break;
          case b:
            h2 = (r - g) / d + 4;
            break;
        }
        h2 /= 6;
      }
      return { h: h2, s, v };
    }
    function hsvToRgb(h2, s, v) {
      h2 = bound01(h2, 360) * 6;
      s = bound01(s, 100);
      v = bound01(v, 100);
      var i = Math2.floor(h2), f = h2 - i, p2 = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [v, q, p2, p2, t, v][mod], g = [t, v, v, q, p2, p2][mod], b = [p2, p2, t, v, v, q][mod];
      return { r: r * 255, g: g * 255, b: b * 255 };
    }
    function rgbToHex(r, g, b, allow3Char) {
      var hex = [
        pad2(mathRound2(r).toString(16)),
        pad2(mathRound2(g).toString(16)),
        pad2(mathRound2(b).toString(16))
      ];
      if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }
      return hex.join("");
    }
    function rgbaToHex(r, g, b, a, allow4Char) {
      var hex = [
        pad2(mathRound2(r).toString(16)),
        pad2(mathRound2(g).toString(16)),
        pad2(mathRound2(b).toString(16)),
        pad2(convertDecimalToHex(a))
      ];
      if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }
      return hex.join("");
    }
    function rgbaToArgbHex(r, g, b, a) {
      var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(mathRound2(r).toString(16)),
        pad2(mathRound2(g).toString(16)),
        pad2(mathRound2(b).toString(16))
      ];
      return hex.join("");
    }
    tinycolor2.equals = function(color1, color2) {
      if (!color1 || !color2) {
        return false;
      }
      return tinycolor2(color1).toRgbString() == tinycolor2(color2).toRgbString();
    };
    tinycolor2.random = function() {
      return tinycolor2.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
      });
    };
    function desaturate(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor2(color).toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor2(hsl);
    }
    function saturate(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor2(color).toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return tinycolor2(hsl);
    }
    function greyscale(color) {
      return tinycolor2(color).desaturate(100);
    }
    function lighten(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor2(color).toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor2(hsl);
    }
    function brighten(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var rgb = tinycolor2(color).toRgb();
      rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound2(255 * -(amount / 100))));
      rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound2(255 * -(amount / 100))));
      rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound2(255 * -(amount / 100))));
      return tinycolor2(rgb);
    }
    function darken(color, amount) {
      amount = amount === 0 ? 0 : amount || 10;
      var hsl = tinycolor2(color).toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return tinycolor2(hsl);
    }
    function spin(color, amount) {
      var hsl = tinycolor2(color).toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return tinycolor2(hsl);
    }
    function complement(color) {
      var hsl = tinycolor2(color).toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return tinycolor2(hsl);
    }
    function triad(color) {
      var hsl = tinycolor2(color).toHsl();
      var h2 = hsl.h;
      return [
        tinycolor2(color),
        tinycolor2({ h: (h2 + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor2({ h: (h2 + 240) % 360, s: hsl.s, l: hsl.l })
      ];
    }
    function tetrad(color) {
      var hsl = tinycolor2(color).toHsl();
      var h2 = hsl.h;
      return [
        tinycolor2(color),
        tinycolor2({ h: (h2 + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor2({ h: (h2 + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor2({ h: (h2 + 270) % 360, s: hsl.s, l: hsl.l })
      ];
    }
    function splitcomplement(color) {
      var hsl = tinycolor2(color).toHsl();
      var h2 = hsl.h;
      return [
        tinycolor2(color),
        tinycolor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
        tinycolor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    }
    function analogous(color, results, slices) {
      results = results || 6;
      slices = slices || 30;
      var hsl = tinycolor2(color).toHsl();
      var part = 360 / slices;
      var ret = [tinycolor2(color)];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor2(hsl));
      }
      return ret;
    }
    function monochromatic(color, results) {
      results = results || 6;
      var hsv = tinycolor2(color).toHsv();
      var h2 = hsv.h, s = hsv.s, v = hsv.v;
      var ret = [];
      var modification = 1 / results;
      while (results--) {
        ret.push(tinycolor2({ h: h2, s, v }));
        v = (v + modification) % 1;
      }
      return ret;
    }
    tinycolor2.mix = function(color1, color2, amount) {
      amount = amount === 0 ? 0 : amount || 50;
      var rgb1 = tinycolor2(color1).toRgb();
      var rgb2 = tinycolor2(color2).toRgb();
      var p2 = amount / 100;
      var rgba = {
        r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
        g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
        b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
        a: (rgb2.a - rgb1.a) * p2 + rgb1.a
      };
      return tinycolor2(rgba);
    };
    tinycolor2.readability = function(color1, color2) {
      var c1 = tinycolor2(color1);
      var c2 = tinycolor2(color2);
      return (Math2.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math2.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
    };
    tinycolor2.isReadable = function(color1, color2, wcag2) {
      var readability = tinycolor2.readability(color1, color2);
      var wcag2Parms, out;
      out = false;
      wcag2Parms = validateWCAG2Parms(wcag2);
      switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
          out = readability >= 4.5;
          break;
        case "AAlarge":
          out = readability >= 3;
          break;
        case "AAAsmall":
          out = readability >= 7;
          break;
      }
      return out;
    };
    tinycolor2.mostReadable = function(baseColor, colorList, args) {
      var bestColor = null;
      var bestScore = 0;
      var readability;
      var includeFallbackColors, level, size2;
      args = args || {};
      includeFallbackColors = args.includeFallbackColors;
      level = args.level;
      size2 = args.size;
      for (var i = 0; i < colorList.length; i++) {
        readability = tinycolor2.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
          bestScore = readability;
          bestColor = tinycolor2(colorList[i]);
        }
      }
      if (tinycolor2.isReadable(baseColor, bestColor, { "level": level, "size": size2 }) || !includeFallbackColors) {
        return bestColor;
      } else {
        args.includeFallbackColors = false;
        return tinycolor2.mostReadable(baseColor, ["#fff", "#000"], args);
      }
    };
    var names = tinycolor2.names = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "0ff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000",
      blanchedalmond: "ffebcd",
      blue: "00f",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      burntsienna: "ea7e5d",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "0ff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkgrey: "a9a9a9",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkslategrey: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dimgrey: "696969",
      dodgerblue: "1e90ff",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "f0f",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      grey: "808080",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgray: "d3d3d3",
      lightgreen: "90ee90",
      lightgrey: "d3d3d3",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslategray: "789",
      lightslategrey: "789",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "0f0",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "f0f",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370db",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "db7093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      rebeccapurple: "663399",
      red: "f00",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      slategrey: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      wheat: "f5deb3",
      white: "fff",
      whitesmoke: "f5f5f5",
      yellow: "ff0",
      yellowgreen: "9acd32"
    };
    var hexNames = tinycolor2.hexNames = flip2(names);
    function flip2(o) {
      var flipped = {};
      for (var i in o) {
        if (o.hasOwnProperty(i)) {
          flipped[o[i]] = i;
        }
      }
      return flipped;
    }
    function boundAlpha(a) {
      a = parseFloat(a);
      if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
      }
      return a;
    }
    function bound01(n, max4) {
      if (isOnePointZero(n)) {
        n = "100%";
      }
      var processPercent = isPercentage(n);
      n = mathMin(max4, mathMax(0, parseFloat(n)));
      if (processPercent) {
        n = parseInt(n * max4, 10) / 100;
      }
      if (Math2.abs(n - max4) < 1e-6) {
        return 1;
      }
      return n % max4 / parseFloat(max4);
    }
    function clamp01(val) {
      return mathMin(1, mathMax(0, val));
    }
    function parseIntFromHex(val) {
      return parseInt(val, 16);
    }
    function isOnePointZero(n) {
      return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
    }
    function isPercentage(n) {
      return typeof n === "string" && n.indexOf("%") != -1;
    }
    function pad2(c) {
      return c.length == 1 ? "0" + c : "" + c;
    }
    function convertToPercentage(n) {
      if (n <= 1) {
        n = n * 100 + "%";
      }
      return n;
    }
    function convertDecimalToHex(d) {
      return Math2.round(parseFloat(d) * 255).toString(16);
    }
    function convertHexToDecimal(h2) {
      return parseIntFromHex(h2) / 255;
    }
    var matchers = function() {
      var CSS_INTEGER = "[-\\+]?\\d+%?";
      var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
      var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
      var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
      var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
      return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
      };
    }();
    function isValidCSSUnit(color) {
      return !!matchers.CSS_UNIT.exec(color);
    }
    function stringInputToObject(color) {
      color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
      var named = false;
      if (names[color]) {
        color = names[color];
        named = true;
      } else if (color == "transparent") {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
      }
      var match;
      if (match = matchers.rgb.exec(color)) {
        return { r: match[1], g: match[2], b: match[3] };
      }
      if (match = matchers.rgba.exec(color)) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
      }
      if (match = matchers.hsl.exec(color)) {
        return { h: match[1], s: match[2], l: match[3] };
      }
      if (match = matchers.hsla.exec(color)) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
      }
      if (match = matchers.hsv.exec(color)) {
        return { h: match[1], s: match[2], v: match[3] };
      }
      if (match = matchers.hsva.exec(color)) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
      }
      if (match = matchers.hex8.exec(color)) {
        return {
          r: parseIntFromHex(match[1]),
          g: parseIntFromHex(match[2]),
          b: parseIntFromHex(match[3]),
          a: convertHexToDecimal(match[4]),
          format: named ? "name" : "hex8"
        };
      }
      if (match = matchers.hex6.exec(color)) {
        return {
          r: parseIntFromHex(match[1]),
          g: parseIntFromHex(match[2]),
          b: parseIntFromHex(match[3]),
          format: named ? "name" : "hex"
        };
      }
      if (match = matchers.hex4.exec(color)) {
        return {
          r: parseIntFromHex(match[1] + "" + match[1]),
          g: parseIntFromHex(match[2] + "" + match[2]),
          b: parseIntFromHex(match[3] + "" + match[3]),
          a: convertHexToDecimal(match[4] + "" + match[4]),
          format: named ? "name" : "hex8"
        };
      }
      if (match = matchers.hex3.exec(color)) {
        return {
          r: parseIntFromHex(match[1] + "" + match[1]),
          g: parseIntFromHex(match[2] + "" + match[2]),
          b: parseIntFromHex(match[3] + "" + match[3]),
          format: named ? "name" : "hex"
        };
      }
      return false;
    }
    function validateWCAG2Parms(parms) {
      var level, size2;
      parms = parms || { "level": "AA", "size": "small" };
      level = (parms.level || "AA").toUpperCase();
      size2 = (parms.size || "small").toLowerCase();
      if (level !== "AA" && level !== "AAA") {
        level = "AA";
      }
      if (size2 !== "small" && size2 !== "large") {
        size2 = "small";
      }
      return { "level": level, "size": size2 };
    }
    if (module.exports) {
      module.exports = tinycolor2;
    } else {
      window.tinycolor = tinycolor2;
    }
  })(Math);
})(tinycolor);
var tinyColor = tinycolor.exports;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var combineRegExp = function combineRegExp2(regexpList, flags) {
  var source = "";
  for (var i = 0; i < regexpList.length; i++) {
    if (typeof regexpList[i] === "string") {
      source += regexpList[i];
    } else {
      source += regexpList[i].source;
    }
  }
  return new RegExp(source, flags);
};
var generateRegExp = function generateRegExp2() {
  var searchFlags = "gi";
  var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
  var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
  var rComma = /\s*,\s*/;
  var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
  var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
  var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
  var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
  var rKeyword = /[_a-z-][_a-z0-9-]*/;
  var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
  var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
  var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
  var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
  var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
  var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
  return {
    gradientSearch: rGradientSearch,
    colorStopSearch: rColorStopSearch
  };
};
var parseGradient = function parseGradient2(regExpLib, input) {
  var result;
  var matchColorStop;
  var stopResult;
  regExpLib.gradientSearch.lastIndex = 0;
  var matchGradient = regExpLib.gradientSearch.exec(input);
  if (matchGradient !== null) {
    result = {
      original: matchGradient[0],
      colorStopList: []
    };
    if (matchGradient[1]) {
      result.line = matchGradient[1];
    }
    if (matchGradient[2]) {
      result.angle = matchGradient[2];
    }
    if (matchGradient[3]) {
      result.sideCorner = matchGradient[3];
    }
    regExpLib.colorStopSearch.lastIndex = 0;
    matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
    while (matchColorStop !== null) {
      stopResult = {
        color: matchColorStop[1]
      };
      if (matchColorStop[2]) {
        stopResult.position = matchColorStop[2];
      }
      result.colorStopList.push(stopResult);
      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
    }
  }
  return result;
};
var REGEXP_LIB = generateRegExp();
var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
var isGradientColor = function isGradientColor2(input) {
  REG_GRADIENT.lastIndex = 0;
  return REG_GRADIENT.exec(input);
};
var sideCornerDegreeMap = {
  top: 0,
  right: 90,
  bottom: 180,
  left: 270,
  "top left": 225,
  "left top": 225,
  "top right": 135,
  "right top": 135,
  "bottom left": 315,
  "left bottom": 315,
  "bottom right": 45,
  "right bottom": 45
};
var parseGradientString = function parseGradientString2(input) {
  var match = isGradientColor(input);
  if (!match) {
    return false;
  }
  var gradientColors = {
    points: [],
    degree: 0
  };
  var result = parseGradient(REGEXP_LIB, match[1]);
  if (result.original.trim() !== match[1].trim()) {
    return false;
  }
  var points = result.colorStopList.map(function(_ref) {
    var color = _ref.color, position = _ref.position;
    var point = /* @__PURE__ */ Object.create(null);
    point.color = tinyColor(color).toRgbString();
    point.left = parseFloat(position);
    return point;
  });
  gradientColors.points = points;
  var degree = parseInt(result.angle, 10);
  if (Number.isNaN(degree)) {
    degree = sideCornerDegreeMap[result.sideCorner] || 90;
  }
  gradientColors.degree = degree;
  return gradientColors;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$P(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$O(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$P(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var mathRound = Math.round;
var hsv2rgba = function hsv2rgba2(states) {
  return tinyColor(states).toRgb();
};
var hsv2hsva = function hsv2hsva2(states) {
  return tinyColor(states).toHsv();
};
var hsv2hsla = function hsv2hsla2(states) {
  return tinyColor(states).toHsl();
};
var gradientColors2string = function gradientColors2string2(object) {
  var points = object.points, degree = object.degree;
  var colorsStop = points.sort(function(pA, pB) {
    return pA.left - pB.left;
  }).map(function(p2) {
    return "".concat(p2.color, " ").concat(Math.round(p2.left * 100) / 100, "%");
  });
  return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
};
var genId = function genId2() {
  return (1 + Math.random() * 4294967295).toString(16);
};
var genGradientPoint = function genGradientPoint2(left2, color) {
  return {
    id: genId(),
    left: left2,
    color
  };
};
var Color = /* @__PURE__ */ function() {
  function Color2(input) {
    _classCallCheck(this, Color2);
    _defineProperty$3(this, "states", {
      s: 100,
      v: 100,
      h: 100,
      a: 1
    });
    _defineProperty$3(this, "originColor", void 0);
    _defineProperty$3(this, "isGradient", void 0);
    _defineProperty$3(this, "gradientStates", {
      colors: [],
      degree: 0,
      selectedId: null,
      css: ""
    });
    this.update(input);
  }
  _createClass(Color2, [{
    key: "update",
    value: function update(input) {
      if (input === this.originColor) {
        return;
      }
      this.originColor = input;
      this.isGradient = false;
      var gradientColors = parseGradientString(input);
      var colorInput = input;
      if (gradientColors) {
        var _points$, _this$gradientSelecte;
        this.isGradient = true;
        var object = gradientColors;
        var points = object.points.map(function(c) {
          return genGradientPoint(c.left, c.color);
        });
        this.gradientStates = {
          colors: points,
          degree: object.degree,
          selectedId: ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
        };
        this.gradientStates.css = this.linearGradient;
        colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
      }
      this.updateStates(colorInput);
    }
  }, {
    key: "saturation",
    get: function get4() {
      return this.states.s;
    },
    set: function set4(value6) {
      this.states.s = Math.max(0, Math.min(100, value6));
      this.updateCurrentGradientColor();
    }
  }, {
    key: "value",
    get: function get4() {
      return this.states.v;
    },
    set: function set4(value6) {
      this.states.v = Math.max(0, Math.min(100, value6));
      this.updateCurrentGradientColor();
    }
  }, {
    key: "hue",
    get: function get4() {
      return this.states.h;
    },
    set: function set4(value6) {
      this.states.h = Math.max(0, Math.min(360, value6));
      this.updateCurrentGradientColor();
    }
  }, {
    key: "alpha",
    get: function get4() {
      return this.states.a;
    },
    set: function set4(value6) {
      this.states.a = Math.max(0, Math.min(1, Math.round(value6 * 100) / 100));
      this.updateCurrentGradientColor();
    }
  }, {
    key: "rgb",
    get: function get4() {
      var _hsv2rgba = hsv2rgba(this.states), r = _hsv2rgba.r, g = _hsv2rgba.g, b = _hsv2rgba.b;
      return "rgb(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ")");
    }
  }, {
    key: "rgba",
    get: function get4() {
      var _hsv2rgba2 = hsv2rgba(this.states), r = _hsv2rgba2.r, g = _hsv2rgba2.g, b = _hsv2rgba2.b, a = _hsv2rgba2.a;
      return "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
    }
  }, {
    key: "hsv",
    get: function get4() {
      var _this$getHsva = this.getHsva(), h2 = _this$getHsva.h, s = _this$getHsva.s, v = _this$getHsva.v;
      return "hsv(".concat(h2, ", ").concat(s, "%, ").concat(v, "%)");
    }
  }, {
    key: "hsva",
    get: function get4() {
      var _this$getHsva2 = this.getHsva(), h2 = _this$getHsva2.h, s = _this$getHsva2.s, v = _this$getHsva2.v, a = _this$getHsva2.a;
      return "hsva(".concat(h2, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
    }
  }, {
    key: "hsl",
    get: function get4() {
      var _this$getHsla = this.getHsla(), h2 = _this$getHsla.h, s = _this$getHsla.s, l = _this$getHsla.l;
      return "hsl(".concat(h2, ", ").concat(s, "%, ").concat(l, "%)");
    }
  }, {
    key: "hsla",
    get: function get4() {
      var _this$getHsla2 = this.getHsla(), h2 = _this$getHsla2.h, s = _this$getHsla2.s, l = _this$getHsla2.l, a = _this$getHsla2.a;
      return "hsla(".concat(h2, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
    }
  }, {
    key: "hex",
    get: function get4() {
      return tinyColor(this.states).toHexString();
    }
  }, {
    key: "hex8",
    get: function get4() {
      return tinyColor(this.states).toHex8String();
    }
  }, {
    key: "cmyk",
    get: function get4() {
      var _this$getCmyk = this.getCmyk(), c = _this$getCmyk.c, m = _this$getCmyk.m, y = _this$getCmyk.y, k = _this$getCmyk.k;
      return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
    }
  }, {
    key: "css",
    get: function get4() {
      if (this.isGradient) {
        return this.linearGradient;
      }
      return this.rgba;
    }
  }, {
    key: "linearGradient",
    get: function get4() {
      var gradientColors = this.gradientColors, gradientDegree = this.gradientDegree;
      return gradientColors2string({
        points: gradientColors,
        degree: gradientDegree
      });
    }
  }, {
    key: "gradientColors",
    get: function get4() {
      return this.gradientStates.colors;
    },
    set: function set4(colors) {
      this.gradientStates.colors = colors;
      this.gradientStates.css = this.linearGradient;
    }
  }, {
    key: "gradientSelectedId",
    get: function get4() {
      return this.gradientStates.selectedId;
    },
    set: function set4(id) {
      var _this$gradientSelecte2;
      if (id === this.gradientSelectedId) {
        return;
      }
      this.gradientStates.selectedId = id;
      this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
    }
  }, {
    key: "gradientDegree",
    get: function get4() {
      return this.gradientStates.degree;
    },
    set: function set4(degree) {
      this.gradientStates.degree = Math.max(0, Math.min(360, degree));
      this.gradientStates.css = this.linearGradient;
    }
  }, {
    key: "gradientSelectedPoint",
    get: function get4() {
      var gradientColors = this.gradientColors, gradientSelectedId = this.gradientSelectedId;
      return gradientColors.find(function(color) {
        return color.id === gradientSelectedId;
      });
    }
  }, {
    key: "getFormatsColorMap",
    value: function getFormatsColorMap() {
      return {
        HEX: this.hex,
        CMYK: this.cmyk,
        RGB: this.rgb,
        RGBA: this.rgba,
        HSL: this.hsl,
        HSLA: this.hsla,
        HSV: this.hsv,
        HSVA: this.hsva,
        CSS: this.css
      };
    }
  }, {
    key: "updateCurrentGradientColor",
    value: function updateCurrentGradientColor() {
      var isGradient = this.isGradient, gradientColors = this.gradientColors, gradientSelectedId = this.gradientSelectedId;
      var length = gradientColors.length;
      var current2 = this.gradientSelectedPoint;
      if (!isGradient || length === 0 || !current2) {
        return false;
      }
      var index2 = gradientColors.findIndex(function(color) {
        return color.id === gradientSelectedId;
      });
      var newColor = _objectSpread$O(_objectSpread$O({}, current2), {}, {
        color: this.rgba
      });
      gradientColors.splice(index2, 1, newColor);
      this.gradientColors = gradientColors;
      return this;
    }
  }, {
    key: "updateStates",
    value: function updateStates(input) {
      var color = tinyColor(cmykInputToColor(input));
      var hsva = color.toHsv();
      this.states = hsva;
    }
  }, {
    key: "getRgba",
    value: function getRgba() {
      var _hsv2rgba3 = hsv2rgba(this.states), r = _hsv2rgba3.r, g = _hsv2rgba3.g, b = _hsv2rgba3.b, a = _hsv2rgba3.a;
      return {
        r: mathRound(r),
        g: mathRound(g),
        b: mathRound(b),
        a
      };
    }
  }, {
    key: "getCmyk",
    value: function getCmyk() {
      var _this$getRgba = this.getRgba(), r = _this$getRgba.r, g = _this$getRgba.g, b = _this$getRgba.b;
      var _rgb2cmyk = rgb2cmyk(r, g, b), _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4), c = _rgb2cmyk2[0], m = _rgb2cmyk2[1], y = _rgb2cmyk2[2], k = _rgb2cmyk2[3];
      return {
        c: mathRound(c * 100),
        m: mathRound(m * 100),
        y: mathRound(y * 100),
        k: mathRound(k * 100)
      };
    }
  }, {
    key: "getHsva",
    value: function getHsva() {
      var _hsv2hsva = hsv2hsva(this.states), h2 = _hsv2hsva.h, s = _hsv2hsva.s, v = _hsv2hsva.v, a = _hsv2hsva.a;
      h2 = mathRound(h2);
      s = mathRound(s * 100);
      v = mathRound(v * 100);
      a *= 1;
      return {
        h: h2,
        s,
        v,
        a
      };
    }
  }, {
    key: "getHsla",
    value: function getHsla() {
      var _hsv2hsla = hsv2hsla(this.states), h2 = _hsv2hsla.h, s = _hsv2hsla.s, l = _hsv2hsla.l, a = _hsv2hsla.a;
      h2 = mathRound(h2);
      s = mathRound(s * 100);
      l = mathRound(l * 100);
      a *= 1;
      return {
        h: h2,
        s,
        l,
        a
      };
    }
  }, {
    key: "equals",
    value: function equals(color) {
      return tinyColor.equals(this.rgba, color);
    }
  }], [{
    key: "isValid",
    value: function isValid2(color) {
      if (parseGradientString(color)) {
        return true;
      }
      return tinyColor(color).isValid();
    }
  }, {
    key: "hsva2color",
    value: function hsva2color(h2, s, v, a) {
      return tinyColor({
        h: h2,
        s,
        v,
        a
      }).toHsvString();
    }
  }, {
    key: "hsla2color",
    value: function hsla2color(h2, s, l, a) {
      return tinyColor({
        h: h2,
        s,
        l,
        a
      }).toHslString();
    }
  }, {
    key: "rgba2color",
    value: function rgba2color(r, g, b, a) {
      return tinyColor({
        r,
        g,
        b,
        a
      }).toHsvString();
    }
  }, {
    key: "hex2color",
    value: function hex2color(hex, a) {
      var color = tinyColor(hex);
      color.setAlpha(a);
      return color.toHexString();
    }
  }, {
    key: "object2color",
    value: function object2color(object, format) {
      if (format === "CMYK") {
        var c = object.c, m = object.m, y = object.y, k = object.k;
        return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
      }
      var color = tinyColor(object, {
        format
      });
      return color.toRgbString();
    }
  }]);
  return Color2;
}();
_defineProperty$3(Color, "isGradientColor", function(input) {
  return !!isGradientColor(input);
});
_defineProperty$3(Color, "compare", function(color1, color2) {
  var isGradientColor1 = Color.isGradientColor(color1);
  var isGradientColor22 = Color.isGradientColor(color2);
  if (isGradientColor1 && isGradientColor22) {
    var gradientColor1 = gradientColors2string(parseGradientString(color1));
    var gradientColor2 = gradientColors2string(parseGradientString(color2));
    return gradientColor1 === gradientColor2;
  }
  if (!isGradientColor1 && !isGradientColor22) {
    return tinyColor.equals(color1, color2);
  }
  return false;
});
var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
var getColorObject = function getColorObject2(color) {
  if (!color) {
    return null;
  }
  var colorObject = /* @__PURE__ */ Object.create(null);
  COLOR_OBJECT_OUTPUT_KEYS.forEach(function(key) {
    return colorObject[key] = color[key];
  });
  if (color.isGradient) {
    colorObject.linearGradient = color.linearGradient;
  }
  return colorObject;
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$O(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$N(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$O(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet);
  privateSet.add(obj);
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateMethodGet(receiver, privateSet, fn2) {
  if (!privateSet.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return fn2;
}
var defaultsOptions = {
  start: function start2(coordinate, event) {
  },
  drag: function drag(coordinate, event) {
  },
  end: function end2(coordinate, event) {
  }
};
var _dragStart = /* @__PURE__ */ new WeakSet();
var _drag = /* @__PURE__ */ new WeakSet();
var _dragEnd = /* @__PURE__ */ new WeakSet();
var _getCoordinate = /* @__PURE__ */ new WeakSet();
var Draggable = /* @__PURE__ */ function() {
  function Draggable2(el, options) {
    _classCallCheck(this, Draggable2);
    _classPrivateMethodInitSpec(this, _getCoordinate);
    _classPrivateMethodInitSpec(this, _dragEnd);
    _classPrivateMethodInitSpec(this, _drag);
    _classPrivateMethodInitSpec(this, _dragStart);
    _defineProperty$3(this, "dragging", false);
    _defineProperty$3(this, "$el", void 0);
    _defineProperty$3(this, "props", void 0);
    _defineProperty$3(this, "handles", void 0);
    this.$el = el;
    this.props = _objectSpread$N(_objectSpread$N({}, defaultsOptions), options);
    this.handles = {
      start: _classPrivateMethodGet(this, _dragStart, _dragStart2).bind(this),
      drag: _classPrivateMethodGet(this, _drag, _drag2).bind(this),
      end: _classPrivateMethodGet(this, _dragEnd, _dragEnd2).bind(this)
    };
    this.$el.addEventListener("mousedown", this.handles.start, false);
  }
  _createClass(Draggable2, [{
    key: "destroy",
    value: function destroy2() {
      this.$el.removeEventListener("mousedown", this.handles.start, false);
      window.removeEventListener("mousemove", this.handles.drag, false);
      window.removeEventListener("mouseup", this.handles.end, false);
      window.removeEventListener("contextmenu", this.handles.end, false);
    }
  }]);
  return Draggable2;
}();
function _dragStart2(event) {
  if (this.dragging) {
    return;
  }
  window.addEventListener("mousemove", this.handles.drag, false);
  window.addEventListener("mouseup", this.handles.end, false);
  window.addEventListener("contextmenu", this.handles.end, false);
  this.dragging = true;
  this.props.start(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
}
function _drag2(event) {
  if (!this.dragging) {
    return;
  }
  this.props.drag(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
}
function _dragEnd2(event) {
  var _this = this;
  setTimeout(function() {
    _this.dragging = false;
    _this.props.end(_classPrivateMethodGet(_this, _getCoordinate, _getCoordinate2).call(_this, event), event);
  }, 0);
  window.removeEventListener("mousemove", this.handles.drag, false);
  window.removeEventListener("mouseup", this.handles.end, false);
  window.removeEventListener("contextmenu", this.handles.end, false);
}
function _getCoordinate2(event) {
  var rect = this.$el.getBoundingClientRect();
  var mouseEvent3 = event;
  var left2 = mouseEvent3.clientX - rect.left;
  var top2 = mouseEvent3.clientY - rect.top;
  return {
    y: Math.min(Math.max(0, top2), rect.height),
    x: Math.min(Math.max(0, left2), rect.width)
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var baseProps = {
  disabled: Boolean,
  color: {
    type: Object
  },
  onChange: {
    type: Function,
    "default": function _default42() {
      return function() {
      };
    }
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$N(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$M(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$N(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var DELETE_KEYS = ["delete", "backspace"];
var LinearGradient = defineComponent({
  name: "LinearGradient",
  components: {
    TInputNumber: InputNumber
  },
  inheritAttrs: false,
  props: _objectSpread$M({}, baseProps),
  setup: function setup85(props2) {
    var baseClassName = useBaseClassName();
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var statusClassNames = STATUS.value;
    var refSlider = ref(null);
    var sliderRect = reactive({
      left: 0,
      width: GRADIENT_SLIDER_DEFAULT_WIDTH
    });
    var isDragging = ref(false);
    var isMoved = ref(false);
    var degree = ref(props2.color.gradientDegree);
    var selectedId = ref(props2.color.gradientSelectedId);
    var colors = ref(cloneDeep_1(props2.color.gradientColors));
    watch(function() {
      return props2.color.gradientDegree;
    }, function(value6) {
      return degree.value = value6;
    });
    watch(function() {
      return props2.color.gradientSelectedId;
    }, function(value6) {
      return selectedId.value = value6;
    });
    watch(function() {
      return props2.color.gradientColors;
    }, function(value6) {
      colors.value = cloneDeep_1(value6);
    }, {
      deep: true
    });
    var handleChange5 = function handleChange6(key, payload, addUsedColor) {
      if (props2.disabled) {
        return;
      }
      props2.onChange({
        key,
        payload,
        addUsedColor
      });
    };
    var handleDegreeChange = function handleDegreeChange2(value6) {
      if (props2.disabled || value6 === props2.color.gradientDegree) {
        return;
      }
      degree.value = value6;
      handleChange5("degree", value6, true);
    };
    var handleSelectedIdChange = function handleSelectedIdChange2(value6) {
      if (props2.disabled) {
        return;
      }
      selectedId.value = value6;
      handleChange5("selectedId", value6);
    };
    var handleColorsChange = function handleColorsChange2(value6, isEnded) {
      if (props2.disabled) {
        return;
      }
      colors.value = value6;
      handleChange5("colors", value6, isEnded);
    };
    var updateActiveThumbLeft = function updateActiveThumbLeft2(left2) {
      var index2 = colors.value.findIndex(function(c) {
        return c.id === selectedId.value;
      });
      if (index2 === -1) {
        return;
      }
      var point = colors.value[index2];
      left2 = Math.max(0, Math.min(sliderRect.width, left2));
      var percentLeft = left2 / sliderRect.width * 100;
      colors.value.splice(index2, 1, {
        color: point.color,
        left: percentLeft,
        id: point.id
      });
      handleColorsChange(colors.value);
    };
    var handleStart = function handleStart2(id, e) {
      var rect = refSlider.value.getBoundingClientRect();
      sliderRect.left = rect.left;
      sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
      if (isDragging.value || props2.disabled) {
        return;
      }
      isMoved.value = false;
      isDragging.value = true;
      e.preventDefault();
      e.stopPropagation();
      handleSelectedIdChange(id);
      refSlider.value.focus();
      window.addEventListener("mousemove", handleMove, false);
      window.addEventListener("mouseup", handleEnd, false);
      window.addEventListener("contextmenu", handleEnd, false);
    };
    var handleMove = function handleMove2(e) {
      if (!isDragging.value || props2.disabled) {
        return;
      }
      var left2 = e.clientX - sliderRect.left;
      isMoved.value = true;
      updateActiveThumbLeft(left2);
    };
    var handleEnd = function handleEnd2(e) {
      if (!isDragging.value) {
        return;
      }
      setTimeout(function() {
        isDragging.value = false;
      }, 0);
      if (isMoved.value) {
        handleColorsChange(colors.value, true);
        isMoved.value = false;
      }
      window.removeEventListener("mousemove", handleMove, false);
      window.removeEventListener("mouseup", handleEnd2, false);
      window.removeEventListener("contextmenu", handleEnd2, false);
    };
    var handleKeyup2 = function handleKeyup3(e) {
      if (props2.disabled) {
        return;
      }
      var points = colors.value;
      var pos = points.findIndex(function(c) {
        return c.id === selectedId.value;
      });
      var length = points.length;
      if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
        points.splice(pos, 1);
        if (!points[pos]) {
          pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
        }
        var current2 = points[pos];
        handleColorsChange(points, true);
        handleSelectedIdChange(current2 === null || current2 === void 0 ? void 0 : current2.id);
      }
    };
    var handleThumbBarClick = function handleThumbBarClick2(e) {
      if (props2.disabled) {
        return;
      }
      var left2 = e.clientX - sliderRect.left;
      left2 = Math.max(0, Math.min(sliderRect.width, left2));
      var percentLeft = left2 / sliderRect.width * 100;
      var newPoint = genGradientPoint(percentLeft, props2.color.rgba);
      colors.value.push(newPoint);
      handleColorsChange(colors.value, true);
      handleSelectedIdChange(newPoint.id);
    };
    onMounted(function() {
      var rect = refSlider.value.getBoundingClientRect();
      sliderRect.left = rect.left;
      sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
    });
    onBeforeUnmount(function() {
      window.removeEventListener("mousemove", handleMove, false);
      window.removeEventListener("mouseup", handleEnd, false);
      window.removeEventListener("contextmenu", handleEnd, false);
    });
    return {
      baseClassName,
      statusClassNames,
      refSlider,
      degree,
      selectedId,
      colors,
      handleDegreeChange,
      handleStart,
      handleMove,
      handleEnd,
      handleKeyup: handleKeyup2,
      handleThumbBarClick
    };
  },
  render: function render65() {
    var _this = this;
    var _this$color = this.color, linearGradient = _this$color.linearGradient, gradientColors = _this$color.gradientColors;
    var colors = this.colors, selectedId = this.selectedId, degree = this.degree, disabled2 = this.disabled, baseClassName = this.baseClassName, statusClassNames = this.statusClassNames;
    var thumbBackground = gradientColors2string({
      points: gradientColors,
      degree: 90
    });
    return createVNode("div", {
      "class": "".concat(baseClassName, "__gradient")
    }, [createVNode("div", {
      "class": "".concat(baseClassName, "__gradient-slider")
    }, [createVNode("div", {
      "class": ["".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")],
      "onKeyup": this.handleKeyup,
      "tabindex": 0,
      "ref": "refSlider"
    }, [createVNode("ul", {
      "class": "gradient-thumbs",
      "onClick": this.handleThumbBarClick,
      "style": {
        background: thumbBackground
      }
    }, [colors.map(function(t) {
      var left2 = "".concat(Math.round(t.left * 100) / 100, "%");
      return createVNode("li", {
        "class": ["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""],
        "key": t.id,
        "title": "".concat(t.color, " ").concat(left2),
        "style": {
          color: t.color,
          left: left2
        },
        "onClick": function onClick2(e) {
          return e.stopPropagation();
        },
        "onMousedown": function onMousedown(e) {
          return _this.handleStart(t.id, e);
        }
      }, [createVNode("span", {
        "class": ["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")]
      }, null)]);
    })])])]), createVNode("div", {
      "class": "".concat(baseClassName, "__gradient-degree"),
      "title": "".concat(degree, "deg")
    }, [createVNode(resolveComponent("t-input-number"), {
      "theme": "normal",
      "min": 0,
      "max": 360,
      "step": 1,
      "format": function format(value6) {
        return "".concat(value6, "\xB0");
      },
      "modelValue": _this.degree,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.degree = $event;
      },
      "onBlur": this.handleDegreeChange,
      "onEnter": this.handleDegreeChange,
      "disabled": disabled2
    }, null)]), createVNode("div", {
      "class": ["".concat(baseClassName, "__gradient-preview"), "".concat(baseClassName, "--bg-alpha")]
    }, [createVNode("span", {
      "class": "preview-inner",
      "style": {
        background: linearGradient
      }
    }, null)])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$M(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$L(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$M(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var SaturationPanel = defineComponent({
  name: "SaturationPanel",
  components: {
    TSelect: Select,
    TOption: Option
  },
  props: _objectSpread$L({}, baseProps),
  setup: function setup86(props2) {
    var baseClassName = useBaseClassName();
    var refPanel = ref(null);
    var refThumb = ref(null);
    var dragInstance = ref(null);
    var panelRect = reactive({
      width: SATURATION_PANEL_DEFAULT_WIDTH,
      height: SATURATION_PANEL_DEFAULT_HEIGHT
    });
    var styles = computed(function() {
      var _props$color = props2.color, saturation = _props$color.saturation, value6 = _props$color.value;
      var width = panelRect.width, height = panelRect.height;
      var top2 = Math.round((1 - value6) * height);
      var left2 = Math.round(saturation * width);
      return {
        color: props2.color.rgb,
        left: "".concat(left2, "px"),
        top: "".concat(top2, "px")
      };
    });
    var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate2(coordinate) {
      var width = panelRect.width, height = panelRect.height;
      var x = coordinate.x, y = coordinate.y;
      var saturation = Math.round(x / width * 100);
      var value6 = Math.round((1 - y / height) * 100);
      return {
        saturation,
        value: value6
      };
    };
    var handleDrag = function handleDrag2(coordinate, isEnded) {
      if (props2.disabled) {
        return;
      }
      var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate), saturation = _getSaturationAndValu.saturation, value6 = _getSaturationAndValu.value;
      props2.onChange({
        saturation: saturation / 100,
        value: value6 / 100,
        addUsedColor: isEnded
      });
    };
    var handleDragEnd = function handleDragEnd2(coordinate) {
      if (props2.disabled) {
        return;
      }
      nextTick(function() {
        handleDrag(coordinate, true);
      });
    };
    var panelBackground = computed(function() {
      return "hsl(".concat(props2.color.hue, ", 100%, 50%)");
    });
    onMounted(function() {
      panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
      panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
      dragInstance.value = new Draggable(refPanel.value, {
        start: function start3() {
          panelRect.width = refPanel.value.offsetWidth;
          panelRect.height = refPanel.value.offsetHeight;
        },
        drag: function drag2(coordinate) {
          handleDrag(coordinate);
        },
        end: handleDragEnd
      });
    });
    onBeforeUnmount(function() {
      dragInstance.value.destroy();
    });
    return {
      baseClassName,
      refThumb,
      refPanel,
      styles,
      panelBackground
    };
  },
  render: function render66() {
    var baseClassName = this.baseClassName, styles = this.styles, panelBackground = this.panelBackground;
    return createVNode("div", {
      "class": ["".concat(baseClassName, "__saturation")],
      "ref": "refPanel",
      "style": {
        background: panelBackground
      }
    }, [createVNode("span", {
      "class": ["".concat(baseClassName, "__thumb")],
      "role": "slider",
      "tabindex": 0,
      "ref": "refThumb",
      "style": styles
    }, null)]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$L(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$K(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$L(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var ColorSlider = defineComponent({
  name: "ColorSlider",
  components: {
    TSelect: Select,
    TOption: Option
  },
  props: _objectSpread$K(_objectSpread$K({}, baseProps), {}, {
    className: {
      type: String,
      "default": ""
    },
    value: {
      type: Number,
      "default": 0
    },
    maxValue: {
      type: Number,
      "default": 360
    },
    railStyle: {
      type: Object
    }
  }),
  setup: function setup87(props2) {
    var baseClassName = useBaseClassName();
    var refPanel = ref(null);
    var refThumb = ref(null);
    var dragInstance = ref(null);
    var panelRect = reactive({
      width: SLIDER_DEFAULT_WIDTH
    });
    var styles = computed(function() {
      var width = panelRect.width;
      if (!width) {
        return;
      }
      var left2 = Math.round(props2.value / props2.maxValue * width);
      return {
        left: "".concat(left2, "px"),
        color: props2.color.rgb
      };
    });
    var handleDrag = function handleDrag2(coordinate, isEnded) {
      if (props2.disabled) {
        return;
      }
      var width = panelRect.width;
      var x = coordinate.x;
      var value6 = Math.round(x / width * props2.maxValue * 100) / 100;
      props2.onChange(value6, isEnded);
    };
    var handleDragEnd = function handleDragEnd2(coordinate) {
      if (props2.disabled) {
        return;
      }
      handleDrag(coordinate, true);
    };
    onMounted(function() {
      panelRect.width = refPanel.value.offsetWidth || SLIDER_DEFAULT_WIDTH;
      dragInstance.value = new Draggable(refPanel.value, {
        start: function start3() {
          panelRect.width = refPanel.value.offsetWidth;
        },
        drag: function drag2(coordinate) {
          handleDrag(coordinate);
        },
        end: handleDragEnd
      });
    });
    onBeforeUnmount(function() {
      dragInstance.value.destroy();
    });
    return {
      baseClassName,
      refThumb,
      refPanel,
      styles
    };
  },
  render: function render67() {
    var baseClassName = this.baseClassName, className = this.className, railStyle = this.railStyle, styles = this.styles;
    return createVNode("div", {
      "class": ["".concat(baseClassName, "__slider"), className],
      "ref": "refPanel"
    }, [createVNode("div", {
      "class": "".concat(baseClassName, "__rail"),
      "style": railStyle
    }, null), createVNode("span", {
      "class": ["".concat(baseClassName, "__thumb")],
      "role": "slider",
      "tabindex": 0,
      "ref": "refThumb",
      "style": styles
    }, null)]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$K(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$J(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$K(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var HueSlider = defineComponent({
  name: "HueSlider",
  components: {
    ColorSlider
  },
  inheritAttrs: false,
  props: _objectSpread$J({}, baseProps),
  setup: function setup88() {
    var baseClassName = useBaseClassName();
    return {
      baseClassName
    };
  },
  render: function render68() {
    return createVNode(resolveComponent("color-slider"), {
      "className": "".concat(this.baseClassName, "__hue"),
      "color": this.color,
      "value": this.color.hue,
      "onChange": this.onChange,
      "disabled": this.disabled
    }, null);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var AlphaSlider = defineComponent({
  name: "AlphaSlider",
  components: {
    ColorSlider
  },
  inheritAttrs: false,
  props: {
    color: {
      type: Object
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    onChange: {
      type: Function,
      "default": function _default43() {
        return function() {
        };
      }
    }
  },
  setup: function setup89(props2) {
    var baseClassName = useBaseClassName();
    var handleChange5 = function handleChange6(v, isDragEnd) {
      props2.onChange(v / 100, isDragEnd);
    };
    var railStyle = computed(function() {
      return {
        background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props2.color.rgb, ")")
      };
    });
    return {
      baseClassName,
      railStyle,
      handleChange: handleChange5
    };
  },
  render: function render69() {
    var baseClassName = this.baseClassName;
    return createVNode(resolveComponent("color-slider"), {
      "class": ["".concat(baseClassName, "__alpha"), "".concat(baseClassName, "--bg-alpha")],
      "color": this.color,
      "value": this.color.alpha * 100,
      "onChange": this.handleChange,
      "rail-style": this.railStyle,
      "max-value": 100,
      "disabled": this.disabled
    }, null);
  }
});
var createCompounder = _createCompounder;
var upperCase = createCompounder(function(result, word, index2) {
  return result + (index2 ? " " : "") + word.toUpperCase();
});
var upperCase_1 = upperCase;
var debounce = debounce_1, isObject$1 = isObject_1;
var FUNC_ERROR_TEXT = "Expected a function";
function throttle$1(func, wait, options) {
  var leading = true, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject$1(options)) {
    leading = "leading" in options ? !!options.leading : leading;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    "leading": leading,
    "maxWait": wait,
    "trailing": trailing
  });
}
var throttle_1 = throttle$1;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var FORMAT_INPUT_CONFIG = {
  RGB: [{
    key: "r",
    min: 0,
    max: 255,
    type: "inputNumber"
  }, {
    key: "g",
    min: 0,
    max: 255,
    type: "inputNumber"
  }, {
    key: "b",
    min: 0,
    max: 255,
    type: "inputNumber"
  }],
  HSV: [{
    key: "h",
    min: 0,
    max: 360,
    type: "inputNumber"
  }, {
    key: "s",
    min: 0,
    max: 100,
    type: "inputNumber"
  }, {
    key: "v",
    min: 0,
    max: 100,
    type: "inputNumber"
  }],
  HSL: [{
    key: "h",
    min: 0,
    max: 360,
    type: "inputNumber"
  }, {
    key: "s",
    min: 0,
    max: 100,
    type: "inputNumber"
  }, {
    key: "l",
    min: 0,
    max: 100,
    type: "inputNumber"
  }],
  CMYK: [{
    key: "c",
    min: 0,
    max: 255,
    type: "inputNumber"
  }, {
    key: "m",
    min: 0,
    max: 255,
    type: "inputNumber"
  }, {
    key: "y",
    min: 0,
    max: 255,
    type: "inputNumber"
  }, {
    key: "k",
    min: 0,
    max: 255,
    type: "inputNumber"
  }],
  CSS: [{
    key: "css",
    type: "input",
    flex: 3
  }],
  HEX: [{
    key: "hex",
    type: "input",
    flex: 3
  }]
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$J(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$I(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$J(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var FormatInputs = defineComponent({
  name: "FormatInputs",
  components: {
    TSelect: Select,
    TOption: Option,
    TInput: Input,
    TInputNumber: InputNumber
  },
  inheritAttrs: false,
  props: _objectSpread$I(_objectSpread$I({}, props$j), {}, {
    color: {
      type: Object
    },
    onInputChange: {
      type: Function,
      "default": function _default44() {
        return function() {
        };
      }
    }
  }),
  setup: function setup90(props2) {
    var inputConfigs = computed(function() {
      var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[props2.format]);
      if (props2.enableAlpha) {
        configs.push({
          type: "inputNumber",
          key: "a",
          min: 0,
          max: 100,
          format: function format(value6) {
            return "".concat(value6, "%");
          },
          flex: 1.15
        });
      }
      return configs;
    });
    var modelValue = reactive({});
    var lastModelValue = reactive({});
    var getFormatColorMap = function getFormatColorMap2(type) {
      var color = props2.color;
      if (type === "encode") {
        return {
          HSV: color.getHsva(),
          HSL: color.getHsla(),
          RGB: color.getRgba(),
          CMYK: color.getCmyk(),
          CSS: {
            css: color.css
          },
          HEX: {
            hex: color.hex
          }
        };
      }
      return {
        HSV: Color.object2color(modelValue, "HSV"),
        HSL: Color.object2color(modelValue, "HSL"),
        RGB: Color.object2color(modelValue, "RGB"),
        CMYK: Color.object2color(modelValue, "CMYK"),
        CSS: modelValue.css,
        HEX: modelValue.hex
      };
    };
    var updateModelValue = function updateModelValue2() {
      var format = props2.format, color = props2.color;
      var values = getFormatColorMap("encode")[format];
      values.a = Math.round(color.alpha * 100);
      Object.keys(values).forEach(function(key) {
        modelValue[key] = values[key];
        lastModelValue[key] = values[key];
      });
    };
    updateModelValue();
    var throttleUpdate = throttle_1(updateModelValue, 100);
    watch(function() {
      var _props2$color = props2.color, saturation = _props2$color.saturation, hue = _props2$color.hue, value6 = _props2$color.value, alpha = _props2$color.alpha;
      return [saturation, hue, value6, alpha, props2.format];
    }, throttleUpdate);
    var handleChange5 = function handleChange6(key, v) {
      if (v === lastModelValue[key]) {
        return;
      }
      var value6 = getFormatColorMap("decode")[props2.format];
      props2.onInputChange(value6, modelValue.a / 100, key, v);
    };
    return {
      modelValue,
      inputConfigs,
      handleChange: handleChange5
    };
  },
  render: function render70() {
    var _this = this;
    var inputProps = _objectSpread$I({}, this.inputProps || {});
    return createVNode("div", {
      "class": "input-group"
    }, [this.inputConfigs.map(function(config) {
      return createVNode("div", {
        "class": "input-group__item",
        "key": config.key,
        "style": {
          flex: config.flex || 1
        }
      }, [config.type === "input" ? createVNode(resolveComponent("t-input"), mergeProps(inputProps, {
        "align": "center",
        "disabled": _this.disabled,
        "modelValue": _this.modelValue[config.key],
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.modelValue[config.key] = $event;
        },
        "maxlength": _this.format === "HEX" ? 9 : void 0,
        "title": _this.modelValue[config.key],
        "onBlur": function onBlur2(v) {
          return _this.handleChange(config.key, v);
        },
        "onEnter": function onEnter(v) {
          return _this.handleChange(config.key, v);
        }
      }), null) : createVNode(resolveComponent("t-input-number"), mergeProps(inputProps, {
        "align": "center",
        "disabled": _this.disabled,
        "modelValue": _this.modelValue[config.key],
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.modelValue[config.key] = $event;
        },
        "title": _this.modelValue[config.key],
        "min": config.min,
        "max": config.max,
        "step": 1,
        "format": config.format,
        "theme": "normal",
        "onBlur": function onBlur2(v) {
          return _this.handleChange(config.key, v);
        },
        "onEnter": function onEnter(v) {
          return _this.handleChange(config.key, v);
        }
      }), null)]);
    })]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$I(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$H(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$I(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$a(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var FormatPanel = defineComponent({
  name: "FormatPanel",
  components: {
    TSelect: Select,
    TInput: Input,
    TOption: Option,
    FormatInputs
  },
  inheritAttrs: false,
  props: _objectSpread$H(_objectSpread$H({}, props$j), {}, {
    color: {
      type: Object
    },
    onModeChange: {
      type: Function,
      "default": function _default45() {
        return function() {
        };
      }
    },
    onInputChange: {
      type: Function,
      "default": function _default46() {
        return function() {
        };
      }
    }
  }),
  setup: function setup91(props2) {
    var baseClassName = useBaseClassName();
    var formatModel = ref(props2.format);
    watch(function() {
      return [props2.format];
    }, function() {
      return formatModel.value = props2.format;
    });
    var handleModeChange = function handleModeChange2(v) {
      formatModel.value = v;
      props2.onModeChange(v);
    };
    return {
      formatModel,
      baseClassName,
      handleModeChange
    };
  },
  render: function render71() {
    var _this = this;
    var _slot;
    var formats = _toConsumableArray(FORMATS);
    var baseClassName = this.baseClassName, handleModeChange = this.handleModeChange;
    var newProps = _objectSpread$H(_objectSpread$H({}, this.$props), {}, {
      format: this.formatModel
    });
    var selectInputProps = _objectSpread$H({}, this.selectInputProps || {});
    return createVNode("div", {
      "className": "".concat(baseClassName, "__format")
    }, [createVNode("div", {
      "className": "".concat(baseClassName, "__format--item")
    }, [createVNode(resolveComponent("t-select"), mergeProps(selectInputProps, {
      "popupProps": {
        overlayClassName: "".concat(baseClassName, "__select-options")
      },
      "modelValue": _this.formatModel,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.formatModel = $event;
      },
      "onChange": handleModeChange
    }), _isSlot$a(_slot = formats.map(function(item) {
      return createVNode(resolveComponent("t-option"), {
        "key": item,
        "value": item,
        "label": upperCase_1(item),
        "style": {
          fontSize: "12px"
        }
      }, null);
    })) ? _slot : {
      "default": function _default65() {
        return [_slot];
      }
    })]), createVNode("div", {
      "className": "".concat(baseClassName, "__format--item")
    }, [createVNode(resolveComponent("format-inputs"), newProps, null)])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$H(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$G(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$H(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var SwatchesPanel = defineComponent({
  name: "SwatchesPanel",
  components: {
    TSelect: Select,
    TOption: Option,
    TButton: Button
  },
  props: _objectSpread$G(_objectSpread$G({}, baseProps), {}, {
    colors: {
      type: Array,
      "default": function _default47() {
        return [];
      }
    },
    title: {
      type: String,
      "default": "\u7CFB\u7EDF\u8272\u5F69"
    },
    editable: {
      type: Boolean,
      "default": false
    },
    onSetColor: {
      type: Function,
      "default": function _default48() {
        return function() {
        };
      }
    },
    handleAddColor: {
      type: Function,
      "default": function _default49() {
        return function() {
        };
      }
    }
  }),
  setup: function setup92(props2) {
    var baseClassName = useBaseClassName();
    var _useConfig = useConfig("colorPicker"), t = _useConfig.t, global2 = _useConfig.global;
    var _useConfig2 = useConfig("popconfirm"), confirmGlobal = _useConfig2.global;
    var classPrefix2 = usePrefixClass();
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var statusClassNames = STATUS.value;
    var visiblePopConfirm = ref(false);
    var setVisiblePopConfirm = function setVisiblePopConfirm2(visible4) {
      visiblePopConfirm.value = visible4;
    };
    var handleClick5 = function handleClick6(color) {
      return props2.onSetColor(color);
    };
    var isEqualCurrentColor = function isEqualCurrentColor2(color) {
      return Color.compare(color, props2.color.css);
    };
    var selectedColorIndex = computed(function() {
      return props2.colors.findIndex(function(color) {
        return isEqualCurrentColor(color);
      });
    });
    var handleRemoveColor = function handleRemoveColor2() {
      var colors = _toConsumableArray(props2.colors);
      var selectedIndex = selectedColorIndex.value;
      if (selectedIndex > -1) {
        colors.splice(selectedIndex, 1);
      } else {
        colors.length = 0;
      }
      props2.onChange(colors);
      setVisiblePopConfirm(false);
    };
    return {
      t,
      global: global2,
      confirmGlobal,
      classPrefix: classPrefix2,
      baseClassName,
      statusClassNames,
      selectedColorIndex,
      visiblePopConfirm,
      setVisiblePopConfirm,
      handleClick: handleClick5,
      isEqualCurrentColor,
      handleRemoveColor
    };
  },
  render: function render72() {
    var _this = this;
    var baseClassName = this.baseClassName, statusClassNames = this.statusClassNames;
    this.classPrefix;
    this.visiblePopConfirm;
    this.t;
    this.global;
    this.confirmGlobal;
    var title = this.title, editable = this.editable;
    var swatchesClass = "".concat(baseClassName, "__swatches");
    var renderActions = function renderActions2() {
      if (!editable) {
        return null;
      }
      return createVNode("div", {
        "class": "".concat(swatchesClass, "--actions")
      }, [createVNode("span", {
        "role": "button",
        "class": "".concat(baseClassName, "__icon"),
        "onClick": function onClick2() {
          return _this.handleAddColor();
        }
      }, [createVNode(add, null, null)]), _this.colors.length > 0 ? createVNode("span", {
        "role": "button",
        "class": "".concat(baseClassName, "__icon"),
        "onClick": function onClick2() {
          return _this.handleRemoveColor();
        }
      }, [createVNode(_delete, null, null)]) : null]);
    };
    return createVNode("div", {
      "class": swatchesClass
    }, [createVNode("h3", {
      "class": "".concat(swatchesClass, "--title")
    }, [createVNode("span", null, [title]), renderActions()]), createVNode("ul", {
      "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
    }, [this.colors.map(function(color) {
      return createVNode("li", {
        "class": ["".concat(swatchesClass, "--item"), _this.isEqualCurrentColor(color) && editable ? statusClassNames.active : ""],
        "key": color,
        "onClick": function onClick2() {
          if (_this.disabled) {
            return;
          }
          _this.handleClick(color);
        }
      }, [createVNode("div", {
        "class": ["".concat(swatchesClass, "--item__color"), "".concat(baseClassName, "--bg-alpha")]
      }, [createVNode("span", {
        "class": "".concat(swatchesClass, "--item__inner"),
        "style": {
          background: color
        }
      }, null)])]);
    })])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$G(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$F(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$G(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var ColorPanel = defineComponent({
  name: "ColorPanel",
  components: {
    PanelHeader,
    LinearGradient,
    SaturationPanel,
    HueSlider,
    AlphaSlider,
    FormatPanel,
    SwatchesPanel
  },
  props: _objectSpread$F(_objectSpread$F({}, props$j), {}, {
    togglePopup: {
      type: Function
    }
  }),
  setup: function setup93(props2) {
    var baseClassName = useBaseClassName();
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var _useConfig = useConfig("colorPicker"), t = _useConfig.t, global2 = _useConfig.global;
    var statusClassNames = STATUS.value;
    var _toRefs = toRefs(props2), inputValue = _toRefs.value, modelValue = _toRefs.modelValue, recentColors = _toRefs.recentColors;
    var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
    var color = ref(new Color(innerValue.value || DEFAULT_COLOR));
    var updateColor = function updateColor2() {
      return color.value.update(innerValue.value || DEFAULT_COLOR);
    };
    var mode3 = ref(color.value.isGradient ? "linear-gradient" : "monochrome");
    var formatModel = ref(color.value.isGradient ? "CSS" : "RGB");
    var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), recentlyUsedColors = _useDefaultValue2[0], setRecentlyUsedColors = _useDefaultValue2[1];
    if (props2.colorModes.length === 1) {
      var m = props2.colorModes[0];
      mode3.value = m;
    }
    var formatValue = function formatValue2() {
      if (mode3.value === "linear-gradient") {
        return color.value.linearGradient;
      }
      return color.value.getFormatsColorMap()[props2.format] || color.value.css;
    };
    var addRecentlyUsedColor = function addRecentlyUsedColor2() {
      if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {
        return;
      }
      var colors = recentlyUsedColors.value || [];
      var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
      var index2 = colors.indexOf(currentColor);
      if (index2 > -1) {
        colors.splice(index2, 1);
      }
      colors.unshift(currentColor);
      if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
        colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
      }
      handleRecentlyUsedColorsChange(colors);
    };
    var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange2(colors) {
      recentlyUsedColors.value = colors;
      setRecentlyUsedColors(colors);
    };
    var emitColorChange = function emitColorChange2(trigger2) {
      setInnerValue(formatValue(), {
        color: getColorObject(color.value),
        trigger: trigger2 || "palette-saturation-brightness"
      });
    };
    watch(function() {
      return [props2.defaultValue, props2.enableAlpha];
    }, updateColor);
    watch(function() {
      return innerValue.value;
    }, function(newColor) {
      if (newColor !== formatValue()) {
        updateColor();
        mode3.value = color.value.isGradient ? "linear-gradient" : "monochrome";
      }
    });
    var handleModeChange = function handleModeChange2(value6) {
      mode3.value = value6;
      if (value6 === "linear-gradient") {
        color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
        return;
      }
      color.value.update(color.value.rgba);
    };
    var handleFormatModeChange = function handleFormatModeChange2(format) {
      return formatModel.value = format;
    };
    var handleSatAndValueChange = function handleSatAndValueChange2(_ref) {
      var saturation = _ref.saturation, value6 = _ref.value;
      var _color$value = color.value, sat = _color$value.saturation, val = _color$value.value;
      var changeTrigger = "palette-saturation-brightness";
      if (value6 !== val && saturation !== sat) {
        color.value.saturation = saturation;
        color.value.value = value6;
        changeTrigger = "palette-saturation-brightness";
      } else if (saturation !== sat) {
        color.value.saturation = saturation;
        changeTrigger = "palette-saturation";
      } else if (value6 !== val) {
        color.value.value = value6;
        changeTrigger = "palette-brightness";
      } else {
        return;
      }
      emitColorChange(changeTrigger);
    };
    var handleHueChange = function handleHueChange2(hue) {
      var _props2$onPaletteBarC;
      color.value.hue = hue;
      emitColorChange("palette-hue-bar");
      (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 ? void 0 : _props2$onPaletteBarC.call(props2, {
        color: getColorObject(color.value)
      });
    };
    var handleAlphaChange = function handleAlphaChange2(alpha) {
      color.value.alpha = alpha;
      emitColorChange("palette-alpha-bar");
    };
    var handleInputChange = function handleInputChange2(input, alpha) {
      color.value.update(input);
      color.value.alpha = alpha;
      emitColorChange("input");
    };
    var handleGradientChange = function handleGradientChange2(_ref2) {
      var key = _ref2.key, payload = _ref2.payload;
      var trigger2 = "palette-saturation-brightness";
      switch (key) {
        case "degree":
          color.value.gradientDegree = payload;
          trigger2 = "input";
          break;
        case "selectedId":
          color.value.gradientSelectedId = payload;
          break;
        case "colors":
          color.value.gradientColors = payload;
          break;
      }
      emitColorChange(trigger2);
    };
    var handleSetColor = function handleSetColor2(type, value6) {
      var isGradientValue = Color.isGradientColor(value6);
      if (isGradientValue) {
        if (props2.colorModes.includes("linear-gradient")) {
          mode3.value = "linear-gradient";
          color.value.update(value6);
          color.value.updateCurrentGradientColor();
        } else {
          console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
        }
      } else if (mode3.value === "linear-gradient") {
        color.value.updateStates(value6);
        color.value.updateCurrentGradientColor();
      } else {
        color.value.update(value6);
      }
      emitColorChange();
    };
    return {
      baseClassName,
      statusClassNames,
      t,
      global: global2,
      color,
      mode: mode3,
      formatModel,
      recentlyUsedColors,
      addRecentlyUsedColor,
      handleModeChange,
      handleSatAndValueChange,
      handleHueChange,
      handleAlphaChange,
      handleGradientChange,
      handleSetColor,
      handleFormatModeChange,
      handleInputChange,
      handleRecentlyUsedColorsChange
    };
  },
  render: function render73() {
    var _systemColors, _this = this;
    var baseClassName = this.baseClassName, statusClassNames = this.statusClassNames, t = this.t, global2 = this.global, recentColors = this.recentColors;
    this.recentlyUsedColors;
    var swatchColors = this.swatchColors;
    var baseProps2 = {
      color: this.color,
      disabled: this.disabled
    };
    var showUsedColors = recentColors !== null && recentColors !== false;
    var systemColors = swatchColors;
    if (systemColors === void 0) {
      systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
    }
    var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;
    var renderSwatches = function renderSwatches2() {
      if (!showSystemColors && !showUsedColors) {
        return null;
      }
      return createVNode(Fragment, null, [createVNode("div", {
        "class": "".concat(baseClassName, "__swatches-wrap")
      }, [showUsedColors ? createVNode(resolveComponent("swatches-panel"), mergeProps(baseProps2, {
        "title": t(global2.recentColorTitle),
        "editable": true,
        "colors": _this.recentlyUsedColors,
        "handleAddColor": _this.addRecentlyUsedColor,
        "onSetColor": function onSetColor(color) {
          return _this.handleSetColor("used", color);
        },
        "onChange": _this.handleRecentlyUsedColorsChange
      }), null) : null, showSystemColors ? createVNode(resolveComponent("swatches-panel"), mergeProps(baseProps2, {
        "title": t(global2.swatchColorTitle),
        "colors": systemColors,
        "onSetColor": function onSetColor(color) {
          return _this.handleSetColor("system", color);
        }
      }), null) : null])]);
    };
    return createVNode("div", {
      "class": ["".concat(baseClassName, "__panel"), this.disabled ? statusClassNames.disabled : false],
      "onClick": function onClick2(e) {
        return e.stopPropagation();
      }
    }, [createVNode(resolveComponent("panel-header"), mergeProps(this.$props, {
      "mode": this.mode,
      "onModeChange": this.handleModeChange
    }), null), createVNode("div", {
      "class": ["".concat(baseClassName, "__body")]
    }, [this.mode === "linear-gradient" ? createVNode(resolveComponent("linear-gradient"), mergeProps(baseProps2, {
      "onChange": this.handleGradientChange
    }), null) : null, createVNode(resolveComponent("saturation-panel"), mergeProps(baseProps2, {
      "onChange": this.handleSatAndValueChange
    }), null), createVNode(resolveComponent("hue-slider"), mergeProps(baseProps2, {
      "onChange": this.handleHueChange
    }), null), this.enableAlpha ? createVNode(resolveComponent("alpha-slider"), mergeProps(baseProps2, {
      "onChange": this.handleAlphaChange
    }), null) : null, createVNode(resolveComponent("format-panel"), mergeProps(this.$props, {
      "color": this.color,
      "format": this.formatModel,
      "onModeChange": this.handleFormatModeChange,
      "onInputChange": this.handleInputChange
    }), null), renderSwatches()])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$F(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$E(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$F(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _ColorPickerPanel = defineComponent({
  name: "TColorPickerPanel",
  components: {
    ColorPanel
  },
  inheritAttrs: false,
  props: _objectSpread$E({}, props$j),
  setup: function setup94(props2) {
    var prefix2 = usePrefixClass();
    var _toRefs = toRefs(props2), value6 = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
    var handleChange5 = function handleChange6(value22, context) {
      setInnerValue(value22, context);
    };
    var handlePaletteChange = function handlePaletteChange2(context) {
      props2.onPaletteBarChange(context);
    };
    return {
      innerValue,
      prefix: prefix2,
      handleChange: handleChange5,
      handlePaletteChange
    };
  },
  render: function render74() {
    var prefix2 = this.prefix;
    return createVNode(resolveComponent("color-panel"), mergeProps(this.$props, {
      "popupProps": null,
      "close-btn": false,
      "class": "".concat(prefix2, "-is-inline")
    }), null);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it["return"] != null)
        it["return"]();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len2) {
  if (len2 == null || len2 > arr.length)
    len2 = arr.length;
  for (var i = 0, arr2 = new Array(len2); i < len2; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var POPUP_SELECTOR = ".".concat(prefix, "-popup");
var nodeList = /* @__PURE__ */ new Map();
var startClick;
var uid = 0;
if (window && window.document) {
  on$1(document, "mousedown", function(e) {
    return startClick = e;
  });
  on$1(document, "mouseup", function(e) {
    var _iterator = _createForOfIteratorHelper(nodeList.values()), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var handler15 = _step.value.handler;
        handler15(e);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
}
var createDocumentHandler = function createDocumentHandler2(elements, handler15) {
  var includePopup = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  return function(e) {
    var _startClick;
    if (includePopup) {
      document.querySelectorAll(POPUP_SELECTOR).forEach(function(ele) {
        elements.push(ele);
      });
    }
    elements = Array.from(new Set(elements));
    var mouseUpTarget = e.target;
    var mouseDownTarget = (_startClick = startClick) === null || _startClick === void 0 ? void 0 : _startClick.target;
    var isTargetUnExists = !mouseUpTarget || !mouseDownTarget;
    if (isTargetUnExists) {
      return;
    }
    var isContained = elements.some(function(el) {
      var isSelf = el === mouseUpTarget;
      var isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);
      return isSelf || isContainedByEl;
    });
    if (isContained) {
      return;
    }
    handler15();
  };
};
var useClickOutsider = function useClickOutsider2() {
  uid++;
  var clickOutsiderId = uid;
  var addClickOutsider = function addClickOutsider2(els, handler15) {
    var elements = Array.from(new Set(els.filter(function(el) {
      return el;
    }))).map(function(el) {
      var node = el.el || el.$el || el;
      return node;
    });
    var documentHandler = createDocumentHandler(elements, handler15, true);
    nodeList.set(clickOutsiderId, {
      elements,
      handler: documentHandler
    });
  };
  var removeClickOutsider = function removeClickOutsider2() {
    nodeList.has(clickOutsiderId) && nodeList["delete"](clickOutsiderId);
  };
  return {
    clickOutsiderId,
    addClickOutsider,
    removeClickOutsider
  };
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var DefaultTrigger = defineComponent({
  name: "DefaultTrigger",
  components: {
    TInput: Input,
    TInputNumber: InputNumber
  },
  inheritAttrs: false,
  props: {
    color: {
      type: String,
      "default": ""
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    inputProps: {
      type: Object,
      "default": function _default50() {
        return {
          autoWidth: true
        };
      }
    },
    onTriggerChange: {
      type: Function,
      "default": function _default51() {
        return function() {
        };
      }
    }
  },
  setup: function setup95(props2) {
    var baseClassName = useBaseClassName();
    var value6 = ref(props2.color);
    watch(function() {
      return [props2.color];
    }, function() {
      return value6.value = props2.color;
    });
    var handleChange5 = function handleChange6(input) {
      if (input === props2.color) {
        return;
      }
      if (!Color.isValid(input)) {
        value6.value = props2.color;
      } else {
        value6.value = input;
      }
      props2.onTriggerChange(value6.value);
    };
    return {
      baseClassName,
      value: value6,
      handleChange: handleChange5
    };
  },
  render: function render75() {
    var _this = this;
    var baseClassName = this.baseClassName;
    var inputSlots = {
      label: function label2() {
        return createVNode("div", {
          "class": ["".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha")]
        }, [createVNode("span", {
          "class": ["color-inner"],
          "style": {
            background: _this.value
          }
        }, null)]);
      }
    };
    return createVNode("div", {
      "class": "".concat(baseClassName, "__trigger--default")
    }, [createVNode(resolveComponent("t-input"), mergeProps(this.inputProps, {
      "modelValue": _this.value,
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _this.value = $event;
      },
      "disabled": this.disabled,
      "onBlur": this.handleChange
    }), inputSlots)]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$E(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$D(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$E(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _ColorPicker = defineComponent({
  name: "TColorPicker",
  components: {
    TPopup: Popup,
    ColorPanel,
    DefaultTrigger
  },
  inheritAttrs: false,
  props: _objectSpread$D({}, props$j),
  setup: function setup96(props2) {
    var baseClassName = useBaseClassName();
    var visible4 = ref(false);
    var setVisible = function setVisible2(value6) {
      return visible4.value = value6;
    };
    var _toRefs = toRefs(props2), inputValue = _toRefs.value, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
    var refTrigger = ref();
    var refColorPanel = ref();
    var _useClickOutsider = useClickOutsider(), addClickOutsider = _useClickOutsider.addClickOutsider, removeClickOutsider = _useClickOutsider.removeClickOutsider;
    onMounted(function() {
      return addClickOutsider([refTrigger.value, refColorPanel.value], function() {
        return setVisible(false);
      });
    });
    onBeforeUnmount(function() {
      removeClickOutsider();
    });
    var renderPopupContent = function renderPopupContent2() {
      if (props2.disabled) {
        return null;
      }
      return createVNode(ColorPanel, mergeProps(props2, {
        "disabled": props2.disabled,
        "value": innerValue.value,
        "togglePopup": setVisible,
        "onChange": function onChange(value6, context) {
          return setInnerValue(value6, context);
        },
        "ref": "refColorPanel"
      }), null);
    };
    return {
      baseClassName,
      innerValue,
      visible: visible4,
      refTrigger,
      refColorPanel,
      renderPopupContent,
      setVisible,
      setInnerValue
    };
  },
  render: function render76() {
    var _this = this;
    var popupProps2 = this.popupProps, disabled2 = this.disabled, baseClassName = this.baseClassName;
    var popProps = _objectSpread$D(_objectSpread$D({
      placement: "bottom-left"
    }, popupProps2 || {}), {}, {
      trigger: "click",
      attach: "body",
      overlayClassName: [baseClassName],
      visible: this.visible,
      overlayStyle: {
        padding: 0
      }
    });
    return createVNode(resolveComponent("t-popup"), mergeProps(popProps, {
      "content": this.renderPopupContent
    }), {
      "default": function _default65() {
        return [createVNode("div", {
          "className": "".concat(baseClassName, "__trigger"),
          "onClick": function onClick2() {
            return _this.setVisible(!_this.visible);
          },
          "ref": "refTrigger"
        }, [renderTNodeJSXDefault(_this, "default", createVNode(resolveComponent("default-trigger"), {
          "color": _this.innerValue,
          "disabled": disabled2,
          "input-props": _this.inputProps,
          "onTriggerChange": _this.setInnerValue
        }, null))])];
      }
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var ColorPickerPanel = withInstall(_ColorPickerPanel);
var ColorPicker = withInstall(_ColorPicker);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$i = {
  alt: {
    type: String,
    "default": ""
  },
  hideOnLoadFailed: Boolean,
  icon: {
    type: Function
  },
  image: {
    type: String,
    "default": ""
  },
  shape: {
    type: String,
    "default": "circle",
    validator: function validator87(val) {
      return ["circle", "round"].includes(val);
    }
  },
  size: {
    type: String,
    "default": ""
  },
  onError: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$D(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$C(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$D(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Avatar = defineComponent({
  name: "TAvatar",
  props: props$i,
  setup: function setup97(props2) {
    var COMPONENT_NAME2 = usePrefixClass("avatar");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
    var avatarGroup = inject("avatarGroup", void 0);
    var avatar = ref(null);
    var avatarChild = ref(null);
    var isImgExist = ref(true);
    var gap = ref(4);
    var sizeValue = ref("");
    var scale = ref("");
    var isCustomSize = computed(function() {
      return sizeValue.value && !SIZE.value[sizeValue.value];
    });
    var customAvatarSize = computed(function() {
      return isCustomSize.value ? {
        width: sizeValue.value,
        height: sizeValue.value,
        "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 2, "px")
      } : {};
    });
    var customImageSize = computed(function() {
      return isCustomSize.value ? {
        height: sizeValue.value,
        width: sizeValue.value
      } : {};
    });
    var customCharacterSize = computed(function() {
      return {
        transform: scale.value
      };
    });
    var handleImgLoadError = function handleImgLoadError2() {
      var _props2$onError;
      var hideOnLoadFailed = props2.hideOnLoadFailed;
      isImgExist.value = !hideOnLoadFailed;
      (_props2$onError = props2.onError) === null || _props2$onError === void 0 ? void 0 : _props2$onError.call(props2);
    };
    var setScaleParams = function setScaleParams2() {
      var $avatar = avatar.value;
      var $avatarChild = avatarChild.value;
      var avatarWidth = $avatar === null || $avatar === void 0 ? void 0 : $avatar.offsetWidth;
      var avatarChildWidth = $avatarChild === null || $avatarChild === void 0 ? void 0 : $avatarChild.offsetWidth;
      if (gap.value * 2 < avatarWidth) {
        scale.value = avatarChildWidth > avatarWidth - gap.value * 2 ? "scale(".concat((avatarWidth - gap.value * 2) / avatarChildWidth, ")") : "scale(1)";
      }
    };
    onMounted(function() {
      sizeValue.value = props2.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
      nextTick(function() {
        setScaleParams();
      });
    });
    onUpdated(function() {
      nextTick(function() {
        setScaleParams();
      });
    });
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      SIZE,
      avatar,
      avatarChild,
      isImgExist,
      gap,
      sizeValue,
      scale,
      customAvatarSize,
      customImageSize,
      customCharacterSize,
      isCustomSize,
      handleImgLoadError,
      setScaleParams
    };
  },
  render: function render77() {
    var _ref;
    var COMPONENT_NAME2 = this.COMPONENT_NAME, SIZE = this.SIZE;
    var content = renderContent(this, "default", "content");
    var icon = renderTNodeJSX(this, "icon");
    var isIconOnly = icon && !content;
    var _this$$props = this.$props, shape = _this$$props.shape, image = _this$$props.image, alt = _this$$props.alt;
    var avatarClass = ["".concat(COMPONENT_NAME2), SIZE[this.sizeValue], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--circle"), shape === "circle"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--round"), shape === "round"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "__icon"), !!isIconOnly), _ref)];
    content = createVNode("span", {
      "ref": "avatarChild",
      "style": _objectSpread$C({}, this.customCharacterSize)
    }, [content]);
    if (icon) {
      content = [icon, !isIconOnly ? content : ""];
    }
    if (image && this.isImgExist) {
      content = createVNode("img", {
        "style": _objectSpread$C({}, this.customImageSize),
        "src": image,
        "alt": alt,
        "onError": this.handleImgLoadError
      }, null);
    }
    return createVNode("div", {
      "ref": "avatar",
      "class": avatarClass,
      "style": _objectSpread$C({}, this.customAvatarSize)
    }, [content]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$h = {
  cascading: {
    type: String,
    "default": "right-up",
    validator: function validator88(val) {
      return ["left-up", "right-up"].includes(val);
    }
  },
  collapseAvatar: {
    type: [String, Function]
  },
  max: {
    type: Number
  },
  placement: {
    type: String,
    validator: function validator89(val) {
      return ["left", "top", "bottom", "right"].includes(val);
    }
  },
  popupProps: {
    type: Object
  },
  size: {
    type: String,
    "default": "medium"
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$C(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$B(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$C(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$9(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _AvatarGroup = defineComponent({
  name: "TAvatarGroup",
  components: {
    Avatar: _Avatar
  },
  props: props$h,
  setup: function setup98(props2) {
    provide("avatarGroup", _objectSpread$B({}, props2));
    var AVATAR_NAME = usePrefixClass("avatar");
    var COMPONENT_NAME2 = usePrefixClass("avatar-group");
    var renderIcon4 = function renderIcon5(context) {
      return isIcon(context) && typeof props2.collapseAvatar !== "string" ? props2.collapseAvatar : null;
    };
    var renderEllipsisAvatar = function renderEllipsisAvatar2(context, children) {
      if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
        var content = setEllipsisContent(context, children);
        var outAvatar = children.slice(0, props2.max);
        outAvatar.push(createVNode(_Avatar, {
          "size": props2.size,
          "icon": renderIcon4(context)
        }, _isSlot$9(content) ? content : {
          "default": function _default65() {
            return [content];
          }
        }));
        return [outAvatar];
      }
      return [children];
    };
    var setEllipsisContent = function setEllipsisContent2(context, children) {
      var content = "";
      if (props2.collapseAvatar) {
        if (!isIcon(context)) {
          content = renderContent(context, "collapseAvatar", "content");
        }
      } else {
        content = "+".concat(children.length - props2.max);
      }
      return content;
    };
    var isIcon = function isIcon2(context) {
      var content = renderTNodeJSX(context, "collapseAvatar");
      return content;
    };
    return {
      AVATAR_NAME,
      COMPONENT_NAME: COMPONENT_NAME2,
      renderEllipsisAvatar,
      isIcon,
      setEllipsisContent
    };
  },
  render: function render78() {
    var _ref;
    var AVATAR_NAME = this.AVATAR_NAME;
    var children = renderTNodeJSX(this, "default");
    var _this$$props = this.$props, cascading = _this$$props.cascading, max4 = _this$$props.max;
    var groupClass = ["".concat(this.COMPONENT_NAME), (_ref = {}, _defineProperty$3(_ref, "".concat(AVATAR_NAME, "--offset-right"), cascading === "right-up"), _defineProperty$3(_ref, "".concat(AVATAR_NAME, "--offset-left"), cascading === "left-up"), _ref)];
    var content = [children];
    if (max4 && max4 >= 0) {
      content = [this.renderEllipsisAvatar(this, children)];
    }
    return createVNode("div", {
      "class": groupClass
    }, [content]);
  }
});
var index$j = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Avatar = withInstall(_Avatar);
var AvatarGroup = withInstall(_AvatarGroup);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$g = {
  color: {
    type: String,
    "default": ""
  },
  content: {
    type: [String, Function]
  },
  count: {
    type: [String, Number, Function],
    "default": 0
  },
  "default": {
    type: [String, Function]
  },
  dot: Boolean,
  maxCount: {
    type: Number,
    "default": 99
  },
  offset: {
    type: Array
  },
  shape: {
    type: String,
    "default": "circle",
    validator: function validator90(val) {
      return ["circle", "round"].includes(val);
    }
  },
  showZero: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator91(val) {
      return ["small", "medium"].includes(val);
    }
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$B(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$A(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$B(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Badge = defineComponent({
  name: "TBadge",
  props: _objectSpread$A({}, props$g),
  setup: function setup99(props2) {
    var renderTNodeJSX3 = useTNodeJSX();
    var content = computed(function() {
      if (props2.dot)
        return "";
      if (typeof props2.count === "function") {
        return renderTNodeJSX3("count");
      }
      if (Number.isNaN(Number(props2.count))) {
        return props2.count;
      }
      var count = Number(props2.count);
      return count > props2.maxCount ? "".concat(props2.maxCount, "+") : count;
    });
    var renderChildren = function renderChildren2() {
      return renderTNodeJSX3("default");
    };
    var getOffset = function getOffset2() {
      if (!props2.offset)
        return {};
      var _props2$offset = _slicedToArray(props2.offset, 2), xOffset = _props2$offset[0], yOffset = _props2$offset[1];
      xOffset = Number.isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
      yOffset = Number.isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
      return {
        xOffset,
        yOffset
      };
    };
    var _useConfig = useConfig("classPrefix"), classPrefix2 = _useConfig.classPrefix;
    var name2 = "".concat(classPrefix2.value, "-badge");
    var isHidden = computed(function() {
      return !props2.showZero && (content.value === 0 || content.value === "0");
    });
    var badgeClassNames = computed(function() {
      var _ref;
      return [(_ref = {}, _defineProperty$3(_ref, "".concat(name2, "--dot"), !!props2.dot), _defineProperty$3(_ref, "".concat(name2, "--circle"), !props2.dot && props2.shape === "circle"), _defineProperty$3(_ref, "".concat(name2, "--round"), props2.shape === "round"), _defineProperty$3(_ref, "t-size-s", props2.size === "small"), _ref)];
    });
    var inlineStyle = computed(function() {
      var _getOffset = getOffset(), xOffset = _getOffset.xOffset, yOffset = _getOffset.yOffset;
      return {
        background: "".concat(props2.color),
        right: xOffset,
        top: yOffset
      };
    });
    return {
      content,
      inlineStyle,
      badgeClassNames,
      isHidden,
      renderChildren,
      name: name2
    };
  },
  render: function render79() {
    return createVNode("div", mergeProps({
      "class": this.name
    }, this.$attrs), [this.renderChildren(), this.isHidden ? null : createVNode("sup", {
      "class": this.badgeClassNames,
      "style": this.inlineStyle
    }, [this.content])]);
  }
});
var index$i = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Badge = withInstall(_Badge);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$f = {
  cell: {
    type: [String, Function]
  },
  cellAppend: {
    type: [String, Function]
  },
  controllerConfig: {
    type: [Boolean, Object],
    "default": void 0
  },
  fillWithZero: {
    type: Boolean,
    "default": void 0
  },
  firstDayOfWeek: {
    type: Number,
    validator: function validator92(val) {
      return [1, 2, 3, 4, 5, 6, 7].includes(val);
    }
  },
  format: {
    type: String,
    "default": "YYYY-MM-DD"
  },
  head: {
    type: [String, Function]
  },
  isShowWeekendDefault: {
    type: Boolean,
    "default": true
  },
  mode: {
    type: String,
    "default": "month",
    validator: function validator93(val) {
      return ["month", "year"].includes(val);
    }
  },
  preventCellContextmenu: Boolean,
  range: {
    type: Array
  },
  theme: {
    type: String,
    "default": "full",
    validator: function validator94(val) {
      return ["full", "card"].includes(val);
    }
  },
  value: {
    type: [String, Date]
  },
  week: {
    type: [Array, Function]
  },
  onCellClick: Function,
  onCellDoubleClick: Function,
  onCellRightClick: Function,
  onControllerChange: Function,
  onMonthChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var COMPONENT_NAME = "calendar";
var MIN_YEAR = 1970;
var FIRST_MONTH_OF_YEAR = 1;
var LAST_MONTH_OF_YEAR = 12;
var DEFAULT_YEAR_CELL_NUMINROW = 4;
var DAY_CN_MAP = {
  1: "\u4E00",
  2: "\u4E8C",
  3: "\u4E09",
  4: "\u56DB",
  5: "\u4E94",
  6: "\u516D",
  7: "\u65E5"
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var getDay = function getDay2(dt) {
  var day = dayjs(dt).day();
  if (day === 0) {
    day = 7;
  }
  return day;
};
var getDayCn = function getDayCn2(num) {
  var re = "";
  var numStr = num.toString();
  if (numStr in DAY_CN_MAP) {
    re = DAY_CN_MAP[numStr];
  }
  return re;
};
var getCellColIndex = function getCellColIndex2(firstDayOfWeek, dt) {
  var re = 0;
  var day = getDay(dt);
  if (day >= firstDayOfWeek) {
    re = day - firstDayOfWeek;
  } else {
    re = 7 - firstDayOfWeek + day;
  }
  return re;
};
var addDate = function addDate2(dt, days) {
  var d = new Date(dt);
  d.setDate(d.getDate() + days);
  return d;
};
var createYearCellsData = function createYearCellsData2(year, curDate, format) {
  var monthsArr = [];
  var isCurYear = curDate.year() === year;
  for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {
    var date = new Date(year, num - 1);
    var curDateMon = parseInt(curDate.format("M"), 10);
    var isCurrent2 = isCurYear && curDateMon === num;
    monthsArr.push({
      mode: "year",
      isCurrent: isCurrent2,
      date,
      formattedDate: dayjs(date).format(format),
      filterDate: null,
      formattedFilterDate: null,
      isShowWeekend: true
    });
  }
  return monthsArr;
};
var createMonthCellsData = function createMonthCellsData2(year, month, firstDayOfWeek, curDate, format) {
  var daysArr = [];
  var begin = dayjs("".concat(year, "-").concat(month)).startOf("month").toDate();
  var end3 = dayjs("".concat(year, "-").concat(month)).endOf("month").toDate();
  var days = end3.getDate();
  var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);
  var arr = [];
  var num = 1;
  var createCellData = function createCellData2(belongTo, isCurrent2, date2, weekOrder) {
    var day = getDay(date2);
    return {
      mode: "month",
      belongTo,
      isCurrent: isCurrent2,
      day,
      weekOrder,
      date: date2,
      formattedDate: dayjs(date2).format(format),
      filterDate: null,
      formattedFilterDate: null,
      isShowWeekend: true
    };
  };
  for (var i = 0; i < beginDateColIndex; i++) {
    var date = addDate(begin, i - beginDateColIndex);
    arr.push(createCellData(-1, false, date, num));
    if (arr.length === 7) {
      daysArr.push(arr);
      arr = [];
      num += 1;
    }
  }
  for (var _i = 0; _i < days; _i++) {
    var _date = addDate(begin, _i);
    arr.push(createCellData(0, curDate.isSame(dayjs(_date)), _date, num));
    if (arr.length === 7) {
      daysArr.push(arr);
      arr = [];
      num += 1;
    }
  }
  if (arr.length) {
    var nextMonthCellNum = 7 - arr.length;
    for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {
      var _date2 = addDate(end3, _i2 + 1);
      arr.push(createCellData(1, false, _date2, num));
    }
    daysArr.push(arr);
  }
  return daysArr;
};
var createDefaultCurDate = function createDefaultCurDate2() {
  return dayjs(dayjs().format("YYYY-MM-DD"));
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useState(props2) {
  var _useConfig = useConfig(COMPONENT_NAME), global2 = _useConfig.global;
  var state = reactive({
    realFirstDayOfWeek: 1,
    curDate: null,
    curSelectedYear: null,
    curSelectedMonth: null,
    curSelectedMode: null,
    isShowWeekend: true,
    controlSize: "medium"
  });
  function toCurrent(value6) {
    state.curDate = value6 ? dayjs(value6) : createDefaultCurDate();
    state.curSelectedYear = state.curDate.year();
    state.curSelectedMonth = parseInt(state.curDate.format("M"), 10);
  }
  function checkDayVisibled(day) {
    var re = true;
    if (!state.isShowWeekend) {
      re = day !== 6 && day !== 7;
    }
    return re;
  }
  watch(function() {
    return props2.firstDayOfWeek;
  }, function(v) {
    var _ref, _props$firstDayOfWeek;
    state.realFirstDayOfWeek = (_ref = (_props$firstDayOfWeek = props2.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : global2.value.firstDayOfWeek) !== null && _ref !== void 0 ? _ref : 1;
  }, {
    immediate: true
  });
  watch(function() {
    return props2.value;
  }, function(v) {
    toCurrent(v);
  }, {
    immediate: true
  });
  watch(function() {
    return props2.isShowWeekendDefault;
  }, function(v) {
    state.isShowWeekend = v;
  }, {
    immediate: true
  });
  watch(function() {
    return props2.mode;
  }, function(v) {
    state.curSelectedMode = v;
  }, {
    immediate: true
  });
  return {
    state,
    toCurrent,
    checkDayVisibled
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useCalendarClass(props2, state) {
  var prefixClass = usePrefixClass(COMPONENT_NAME);
  var body = computed(function() {
    return ["".concat(prefixClass.value), "".concat(prefixClass.value, "--").concat(props2.theme)];
  });
  var panel = computed(function() {
    return ["".concat(prefixClass.value, "__panel"), "".concat(prefixClass.value, "__panel--").concat(state.curSelectedMode)];
  });
  var control = computed(function() {
    return ["".concat(prefixClass.value, "__control")];
  });
  var title = computed(function() {
    return ["".concat(prefixClass.value, "__title")];
  });
  var controlSection = computed(function() {
    return ["".concat(prefixClass.value, "__control-section")];
  });
  var controlSectionCell = computed(function() {
    return ["".concat(prefixClass.value, "__control-section-cell")];
  });
  var controlTag = computed(function() {
    return ["".concat(prefixClass.value, "__control-tag")];
  });
  var table2 = computed(function() {
    return ["".concat(prefixClass.value, "__table")];
  });
  var tableHead = computed(function() {
    return ["".concat(prefixClass.value, "__table-head")];
  });
  var tableHeadRow = computed(function() {
    return ["".concat(prefixClass.value, "__table-head-row")];
  });
  var tableHeadCell = computed(function() {
    return ["".concat(prefixClass.value, "__table-head-cell")];
  });
  var tableBody = computed(function() {
    return ["".concat(prefixClass.value, "__table-body")];
  });
  var tableBodyRow = computed(function() {
    return ["".concat(prefixClass.value, "__table-body-row")];
  });
  return {
    body,
    panel,
    control,
    title,
    controlSection,
    controlSectionCell,
    controlTag,
    table: table2,
    tableHead,
    tableHeadRow,
    tableHeadCell,
    tableBody,
    tableBodyRow
  };
}
function useCalendarCellClass() {
  var prefixClass = usePrefixClass(COMPONENT_NAME);
  var tableBodyCell = computed(function() {
    return ["".concat(prefixClass.value, "__table-body-cell")];
  });
  var tableBodyCell4Now = computed(function() {
    return "".concat(prefixClass.value, "__table-body-cell--now");
  });
  var tableBodyCellDisplay = computed(function() {
    return ["".concat(prefixClass.value, "__table-body-cell-display")];
  });
  var tableBodyCellCsontent = computed(function() {
    return ["".concat(prefixClass.value, "__table-body-cell-content")];
  });
  return {
    tableBodyCell,
    tableBodyCell4Now,
    tableBodyCellDisplay,
    tableBodyCellCsontent
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$A(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$z(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$A(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var getDefaultControllerConfigData = function getDefaultControllerConfigData2() {
  var visible4 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  return {
    visible: visible4,
    disabled: false,
    mode: {
      visible: true,
      radioGroupProps: {}
    },
    year: {
      visible: true,
      selectProps: {}
    },
    month: {
      visible: true,
      selectProps: {}
    },
    weekend: {
      visible: true,
      showWeekendButtonProps: {},
      hideWeekendButtonProps: {}
    },
    current: {
      visible: true,
      currentDayButtonProps: {},
      currentMonthButtonProps: {}
    }
  };
};
function userController(props2, state) {
  var _useConfig = useConfig(COMPONENT_NAME), global2 = _useConfig.global;
  var options = computed(function() {
    var dayJsFilterDate = dayjs("".concat(state.curSelectedYear, "-").concat(state.curSelectedMonth));
    var re = {
      isShowWeekend: state.isShowWeekend,
      filterDate: dayJsFilterDate.toDate(),
      formattedFilterDate: dayJsFilterDate.format(props2.format),
      mode: state.curSelectedMode
    };
    return re;
  });
  var configData = computed(function() {
    var _ref, _props$controllerConf;
    var controllerConfig = (_ref = (_props$controllerConf = props2.controllerConfig) !== null && _props$controllerConf !== void 0 ? _props$controllerConf : global2.value.controllerConfig) !== null && _ref !== void 0 ? _ref : true;
    if (typeof controllerConfig === "boolean") {
      return getDefaultControllerConfigData(controllerConfig);
    }
    return _objectSpread$z(_objectSpread$z({}, getDefaultControllerConfigData()), controllerConfig);
  });
  var visible4 = computed(function() {
    return !!configData.value && configData.value.visible;
  });
  function checkControllerVisible(name2) {
    var re = true;
    var conf = configData.value;
    if (!conf || !conf.visible || conf[name2] === false || conf[name2] && !conf[name2].visible) {
      re = false;
    }
    return re;
  }
  function checkControllerDisabled(name2, propsName) {
    var re = false;
    var conf = configData.value;
    if (conf && (conf.disabled || conf[name2] && conf[name2][propsName] && conf[name2][propsName].disabled)) {
      re = true;
    }
    return re;
  }
  function emitControllerChange() {
    nextTick(function() {
      typeof props2.onControllerChange === "function" && props2.onControllerChange(_objectSpread$z({}, options.value));
    });
  }
  return {
    options,
    configData,
    visible: visible4,
    checkControllerVisible,
    checkControllerDisabled,
    emitControllerChange
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useColHeaders(props2, state) {
  var _useConfig = useConfig(COMPONENT_NAME), t = _useConfig.t, global2 = _useConfig.global;
  var weekDipalyText = computed(function() {
    return props2.week || t(global2.value.week).split(",");
  });
  function getWeekDisplay(weekNum) {
    var weekText = weekDipalyText.value;
    return _typeof$1(weekText) === "object" && weekText[weekNum - 1] ? weekText[weekNum - 1] : getDayCn(weekNum);
  }
  var cellColHeaders = computed(function() {
    var re = [];
    var min4 = 1;
    var max4 = 7;
    for (var i = state.realFirstDayOfWeek; i <= max4; i++) {
      re.push({
        num: i,
        display: getWeekDisplay(i)
      });
    }
    if (state.realFirstDayOfWeek > min4) {
      for (var _i = min4; _i < state.realFirstDayOfWeek; _i++) {
        re.push({
          num: _i,
          display: getWeekDisplay(_i)
        });
      }
    }
    return re;
  });
  return {
    cellColHeaders
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$z(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$y(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$z(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var clickTypeEmitEventMap = {
  click: "click",
  dblclick: "dblclick",
  contextmenu: "rightclick"
};
var CalendarCellItem = defineComponent({
  name: "TCalendarCell",
  inheritAttrs: false,
  props: {
    item: {
      type: Object,
      "default": function _default52() {
        return null;
      }
    },
    fillWithZero: {
      type: Boolean,
      "default": void 0
    },
    theme: {
      type: String,
      "default": function _default53() {
        return null;
      }
    },
    t: Function,
    global: Object,
    cell: [String, Function]
  },
  emits: _toConsumableArray(Object.values(clickTypeEmitEventMap)),
  setup: function setup100(props2, _ref) {
    var emit = _ref.emit;
    var renderContent6 = useContent();
    var cls = useCalendarCellClass();
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var valueDisplay = computed(function() {
      if (props2.item.mode === "month") {
        var _ref2, _props$fillWithZero;
        var dateNum = props2.item.date.getDate();
        var fillZero = dateNum < 10 && ((_ref2 = (_props$fillWithZero = props2.fillWithZero) !== null && _props$fillWithZero !== void 0 ? _props$fillWithZero : props2.global.fillWithZero) !== null && _ref2 !== void 0 ? _ref2 : true);
        return fillZero ? "0".concat(dateNum) : dateNum;
      }
      var map = props2.t(props2.global.cellMonth).split(",");
      return map[props2.item.date.getMonth().toString()];
    });
    var allowSlot = computed(function() {
      return props2.theme === "full";
    });
    var disabled2 = computed(function() {
      return props2.item.mode === "month" && props2.item.belongTo !== 0;
    });
    var cellCls = computed(function() {
      var _ref3;
      var _props$item = props2.item, mode3 = _props$item.mode, date = _props$item.date, formattedDate = _props$item.formattedDate, isCurrent2 = _props$item.isCurrent;
      var isNow = mode3 === "year" ? new Date().getMonth() === date.getMonth() : formattedDate === dayjs().format("YYYY-MM-DD");
      return [cls.tableBodyCell.value, (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled2.value), _defineProperty$3(_ref3, STATUS.value.checked, isCurrent2), _defineProperty$3(_ref3, cls.tableBodyCell4Now.value, isNow), _ref3)];
    });
    var clickCell = function clickCell2(e) {
      if (disabled2.value)
        return;
      var emitName = clickTypeEmitEventMap[e.type];
      emit(emitName, e);
    };
    var renderDefaultNode = function renderDefaultNode2() {
      return createVNode(Fragment, null, [createVNode("div", {
        "class": cls.tableBodyCellDisplay.value
      }, [valueDisplay.value]), createVNode("div", {
        "class": cls.tableBodyCellCsontent.value
      }, [allowSlot.value && renderContent6("cellAppend", void 0, {
        params: _objectSpread$y({}, props2.item)
      })])]);
    };
    return function() {
      return props2.item && createVNode("td", {
        "class": cellCls.value,
        "onClick": clickCell,
        "ondblclick": clickCell,
        "oncontextmenu": clickCell
      }, [typeof props2.cell === "function" ? props2.cell(_objectSpread$y({}, props2.item)) : renderContent6("cell", void 0, {
        defaultNode: renderDefaultNode(),
        params: _objectSpread$y({}, props2.item)
      })]);
    };
  }
});
var index$h = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$y(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$x(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$y(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$8(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _Calendar = defineComponent({
  name: "TCalendar",
  props: _objectSpread$x({}, props$f),
  setup: function setup101(props2, _ref) {
    var slots = _ref.slots;
    var renderContent6 = useContent();
    var _useConfig = useConfig(COMPONENT_NAME), t = _useConfig.t, global2 = _useConfig.global;
    var _useState = useState(props2), state = _useState.state, toCurrent = _useState.toCurrent, checkDayVisibled = _useState.checkDayVisibled;
    var cls = useCalendarClass(props2, state);
    var _useColHeaders = useColHeaders(props2, state), cellColHeaders = _useColHeaders.cellColHeaders;
    var controller = userController(props2, state);
    var rangeFromTo = computed(function() {
      if (!props2.range || props2.range.length < 2) {
        return null;
      }
      var _props2$range = _slicedToArray(props2.range, 2), v1 = _props2$range[0], v2 = _props2$range[1];
      if (dayjs(v1).isBefore(dayjs(v2))) {
        return {
          from: v1,
          to: v2
        };
      }
      return {
        from: v2,
        to: v1
      };
    });
    function checkMonthAndYearSelecterDisabled(year, month) {
      var disabled2 = false;
      if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
        var beginYear = dayjs(rangeFromTo.value.from).year();
        var endYear = dayjs(rangeFromTo.value.to).year();
        if (year === beginYear) {
          var beginMon = parseInt(dayjs(rangeFromTo.value.from).format("M"), 10);
          disabled2 = month < beginMon;
        } else if (year === endYear) {
          var endMon = parseInt(dayjs(rangeFromTo.value.to).format("M"), 10);
          disabled2 = month > endMon;
        }
      }
      return disabled2;
    }
    watch(function() {
      return {
        year: "".concat(state.curSelectedYear),
        month: "".concat(state.curSelectedMonth)
      };
    }, function(v) {
      typeof props2.onMonthChange === "function" && props2.onMonthChange(_objectSpread$x({}, v));
      controller.emitControllerChange();
    });
    var dateSelect = {
      yearSelectOptionList: computed(function() {
        var re = [];
        var begin = state.curSelectedYear - 10;
        var end3 = state.curSelectedYear + 10;
        if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
          begin = dayjs(rangeFromTo.value.from).year();
          end3 = dayjs(rangeFromTo.value.to).year();
        }
        if (begin < MIN_YEAR) {
          begin = MIN_YEAR;
        }
        if (end3 < MIN_YEAR) {
          end3 = MIN_YEAR;
        }
        for (var i = begin; i <= end3; i++) {
          var disabled2 = checkMonthAndYearSelecterDisabled(i, state.curSelectedMonth);
          re.push({
            value: i,
            label: t(global2.value.yearSelection, {
              year: i
            }),
            disabled: disabled2
          });
        }
        return re;
      }),
      isYearSelectVisible: computed(function() {
        return controller.checkControllerVisible("year");
      }),
      isYearSelectDisabled: computed(function() {
        return controller.checkControllerDisabled("year", "selectProps");
      }),
      monthSelectOptionList: computed(function() {
        var re = [];
        for (var i = FIRST_MONTH_OF_YEAR; i <= LAST_MONTH_OF_YEAR; i++) {
          var disabled2 = checkMonthAndYearSelecterDisabled(state.curSelectedYear, i);
          re.push({
            value: i,
            label: t(global2.value.monthSelection, {
              month: i
            }),
            disabled: disabled2
          });
        }
        return re;
      }),
      isMonthSelectVisible: computed(function() {
        return state.curSelectedMode === "month" && controller.checkControllerVisible("month");
      }),
      isMonthSelectDisabled: computed(function() {
        return controller.checkControllerDisabled("month", "selectProps");
      })
    };
    var modeSelect = {
      optionList: computed(function() {
        return [{
          value: "month",
          label: t(global2.value.monthRadio)
        }, {
          value: "year",
          label: t(global2.value.yearRadio)
        }];
      }),
      isVisible: computed(function() {
        return controller.checkControllerVisible("mode");
      }),
      isDisabled: computed(function() {
        return controller.checkControllerDisabled("mode", "radioGroupProps");
      })
    };
    var weekendBtn = {
      text: computed(function() {
        return state.isShowWeekend ? t(global2.value.hideWeekend) : t(global2.value.showWeekend);
      }),
      vBind: computed(function() {
        var c = controller.configData.value.weekend;
        return state.isShowWeekend ? c.hideWeekendButtonProps : c.showWeekendButtonProps;
      }),
      isVisible: computed(function() {
        return props2.theme === "full" && controller.checkControllerVisible("current") && controller.checkControllerVisible("weekend");
      }),
      isDisabled: computed(function() {
        var p2 = state.isShowWeekend ? "hideWeekendButtonProps" : "showWeekendButtonProps";
        return controller.checkControllerDisabled("weekend", p2);
      })
    };
    var currentBtn = {
      text: computed(function() {
        return state.curSelectedMode === "month" ? t(global2.value.today) : t(global2.value.thisMonth);
      }),
      vBind: computed(function() {
        var c = controller.configData.value.current;
        return state.curSelectedMode === "month" ? c.currentDayButtonProps : c.currentMonthButtonProps;
      }),
      isVisible: computed(function() {
        return props2.theme === "full" && controller.checkControllerVisible("current");
      }),
      isDisabled: computed(function() {
        var p2 = state.curSelectedMode === "month" ? "currentDayButtonProps" : "currentMonthButtonProps";
        return controller.checkControllerDisabled("current", p2);
      })
    };
    var renderControl = function renderControl2() {
      var _slot, _slot2, _slot3;
      return createVNode("div", {
        "class": cls.control.value
      }, [createVNode("div", {
        "class": cls.title.value
      }, [renderContent6("head", void 0, {
        params: _objectSpread$x({}, controller.options.value)
      })]), createVNode("div", {
        "class": cls.controlSection.value
      }, [dateSelect.isYearSelectVisible.value && createVNode("div", {
        "class": cls.controlSectionCell.value
      }, [createVNode(Select, mergeProps({
        "modelValue": state.curSelectedYear,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return state.curSelectedYear = $event;
        },
        "size": state.controlSize
      }, controller.configData.value.year.selectProps, {
        "disabled": dateSelect.isYearSelectDisabled.value
      }), _isSlot$8(_slot = dateSelect.yearSelectOptionList.value.map(function(item) {
        return createVNode(Option, {
          "key": item.value,
          "value": item.value,
          "label": item.label,
          "disabled": item.disabled
        }, {
          "default": function _default65() {
            return [item.label];
          }
        });
      })) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      })]), dateSelect.isMonthSelectVisible.value && createVNode("div", {
        "class": cls.controlSectionCell.value
      }, [createVNode(Select, mergeProps({
        "modelValue": state.curSelectedMonth,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return state.curSelectedMonth = $event;
        },
        "size": state.controlSize
      }, controller.configData.value.month.selectProps, {
        "disabled": dateSelect.isMonthSelectDisabled.value
      }), _isSlot$8(_slot2 = dateSelect.monthSelectOptionList.value.map(function(item) {
        return createVNode(Option, {
          "key": item.value,
          "value": item.value,
          "label": item.label,
          "disabled": item.disabled
        }, {
          "default": function _default65() {
            return [item.label];
          }
        });
      })) ? _slot2 : {
        "default": function _default65() {
          return [_slot2];
        }
      })]), modeSelect.isVisible.value && createVNode("div", {
        "class": cls.controlSectionCell.value,
        "style": "height: auto"
      }, [createVNode(RadioGroup, mergeProps({
        "modelValue": state.curSelectedMode,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return state.curSelectedMode = $event;
        },
        "variant": "default-filled",
        "size": state.controlSize
      }, controller.configData.value.mode.radioGroupProps, {
        "disabled": modeSelect.isDisabled.value,
        "onChange": controller.emitControllerChange
      }), _isSlot$8(_slot3 = modeSelect.optionList.value.map(function(item) {
        return createVNode(RadioButton, {
          "key": item.value,
          "value": item.value
        }, {
          "default": function _default65() {
            return [item.label];
          }
        });
      })) ? _slot3 : {
        "default": function _default65() {
          return [_slot3];
        }
      })]), weekendBtn.isVisible.value && createVNode("div", {
        "class": cls.controlSectionCell.value
      }, [createVNode(CheckTag, mergeProps({
        "class": cls.controlTag.value,
        "theme": state.isShowWeekend ? "default" : "primary",
        "size": state.controlSize
      }, weekendBtn.vBind.value, {
        "disabled": weekendBtn.isDisabled.value,
        "onClick": function onClick2() {
          state.isShowWeekend = !state.isShowWeekend;
          controller.emitControllerChange();
        }
      }), {
        "default": function _default65() {
          return [weekendBtn.text.value];
        }
      })]), currentBtn.isVisible.value && createVNode("div", {
        "class": cls.controlSectionCell.value
      }, [createVNode(Button, mergeProps({
        "size": state.controlSize
      }, currentBtn.vBind.value, {
        "disabled": currentBtn.isDisabled.value,
        "onClick": function onClick2() {
          toCurrent();
        }
      }), {
        "default": function _default65() {
          return [currentBtn.text.value];
        }
      })])])]);
    };
    var cellClickEmit = function cellClickEmit2(eventPropsName, e, cellData) {
      if (typeof props2[eventPropsName] === "function") {
        var options = {
          cell: _objectSpread$x(_objectSpread$x({}, cellData), controller.options.value),
          e
        };
        props2[eventPropsName](options);
      }
    };
    var clickCell = function clickCell2(e, cellData) {
      state.curDate = dayjs(cellData.date);
      cellClickEmit("onCellClick", e, cellData);
    };
    var doubleClickCell = function doubleClickCell2(e, cellData) {
      cellClickEmit("onCellDoubleClick", e, cellData);
    };
    var rightClickCell = function rightClickCell2(e, cellData) {
      if (props2.preventCellContextmenu) {
        e.preventDefault();
      }
      cellClickEmit("onCellRightClick", e, cellData);
    };
    var monthCellsData = computed(function() {
      var daysArr = createMonthCellsData(state.curSelectedYear, state.curSelectedMonth, state.realFirstDayOfWeek, state.curDate, props2.format);
      return daysArr;
    });
    var renderMonthBody = function renderMonthBody2() {
      return createVNode("table", {
        "class": cls.table.value
      }, [createVNode("thead", {
        "class": cls.tableHead.value
      }, [createVNode("tr", {
        "class": cls.tableHeadRow.value
      }, [cellColHeaders.value.map(function(item, index2) {
        return checkDayVisibled(item.num) && createVNode("th", {
          "class": cls.tableHeadCell.value
        }, [Array.isArray(props2.week) ? props2.week[index2] : renderContent6("week", void 0, {
          defaultNode: createVNode("span", null, [item.display]),
          params: {
            day: item.num
          }
        })]);
      })])]), createVNode("tbody", {
        "class": cls.tableBody.value
      }, [monthCellsData.value.map(function(week, weekIndex) {
        return createVNode("tr", {
          "class": cls.tableBodyRow.value
        }, [week.map(function(item, itemIndex) {
          return (state.isShowWeekend || item.day < 6) && createVNode(CalendarCellItem, {
            "key": "d-".concat(weekIndex, "-").concat(itemIndex),
            "item": item,
            "theme": props2.theme,
            "t": t,
            "global": global2.value,
            "cell": props2.cell,
            "fillWithZero": props2.fillWithZero,
            "onClick": function onClick2(e) {
              return clickCell(e, item);
            },
            "onDblclick": function onDblclick(e) {
              return doubleClickCell(e, item);
            },
            "onRightclick": function onRightclick(e) {
              return rightClickCell(e, item);
            }
          }, _objectSpread$x({}, slots));
        })]);
      })])]);
    };
    var yearCellsData = computed(function() {
      var re = [];
      var monthsArr = createYearCellsData(state.curSelectedYear, state.curDate, props2.format);
      var rowCount = Math.ceil(monthsArr.length / DEFAULT_YEAR_CELL_NUMINROW);
      var index2 = 0;
      for (var i = 1; i <= rowCount; i++) {
        var row = [];
        for (var j = 1; j <= DEFAULT_YEAR_CELL_NUMINROW; j++) {
          row.push(monthsArr[index2]);
          index2 += 1;
        }
        re.push(row);
      }
      return re;
    });
    var renderYearBody = function renderYearBody2() {
      return createVNode("table", {
        "class": cls.table.value
      }, [createVNode("tbody", {
        "class": cls.tableBody.value
      }, [yearCellsData.value.map(function(cell, cellIndex) {
        return createVNode("tr", {
          "class": cls.tableBodyRow.value
        }, [cell.map(function(item, itemIndex) {
          return createVNode(CalendarCellItem, {
            "key": "m-".concat(cellIndex, "-").concat(itemIndex),
            "item": item,
            "theme": props2.theme,
            "t": t,
            "global": global2.value,
            "cell": props2.cell,
            "fillWithZero": props2.fillWithZero,
            "onClick": function onClick2(e) {
              return clickCell(e, item);
            },
            "onDblclick": function onDblclick(e) {
              return doubleClickCell(e, item);
            },
            "onRightclick": function onRightclick(e) {
              return rightClickCell(e, item);
            }
          }, _objectSpread$x({}, slots));
        })]);
      })])]);
    };
    return function() {
      return createVNode("div", {
        "class": cls.body.value
      }, [controller.visible.value && renderControl(), createVNode("div", {
        "class": cls.panel.value
      }, [state.curSelectedMode === "month" ? renderMonthBody() : renderYearBody()])]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Calendar = withInstall(_Calendar);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$e = {
  actions: {
    type: [String, Function]
  },
  avatar: {
    type: [String, Function]
  },
  bordered: {
    type: Boolean,
    "default": true
  },
  content: {
    type: [String, Function]
  },
  cover: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  description: {
    type: [String, Function]
  },
  footer: {
    type: [String, Function]
  },
  header: {
    type: [String, Function]
  },
  headerBordered: Boolean,
  hoverShadow: Boolean,
  loading: {
    type: [Boolean, Function],
    "default": false
  },
  shadow: Boolean,
  size: {
    type: String,
    "default": "medium",
    validator: function validator95(val) {
      if (!val)
        return true;
      return ["medium", "small"].includes(val);
    }
  },
  status: {
    type: String,
    "default": ""
  },
  subtitle: {
    type: [String, Function]
  },
  theme: {
    type: String,
    "default": "normal",
    validator: function validator96(val) {
      if (!val)
        return true;
      return ["normal", "poster1", "poster2"].includes(val);
    }
  },
  title: {
    type: [String, Function]
  }
};
var index$g = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Card = defineComponent({
  name: "TCard",
  props: props$e,
  setup: function setup102(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX3 = useTNodeJSX();
    var COMPONENT_NAME2 = usePrefixClass("card");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
    var baseCls = computed(function() {
      var defaultClass = [COMPONENT_NAME2.value];
      if (props2.size === "small")
        defaultClass.push("".concat(SIZE.value[props2.size]));
      if (props2.bordered)
        defaultClass.push("".concat(COMPONENT_NAME2.value, "--bordered"));
      if (props2.shadow)
        defaultClass.push("".concat(COMPONENT_NAME2.value, "--shadow"));
      if (props2.hoverShadow)
        defaultClass.push("".concat(COMPONENT_NAME2.value, "--shadow-hover"));
      return defaultClass;
    });
    var headerCls = computed(function() {
      var defaultClass = ["".concat(COMPONENT_NAME2.value, "__header")];
      return props2.headerBordered ? defaultClass.concat("".concat(COMPONENT_NAME2.value, "__title--bordered")) : ["".concat(COMPONENT_NAME2.value, "__header")];
    });
    var headerWrapperCls = usePrefixClass("card__header-wrapper");
    var headerAvatarCls = usePrefixClass("card__avatar");
    var headerTitleCls = usePrefixClass("card__title");
    var headerSubTitleCls = usePrefixClass("card__subtitle");
    var headerDescriptionCls = usePrefixClass("card__description");
    var actionsCls = usePrefixClass("card__actions");
    var bodyCls = usePrefixClass("card__body");
    var coverCls = usePrefixClass("card__cover");
    var footerCls = usePrefixClass("card__footer");
    var footerWrapperCls = usePrefixClass("card__footer-wrapper");
    var isPoster2 = computed(function() {
      return props2.theme === "poster2";
    });
    var showTitle = computed(function() {
      return props2.title || slots.title;
    });
    var showHeader = computed(function() {
      return props2.header || slots.header;
    });
    var showSubtitle = computed(function() {
      return props2.subtitle || slots.subtitle;
    });
    var showAvatar = computed(function() {
      return props2.avatar || slots.avatar;
    });
    var showDescription = computed(function() {
      return props2.description || slots.description;
    });
    var showStatus = computed(function() {
      return props2.status || slots.status;
    });
    var showActions = computed(function() {
      return props2.actions || slots.actions;
    });
    var showFooter = computed(function() {
      return props2.footer || slots.footer;
    });
    var showCover = computed(function() {
      return props2.cover || slots.cover;
    });
    var showLoading2 = computed(function() {
      return props2.loading || slots.loading;
    });
    var showContent = computed(function() {
      return props2.content || slots.content || props2["default"] || slots["default"];
    });
    var isHeaderRender = computed(function() {
      return showHeader.value || showTitle.value || showSubtitle.value || showDescription.value || showDescription.value || showAvatar.value || showStatus.value && isPoster2.value || showActions.value && !isPoster2.value;
    });
    var isFooterRender = computed(function() {
      return showFooter.value || showActions.value && isPoster2.value;
    });
    if (showLoading2.value) {
      return renderTNodeJSX3("loading") || createVNode(Loading, null, {
        "default": function _default65() {
          return [createVNode("div", {
            "class": baseCls.value
          }, null)];
        }
      });
    }
    var renderHeader = function renderHeader2() {
      if (showHeader.value)
        return createVNode("div", {
          "class": headerCls.value
        }, [renderTNodeJSX3("header")]);
      return createVNode("div", {
        "class": headerCls.value
      }, [createVNode("div", {
        "class": headerWrapperCls.value
      }, [showAvatar.value && createVNode("div", {
        "class": headerAvatarCls.value
      }, [renderTNodeJSX3("avatar")]), createVNode("div", null, [showTitle.value && createVNode("span", {
        "class": headerTitleCls.value
      }, [renderTNodeJSX3("title")]), showSubtitle.value && createVNode("span", {
        "class": headerSubTitleCls.value
      }, [renderTNodeJSX3("subtitle")]), showDescription.value && createVNode("p", {
        "class": headerDescriptionCls.value
      }, [renderTNodeJSX3("description")])])]), showActions.value && !isPoster2.value && createVNode("div", {
        "class": actionsCls.value
      }, [renderTNodeJSX3("actions")]), showStatus.value && createVNode("div", {
        "class": actionsCls.value
      }, [renderTNodeJSX3("status")])]);
    };
    var renderCover = function renderCover2() {
      var textCover = typeof props2.cover === "string";
      return createVNode("div", {
        "class": coverCls.value
      }, [textCover ? createVNode("img", {
        "src": props2.cover
      }, null) : renderTNodeJSX3("cover")]);
    };
    return function() {
      return createVNode("div", {
        "class": baseCls.value
      }, [isHeaderRender.value ? renderHeader() : null, showCover.value ? renderCover() : null, showContent.value && createVNode("div", {
        "class": bodyCls.value
      }, [renderTNodeJSX3("default") || renderTNodeJSX3("content")]), isFooterRender.value && createVNode("div", {
        "class": footerCls.value
      }, [createVNode("div", {
        "class": footerWrapperCls.value
      }, [renderTNodeJSX3("footer")]), showActions.value && isPoster2.value && createVNode("div", {
        "class": actionsCls.value
      }, [renderTNodeJSX3("actions")])])]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Card = withInstall(_Card);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$d = {
  actions: {
    type: Array
  },
  author: {
    type: [String, Function]
  },
  avatar: {
    type: [String, Object, Function]
  },
  content: {
    type: [String, Function]
  },
  datetime: {
    type: [String, Function]
  },
  quote: {
    type: [String, Function]
  },
  reply: {
    type: [String, Function]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Comment = defineComponent({
  name: "TComment",
  props: props$d,
  slots: ["avatar", "reply", "author", "datetime", "content", "quote", "actions"],
  setup: function setup103() {
    var COMPONENT_NAME2 = usePrefixClass("comment");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  render: function render80() {
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var reply = renderTNodeJSX(this, "reply");
    var author = renderTNodeJSX(this, "author");
    var datetime = renderTNodeJSX(this, "datetime");
    var quote = renderTNodeJSX(this, "quote");
    var actions = renderTNodeJSX(this, "actions");
    var content = renderTNodeJSX(this, "content");
    var avatar = renderTNodeJSX(this, "avatar");
    var showAuthorDatetime = computed(function() {
      return author || datetime;
    });
    var replyDom = reply ? createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__reply")
    }, [reply]) : null;
    var quoteDom = quote ? createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__quote")
    }, [quote]) : null;
    var avatarDom = avatar ? createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__avatar")
    }, [typeof avatar === "string" ? createVNode("img", {
      "src": avatar,
      "alt": "",
      "class": "".concat(COMPONENT_NAME2, "__avatar-image")
    }, null) : avatar]) : null;
    var authorDatetimeDom = showAuthorDatetime.value && createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__author")
    }, [author && createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "__name")
    }, [author]), datetime && createVNode("span", {
      "class": "".concat(COMPONENT_NAME2, "__time")
    }, [datetime])]);
    var renderActions = function renderActions2() {
      if (!actions || !actions.length)
        return null;
      return createVNode("ul", {
        "class": "".concat(COMPONENT_NAME2, "__actions")
      }, [(Array.isArray(actions) ? actions : [actions]).map(function(action, index2) {
        return createVNode("li", {
          "key": "action-".concat(index2)
        }, [action]);
      })]);
    };
    var contentDom = createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__content")
    }, [authorDatetimeDom, createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__detail")
    }, [content]), quoteDom, renderActions()]);
    return createVNode("div", {
      "class": COMPONENT_NAME2
    }, [createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__inner")
    }, [avatarDom, contentDom]), replyDom]);
  }
});
var index$f = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Comment = withInstall(_Comment);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$c = {
  asyncLoading: {
    type: [String, Function]
  },
  footer: {
    type: [String, Function]
  },
  header: {
    type: [String, Function]
  },
  layout: {
    type: String,
    "default": "horizontal",
    validator: function validator97(val) {
      return ["horizontal", "vertical"].includes(val);
    }
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator98(val) {
      return ["small", "medium", "large"].includes(val);
    }
  },
  split: Boolean,
  stripe: Boolean,
  onLoadMore: Function,
  onScroll: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var LOAD_MORE = "load-more";
var LOADING = "loading";
var index$e = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$x(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$w(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$x(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _List = defineComponent({
  name: "TList",
  props: _objectSpread$w({}, props$c),
  setup: function setup104(props2) {
    var _useConfig = useConfig("list"), global2 = _useConfig.global;
    var COMPONENT_NAME2 = usePrefixClass("list");
    var renderTNodeJSX3 = useTNodeJSX();
    var listClass = computed(function() {
      var _ref;
      return ["".concat(COMPONENT_NAME2.value), ClASSNAMES.SIZE[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--split"), props2.split), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--stripe"), props2.stripe), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--vertical-action"), props2.layout === "vertical"), _ref)];
    });
    var renderContent6 = function renderContent7() {
      var propsHeaderContent = renderTNodeJSX3("header");
      var propsFooterContent = renderTNodeJSX3("footer");
      return [propsHeaderContent && createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__header")
      }, [propsHeaderContent]), createVNode("ul", {
        "class": "".concat(COMPONENT_NAME2.value, "__inner")
      }, [renderTNodeJSX3("default")]), propsFooterContent && createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__footer")
      }, [propsFooterContent])];
    };
    var handleScroll3 = function handleScroll4(e) {
      var _props2$onScroll;
      var listElement = e.target;
      var scrollTop = listElement.scrollTop, scrollHeight = listElement.scrollHeight, clientHeight = listElement.clientHeight;
      (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, {
        e,
        scrollTop,
        scrollBottom: scrollHeight - clientHeight - scrollTop
      });
    };
    var loadingClass = computed(function() {
      return typeof props2.asyncLoading === "string" && ["loading", "load-more"].includes(props2.asyncLoading) ? "".concat(COMPONENT_NAME2.value, "__load ").concat(COMPONENT_NAME2.value, "__load--").concat(props2.asyncLoading) : "".concat(COMPONENT_NAME2.value, "__load");
    });
    var renderLoading = function renderLoading2() {
      if (props2.asyncLoading && typeof props2.asyncLoading === "string") {
        if (props2.asyncLoading === LOADING) {
          return createVNode("div", null, [createVNode(Loading, null, null), createVNode("span", null, [global2.value.loadingText])]);
        }
        if (props2.asyncLoading === LOAD_MORE) {
          return createVNode("span", null, [global2.value.loadingMoreText]);
        }
      }
      return renderTNodeJSX3("asyncLoading");
    };
    var handleLoadMore = function handleLoadMore2(e) {
      var _props2$onLoadMore;
      if (typeof props2.asyncLoading === "string" && props2.asyncLoading !== LOAD_MORE)
        return;
      (_props2$onLoadMore = props2.onLoadMore) === null || _props2$onLoadMore === void 0 ? void 0 : _props2$onLoadMore.call(props2, {
        e
      });
    };
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      listClass,
      loadingClass,
      renderLoading,
      renderContent: renderContent6,
      handleScroll: handleScroll3,
      handleLoadMore
    };
  },
  render: function render81() {
    var listContent = this.renderContent();
    listContent = [listContent, createVNode("div", {
      "class": this.loadingClass,
      "onClick": this.handleLoadMore
    }, [this.renderLoading()])];
    return createVNode("div", {
      "class": this.listClass,
      "onScroll": this.handleScroll
    }, [listContent]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _ListItem = defineComponent({
  name: "TListItem",
  props: props$c,
  setup: function setup105() {
    var COMPONENT_NAME2 = usePrefixClass("list-item");
    return {
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  render: function render82() {
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var propsDefaultContent = renderTNodeJSX(this, "default");
    var propsContent = renderTNodeJSX(this, "content");
    var propsActionContent = renderTNodeJSX(this, "action");
    return createVNode("li", {
      "class": COMPONENT_NAME2
    }, [createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "-main")
    }, [propsDefaultContent || propsContent, propsActionContent && createVNode("li", {
      "class": "".concat(COMPONENT_NAME2, "__action")
    }, [propsActionContent])])]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$b = {
  avatar: {
    type: [String, Function]
  },
  description: {
    type: [String, Function]
  },
  image: {
    type: [String, Function]
  },
  title: {
    type: [String, Function]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _ListItemMeta = defineComponent({
  name: "TListItemMeta",
  props: props$b,
  setup: function setup106(props2, ctx) {
    var COMPONENT_NAME2 = usePrefixClass("list-item__meta");
    var renderAvatar = function renderAvatar2(context) {
      if (props2.avatar || ctx.slots.avatar) {
        console.warn("`avatar` is going to be deprecated, please use `image` instead");
      }
      var thumbnail = renderContent(context, "avatar", "image");
      if (!thumbnail)
        return;
      if (typeof thumbnail === "string") {
        return createVNode("div", {
          "class": "".concat(COMPONENT_NAME2.value, "-avatar")
        }, [createVNode("img", {
          "src": thumbnail
        }, null)]);
      }
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "-avatar")
      }, [thumbnail]);
    };
    return {
      renderAvatar,
      COMPONENT_NAME: COMPONENT_NAME2
    };
  },
  render: function render83() {
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var propsTitleContent = renderTNodeJSX(this, "title");
    var propsDescriptionContent = renderTNodeJSX(this, "description");
    var listItemMetaContent = [this.renderAvatar(this), createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "-content")
    }, [propsTitleContent && createVNode("h3", {
      "class": "".concat(COMPONENT_NAME2, "-title")
    }, [propsTitleContent]), propsDescriptionContent && createVNode("p", {
      "class": "".concat(COMPONENT_NAME2, "-description")
    }, [propsDescriptionContent])])];
    return createVNode("div", {
      "class": COMPONENT_NAME2
    }, [listItemMetaContent]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var List = withInstall(_List);
var ListItem = withInstall(_ListItem);
var ListItemMeta = withInstall(_ListItemMeta);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var PRO_THEME = {
  LINE: "line",
  PLUMP: "plump",
  CIRCLE: "circle"
};
var CIRCLE_SIZE = {
  SMALL: "small",
  MEDIUM: "medium",
  LARGE: "large"
};
var CIRCLE_SIZE_PX = {
  SMALL: 72,
  MEDIUM: 112,
  LARGE: 160
};
var CIRCLE_FONT_SIZE_RATIO = {
  SMALL: 14 / CIRCLE_SIZE_PX.SMALL,
  MEDIUM: 20 / CIRCLE_SIZE_PX.MEDIUM,
  LARGE: 36 / CIRCLE_SIZE_PX.LARGE
};
var STATUS_ICON = ["success", "error", "warning"];
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$a = {
  color: {
    type: [String, Object, Array],
    "default": ""
  },
  label: {
    type: [String, Boolean, Function],
    "default": true
  },
  percentage: {
    type: Number,
    "default": 0
  },
  size: {
    type: [String, Number],
    "default": "medium"
  },
  status: {
    type: String,
    validator: function validator99(val) {
      return ["success", "error", "warning", "active"].includes(val);
    }
  },
  strokeWidth: {
    type: [String, Number]
  },
  theme: {
    type: String,
    "default": "line",
    validator: function validator100(val) {
      return ["line", "plump", "circle"].includes(val);
    }
  },
  trackColor: {
    type: String,
    "default": ""
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Progress = defineComponent({
  name: "TProgress",
  props: props$a,
  setup: function setup107(props2) {
    var renderTNodeJSX3 = useTNodeJSX();
    var COMPONENT_NAME2 = usePrefixClass("progress");
    var statusStyle = computed(function() {
      if (props2.percentage >= 100) {
        return "success";
      }
      return props2.status;
    });
    var trackBgStyle = computed(function() {
      var height = typeof props2.strokeWidth === "string" ? props2.strokeWidth : "".concat(props2.strokeWidth, "px");
      return {
        height,
        backgroundColor: props2.trackColor,
        borderRadius: height
      };
    });
    var barStyle = computed(function() {
      return {
        width: "".concat(props2.percentage, "%"),
        background: props2.color && getBackgroundColor(props2.color)
      };
    });
    var circlePathStyle = computed(function() {
      var strokeColor = _typeof$1(props2.color) === "object" ? "" : props2.color;
      return {
        stroke: strokeColor
      };
    });
    var diameter = computed(function() {
      var diameter2 = CIRCLE_SIZE_PX.MEDIUM;
      if (!props2.size) {
        return diameter2;
      }
      var SMALL = CIRCLE_SIZE.SMALL, LARGE = CIRCLE_SIZE.LARGE, MEDIUM = CIRCLE_SIZE.MEDIUM;
      switch (props2.size) {
        case SMALL:
          diameter2 = CIRCLE_SIZE_PX.SMALL;
          break;
        case MEDIUM:
          diameter2 = CIRCLE_SIZE_PX.MEDIUM;
          break;
        case LARGE:
          diameter2 = CIRCLE_SIZE_PX.LARGE;
          break;
        default:
          diameter2 = Number(props2.size);
          break;
      }
      return diameter2;
    });
    var rPoints = computed(function() {
      return diameter.value / 2;
    });
    var radius = computed(function() {
      return rPoints.value - circleStrokeWidth.value / 2;
    });
    var circleStyle = computed(function() {
      if (props2.theme !== PRO_THEME.CIRCLE) {
        return {};
      }
      var fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.MEDIUM;
      if (diameter.value <= CIRCLE_SIZE_PX.SMALL) {
        fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.SMALL;
      } else if (diameter.value >= CIRCLE_SIZE_PX.LARGE) {
        fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.LARGE;
      }
      return {
        width: "".concat(diameter.value, "px"),
        height: "".concat(diameter.value, "px"),
        fontSize: "".concat(fontSize, "px")
      };
    });
    var circleStrokeWidth = computed(function() {
      var defaultWidth = props2.size === CIRCLE_SIZE.SMALL ? 4 : 6;
      return props2.strokeWidth ? Number(props2.strokeWidth) : defaultWidth;
    });
    var strokeDashArr = computed(function() {
      var radius2 = diameter.value / 2;
      var perimeter = Math.PI * 2 * radius2;
      var percent = props2.percentage / 100;
      return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
    });
    var getIconMap = function getIconMap2() {
      var CIRCLE_ICONS = {
        success: check,
        warning: error,
        error: close
      };
      var NORMAL_ICONS = {
        success: checkCircleFilled,
        warning: errorCircleFilled,
        error: closeCircleFilled
      };
      return props2.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
    };
    var getLabelContent2 = function getLabelContent3() {
      var labelContent = "".concat(props2.percentage, "%");
      var status = props2.status || "";
      if (STATUS_ICON.includes(status) && props2.theme !== PRO_THEME.PLUMP) {
        var components2 = getIconMap();
        var component = components2[status];
        if (component) {
          labelContent = createVNode(component, {
            "class": ["".concat(COMPONENT_NAME2.value, "__icon")]
          }, null);
        }
      }
      return labelContent;
    };
    return function() {
      var labelContent = createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__info")
      }, [renderTNodeJSX3("label", getLabelContent2())]);
      var PLUMP_SEPARATE = 10;
      var separateClasses = props2.percentage > PLUMP_SEPARATE ? "".concat(COMPONENT_NAME2.value, "--over-ten") : "".concat(COMPONENT_NAME2.value, "--under-ten");
      return createVNode("div", {
        "class": COMPONENT_NAME2.value
      }, [props2.theme === PRO_THEME.LINE && createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "--thin ").concat(COMPONENT_NAME2.value, "--status--").concat(statusStyle.value)
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__bar"),
        "style": trackBgStyle.value
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__inner"),
        "style": barStyle.value
      }, null)]), labelContent]), props2.theme === PRO_THEME.PLUMP && createVNode("div", {
        "class": ["".concat(COMPONENT_NAME2.value, "__bar ").concat(COMPONENT_NAME2.value, "--plump ").concat(separateClasses), _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--status--").concat(statusStyle.value), statusStyle.value)],
        "style": trackBgStyle.value
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__inner"),
        "style": barStyle.value
      }, [props2.percentage > PLUMP_SEPARATE && labelContent]), props2.percentage <= PLUMP_SEPARATE && labelContent]), props2.theme === PRO_THEME.CIRCLE && createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "--circle ").concat(COMPONENT_NAME2.value, "--status--").concat(statusStyle.value),
        "style": circleStyle.value
      }, [labelContent, createVNode("svg", {
        "width": diameter.value,
        "height": diameter.value,
        "viewBox": "0 0 ".concat(diameter.value, " ").concat(diameter.value)
      }, [createVNode("circle", {
        "cx": rPoints.value,
        "cy": rPoints.value,
        "r": radius.value,
        "stroke-width": circleStrokeWidth.value,
        "stroke": props2.trackColor,
        "fill": "none",
        "class": ["".concat(COMPONENT_NAME2.value, "__circle-outer")]
      }, null), props2.percentage > 0 && createVNode("circle", {
        "cx": rPoints.value,
        "cy": rPoints.value,
        "r": radius.value,
        "stroke-width": circleStrokeWidth.value,
        "fill": "none",
        "stroke-linecap": "round",
        "class": ["".concat(COMPONENT_NAME2.value, "__circle-inner")],
        "transform": "matrix(0,-1,1,0,0,".concat(diameter.value, ")"),
        "stroke-dasharray": strokeDashArr.value,
        "style": circlePathStyle.value
      }, null)])])]);
    };
  }
});
var index$d = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Progress = withInstall(_Progress);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$9 = {
  animation: {
    type: String,
    validator: function validator101(val) {
      return ["gradient", "flashed"].includes(val);
    }
  },
  loading: {
    type: Boolean,
    "default": true
  },
  rowCol: {
    type: Array
  },
  theme: {
    type: String,
    validator: function validator102(val) {
      return ["text", "avatar", "paragraph", "avatar-text", "tab", "article"].includes(val);
    }
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$w(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$v(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$w(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var ThemeMap = {
  text: [1],
  avatar: [{
    type: "circle",
    size: "56px"
  }],
  paragraph: [1, 1, {
    width: "70%"
  }],
  "avatar-text": [[{
    type: "circle"
  }, {
    type: "text",
    height: "32px"
  }]],
  tab: [{
    height: "30px"
  }, {
    height: "200px"
  }],
  article: [{
    type: "rect",
    height: "30px",
    width: "100%"
  }, {
    type: "rect",
    height: "200px",
    width: "100%"
  }, [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }], [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }], [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }], [{
    type: "text",
    height: "30px"
  }, {
    type: "text",
    height: "30px"
  }]]
};
var getColItemStyle = function getColItemStyle2(obj) {
  var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
  var style = /* @__PURE__ */ Object.create(null);
  styleName.forEach(function(name2) {
    if (name2 in obj) {
      var px = isNumber_1(obj[name2]) ? "".concat(obj[name2], "px") : obj[name2];
      if (name2 === "size") {
        var _ref = [px, px];
        style.width = _ref[0];
        style.height = _ref[1];
      } else {
        style[name2] = px;
      }
    }
  });
  return style;
};
var _Skeleton = defineComponent({
  name: "TSkeleton",
  props: _objectSpread$v({}, props$9),
  setup: function setup108(props2) {
    var COMPONENT_NAME2 = usePrefixClass("skeleton");
    var getColItemClass = function getColItemClass2(obj) {
      return ["".concat(COMPONENT_NAME2.value, "__col"), "".concat(COMPONENT_NAME2.value, "--type-").concat(obj.type || "text"), _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--animation-").concat(props2.animation), props2.animation)];
    };
    var renderCols = function renderCols2(_cols) {
      var cols2 = [];
      if (Array.isArray(_cols)) {
        cols2 = _cols;
      } else if (isNumber_1(_cols)) {
        cols2 = new Array(_cols).fill({
          type: "text"
        });
      } else {
        cols2 = [_cols];
      }
      return cols2.map(function(obj) {
        return createVNode("div", {
          "class": getColItemClass(obj),
          "style": getColItemStyle(obj)
        }, [isFunction_1(obj.content) ? obj.content(h) : obj.content]);
      });
    };
    var renderRowCol = function renderRowCol2(_rowCol) {
      var rowCol = _rowCol || props2.rowCol;
      var getBlockClass = function getBlockClass2() {
        return ["".concat(COMPONENT_NAME2.value, "__row")];
      };
      return rowCol.map(function(item) {
        return createVNode("div", {
          "class": getBlockClass()
        }, [renderCols(item)]);
      });
    };
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      renderRowCol
    };
  },
  render: function render84() {
    var content = renderContent(this, "default", "content");
    if (this.$slots["default"] && !this.loading) {
      return createVNode("div", null, [content]);
    }
    if (!this.loading) {
      return;
    }
    var children = [];
    if (this.theme) {
      children.push(this.renderRowCol(ThemeMap[this.theme]));
    }
    if (this.rowCol) {
      children.push(this.renderRowCol(this.rowCol));
    }
    if (!this.theme && !this.rowCol) {
      children.push(this.renderRowCol([1, 1, 1, {
        width: "70%"
      }]));
    }
    return createVNode("div", {
      "class": this.COMPONENT_NAME
    }, [children]);
  }
});
var index$c = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Skeleton = withInstall(_Skeleton);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$8 = {
  animation: {
    type: String,
    "default": "slide",
    validator: function validator103(val) {
      return ["slide"].includes(val);
    }
  },
  autoplay: {
    type: Boolean,
    "default": true
  },
  current: {
    type: Number
  },
  defaultCurrent: {
    type: Number
  },
  direction: {
    type: String,
    "default": "horizontal",
    validator: function validator104(val) {
      return ["horizontal", "vertical"].includes(val);
    }
  },
  duration: {
    type: Number,
    "default": 300
  },
  interval: {
    type: Number,
    "default": 5e3
  },
  onChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useChildComponentSlots(childComponentName, slots) {
  var _slots;
  if (!slots) {
    slots = getCurrentInstance().slots;
  }
  var content = (_slots = slots) === null || _slots === void 0 ? void 0 : _slots["default"]();
  return content.map(function(item) {
    if (item.children && Array.isArray(item.children))
      return item.children;
    return item;
  }).flat().filter(function(item) {
    return item.type.name === childComponentName;
  });
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$v(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$u(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$v(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Swiper = defineComponent({
  name: "TSwiper",
  components: {},
  props: _objectSpread$u({}, props$8),
  setup: function setup109() {
    var items = computed(function() {
      return useChildComponentSlots("TSwiperItem");
    });
    var COMPONENT_NAME2 = usePrefixClass("swiper");
    var classPrefix2 = usePrefixClass();
    return {
      classPrefix: classPrefix2,
      COMPONENT_NAME: COMPONENT_NAME2,
      items
    };
  },
  data: function data25() {
    return {
      visible: true,
      index: 0,
      timeoutHandler: null
    };
  },
  watch: {
    interval: {
      handler: function handler14() {
        this.swiperTo(this.index);
      },
      immediate: true
    }
  },
  methods: {
    renderContent: function renderContent5() {
      var wraperStyles = {};
      if (this.direction === "vertical") {
        wraperStyles = {
          height: "".concat(this.items.length * 100, "%"),
          transform: "translate3d(0,".concat(-this.index * 100 / this.items.length, "%,0)"),
          transition: "transform ".concat(this.duration / 1e3, "s")
        };
      } else {
        wraperStyles = {
          width: "".concat(this.items.length * 100, "%"),
          transform: "translate3d(".concat(-this.index * 100 / this.items.length, "%,0,0)"),
          transition: "transform ".concat(this.duration / 1e3, "s")
        };
      }
      return createVNode("div", {
        "class": "".concat(this.COMPONENT_NAME, "__content")
      }, [createVNode("div", {
        "class": "".concat(this.COMPONENT_NAME, "__swiper-wrap--").concat(this.direction),
        "style": wraperStyles
      }, [this.items])]);
    },
    renderTrigger: function renderTrigger() {
      var _this = this;
      var index2 = this.index % this.items.length;
      return createVNode("ul", {
        "class": "t-swiper__trigger-wrap"
      }, [this.items.map(function(_, i) {
        return createVNode("li", {
          "class": i === index2 ? "t-swiper__trigger--active" : "",
          "onclick": function onclick() {
            return _this.swiperTo(i);
          }
        }, null);
      })]);
    },
    swiperToNext: function swiperToNext() {
      this.swiperTo(this.index + 1);
    },
    swiperTo: function swiperTo(index2) {
      var _this2 = this;
      var findIndex2 = this.items.length === 0 ? 0 : index2 % this.items.length;
      if (this.timeoutHandler) {
        this.clearTimer();
      }
      this.index = findIndex2;
      if (this.interval > 0) {
        this.timeoutHandler = setTimeout(function() {
          _this2.swiperToNext();
        }, this.interval);
      }
    },
    setTimer: function setTimer() {
      var _this3 = this;
      if (this.interval > 0) {
        this.timeoutHandler = Number(setTimeout(function() {
          _this3.clearTimer();
          _this3.swiperToNext();
        }, this.interval));
      }
    },
    clearTimer: function clearTimer() {
      clearTimeout(this.timeoutHandler);
      this.timeoutHandler = null;
    }
  },
  render: function render85() {
    var swiperClass = ["".concat(this.COMPONENT_NAME), _defineProperty$3({}, "".concat(this.classPrefix, "-is-hidden"), !this.visible)];
    return createVNode("div", {
      "class": swiperClass,
      "onMouseenter": this.clearTimer,
      "onMouseleave": this.setTimer
    }, [this.renderContent(), this.renderTrigger()]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _SwiperItem = defineComponent({
  name: "TSwiperItem",
  render: function render86() {
    var defaultSlot = this.$slots["default"];
    return createVNode("div", null, [defaultSlot && defaultSlot()]);
  }
});
var index$b = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Swiper = withInstall(_Swiper);
var SwiperItem = withInstall(_SwiperItem);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var baseTableProps = {
  bordered: Boolean,
  bottomContent: {
    type: [String, Function]
  },
  columns: {
    type: Array,
    "default": function _default54() {
      return [];
    }
  },
  data: {
    type: Array,
    "default": function _default55() {
      return [];
    }
  },
  disableDataPage: Boolean,
  empty: {
    type: [String, Function],
    "default": ""
  },
  firstFullRow: {
    type: [String, Function]
  },
  fixedRows: {
    type: Array
  },
  footData: {
    type: Array,
    "default": function _default56() {
      return [];
    }
  },
  headerAffixedTop: Boolean,
  headerAffixProps: {
    type: Object
  },
  height: {
    type: [String, Number]
  },
  hover: Boolean,
  lastFullRow: {
    type: [String, Function]
  },
  loading: {
    type: [Boolean, Function],
    "default": false
  },
  loadingProps: {
    type: Object
  },
  maxHeight: {
    type: [String, Number]
  },
  pagination: {
    type: Object
  },
  rowAttributes: {
    type: [Object, Array, Function]
  },
  rowClassName: {
    type: [String, Object, Array, Function]
  },
  rowKey: {
    type: String,
    "default": "",
    required: true
  },
  rowspanAndColspan: {
    type: Function
  },
  scroll: {
    type: Object
  },
  size: {
    type: String,
    "default": "medium",
    validator: function validator105(val) {
      if (!val)
        return true;
      return ["small", "medium", "large"].includes(val);
    }
  },
  stripe: Boolean,
  tableContentWidth: {
    type: String,
    "default": ""
  },
  tableLayout: {
    type: String,
    "default": "fixed",
    validator: function validator106(val) {
      if (!val)
        return true;
      return ["auto", "fixed"].includes(val);
    }
  },
  topContent: {
    type: [String, Function]
  },
  verticalAlign: {
    type: String,
    "default": "middle",
    validator: function validator107(val) {
      if (!val)
        return true;
      return ["top", "middle", "bottom"].includes(val);
    }
  },
  onCellClick: Function,
  onPageChange: Function,
  onRowClick: Function,
  onRowDblclick: Function,
  onRowMousedown: Function,
  onRowMouseenter: Function,
  onRowMouseleave: Function,
  onRowMouseover: Function,
  onRowMouseup: Function,
  onScroll: Function,
  onScrollX: Function,
  onScrollY: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getNodeDepth(columns, depthMap) {
  var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  var maxDepth = depth;
  for (var i = 0, len2 = columns.length; i < len2; i++) {
    var _col$children;
    var col = columns[i];
    depthMap.set(col, depth);
    if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      var deep = getNodeDepth(col.children, depthMap, depth + 1);
      if (deep > maxDepth) {
        maxDepth = deep;
      }
    }
  }
  return maxDepth;
}
function getChildrenNodeWidth(node) {
  var count = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var countNew = count;
  var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];
  for (var i = 0, len2 = childrenList.length; i < len2; i++) {
    var item = childrenList[i];
    if (item.children) {
      countNew = getChildrenNodeWidth(item, countNew);
    } else {
      countNew += 1;
    }
  }
  return countNew;
}
function getThRowspanAndColspan(columns) {
  var depthMap = /* @__PURE__ */ new Map();
  var columnsDepth = getNodeDepth(columns, depthMap);
  var rowspanAndColspanMap = /* @__PURE__ */ new Map();
  var loop = function loop2(nodes, leafColumns2) {
    for (var i = 0, len2 = nodes.length; i < len2; i++) {
      var _col$children2;
      var col = nodes[i];
      var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
      var colspan = col.children ? getChildrenNodeWidth(col) : 1;
      var span = {};
      rowspan > 1 && (span.rowspan = rowspan);
      colspan > 1 && (span.colspan = colspan);
      rowspanAndColspanMap.set(col, span);
      if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
        loop2(col.children, leafColumns2);
      } else {
        leafColumns2.push(col);
      }
    }
  };
  var leafColumns = [];
  loop(columns, leafColumns);
  return {
    rowspanAndColspanMap,
    leafColumns
  };
}
function getThList(columns) {
  var loop = function loop2(nodes, thRows) {
    var _children;
    var thRowData = [];
    var children = [];
    for (var i = 0, len2 = nodes.length; i < len2; i++) {
      var _node$children;
      var node = nodes[i];
      var thList = [node];
      thRowData = thRowData.concat(thList);
      if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
        children = children.concat(node.children);
      }
    }
    if ((_children = children) !== null && _children !== void 0 && _children.length) {
      loop2(children, thRows);
    }
    thRows.push(thRowData);
    return thRowData;
  };
  var list = [];
  loop(columns, list);
  list = list.reverse();
  return list;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useClassName() {
  var classPrefix2 = usePrefixClass();
  var classNames2 = {
    classPrefix: classPrefix2,
    tableBaseClass: {
      table: "".concat(classPrefix2.value, "-table"),
      body: "".concat(classPrefix2.value, "-table__body"),
      overflowVisible: "".concat(classPrefix2.value, "-table--overflow-visible"),
      content: "".concat(classPrefix2.value, "-table__content"),
      topContent: "".concat(classPrefix2.value, "-table__top-content"),
      bottomContent: "".concat(classPrefix2.value, "-table__bottom-content"),
      tdLastRow: "".concat(classPrefix2.value, "-table__td-last-row"),
      tdFirstCol: "".concat(classPrefix2.value, "-table__td-first-col"),
      thCellInner: "".concat(classPrefix2.value, "-table__th-cell-inner"),
      bordered: "".concat(classPrefix2.value, "-table--bordered"),
      striped: "".concat(classPrefix2.value, "-table--striped"),
      hover: "".concat(classPrefix2.value, "-table--hoverable"),
      rowspanAndColspan: "".concat(classPrefix2.value, "-table--rowspan-colspan"),
      empty: "".concat(classPrefix2.value, "-table__empty"),
      emptyRow: "".concat(classPrefix2.value, "-table__empty-row"),
      headerFixed: "".concat(classPrefix2.value, "-table--header-fixed"),
      columnFixed: "".concat(classPrefix2.value, "-table--column-fixed"),
      widthOverflow: "".concat(classPrefix2.value, "-table--width-overflow"),
      multipleHeader: "".concat(classPrefix2.value, "-table--multiple-header"),
      affixedHeader: "".concat(classPrefix2.value, "-table--affixed-header"),
      affixedHeaderElm: "".concat(classPrefix2.value, "-table__affixed-header-elm"),
      scrollbarDivider: "".concat(classPrefix2.value, "-table__scroll-bar-divider"),
      fullHeight: "".concat(classPrefix2.value, "-table--full-height")
    },
    tdAlignClasses: {
      left: "".concat(classPrefix2.value, "-align-left"),
      right: "".concat(classPrefix2.value, "-align-right"),
      center: "".concat(classPrefix2.value, "-align-center")
    },
    tableHeaderClasses: {
      header: "".concat(classPrefix2.value, "-table__header"),
      thBordered: "".concat(classPrefix2.value, "-table__header-th--bordered"),
      fixed: "".concat(classPrefix2.value, "-table__header--fixed"),
      multipleHeader: "".concat(classPrefix2.value, "-table__header--multiple")
    },
    tableFooterClasses: {
      footer: "".concat(classPrefix2.value, "-table__footer"),
      fixed: "".concat(classPrefix2.value, "-table__footer--fixed")
    },
    tableAlignClasses: {
      top: "".concat(classPrefix2.value, "-vertical-align-top"),
      middle: "".concat(classPrefix2.value, "-vertical-align-middle"),
      bottom: "".concat(classPrefix2.value, "-vertical-align-bottom")
    },
    tableRowFixedClasses: {
      top: "".concat(classPrefix2.value, "-table__row--fixed-top"),
      bottom: "".concat(classPrefix2.value, "-table__row--fixed-bottom"),
      firstBottom: "".concat(classPrefix2.value, "-table__row--fixed-bottom-first"),
      withoutBorderBottom: "".concat(classPrefix2.value, "-table__row--without-border-bottom")
    },
    tableColFixedClasses: {
      left: "".concat(classPrefix2.value, "-table__cell--fixed-left"),
      right: "".concat(classPrefix2.value, "-table__cell--fixed-right"),
      lastLeft: "".concat(classPrefix2.value, "-table__cell--fixed-left-last"),
      firstRight: "".concat(classPrefix2.value, "-table__cell--fixed-right-first"),
      leftShadow: "".concat(classPrefix2.value, "-table__content--scrollable-to-left"),
      rightShadow: "".concat(classPrefix2.value, "-table__content--scrollable-to-right")
    },
    tableLayoutClasses: {
      auto: "".concat(classPrefix2.value, "-table--layout-auto"),
      fixed: "".concat(classPrefix2.value, "-table--layout-fixed")
    },
    tdEllipsisClass: "".concat(classPrefix2.value, "-table-td--ellipsis"),
    tableFullRowClasses: {
      base: "".concat(classPrefix2.value, "-table__row--full"),
      innerFullRow: "".concat(classPrefix2.value, "-table__row-full-inner"),
      innerFullElement: "".concat(classPrefix2.value, "-table__row-full-element"),
      firstFullRow: "".concat(classPrefix2.value, "-table__first-full-row"),
      lastFullRow: "".concat(classPrefix2.value, "-table__last-full-row")
    },
    tableExpandClasses: {
      iconBox: "".concat(classPrefix2.value, "-table__expand-box"),
      iconCell: "".concat(classPrefix2.value, "-table__expandable-icon-cell"),
      row: "".concat(classPrefix2.value, "-table__expanded-row"),
      rowInner: "".concat(classPrefix2.value, "-table__expanded-row-inner"),
      expanded: "".concat(classPrefix2.value, "-table__row--expanded"),
      collapsed: "".concat(classPrefix2.value, "-table__row--collapsed")
    },
    tableSortClasses: {
      sortable: "".concat(classPrefix2.value, "-table__cell--sortable"),
      title: "".concat(classPrefix2.value, "-table__cell--title"),
      trigger: "".concat(classPrefix2.value, "-table__cell--sort-trigger"),
      doubleIcon: "".concat(classPrefix2.value, "-table__double-icons"),
      sortIcon: "".concat(classPrefix2.value, "-table__sort-icon"),
      iconDirection: {
        asc: "".concat(classPrefix2.value, "-table-sort-asc"),
        desc: "".concat(classPrefix2.value, "-table-sort-desc")
      },
      iconActive: "".concat(classPrefix2.value, "-table__sort-icon--active"),
      iconDefault: "".concat(classPrefix2.value, "-icon-sort--default")
    },
    tableSelectedClasses: {
      selected: "".concat(classPrefix2.value, "-table__row--selected"),
      disabled: "".concat(classPrefix2.value, "-table__row--disabled")
    },
    tableFilterClasses: {
      filterable: "".concat(classPrefix2.value, "-table__cell--filterable"),
      popup: "".concat(classPrefix2.value, "-table__filter-pop"),
      icon: "".concat(classPrefix2.value, "-table__filter-icon"),
      popupContent: "".concat(classPrefix2.value, "-table__filter-pop-content"),
      result: "".concat(classPrefix2.value, "-table__filter-result"),
      inner: "".concat(classPrefix2.value, "-table__row-filter-inner"),
      bottomButtons: "".concat(classPrefix2.value, "-table__filter--bottom-buttons"),
      contentInner: "".concat(classPrefix2.value, "-table__filter-pop-content-inner"),
      iconWrap: "".concat(classPrefix2.value, "-table__filter-icon-wrap")
    },
    asyncLoadingClass: "".concat(classPrefix2.value, "-table__async-loading"),
    isFocusClass: "".concat(classPrefix2.value, "-is-focus"),
    isLoadingClass: "".concat(classPrefix2.value, "-is-loading"),
    isLoadMoreClass: "".concat(classPrefix2.value, "-is-load-more"),
    tableTreeClasses: {
      col: "".concat(classPrefix2.value, "-table__tree-col"),
      inlineCol: "".concat(classPrefix2.value, "-table__tree-col--inline"),
      icon: "".concat(classPrefix2.value, "-table__tree-op-icon")
    },
    tableDraggableClasses: {
      rowDraggable: "".concat(classPrefix2.value, "-table--row-draggable"),
      rowHandlerDraggable: "".concat(classPrefix2.value, "-table--row-handler-draggable"),
      colDraggable: "".concat(classPrefix2.value, "-table--col-draggable"),
      handle: "".concat(classPrefix2.value, "-table__handle-draggable"),
      ghost: "".concat(classPrefix2.value, "-table__ele--draggable-ghost"),
      chosen: "".concat(classPrefix2.value, "-table__ele--draggable-chosen"),
      dragging: "".concat(classPrefix2.value, "-table__ele--draggable-dragging")
    },
    virtualScrollClasses: {
      cursor: "".concat(classPrefix2.value, "-table__virtual-scroll-cursor"),
      header: "".concat(classPrefix2.value, "-table__virtual-scroll-header")
    },
    positiveRotate90: "".concat(classPrefix2.value, "-positive-rotate-90"),
    negativeRotate180: "".concat(classPrefix2.value, "-negative-rotate-180")
  };
  return classNames2;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$u(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$t(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$u(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function renderTitle2(slots, col, index2) {
  var params = {
    col,
    colIndex: index2
  };
  if (isFunction_1(col.title)) {
    return col.title(h, params);
  }
  if (isString_1(col.title) && slots[col.title]) {
    return slots[col.title](params);
  }
  if (isFunction_1(col.render)) {
    return col.render(h, _objectSpread$t(_objectSpread$t({}, params), {}, {
      type: "title",
      row: {},
      rowIndex: -1
    })) || col.title;
  }
  return col.title;
}
function useTableHeader(props2) {
  var _useClassName = useClassName(), tableSortClasses = _useClassName.tableSortClasses, tableFilterClasses = _useClassName.tableFilterClasses;
  var spansAndLeafNodes = computed(function() {
    return getThRowspanAndColspan(props2.columns);
  });
  var thList = computed(function() {
    return getThList(props2.columns);
  });
  var isMultipleHeader = computed(function() {
    return thList.value.length > 1;
  });
  var renderTitleWidthIcon = function renderTitleWidthIcon2(_ref) {
    var _classes;
    var _ref2 = _slicedToArray(_ref, 3), title = _ref2[0], sortIcon = _ref2[1], filterIcon = _ref2[2];
    var classes6 = (_classes = {}, _defineProperty$3(_classes, tableSortClasses.sortable, sortIcon), _defineProperty$3(_classes, tableFilterClasses.filterable, filterIcon), _classes);
    return createVNode("div", {
      "class": classes6
    }, [createVNode("div", {
      "class": tableSortClasses.title
    }, [createVNode("div", null, [title]), Boolean(sortIcon || filterIcon) && createVNode("div", {
      "class": tableFilterClasses.iconWrap
    }, [sortIcon, filterIcon])])]);
  };
  return {
    thList,
    isMultipleHeader,
    spansAndLeafNodes,
    renderTitleWidthIcon
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function getScrollbarWidth() {
  var defaultScrollbarWidth = 6;
  if (!navigator)
    return defaultScrollbarWidth;
  if (/(Chrome|Safari)/i.test(navigator.userAgent))
    return defaultScrollbarWidth;
  var scrollDiv = document.createElement("div");
  scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
  document.body.appendChild(scrollDiv);
  var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  document.body.removeChild(scrollDiv);
  return scrollbarWidth;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$t(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$s(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$t(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getColumnFixedStyles(col, index2, rowAndColFixedPosition, tableColFixedClasses) {
  var _thClasses;
  var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index2);
  if (!fixedPos)
    return {};
  var thClasses = (_thClasses = {}, _defineProperty$3(_thClasses, tableColFixedClasses.left, col.fixed === "left"), _defineProperty$3(_thClasses, tableColFixedClasses.right, col.fixed === "right"), _defineProperty$3(_thClasses, tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), _defineProperty$3(_thClasses, tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol), _thClasses);
  var thStyles = {
    left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
    right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
  };
  return {
    style: thStyles,
    classes: thClasses
  };
}
function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
  var _rowClasses;
  if (!fixedRows || !fixedRows.length)
    return {
      style: void 0,
      classes: void 0
    };
  var fixedTop = rowIndex < fixedRows[0];
  var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
  var firstFixedBottomRow = rowLength - fixedRows[1];
  var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
  var rowClasses = (_rowClasses = {}, _defineProperty$3(_rowClasses, tableRowFixedClasses.top, fixedTop), _defineProperty$3(_rowClasses, tableRowFixedClasses.bottom, fixedBottom), _defineProperty$3(_rowClasses, tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), _defineProperty$3(_rowClasses, tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1), _rowClasses);
  var rowStyles = {
    top: fixedTop ? "".concat(fixedPos.top, "px") : void 0,
    bottom: fixedBottom ? "".concat(fixedPos.bottom, "px") : void 0
  };
  return {
    style: rowStyles,
    classes: rowClasses
  };
}
function useFixed(props2, context) {
  var _toRefs = toRefs(props2), data26 = _toRefs.data, columns = _toRefs.columns, tableLayout = _toRefs.tableLayout, tableContentWidth = _toRefs.tableContentWidth, fixedRows = _toRefs.fixedRows, firstFullRow = _toRefs.firstFullRow, lastFullRow = _toRefs.lastFullRow, maxHeight = _toRefs.maxHeight, headerAffixedTop = _toRefs.headerAffixedTop, bordered = _toRefs.bordered;
  var tableContentRef = ref();
  var isFixedHeader = ref(false);
  var isWidthOverflow = ref(false);
  var affixHeaderRef = ref();
  var showAffixHeader = ref(true);
  var scrollbarWidth = ref(6);
  var rowAndColFixedPosition = ref(/* @__PURE__ */ new Map());
  var showColumnShadow = reactive({
    left: false,
    right: false
  });
  var virtualScrollHeaderPos = ref({
    left: 0,
    top: 0
  });
  var tableWidth = ref(0);
  var thWidthList = ref({});
  var isFixedColumn = ref(false);
  var isFixedRightColumn = ref(false);
  var displayNoneElementRefresh = inject(TDisplayNoneElementRefresh, ref(0));
  var notNeedThWidthList = computed(function() {
    var _props$scroll;
    return !(props2.headerAffixedTop || ((_props$scroll = props2.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
  });
  function getColumnMap(columns2) {
    var map = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : /* @__PURE__ */ new Map();
    var levelNodes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    var level = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    var parent2 = arguments.length > 4 ? arguments[4] : void 0;
    for (var i = 0, len2 = columns2.length; i < len2; i++) {
      var _col$children;
      var col = columns2[i];
      if (["left", "right"].includes(col.fixed)) {
        isFixedColumn.value = true;
      }
      if (col.fixed === "right") {
        isFixedRightColumn.value = true;
      }
      var key = col.colKey || i;
      var columnInfo = {
        col,
        parent: parent2,
        index: i
      };
      map.set(key, columnInfo);
      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
      }
      if (levelNodes[level]) {
        levelNodes[level].push(columnInfo);
      } else {
        levelNodes[level] = [columnInfo];
      }
    }
    return {
      newColumnsMap: map,
      levelNodes
    };
  }
  var setFixedLeftPos = function setFixedLeftPos2(columns2, initialColumnMap) {
    var parent2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    for (var i = 0, len2 = columns2.length; i < len2; i++) {
      var _col$children2;
      var col = columns2[i];
      if (col.fixed === "right")
        return;
      var colInfo = initialColumnMap.get(col.colKey || i);
      var lastColIndex = i - 1;
      while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
        lastColIndex -= 1;
      }
      var lastCol = columns2[lastColIndex];
      var defaultWidth = i === 0 ? (parent2 === null || parent2 === void 0 ? void 0 : parent2.left) || 0 : 0;
      var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i - 1);
      colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
      if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
        setFixedLeftPos2(col.children, initialColumnMap, colInfo);
      }
    }
  };
  var setFixedRightPos = function setFixedRightPos2(columns2, initialColumnMap) {
    var parent2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    for (var i = columns2.length - 1; i >= 0; i--) {
      var _col$children3;
      var col = columns2[i];
      if (col.fixed === "left")
        return;
      var colInfo = initialColumnMap.get(col.colKey || i);
      var lastColIndex = i + 1;
      while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
        lastColIndex += 1;
      }
      var lastCol = columns2[lastColIndex];
      var defaultWidth = i === columns2.length - 1 ? (parent2 === null || parent2 === void 0 ? void 0 : parent2.right) || 0 : 0;
      var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i + 1);
      colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
      if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
        setFixedRightPos2(col.children, initialColumnMap, colInfo);
      }
    }
  };
  var setFixedColPosition = function setFixedColPosition2(trList, initialColumnMap) {
    if (!trList)
      return;
    for (var i = 0, len2 = trList.length; i < len2; i++) {
      var thList = trList[i].children;
      for (var j = 0, thLen = thList.length; j < thLen; j++) {
        var _obj$col;
        var th = thList[j];
        var colKey = th.dataset.colkey;
        if (!colKey) {
          log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
        }
        var obj = initialColumnMap.get(colKey || j);
        if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
          initialColumnMap.set(colKey, _objectSpread$s(_objectSpread$s({}, obj), {}, {
            width: th.getBoundingClientRect().width
          }));
        }
      }
    }
    setFixedLeftPos(columns.value, initialColumnMap);
    setFixedRightPos(columns.value, initialColumnMap);
  };
  var setFixedRowPosition = function setFixedRowPosition2(trList, initialColumnMap, thead, tfoot) {
    var _ref = fixedRows.value || [], _ref2 = _slicedToArray(_ref, 2), fixedTopRows = _ref2[0], fixedBottomRows = _ref2[1];
    var data27 = props2.data, _props$rowKey = props2.rowKey, rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;
    for (var i = 0; i < fixedTopRows; i++) {
      var tr = trList[i];
      var rowId = get_1(data27[i], rowKey);
      var thisRowInfo = initialColumnMap.get(rowId) || {};
      var lastRowId = get_1(data27[i - 1], rowKey);
      var lastRowInfo = initialColumnMap.get(lastRowId) || {};
      var defaultBottom = 0;
      if (i === 0) {
        defaultBottom = (thead === null || thead === void 0 ? void 0 : thead.getBoundingClientRect().height) || 0;
      }
      thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
      initialColumnMap.set(rowId, _objectSpread$s(_objectSpread$s({}, thisRowInfo), {}, {
        height: tr.getBoundingClientRect().height
      }));
    }
    for (var _i = data27.length - 1; _i >= data27.length - fixedBottomRows; _i--) {
      var _tr = trList[_i];
      var _rowId = get_1(data27[_i], rowKey);
      var _thisRowInfo = initialColumnMap.get(_rowId) || {};
      var _lastRowId = get_1(data27[_i + 1], rowKey);
      var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};
      var _defaultBottom = 0;
      if (_i === data27.length - 1) {
        _defaultBottom = (tfoot === null || tfoot === void 0 ? void 0 : tfoot.getBoundingClientRect().height) || 0;
      }
      _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
      initialColumnMap.set(_rowId, _objectSpread$s(_objectSpread$s({}, _thisRowInfo), {}, {
        height: _tr.getBoundingClientRect().height
      }));
    }
  };
  var updateRowAndColFixedPosition = function updateRowAndColFixedPosition2(tableContentElm, initialColumnMap) {
    rowAndColFixedPosition.value.clear();
    var thead = tableContentElm.querySelector("thead");
    thead && setFixedColPosition(thead.children, initialColumnMap);
    var tbody = tableContentElm.querySelector("tbody");
    var tfoot = tableContentElm.querySelector("tfoot");
    tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
    rowAndColFixedPosition.value = initialColumnMap;
  };
  var updateColumnFixedShadow = function updateColumnFixedShadow2(target) {
    if (!isFixedColumn.value)
      return;
    var isShowRight = target.clientWidth + target.scrollLeft < target.scrollWidth;
    showColumnShadow.left = target.scrollLeft > 0;
    showColumnShadow.right = isShowRight;
  };
  var lastScrollLeft = -1;
  var updateHeaderScroll = function updateHeaderScroll2(target) {
    if (!target) {
      lastScrollLeft = -1;
    }
    var newTarget = target || tableContentRef.value;
    if (notNeedThWidthList.value || !newTarget)
      return;
    var left2 = newTarget.scrollLeft;
    if (lastScrollLeft === left2)
      return;
    if (affixHeaderRef.value) {
      var left22 = newTarget.scrollLeft;
      lastScrollLeft = left22;
      affixHeaderRef.value.scrollLeft = left22;
    }
  };
  var onTableContentScroll = function onTableContentScroll2(e) {
    var _props$onScrollX, _props$onScrollY, _props$onScroll;
    var target = e.target || e.srcElement;
    updateColumnFixedShadow(target);
    updateHeaderScroll(target);
    (_props$onScrollX = props2.onScrollX) === null || _props$onScrollX === void 0 ? void 0 : _props$onScrollX.call(props2, {
      e
    });
    (_props$onScrollY = props2.onScrollY) === null || _props$onScrollY === void 0 ? void 0 : _props$onScrollY.call(props2, {
      e
    });
    (_props$onScroll = props2.onScroll) === null || _props$onScroll === void 0 ? void 0 : _props$onScroll.call(props2, {
      e
    });
  };
  var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol2(levelNodes) {
    for (var t = 0; t < levelNodes.length; t++) {
      var nodes = levelNodes[t];
      for (var i = 0, len2 = nodes.length; i < len2; i++) {
        var colMapInfo = nodes[i];
        var nextColMapInfo = nodes[i + 1];
        var parent2 = colMapInfo.parent;
        var isParentLastLeftFixedCol = !parent2 || (parent2 === null || parent2 === void 0 ? void 0 : parent2.lastLeftFixedCol);
        if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && (nextColMapInfo === null || nextColMapInfo === void 0 ? void 0 : nextColMapInfo.col.fixed) !== "left") {
          colMapInfo.lastLeftFixedCol = true;
        }
        var lastColMapInfo = nodes[i - 1];
        var isParentFirstRightFixedCol = !parent2 || (parent2 === null || parent2 === void 0 ? void 0 : parent2.firstRightFixedCol);
        if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && (lastColMapInfo === null || lastColMapInfo === void 0 ? void 0 : lastColMapInfo.col.fixed) !== "right") {
          colMapInfo.firstRightFixedCol = true;
        }
      }
    }
  };
  var updateFixedStatus = function updateFixedStatus2() {
    var _getColumnMap = getColumnMap(columns.value), newColumnsMap = _getColumnMap.newColumnsMap, levelNodes = _getColumnMap.levelNodes;
    setIsLastOrFirstFixedCol(levelNodes);
    var timer = setTimeout(function() {
      var _fixedRows$value;
      if (isFixedColumn.value || (_fixedRows$value = fixedRows.value) !== null && _fixedRows$value !== void 0 && _fixedRows$value.length) {
        updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);
      }
      clearTimeout(timer);
    }, 0);
    return function() {
      clearTimeout(timer);
    };
  };
  var updateFixedHeader = function updateFixedHeader2() {
    var timer = setTimeout(function() {
      if (!tableContentRef.value)
        return;
      isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;
      isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;
      var pos = tableContentRef.value.getBoundingClientRect();
      virtualScrollHeaderPos.value = {
        top: pos.top,
        left: pos.left
      };
      clearTimeout(timer);
    }, 0);
  };
  var updateFixedColumnHandler = function updateFixedColumnHandler2() {
    var timer = setTimeout(function() {
      if (isFixedColumn.value) {
        updateColumnFixedShadow(tableContentRef.value);
      }
      clearTimeout(timer);
    }, 0);
  };
  var updateTableWidth = function updateTableWidth2() {
    var rect = tableContentRef.value.getBoundingClientRect();
    var reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;
    var fixedBordered = isFixedRightColumn.value ? 1 : 2;
    tableWidth.value = rect.width - reduceWidth - (props2.bordered ? fixedBordered : 0);
  };
  var updateThWidthList = function updateThWidthList2(trList) {
    var widthMap = {};
    for (var i = 0, len2 = trList.length; i < len2; i++) {
      var thList = trList[i].children;
      for (var j = 0, thLen = thList.length; j < thLen; j++) {
        var th = thList[j];
        var colKey = th.dataset.colkey;
        widthMap[colKey] = th.getBoundingClientRect().width;
      }
    }
    thWidthList.value = widthMap;
    if (affixHeaderRef.value) {
      var left2 = tableContentRef.value.scrollLeft;
      lastScrollLeft = left2;
      affixHeaderRef.value.scrollLeft = left2;
    }
  };
  var updateThWidthListHandler = function updateThWidthListHandler2() {
    if (notNeedThWidthList.value)
      return;
    var timer = setTimeout(function() {
      updateTableWidth();
      var thead = tableContentRef.value.querySelector("thead");
      updateThWidthList(thead.children);
      clearTimeout(timer);
    }, 0);
  };
  var onDocumentScroll = function onDocumentScroll2() {
    var _affixHeaderRef$value;
    var pos = tableContentRef.value.getBoundingClientRect();
    var r = ((_affixHeaderRef$value = affixHeaderRef.value) === null || _affixHeaderRef$value === void 0 ? void 0 : _affixHeaderRef$value.offsetHeight) - pos.top < pos.height;
    showAffixHeader.value = r;
  };
  watch([data26, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow], updateFixedStatus, {
    immediate: true
  });
  watch([isFixedColumn, columns], updateFixedColumnHandler, {
    immediate: true
  });
  watch([maxHeight, data26, columns, bordered], updateFixedHeader, {
    immediate: true
  });
  watch([data26, columns, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, tableContentWidth], updateThWidthListHandler, {
    immediate: true
  });
  watch([headerAffixedTop], function() {
    if (headerAffixedTop) {
      on$1(document, "scroll", onDocumentScroll);
    } else {
      off$1(document, "scroll", onDocumentScroll);
    }
  });
  var refreshTable = function refreshTable2() {
    updateTableWidth();
    updateFixedHeader();
    if (!notNeedThWidthList.value) {
      updateThWidthListHandler();
    }
    if (isFixedColumn.value || isFixedHeader.value) {
      updateFixedStatus();
      updateFixedColumnHandler();
    }
  };
  var onResize = refreshTable;
  watch([displayNoneElementRefresh], function() {
    if (!displayNoneElementRefresh)
      return;
    requestAnimationFrame ? requestAnimationFrame(refreshTable) : refreshTable();
  });
  onMounted(function() {
    var scrollWidth = getScrollbarWidth();
    scrollbarWidth.value = scrollWidth;
    var timer = setTimeout(function() {
      updateTableWidth();
      clearTimeout(timer);
    });
    if (isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value) {
      on$1(window, "resize", onResize);
    }
  });
  onUnmounted(function() {
    if (isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value) {
      off$1(window, "resize", onResize);
    }
    if (props2.headerAffixedTop) {
      off$1(document, "scroll", onDocumentScroll);
    }
  });
  return {
    tableWidth,
    thWidthList,
    isFixedHeader,
    isWidthOverflow,
    tableContentRef,
    showAffixHeader,
    isFixedColumn,
    showColumnShadow,
    rowAndColFixedPosition,
    virtualScrollHeaderPos,
    affixHeaderRef,
    scrollbarWidth,
    refreshTable,
    updateThWidthListHandler,
    updateHeaderScroll,
    onTableContentScroll
  };
}
var index$a = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$s(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$r(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$s(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function usePagination(props2) {
  var _toRefs = toRefs(props2), pagination = _toRefs.pagination, data26 = _toRefs.data, disableDataPage = _toRefs.disableDataPage;
  var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
  var dataSource = ref([]);
  var isPaginateData = ref(false);
  var updateDataSourceAndPaginate = function updateDataSourceAndPaginate2() {
    var current2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    var pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;
    var data27 = props2.data;
    var t = Boolean(!disableDataPage.value && data27.length > pageSize);
    isPaginateData.value = t;
    if (t) {
      var start3 = (current2 - 1) * pageSize;
      var end3 = current2 * pageSize;
      dataSource.value = data27.slice(start3, end3);
    } else {
      dataSource.value = data27;
    }
  };
  watch(function() {
    var _pagination$value, _pagination$value2;
    return [(_pagination$value = pagination.value) === null || _pagination$value === void 0 ? void 0 : _pagination$value.current, (_pagination$value2 = pagination.value) === null || _pagination$value2 === void 0 ? void 0 : _pagination$value2.pageSize, data26.value.length, disableDataPage];
  }, function() {
    if (!pagination.value || !pagination.value.current)
      return;
    updateDataSourceAndPaginate(pagination.value.current, pagination.value.pageSize);
  }, {
    immediate: true
  });
  watch([data26], function() {
    if (!pagination.value || !pagination.value.defaultCurrent)
      return;
    updateDataSourceAndPaginate(pagination.value.defaultCurrent, pagination.value.defaultPageSize);
  }, {
    immediate: true
  });
  var renderPagination = function renderPagination2() {
    if (!props2.pagination)
      return null;
    var paginationProps = _objectSpread$r({}, props2.pagination);
    delete paginationProps.onChange;
    return createVNode("div", {
      "class": "".concat(classPrefix2.value, "-table__pagination")
    }, [createVNode(Pagination, mergeProps(paginationProps, {
      "onChange": function onChange(pageInfo) {
        var _props$pagination, _props$pagination$onC, _props$onPageChange;
        (_props$pagination = props2.pagination) === null || _props$pagination === void 0 ? void 0 : (_props$pagination$onC = _props$pagination.onChange) === null || _props$pagination$onC === void 0 ? void 0 : _props$pagination$onC.call(_props$pagination, pageInfo);
        (_props$onPageChange = props2.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props2, pageInfo, dataSource.value);
        if (pagination && !pagination.value.current && pagination.value.defaultCurrent) {
          updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
        }
      }
    }), null)]);
  };
  return {
    isPaginateData,
    dataSource,
    renderPagination
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$r(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$q(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$r(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var useVirtualScroll = function useVirtualScroll2(_ref) {
  var data26 = _ref.data, container = _ref.container, _ref$fixedHeight = _ref.fixedHeight, fixedHeight = _ref$fixedHeight === void 0 ? false : _ref$fixedHeight, _ref$lineHeight = _ref.lineHeight, lineHeight = _ref$lineHeight === void 0 ? 30 : _ref$lineHeight, _ref$bufferSize = _ref.bufferSize, bufferSize = _ref$bufferSize === void 0 ? 20 : _ref$bufferSize, _ref$threshold = _ref.threshold, threshold = _ref$threshold === void 0 ? 100 : _ref$threshold;
  var state = reactive({
    visibleData: [],
    cachedHeight: [],
    cachedScrollY: []
  });
  var isVirtual = computed(function() {
    return data26.value.length > threshold;
  });
  var updateId = ref(0);
  var trs = /* @__PURE__ */ new Map();
  var visibleCount = 0;
  var beforeScrollTop = 0;
  var index2 = 0;
  var offset2 = 0;
  var start3 = 0;
  var last2 = 0;
  var reset3 = function reset4() {
    data26.value.forEach(function(item, i) {
      item.$index = i;
      if (fixedHeight) {
        state.cachedScrollY[i] = i * lineHeight;
      }
    });
    if (!fixedHeight) {
      state.cachedScrollY[data26.value.length - 1] = void 0;
    }
  };
  reset3();
  var scrollHeight = computed(function() {
    var cachedHeight = state.cachedHeight;
    var length = cachedHeight.length;
    if (length) {
      var maxScrollY = cachedHeight.reduce(function(sum, v) {
        return sum + v || lineHeight;
      }, 0);
      if (cachedHeight.length === data26.value.length) {
        return maxScrollY;
      }
      var average = maxScrollY / cachedHeight.length;
      return maxScrollY + (data26.value.length - cachedHeight.length) * average;
    }
    return isVirtual.value ? data26.value.length * lineHeight : 0;
  });
  var translateY = computed(function() {
    var visibleData = state.visibleData;
    var firstRow = visibleData[0];
    if (firstRow) {
      return visibleData.length === 1 ? 0 : state.cachedScrollY[firstRow.$index];
    }
    return 0;
  });
  var updateVisibleData = function updateVisibleData2() {
    last2 = Math.min(start3 + visibleCount + bufferSize * 2, data26.value.length);
    state.visibleData = data26.value.slice(start3, last2);
  };
  var calculateScrollY = function calculateScrollY2() {
    var _anchorDom$getBoundin;
    var anchorDom = trs.get(index2);
    if (!anchorDom) {
      return;
    }
    var anchorDomHeight = anchorDom === null || anchorDom === void 0 ? void 0 : (_anchorDom$getBoundin = anchorDom.getBoundingClientRect()) === null || _anchorDom$getBoundin === void 0 ? void 0 : _anchorDom$getBoundin.height;
    state.cachedScrollY[index2] = container.value.scrollTop - offset2;
    state.cachedHeight[index2] = anchorDomHeight;
    for (var i = index2 + 1; i <= state.visibleData[state.visibleData.length - 1].$index; i++) {
      var tr = trs.get(i);
      var _ref2 = (tr === null || tr === void 0 ? void 0 : tr.getBoundingClientRect()) || {}, height = _ref2.height;
      state.cachedHeight[i] = height;
      var scrollY = state.cachedScrollY[i - 1] + state.cachedHeight[i - 1];
      state.cachedScrollY.splice(i, 1, scrollY);
    }
    for (var _i = index2 - 1; _i >= state.visibleData[0].$index; _i--) {
      var _tr = trs.get(_i);
      var _ref3 = (_tr === null || _tr === void 0 ? void 0 : _tr.getBoundingClientRect()) || {}, _height = _ref3.height;
      state.cachedHeight[_i] = _height;
      var _scrollY = state.cachedScrollY[_i + 1] - state.cachedHeight[_i];
      state.cachedScrollY.splice(_i, 1, _scrollY);
    }
    if (state.cachedScrollY[0] > 0) {
      var distance = state.cachedScrollY[0];
      var length = Math.min(last2, data26.value.length);
      for (var _i2 = 0; _i2 < length; _i2++) {
        state.cachedScrollY.splice(_i2, 1, state.cachedScrollY[_i2] - distance);
      }
      var scrollTop = state.cachedScrollY[index2 - 1] ? state.cachedScrollY[index2 - 1] + offset2 : offset2;
      container.value.scrollTop = scrollTop;
      beforeScrollTop = scrollTop;
    }
    if (state.cachedScrollY[start3] < 0) {
      var s = state.cachedHeight.slice(0, Math.max(0, index2)).reduce(function(sum, v) {
        return sum + v;
      }, 0) + offset2;
      container.value.scrollTop = s;
      beforeScrollTop = s;
      if (s === 0) {
        index2 = 0;
        offset2 = 0;
      }
    }
    nextTick(function() {
      var _container$value = container.value, scrollTop2 = _container$value.scrollTop, scrollHeight2 = _container$value.scrollHeight, clientHeight = _container$value.clientHeight;
      if (scrollTop2 + clientHeight === scrollHeight2) {
        for (var _i3 = last2 - 1; _i3 >= start3; _i3--) {
          if (_i3 === last2 - 1) {
            state.cachedScrollY.splice(_i3, 1, scrollHeight2.value - state.cachedHeight[_i3]);
          } else {
            state.cachedScrollY.splice(_i3, 1, state.cachedScrollY[_i3 + 1] - state.cachedHeight[_i3]);
          }
        }
      }
    });
  };
  var handleScroll3 = function handleScroll4() {
    if (!isVirtual.value)
      return;
    var scrollTop = container.value.scrollTop;
    var distance = scrollTop - beforeScrollTop;
    beforeScrollTop = scrollTop;
    distance += offset2;
    var lastIndex = index2;
    if (!distance)
      return;
    if (distance >= 0) {
      while (lastIndex < data26.value.length && distance > (state.cachedHeight[lastIndex] || lineHeight)) {
        if (!state.cachedHeight[lastIndex]) {
          state.cachedHeight[lastIndex] = lineHeight;
        }
        distance -= state.cachedHeight[lastIndex];
        lastIndex++;
      }
      if (lastIndex >= data26.value.length) {
        index2 = data26.value.length - 1;
        offset2 = 0;
      } else {
        index2 = lastIndex;
        offset2 = distance;
      }
      var _container$value2 = container.value, clientHeight = _container$value2.clientHeight, scrollHeight2 = _container$value2.scrollHeight;
      if (scrollTop + clientHeight === scrollHeight2) {
        index2 = data26.value.length - visibleCount + 1;
      }
      if (start3 <= index2 - bufferSize) {
        start3 = Math.min(data26.value.length - visibleCount, index2 - bufferSize);
        if (start3 < 0) {
          start3 = 0;
        }
      }
    } else {
      while (distance < 0) {
        lastIndex--;
        if (!state.cachedHeight[lastIndex]) {
          state.cachedHeight[lastIndex] = lineHeight;
        }
        distance += state.cachedHeight[lastIndex];
      }
      if (lastIndex < 0) {
        index2 = 0;
        offset2 = 0;
      } else {
        index2 = lastIndex;
        offset2 = distance;
      }
      calculateScrollY();
      if (start3 > index2 - bufferSize) {
        start3 = Math.max(0, index2 - bufferSize);
      }
    }
    updateVisibleData();
  };
  !fixedHeight && watch(updateId, calculateScrollY, {
    flush: "post"
  });
  var handleRowMounted = function handleRowMounted2() {
    if (!isVirtual.value)
      return;
    updateId.value++;
  };
  watch(data26, function() {
    reset3();
    state.visibleData = [];
    state.cachedScrollY = [];
    state.cachedHeight = [];
    beforeScrollTop = 0;
    index2 = 0;
    offset2 = 0;
    start3 = 0;
    trs.clear();
    if (data26.value.length <= threshold) {
      state.visibleData = data26.value;
    } else {
      updateVisibleData();
    }
    container.value && (container.value.scrollTop = 0);
  });
  var mounted13 = false;
  var refreshContainer = function refreshContainer2() {
    if (mounted13) {
      visibleCount = Math.ceil(container.value.offsetHeight / lineHeight);
      updateVisibleData();
    }
  };
  onMounted(function() {
    if (!window || !window.IntersectionObserver) {
      return;
    }
    var ob = new window.IntersectionObserver(function(entries) {
      var entry = entries[0];
      if (entry.isIntersecting || entry.intersectionRatio) {
        mounted13 = true;
        isVirtual.value && refreshContainer();
        ob.unobserve(container.value);
      }
    });
    container.value && ob.observe(container.value);
  });
  return _objectSpread$q(_objectSpread$q({
    trs,
    scrollHeight
  }, toRefs(state)), {}, {
    translateY,
    handleScroll: handleScroll3,
    handleRowMounted,
    refreshContainer,
    fixedHeight,
    calculateScrollY
  });
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function formatRowAttributes(attributes, params) {
  if (!attributes)
    return void 0;
  var attrList = attributes instanceof Array ? attributes : [attributes];
  var result = {};
  for (var i = 0; i < attrList.length; i++) {
    var attrItem = attrList[i];
    if (!attrItem)
      continue;
    var attrProperty = isFunction_1(attrItem) ? attrItem(params) : attrItem;
    result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
  }
  return result;
}
function formatRowClassNames(rowClassNames, params, rowKey) {
  var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
  var row = params.row, rowIndex = params.rowIndex;
  var customClasses = [];
  for (var i = 0, len2 = rowClassList.length; i < len2; i++) {
    var rName = rowClassList[i];
    var tClass = isFunction_1(rName) ? rName(params) : rName;
    if (isObject_1(tClass) && !(tClass instanceof Array)) {
      tClass[rowIndex] && (tClass = tClass[rowIndex]);
      var rowId = get_1(row, rowKey || "id");
      tClass[rowId] && (tClass = tClass[rowId]);
    } else if (tClass instanceof Array) {
      tClass = formatRowClassNames(tClass, params, rowKey);
    }
    customClasses = customClasses.concat(tClass);
  }
  return customClasses;
}
function filterDataByIds() {
  var data26 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var ids = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var byId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "id";
  return data26.filter(function() {
    var d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return ids.includes(d[byId]);
  });
}
function isRowSelectedDisabled(selectColumn, row, rowIndex) {
  var disabled2 = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
    row,
    rowIndex
  }) : selectColumn.disabled;
  if (selectColumn.checkProps) {
    if (isFunction_1(selectColumn.checkProps)) {
      disabled2 = disabled2 || selectColumn.checkProps({
        row,
        rowIndex
      }).disabled;
    } else if (selectColumn.checkProps === "object") {
      disabled2 = disabled2 || selectColumn.checkProps.disabled;
    }
  }
  return !!disabled2;
}
function getCurrentRowByKey(columns, key) {
  if (!columns || !key)
    return;
  var col = columns === null || columns === void 0 ? void 0 : columns.find(function(t) {
    return t.colKey === key;
  });
  if (col)
    return col;
  for (var i = 0, len2 = columns.length; i < len2; i++) {
    var _columns$i, _columns$i$children;
    if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i$children = _columns$i.children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
      var _columns$i2;
      return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
    }
  }
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$7(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var TEllipsis = defineComponent({
  name: "TEllipsis",
  props: {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    popupContent: {
      type: [String, Number, Function]
    },
    placement: String,
    attach: Function,
    popupProps: Object,
    zIndex: Number
  },
  setup: function setup110(props2) {
    var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
    var root2 = ref();
    var isOverflow = ref(false);
    var visible4 = ref(false);
    var ellipsisClasses = computed(function() {
      return ["".concat(classPrefix2.value, "-table__ellipsis"), "".concat(classPrefix2.value, "-text-ellipsis")];
    });
    var onTriggerMouseenter = function onTriggerMouseenter2() {
      if (!root2.value)
        return;
      visible4.value = true;
      isOverflow.value = isNodeOverflow(root2.value);
    };
    var onTriggerMouseleave = function onTriggerMouseleave2() {
      visible4.value = false;
    };
    var onMouseAround = debounce_1(function(e) {
      e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
    }, 80);
    return {
      root: root2,
      isOverflow,
      ellipsisClasses,
      visible: visible4,
      onMouseAround
    };
  },
  render: function render87() {
    var cellNode = renderContent(this, "default", "content");
    var ellipsisContent = createVNode("div", {
      "ref": "root",
      "class": this.ellipsisClasses,
      "onMouseenter": this.onMouseAround,
      "onMouseleave": this.onMouseAround
    }, [cellNode]);
    var content = null;
    if (this.isOverflow) {
      content = createVNode(Popup, mergeProps({
        "content": this.popupContent || function() {
          return cellNode;
        },
        "visible": this.visible,
        "destroyOnClose": true,
        "zIndex": this.zIndex || 80,
        "attach": this.attach,
        "placement": this.placement
      }, this.popupProps), _isSlot$7(ellipsisContent) ? ellipsisContent : {
        "default": function _default65() {
          return [ellipsisContent];
        }
      });
    } else {
      content = ellipsisContent;
    }
    return content;
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function observe(element2, root2, callback, marginBottom) {
  if (!window || !window.IntersectionObserver) {
    callback();
    return null;
  }
  var io = null;
  try {
    io = new window.IntersectionObserver(function(entries) {
      var entry = entries[0];
      if (entry.isIntersecting) {
        callback();
        io.unobserve(element2);
      }
    }, {
      rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
      root: root2
    });
    io.observe(element2);
  } catch (e) {
    console.error(e);
    callback();
  }
  return io;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useLazyLoad(containerRef, childRef, params) {
  var tRowHeight = computed(function() {
    return Math.max(params.rowHeight || 48, 48);
  });
  var isInit = ref(params.rowIndex === 0);
  var hasLazyLoadHolder = computed(function() {
    return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit.value;
  });
  var requestAnimationFrame2 = window.requestAnimationFrame || function(cb) {
    return setTimeout(cb, 16.6);
  };
  var init2 = function init3() {
    if (!isInit.value) {
      requestAnimationFrame2(function() {
        isInit.value = true;
      });
    }
  };
  onMounted(function() {
    if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy")
      return;
    nextTick(function() {
      var bufferSize = Math.max(10, params.bufferSize || 10);
      var height = tRowHeight.value * bufferSize;
      observe(childRef.value, containerRef.value, init2, height);
    });
  });
  return {
    hasLazyLoadHolder,
    tRowHeight
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$q(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$p(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$q(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$6(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
function renderCell(params, slots) {
  var col = params.col, row = params.row;
  if (isFunction_1(col.cell)) {
    return col.cell(h, params);
  }
  if (slots[col.colKey]) {
    return slots[col.colKey](params);
  }
  if (isString_1(col.cell) && slots[col.cell]) {
    return slots[col.cell](params);
  }
  if (isFunction_1(col.render)) {
    return col.render(h, _objectSpread$p(_objectSpread$p({}, params), {}, {
      type: "cell"
    }));
  }
  return get_1(row, col.colKey);
}
var TrElement = defineComponent({
  name: "TR",
  props: _objectSpread$p(_objectSpread$p({
    row: Object,
    rowIndex: Number,
    dataLength: Number,
    rowAndColFixedPosition: Map,
    skipSpansMap: Map,
    onTrRowspanOrColspan: Function
  }, pick_1(baseTableProps, TABLE_PROPS)), {}, {
    scrollType: String,
    rowHeight: Number,
    trs: Map,
    bufferSize: Number,
    isVirtual: Boolean,
    tableElm: {},
    tableContentElm: {}
  }),
  emits: ["row-mounted"],
  setup: function setup111(props2, context) {
    var _toRefs = toRefs(props2), tableContentElm = _toRefs.tableContentElm;
    var trRef = ref(null);
    var _useClassName = useClassName(), tdEllipsisClass = _useClassName.tdEllipsisClass, tableBaseClass = _useClassName.tableBaseClass, tableColFixedClasses = _useClassName.tableColFixedClasses, tableRowFixedClasses = _useClassName.tableRowFixedClasses, tdAlignClasses = _useClassName.tdAlignClasses, tableDraggableClasses = _useClassName.tableDraggableClasses;
    var trStyles = computed(function() {
      return getRowFixedStyles(get_1(props2.row, props2.rowKey || "id"), props2.rowIndex, props2.dataLength, props2.fixedRows, props2.rowAndColFixedPosition, tableRowFixedClasses);
    });
    var trAttributes = computed(function() {
      return formatRowAttributes(props2.rowAttributes, {
        row: props2.row,
        rowIndex: props2.rowIndex,
        type: "body"
      }) || {};
    });
    var classes6 = computed(function() {
      var _trStyles$value;
      var customClasses = formatRowClassNames(props2.rowClassName, {
        row: props2.row,
        rowIndex: props2.rowIndex,
        type: "body"
      }, props2.rowKey || "id");
      return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses].filter(function(v) {
        return v;
      });
    });
    var _useLazyLoad = useLazyLoad(tableContentElm, trRef, reactive(_objectSpread$p(_objectSpread$p({}, props2.scroll), {}, {
      rowIndex: props2.rowIndex
    }))), hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder, tRowHeight = _useLazyLoad.tRowHeight;
    var getTrListeners = function getTrListeners2(row, rowIndex) {
      var trListeners = {};
      ROW_LISTENERS.forEach(function(eventName) {
        trListeners["on".concat(upperFirst_1(eventName))] = function(e) {
          var _props$;
          var p2 = {
            e,
            row,
            index: rowIndex
          };
          (_props$ = props2["onRow".concat(upperFirst_1(eventName))]) === null || _props$ === void 0 ? void 0 : _props$.call(props2, p2);
        };
      });
      return trListeners;
    };
    onMounted(function() {
      var scrollType = props2.scrollType, isVirtual = props2.isVirtual, rowData = props2.row, trs = props2.trs;
      if (scrollType === "virtual") {
        if (isVirtual) {
          var $index = rowData.$index;
          trs.set($index, trRef.value);
          context.emit("row-mounted");
        }
      }
    });
    onBeforeUnmount(function() {
      if (props2.isVirtual) {
        var trs = props2.trs, row = props2.row;
        var $index = row.$index;
        trs["delete"]($index);
      }
    });
    return {
      trRef,
      tableColFixedClasses,
      tSlots: context.slots,
      tdEllipsisClass,
      tableBaseClass,
      tdAlignClasses,
      tableDraggableClasses,
      trStyles,
      classes: classes6,
      trAttributes,
      tRowHeight,
      hasLazyLoadHolder,
      getTrListeners
    };
  },
  methods: {
    renderEllipsisCell: function renderEllipsisCell(cellParams, params) {
      var cellNode = params.cellNode;
      var col = cellParams.col, colIndex = cellParams.colIndex;
      var placement = colIndex < 2 ? "top-left" : "top-right";
      var content = isFunction_1(col.ellipsis) ? col.ellipsis(h, cellParams) : void 0;
      var tableElement = this.tableElm;
      return createVNode(TEllipsis, {
        "placement": placement,
        "attach": tableElement ? function() {
          return tableElement;
        } : void 0,
        "popupContent": content && function() {
          return content;
        },
        "popupProps": _typeof$1(col.ellipsis) === "object" ? col.ellipsis : void 0
      }, _isSlot$6(cellNode) ? cellNode : {
        "default": function _default65() {
          return [cellNode];
        }
      });
    },
    renderTd: function renderTd(params, extra) {
      var _ref, _this = this;
      var col = params.col, colIndex = params.colIndex, rowIndex = params.rowIndex;
      var cellSpans = extra.cellSpans, dataLength = extra.dataLength, rowAndColFixedPosition = extra.rowAndColFixedPosition;
      var cellNode = renderCell(params, this.tSlots);
      var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, this.tableColFixedClasses);
      var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$p(_objectSpread$p({}, params), {}, {
        type: "td"
      })) : col.className;
      var classes6 = [tdStyles.classes, customClasses, (_ref = {}, _defineProperty$3(_ref, this.tdEllipsisClass, col.ellipsis), _defineProperty$3(_ref, this.tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), _defineProperty$3(_ref, this.tableBaseClass.tdFirstCol, colIndex === 0 && this.rowspanAndColspan), _defineProperty$3(_ref, this.tdAlignClasses[col.align], col.align && col.align !== "left"), _defineProperty$3(_ref, this.tableDraggableClasses.handle, col.colKey === "drag"), _ref)];
      var onClick2 = function onClick3(e) {
        var _this$onCellClick;
        var p2 = _objectSpread$p(_objectSpread$p({}, params), {}, {
          e
        });
        (_this$onCellClick = _this.onCellClick) === null || _this$onCellClick === void 0 ? void 0 : _this$onCellClick.call(_this, p2);
      };
      var attrs = _objectSpread$p(_objectSpread$p({}, col.attrs), cellSpans);
      return createVNode("td", mergeProps({
        "class": classes6,
        "style": tdStyles.style
      }, attrs, {
        "onClick": onClick2
      }), [col.ellipsis ? this.renderEllipsisCell(params, {
        cellNode
      }) : cellNode]);
    }
  },
  render: function render88() {
    var _this$columns, _this2 = this, _this$trStyles;
    var row = this.row, rowIndex = this.rowIndex, dataLength = this.dataLength, rowAndColFixedPosition = this.rowAndColFixedPosition;
    var columVNodeList = (_this$columns = this.columns) === null || _this$columns === void 0 ? void 0 : _this$columns.map(function(col, colIndex) {
      var _this2$skipSpansMap;
      var cellSpans = {};
      var params = {
        row,
        col,
        rowIndex,
        colIndex
      };
      if (isFunction_1(_this2.rowspanAndColspan)) {
        var _this2$onTrRowspanOrC;
        var o = _this2.rowspanAndColspan(params);
        (o === null || o === void 0 ? void 0 : o.rowspan) > 1 && (cellSpans.rowspan = o.rowspan);
        (o === null || o === void 0 ? void 0 : o.colspan) > 1 && (cellSpans.colspan = o.colspan);
        (_this2$onTrRowspanOrC = _this2.onTrRowspanOrColspan) === null || _this2$onTrRowspanOrC === void 0 ? void 0 : _this2$onTrRowspanOrC.call(_this2, params, cellSpans);
      }
      var skipped = (_this2$skipSpansMap = _this2.skipSpansMap) === null || _this2$skipSpansMap === void 0 ? void 0 : _this2$skipSpansMap.get([rowIndex, colIndex].join());
      if (skipped)
        return null;
      return _this2.renderTd(params, {
        dataLength,
        rowAndColFixedPosition,
        columnLength: _this2.columns.length,
        cellSpans
      });
    });
    return createVNode("tr", mergeProps({
      "ref": "trRef"
    }, this.trAttributes, {
      "style": (_this$trStyles = this.trStyles) === null || _this$trStyles === void 0 ? void 0 : _this$trStyles.style,
      "class": this.classes
    }, this.getTrListeners(row, rowIndex)), [this.hasLazyLoadHolder ? [createVNode("td", {
      "style": {
        height: "".concat(this.tRowHeight, "px"),
        border: "none"
      }
    }, null)] : columVNodeList]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$p(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$o(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$p(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
var TBody = defineComponent({
  name: "TBody",
  props: _objectSpread$o({
    data: Array,
    columns: Array,
    rowAndColFixedPosition: Map,
    showColumnShadow: Object,
    tableElm: {},
    tableWidth: Number,
    isWidthOverflow: Boolean,
    translateY: Number,
    scrollType: String,
    isVirtual: Boolean,
    rowHeight: Number,
    trs: Map,
    bufferSize: Number,
    tableContentElm: {},
    handleRowMounted: Function,
    renderExpandedRow: Function,
    firstFullRow: [String, Function],
    lastFullRow: [String, Function]
  }, pick_1(baseTableProps, extendTableProps)),
  setup: function setup112(props2, _ref) {
    _ref.emit;
    var renderTNode = useTNodeJSX();
    var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
    var _useClassName = useClassName(), tableFullRowClasses = _useClassName.tableFullRowClasses, tableBaseClass = _useClassName.tableBaseClass;
    var tbodyClasses = computed(function() {
      return [tableBaseClass.body];
    });
    return {
      t,
      global: global2,
      renderTNode,
      tableFullRowClasses,
      tbodyClasses,
      tableBaseClass
    };
  },
  render: function render89() {
    var _this = this, _this$data, _this$data2;
    var renderEmpty = function renderEmpty2(columns) {
      return createVNode("tr", {
        "class": [_this.tableBaseClass.emptyRow, _defineProperty$3({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
      }, [createVNode("td", {
        "colspan": columns.length
      }, [createVNode("div", {
        "class": [_this.tableBaseClass.empty, _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
        "style": _this.isWidthOverflow ? {
          width: "".concat(_this.tableWidth, "px")
        } : {}
      }, [_this.renderTNode("empty") || _this.t(_this.global.empty)])])]);
    };
    var getFullRow = function getFullRow2(columnLength2, type) {
      var tType = camelCase_1(type);
      var fullRowNode = _this.renderTNode(tType);
      if (["", null, void 0, false].includes(fullRowNode))
        return null;
      var isFixedToLeft = _this.isWidthOverflow && _this.columns.find(function(col) {
        return col.fixed === "left";
      });
      var classes6 = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
      return createVNode("tr", {
        "class": classes6
      }, [createVNode("td", {
        "colspan": columnLength2
      }, [createVNode("div", {
        "class": _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, isFixedToLeft),
        "style": isFixedToLeft ? {
          width: "".concat(_this.tableWidth, "px")
        } : {}
      }, [createVNode("div", {
        "class": _this.tableFullRowClasses.innerFullElement
      }, [fullRowNode])])])]);
    };
    var skipSpansMap = /* @__PURE__ */ new Map();
    var onTrRowspanOrColspan = function onTrRowspanOrColspan2(params, cellSpans) {
      var rowIndex = params.rowIndex, colIndex = params.colIndex;
      if (!cellSpans.rowspan && !cellSpans.colspan)
        return;
      var maxRowIndex = rowIndex + (cellSpans.rowspan || 1);
      var maxColIndex = colIndex + (cellSpans.colspan || 1);
      for (var i = rowIndex; i < maxRowIndex; i++) {
        for (var j = colIndex; j < maxColIndex; j++) {
          if (i !== rowIndex || j !== colIndex) {
            skipSpansMap.set([i, j].join(), true);
          }
        }
      }
    };
    var columnLength = this.columns.length;
    var dataLength = this.data.length;
    var trNodeList = [];
    skipSpansMap = /* @__PURE__ */ new Map();
    var properties = ["rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
    (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.forEach(function(row, rowIndex) {
      var trProps = _objectSpread$o(_objectSpread$o(_objectSpread$o({}, pick_1(_this.$props, TABLE_PROPS)), {}, {
        rowKey: _this.rowKey || "id",
        row,
        columns: _this.columns,
        rowIndex,
        dataLength,
        skipSpansMap
      }, pick_1(_this.$props, properties)), {}, {
        onTrRowspanOrColspan
      });
      if (_this.onCellClick) {
        trProps.onCellClick = _this.onCellClick;
      }
      var trNode = createVNode(TrElement, mergeProps({
        "key": get_1(row, _this.rowKey || "id")
      }, trProps, {
        "onRowMounted": _this.handleRowMounted
      }), _this.$slots);
      trNodeList.push(trNode);
      if (_this.renderExpandedRow) {
        var p2 = {
          row,
          index: rowIndex,
          columns: _this.columns,
          tableWidth: _this.tableWidth,
          isWidthOverflow: _this.isWidthOverflow
        };
        var expandedContent = _this.renderExpandedRow(p2);
        expandedContent && trNodeList.push(expandedContent);
      }
    });
    var list = [getFullRow(columnLength, "first-full-row"), trNodeList, getFullRow(columnLength, "last-full-row")];
    var isEmpty2 = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading;
    var translate = "translate(0, ".concat(this.translateY, "px)");
    var posStyle = {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    };
    return createVNode("tbody", {
      "class": this.tbodyClasses,
      "style": this.isVirtual && _objectSpread$o({}, posStyle)
    }, [isEmpty2 ? renderEmpty(this.columns) : list]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useCommonClassName() {
  var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
  var sizeClassNames = {
    small: "".concat(classPrefix2.value, "-size-s"),
    medium: "".concat(classPrefix2.value, "-size-m"),
    large: "".concat(classPrefix2.value, "-size-l"),
    "default": "",
    xs: "".concat(classPrefix2.value, "-size-xs"),
    xl: "".concat(classPrefix2.value, "-size-xl"),
    block: "".concat(classPrefix2.value, "-size-full-width")
  };
  var statusClassNames = {
    loading: "".concat(classPrefix2.value, "-is-loading"),
    loadMore: "".concat(classPrefix2.value, "-is-load-more"),
    disabled: "".concat(classPrefix2.value, "-is-disabled"),
    focused: "".concat(classPrefix2.value, "-is-focused"),
    success: "".concat(classPrefix2.value, "-is-success"),
    error: "".concat(classPrefix2.value, "-is-error"),
    warning: "".concat(classPrefix2.value, "-is-warning"),
    selected: "".concat(classPrefix2.value, "-is-selected"),
    active: "".concat(classPrefix2.value, "-is-active"),
    checked: "".concat(classPrefix2.value, "-is-checked"),
    current: "".concat(classPrefix2.value, "-is-current"),
    hidden: "".concat(classPrefix2.value, "-is-hidden"),
    visible: "".concat(classPrefix2.value, "-is-visible"),
    expanded: "".concat(classPrefix2.value, "-is-expanded"),
    indeterminate: "".concat(classPrefix2.value, "-is-indeterminate")
  };
  return {
    sizeClassNames,
    statusClassNames,
    classNames: {
      size: sizeClassNames,
      status: statusClassNames
    }
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function formatCSSUnit(unit) {
  if (!unit)
    return unit;
  return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
}
function useStyle(props2) {
  var _toRefs = toRefs(props2), size2 = _toRefs.size, bordered = _toRefs.bordered, stripe = _toRefs.stripe, hover = _toRefs.hover, verticalAlign = _toRefs.verticalAlign, height = _toRefs.height, maxHeight = _toRefs.maxHeight, tableContentWidth = _toRefs.tableContentWidth;
  var _useClassName = useClassName(), tableBaseClass = _useClassName.tableBaseClass, tableAlignClasses = _useClassName.tableAlignClasses;
  var _useCommonClassName = useCommonClassName(), sizeClassNames = _useCommonClassName.sizeClassNames;
  var tableClasses = computed(function() {
    var _ref;
    return [tableBaseClass.table, (_ref = {}, _defineProperty$3(_ref, sizeClassNames[size2.value], size2.value !== "medium"), _defineProperty$3(_ref, tableBaseClass.bordered, bordered.value), _defineProperty$3(_ref, tableBaseClass.striped, stripe.value), _defineProperty$3(_ref, tableBaseClass.hover, hover.value), _defineProperty$3(_ref, tableBaseClass.affixedHeader, props2.headerAffixedTop), _defineProperty$3(_ref, tableBaseClass.rowspanAndColspan, props2.rowspanAndColspan), _defineProperty$3(_ref, tableAlignClasses[verticalAlign.value], verticalAlign.value !== "middle"), _ref)];
  });
  var tableContentStyles = computed(function() {
    return {
      height: formatCSSUnit(height.value),
      maxHeight: formatCSSUnit(maxHeight.value)
    };
  });
  var tableElementStyles = computed(function() {
    return {
      width: formatCSSUnit(tableContentWidth.value)
    };
  });
  return {
    tableClasses,
    tableElementStyles,
    tableContentStyles
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$o(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$n(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$o(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$5(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var THead = defineComponent({
  name: "THead",
  props: {
    isFixedHeader: Boolean,
    rowAndColFixedPosition: Map,
    thWidthList: Object,
    bordered: Boolean,
    isMultipleHeader: Boolean,
    spansAndLeafNodes: Object,
    thList: Array
  },
  setup: function setup113(props2, _ref) {
    var slots = _ref.slots;
    var theadRef = ref();
    var classnames = useClassName();
    var tableHeaderClasses = classnames.tableHeaderClasses, tableBaseClass = classnames.tableBaseClass;
    var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
    var theadClasses = computed(function() {
      var _ref2;
      return [tableHeaderClasses.header, (_ref2 = {}, _defineProperty$3(_ref2, tableHeaderClasses.fixed, props2.isFixedHeader), _defineProperty$3(_ref2, tableBaseClass.bordered, props2.bordered && props2.isMultipleHeader), _defineProperty$3(_ref2, tableHeaderClasses.multipleHeader, props2.isMultipleHeader), _ref2)];
    });
    return _objectSpread$n(_objectSpread$n({}, classnames), {}, {
      theadClasses,
      classPrefix: classPrefix2,
      theadRef,
      slots
    });
  },
  render: function render90() {
    var _this = this;
    var renderThNodeList = function renderThNodeList2(rowAndColFixedPosition, thWidthList) {
      var thBorderMap = /* @__PURE__ */ new Map();
      var thRowspanAndColspan = _this.spansAndLeafNodes.rowspanAndColspanMap;
      return _this.thList.map(function(row, rowIndex) {
        var thRow = row.map(function(col, index2) {
          var _ref3, _col$children;
          var rowspanAndColspan = thRowspanAndColspan.get(col);
          if (index2 === 0 && rowspanAndColspan.rowspan > 1) {
            for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
              thBorderMap.set(_this.thList[j][0], true);
            }
          }
          var thStyles = getColumnFixedStyles(col, index2, rowAndColFixedPosition, _this.tableColFixedClasses);
          var colParams = {
            col,
            colIndex: index2,
            row: {},
            rowIndex: -1
          };
          var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$n(_objectSpread$n({}, colParams), {}, {
            type: "th"
          })) : col.className;
          var thClasses = [thStyles.classes, customClasses, (_ref3 = {}, _defineProperty$3(_ref3, _this.tableHeaderClasses.thBordered, thBorderMap.get(col)), _defineProperty$3(_ref3, "".concat(_this.classPrefix, "-table__th-").concat(col.colKey), col.colKey), _defineProperty$3(_ref3, _this.tdAlignClasses[col.align], col.align && col.align !== "left"), _ref3)];
          var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
          var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;
          var styles = _objectSpread$n(_objectSpread$n({}, thStyles.style || {}), {}, {
            width
          });
          var innerTh = renderTitle2(_this.slots, col, index2);
          return createVNode("th", mergeProps({
            "key": col.colKey,
            "data-colkey": col.colKey,
            "class": thClasses,
            "style": styles
          }, rowspanAndColspan), [createVNode("div", {
            "class": _this.tableBaseClass.thCellInner
          }, [col.ellipsis ? createVNode(TEllipsis, {
            "attach": _this.theadRef ? function() {
              return _this.theadRef;
            } : void 0
          }, _isSlot$5(innerTh) ? innerTh : {
            "default": function _default65() {
              return [innerTh];
            }
          }) : innerTh])]);
        });
        return createVNode("tr", {
          "key": rowIndex
        }, [thRow]);
      });
    };
    return createVNode("thead", {
      "ref": "theadRef",
      "class": this.theadClasses
    }, [renderThNodeList(this.rowAndColFixedPosition, this.thWidthList)]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$n(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$m(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$n(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var TFoot = defineComponent({
  name: "TFoot",
  props: {
    rowKey: String,
    isFixedHeader: Boolean,
    rowAndColFixedPosition: Map,
    footData: Array,
    columns: Array,
    rowAttributes: [Array, Object, Function],
    rowClassName: [Array, String, Object, Function]
  },
  setup: function setup114(props2, context) {
    var classnames = useClassName();
    var renderTFootCell = function renderTFootCell2(p2) {
      var col = p2.col, row = p2.row;
      if (isFunction_1(col.foot)) {
        return col.foot(h, p2);
      }
      if (isString_1(col.foot) && context.slots[col.foot]) {
        return context.slots[col.foot](p2) || col.foot;
      }
      return col.foot || get_1(row, col.colKey);
    };
    return _objectSpread$m(_objectSpread$m({}, classnames), {}, {
      renderTFootCell
    });
  },
  render: function render91() {
    var _this = this;
    if (!this.footData || !this.footData.length || !this.columns)
      return null;
    var theadClasses = [this.tableFooterClasses.footer, _defineProperty$3({}, this.tableFooterClasses.fixed, this.isFixedHeader)];
    return createVNode("tfoot", {
      "ref": "tfooterRef",
      "class": theadClasses
    }, [this.footData.map(function(row, rowIndex) {
      var trAttributes = formatRowAttributes(_this.rowAttributes, {
        row,
        rowIndex,
        type: "foot"
      });
      var customClasses = formatRowClassNames(_this.rowClassName, {
        row,
        rowIndex,
        type: "foot"
      }, _this.rowKey || "id");
      return createVNode("tr", mergeProps({
        "key": rowIndex
      }, trAttributes, {
        "class": customClasses
      }), [_this.columns.map(function(col, colIndex) {
        var tdStyles = getColumnFixedStyles(col, colIndex, _this.rowAndColFixedPosition, _this.tableColFixedClasses);
        return createVNode("td", {
          "key": col.colKey,
          "class": tdStyles.classes,
          "style": tdStyles.style
        }, [_this.renderTFootCell({
          row,
          rowIndex,
          col,
          colIndex
        })]);
      })]);
    })]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$m(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$l(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$m(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$4(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var BASE_TABLE_EVENTS = ["page-change", "cell-click", "scroll", "scrollX", "scrollY"];
ROW_LISTENERS.map(function(t) {
  return "row-".concat(t);
}).concat(BASE_TABLE_EVENTS);
var _BaseTable = defineComponent({
  name: "TBaseTable",
  props: _objectSpread$l(_objectSpread$l({}, baseTableProps), {}, {
    renderExpandedRow: Function
  }),
  setup: function setup115(props2, context) {
    var _props2$scroll2;
    var renderTNode = useTNodeJSX();
    var tableRef = ref();
    var tableElmRef = ref();
    var _useClassName = useClassName(), virtualScrollClasses = _useClassName.virtualScrollClasses, tableLayoutClasses = _useClassName.tableLayoutClasses, tableBaseClass = _useClassName.tableBaseClass, tableColFixedClasses = _useClassName.tableColFixedClasses;
    var _useCommonClassName = useCommonClassName(), statusClassNames = _useCommonClassName.statusClassNames;
    var _useStyle = useStyle(props2), tableClasses = _useStyle.tableClasses, tableContentStyles = _useStyle.tableContentStyles, tableElementStyles = _useStyle.tableElementStyles;
    var _useConfig = useConfig("table"), global2 = _useConfig.global;
    var _useFixed = useFixed(props2), affixHeaderRef = _useFixed.affixHeaderRef, scrollbarWidth = _useFixed.scrollbarWidth, virtualScrollHeaderPos = _useFixed.virtualScrollHeaderPos, tableWidth = _useFixed.tableWidth, tableContentRef = _useFixed.tableContentRef, isFixedHeader = _useFixed.isFixedHeader, isWidthOverflow = _useFixed.isWidthOverflow, isFixedColumn = _useFixed.isFixedColumn, thWidthList = _useFixed.thWidthList, showColumnShadow = _useFixed.showColumnShadow, showAffixHeader = _useFixed.showAffixHeader, rowAndColFixedPosition = _useFixed.rowAndColFixedPosition, refreshTable = _useFixed.refreshTable, onTableContentScroll = _useFixed.onTableContentScroll, updateHeaderScroll = _useFixed.updateHeaderScroll;
    var _useTableHeader = useTableHeader(props2), isMultipleHeader = _useTableHeader.isMultipleHeader, spansAndLeafNodes = _useTableHeader.spansAndLeafNodes, thList = _useTableHeader.thList;
    var _usePagination = usePagination(props2), dataSource = _usePagination.dataSource, isPaginateData = _usePagination.isPaginateData, renderPagination = _usePagination.renderPagination;
    var dynamicBaseTableClasses = computed(function() {
      var _ref;
      return [tableClasses.value, (_ref = {}, _defineProperty$3(_ref, tableBaseClass.headerFixed, isFixedHeader.value), _defineProperty$3(_ref, tableBaseClass.columnFixed, isFixedColumn.value), _defineProperty$3(_ref, tableBaseClass.widthOverflow, isWidthOverflow.value), _defineProperty$3(_ref, tableBaseClass.multipleHeader, isMultipleHeader.value), _defineProperty$3(_ref, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty$3(_ref, tableColFixedClasses.rightShadow, showColumnShadow.right), _ref)];
    });
    var tableElmClasses = computed(function() {
      return [[tableLayoutClasses[props2.tableLayout]], _defineProperty$3({}, tableBaseClass.fullHeight, props2.height)];
    });
    var isVirtual = computed(function() {
      var _props2$data, _props2$scroll;
      return type === "virtual" && ((_props2$data = props2.data) === null || _props2$data === void 0 ? void 0 : _props2$data.length) > (((_props2$scroll = props2.scroll) === null || _props2$scroll === void 0 ? void 0 : _props2$scroll.threshold) || 100);
    });
    var showRightDivider = computed(function() {
      return props2.bordered && isFixedHeader.value && (isMultipleHeader.value && isWidthOverflow.value || !isMultipleHeader.value);
    });
    var onFixedChange = function onFixedChange2() {
      nextTick(function() {
        updateHeaderScroll();
      });
    };
    var _ref3 = props2.scroll || {}, type = _ref3.type, rowHeight = _ref3.rowHeight, _ref3$bufferSize = _ref3.bufferSize, bufferSize = _ref3$bufferSize === void 0 ? 20 : _ref3$bufferSize, _ref3$isFixedRowHeigh = _ref3.isFixedRowHeight, isFixedRowHeight = _ref3$isFixedRowHeigh === void 0 ? false : _ref3$isFixedRowHeigh;
    var _toRefs = toRefs(props2), data26 = _toRefs.data;
    var _ref4 = type === "virtual" ? useVirtualScroll({
      container: tableContentRef,
      data: data26,
      fixedHeight: isFixedRowHeight,
      lineHeight: rowHeight,
      bufferSize,
      threshold: (_props2$scroll2 = props2.scroll) === null || _props2$scroll2 === void 0 ? void 0 : _props2$scroll2.threshold
    }) : {}, _ref4$trs = _ref4.trs, trs = _ref4$trs === void 0 ? null : _ref4$trs, _ref4$scrollHeight = _ref4.scrollHeight, scrollHeight = _ref4$scrollHeight === void 0 ? null : _ref4$scrollHeight, _ref4$visibleData = _ref4.visibleData, visibleData = _ref4$visibleData === void 0 ? null : _ref4$visibleData, _ref4$translateY = _ref4.translateY, translateY = _ref4$translateY === void 0 ? null : _ref4$translateY, _ref4$handleScroll = _ref4.handleScroll, handleVirtualScroll = _ref4$handleScroll === void 0 ? null : _ref4$handleScroll, _ref4$handleRowMounte = _ref4.handleRowMounted, handleRowMounted = _ref4$handleRowMounte === void 0 ? null : _ref4$handleRowMounte;
    provide("tableContentRef", tableContentRef);
    provide("rowHeightRef", ref(rowHeight));
    var lastScrollY = -1;
    var onInnerScroll = type === "virtual" ? function(e) {
      onTableContentScroll(e);
      var target = e.target || e.srcElement;
      var top2 = target.scrollTop;
      if (Math.abs(lastScrollY - top2) > 5) {
        handleVirtualScroll();
        lastScrollY = top2;
      } else {
        lastScrollY = -1;
      }
    } : onTableContentScroll;
    return {
      thList,
      isVirtual,
      global: global2,
      virtualScrollHeaderPos,
      tableWidth,
      tableRef,
      tableElmRef,
      tableBaseClass,
      spansAndLeafNodes,
      dynamicBaseTableClasses,
      tableContentStyles,
      tableElementStyles,
      virtualScrollClasses,
      tableLayoutClasses,
      tableElmClasses,
      tableContentRef,
      isFixedHeader,
      isWidthOverflow,
      isFixedColumn,
      rowAndColFixedPosition,
      showColumnShadow,
      thWidthList,
      isPaginateData,
      dataSource,
      scrollType: type,
      rowHeight,
      trs,
      bufferSize,
      scrollHeight,
      visibleData,
      translateY,
      affixHeaderRef,
      showAffixHeader,
      statusClassNames,
      scrollbarWidth,
      isMultipleHeader,
      showRightDivider,
      refreshTable,
      onTableContentScroll,
      renderPagination,
      renderTNode,
      handleRowMounted,
      onFixedChange,
      updateHeaderScroll,
      onInnerScroll
    };
  },
  render: function render92() {
    var _this$spansAndLeafNod, _this$tableContentRef;
    var rowAndColFixedPosition = this.rowAndColFixedPosition;
    var data26 = this.isPaginateData ? this.dataSource : this.data;
    var defaultColWidth = this.tableLayout === "fixed" && this.isWidthOverflow ? "100px" : void 0;
    var colgroup = createVNode("colgroup", null, [(((_this$spansAndLeafNod = this.spansAndLeafNodes) === null || _this$spansAndLeafNod === void 0 ? void 0 : _this$spansAndLeafNod.leafColumns) || this.columns).map(function(col) {
      return createVNode("col", {
        "key": col.colKey,
        "style": {
          width: formatCSSUnit(col.width) || defaultColWidth
        }
      }, null);
    })]);
    var affixedHeader = Boolean((this.headerAffixedTop || this.isVirtual) && this.tableWidth) && createVNode("div", {
      "ref": "affixHeaderRef",
      "style": {
        width: "".concat(this.tableWidth, "px"),
        opacity: Number(this.showAffixHeader)
      },
      "class": _defineProperty$3({}, this.tableBaseClass.affixedHeaderElm, this.headerAffixedTop || this.isVirtual)
    }, [createVNode("table", {
      "class": this.tableElmClasses,
      "style": _objectSpread$l(_objectSpread$l({}, this.tableElementStyles), {}, {
        width: "".concat(this.tableWidth, "px")
      })
    }, [colgroup, createVNode(THead, {
      "isFixedHeader": this.isFixedHeader,
      "rowAndColFixedPosition": this.rowAndColFixedPosition,
      "isMultipleHeader": this.isMultipleHeader,
      "bordered": this.bordered,
      "spansAndLeafNodes": this.spansAndLeafNodes,
      "thList": this.thList,
      "thWidthList": this.thWidthList
    }, this.$slots)])]);
    var translate = "translate(0, ".concat(this.scrollHeight, "px)");
    var virtualStyle = {
      transform: translate,
      "-ms-transform": translate,
      "-moz-transform": translate,
      "-webkit-transform": translate
    };
    var tableBodyProps = _objectSpread$l({
      rowAndColFixedPosition,
      showColumnShadow: this.showColumnShadow,
      data: this.isVirtual ? this.visibleData : data26,
      columns: this.spansAndLeafNodes.leafColumns,
      tableElm: this.tableRef,
      tableWidth: this.tableWidth,
      isWidthOverflow: this.isWidthOverflow,
      isVirtual: this.isVirtual,
      translateY: this.translateY,
      scrollType: this.scrollType,
      rowHeight: this.rowHeight,
      trs: this.trs,
      bufferSize: this.bufferSize,
      scroll: this.scroll,
      tableContentElm: this.tableContentRef,
      handleRowMounted: this.handleRowMounted,
      renderExpandedRow: this.renderExpandedRow
    }, pick_1(this.$props, extendTableProps));
    var tableContent = createVNode("div", {
      "ref": "tableContentRef",
      "class": this.tableBaseClass.content,
      "style": this.tableContentStyles,
      "onScroll": this.onInnerScroll
    }, [this.isVirtual && createVNode("div", {
      "class": this.virtualScrollClasses.cursor,
      "style": virtualStyle
    }, null), createVNode("table", {
      "ref": "tableElmRef",
      "class": this.tableElmClasses,
      "style": this.tableElementStyles
    }, [colgroup, createVNode(THead, {
      "isFixedHeader": this.isFixedHeader,
      "rowAndColFixedPosition": this.rowAndColFixedPosition,
      "isMultipleHeader": this.isMultipleHeader,
      "bordered": this.bordered,
      "spansAndLeafNodes": this.spansAndLeafNodes,
      "thList": this.thList
    }, this.$slots), createVNode(TBody, tableBodyProps, this.$slots), createVNode(TFoot, {
      "rowKey": this.rowKey,
      "isFixedHeader": this.isFixedHeader,
      "rowAndColFixedPosition": rowAndColFixedPosition,
      "footData": this.footData,
      "columns": this.columns,
      "rowAttributes": this.rowAttributes,
      "rowClassName": this.rowClassName
    }, this.$slots)])]);
    var customLoadingText = this.renderTNode("loading");
    var loadingContent = this.loading ? createVNode(Loading, mergeProps({
      "loading": !!(this.loading || customLoadingText),
      "text": customLoadingText ? function() {
        return customLoadingText;
      } : void 0,
      "showOverlay": true
    }, this.loadingProps), _isSlot$4(tableContent) ? tableContent : {
      "default": function _default65() {
        return [tableContent];
      }
    }) : tableContent;
    var topContent = this.renderTNode("topContent");
    var bottomContent = this.renderTNode("bottomContent");
    return createVNode("div", {
      "ref": "tableRef",
      "class": this.dynamicBaseTableClasses,
      "style": "position: relative"
    }, [!!topContent && createVNode("div", {
      "class": this.tableBaseClass.topContent
    }, [topContent]), !!(this.isVirtual || this.headerAffixedTop) && (this.headerAffixedTop ? createVNode(Affix, mergeProps({
      "offsetTop": 0
    }, this.headerAffixProps, {
      "onFixedChange": this.onFixedChange
    }), _isSlot$4(affixedHeader) ? affixedHeader : {
      "default": function _default65() {
        return [affixedHeader];
      }
    }) : this.isFixedHeader && affixedHeader), loadingContent, this.showRightDivider && createVNode("div", {
      "class": this.tableBaseClass.scrollbarDivider,
      "style": {
        right: "".concat(this.scrollbarWidth, "px"),
        height: "".concat((_this$tableContentRef = this.tableContentRef) === null || _this$tableContentRef === void 0 ? void 0 : _this$tableContentRef.offsetHeight, "px")
      }
    }, null), !!bottomContent && createVNode("div", {
      "class": this.tableBaseClass.bottomContent
    }, [bottomContent]), this.renderPagination()]);
  }
});
function last$1(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : void 0;
}
var last_1 = last$1;
var baseGet$1 = _baseGet, baseSlice = _baseSlice;
function parent$1(object, path) {
  return path.length < 2 ? object : baseGet$1(object, baseSlice(path, 0, -1));
}
var _parent = parent$1;
var castPath$1 = _castPath, last = last_1, parent = _parent, toKey$2 = _toKey;
function baseUnset$1(object, path) {
  path = castPath$1(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey$2(last(path))];
}
var _baseUnset = baseUnset$1;
var isPlainObject = isPlainObject_1;
function customOmitClone$1(value6) {
  return isPlainObject(value6) ? void 0 : value6;
}
var _customOmitClone = customOmitClone$1;
var arrayMap = _arrayMap, baseClone = _baseClone, baseUnset = _baseUnset, castPath = _castPath, copyObject = _copyObject, customOmitClone = _customOmitClone, flatRest = _flatRest, getAllKeysIn = _getAllKeysIn;
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
var omit = flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function(path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});
var omit_1 = omit;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var primaryTableProps = {
  asyncLoading: {
    type: [String, Function]
  },
  columnController: {
    type: Object
  },
  columnControllerVisible: {
    type: Boolean,
    "default": void 0
  },
  defaultColumnControllerVisible: {
    type: Boolean,
    "default": void 0
  },
  columns: {
    type: Array,
    "default": function _default57() {
      return [];
    }
  },
  displayColumns: {
    type: Array,
    "default": void 0
  },
  defaultDisplayColumns: {
    type: Array
  },
  dragSort: {
    type: String,
    validator: function validator108(val) {
      if (!val)
        return true;
      return ["row", "row-handler", "col", "drag-col"].includes(val);
    }
  },
  dragSortOptions: {
    type: Object
  },
  expandedRow: {
    type: [String, Function]
  },
  expandedRowKeys: {
    type: Array,
    "default": void 0
  },
  defaultExpandedRowKeys: {
    type: Array,
    "default": function _default58() {
      return [];
    }
  },
  expandIcon: {
    type: [Boolean, Function],
    "default": true
  },
  expandOnRowClick: Boolean,
  filterIcon: {
    type: Function
  },
  filterRow: {
    type: [String, Function]
  },
  filterValue: {
    type: Object,
    "default": void 0
  },
  defaultFilterValue: {
    type: Object
  },
  multipleSort: Boolean,
  selectedRowKeys: {
    type: Array,
    "default": void 0
  },
  defaultSelectedRowKeys: {
    type: Array
  },
  sort: {
    type: [Object, Array],
    "default": void 0
  },
  defaultSort: {
    type: [Object, Array]
  },
  sortIcon: {
    type: Function
  },
  sortOnRowDraggable: Boolean,
  onAsyncLoadingClick: Function,
  onCellClick: Function,
  onChange: Function,
  onColumnChange: Function,
  onColumnControllerVisibleChange: Function,
  onDataChange: Function,
  onDisplayColumnsChange: Function,
  onDragSort: Function,
  onExpandChange: Function,
  onFilterChange: Function,
  onSelectChange: Function,
  onSortChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$7 = {
  attach: {
    type: [String, Function],
    "default": ""
  },
  body: {
    type: [String, Function],
    "default": ""
  },
  cancelBtn: {
    type: [String, Object, Function],
    "default": ""
  },
  closeBtn: {
    type: [String, Boolean, Function],
    "default": true
  },
  closeOnEscKeydown: {
    type: Boolean,
    "default": true
  },
  closeOnOverlayClick: {
    type: Boolean,
    "default": true
  },
  confirmBtn: {
    type: [String, Object, Function],
    "default": ""
  },
  "default": {
    type: [String, Function]
  },
  destroyOnClose: Boolean,
  draggable: Boolean,
  footer: {
    type: [Boolean, Function],
    "default": true
  },
  header: {
    type: [String, Boolean, Function],
    "default": true
  },
  mode: {
    type: String,
    "default": "modal",
    validator: function validator109(val) {
      return ["modal", "modeless", "normal"].includes(val);
    }
  },
  placement: {
    type: String,
    "default": "top",
    validator: function validator110(val) {
      return ["top", "center"].includes(val);
    }
  },
  preventScrollThrough: {
    type: Boolean,
    "default": true
  },
  showOverlay: {
    type: Boolean,
    "default": true
  },
  theme: {
    type: String,
    "default": "default",
    validator: function validator111(val) {
      return ["default", "info", "warning", "danger", "success"].includes(val);
    }
  },
  top: {
    type: [String, Number]
  },
  visible: Boolean,
  defaultVisible: Boolean,
  width: {
    type: [String, Number]
  },
  zIndex: {
    type: Number
  },
  onCancel: Function,
  onClose: Function,
  onCloseBtnClick: Function,
  onClosed: Function,
  onConfirm: Function,
  onEscKeydown: Function,
  onOpened: Function,
  onOverlayClick: Function
};
var index$9 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$l(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$k(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$l(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useAction(action) {
  var instance = getCurrentInstance();
  var renderTNodeJSX3 = useTNodeJSX();
  var getDefaultConfirmBtnProps = function getDefaultConfirmBtnProps2(options) {
    var globalConfirm = options.globalConfirm, theme = options.theme, globalConfirmBtnTheme = options.globalConfirmBtnTheme;
    var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
    var props2 = {
      theme: defaultTheme,
      size: options.size,
      onClick: function onClick2(e) {
        action.confirmBtnAction(e);
      }
    };
    if (isString_1(globalConfirm)) {
      props2.content = globalConfirm;
    } else if (isObject_1(globalConfirm)) {
      props2 = _objectSpread$k(_objectSpread$k({}, props2), globalConfirm);
    }
    return props2;
  };
  var getDefaultCancelBtnProps = function getDefaultCancelBtnProps2(options) {
    var globalCancel = options.globalCancel;
    var props2 = {
      theme: "default",
      size: options.size,
      onClick: function onClick2(e) {
        action.cancelBtnAction(e);
      }
    };
    if (isString_1(globalCancel)) {
      props2.content = globalCancel;
    } else if (isObject_1(globalCancel)) {
      props2 = _objectSpread$k(_objectSpread$k({}, props2), globalCancel);
    }
    return props2;
  };
  var getButtonByProps = function getButtonByProps2(button, defaultButton, className) {
    var newOptions = defaultButton;
    if (isString_1(button)) {
      newOptions.content = button;
    } else if (isObject_1(button)) {
      newOptions = _objectSpread$k(_objectSpread$k({}, newOptions), button);
    }
    return createVNode(Button, mergeProps({
      "class": className
    }, newOptions), null);
  };
  var getConfirmBtn = function getConfirmBtn2(options) {
    var confirmBtn = options.confirmBtn, className = options.className;
    if (confirmBtn === null)
      return null;
    if (confirmBtn && instance.slots.confirmBtn) {
      console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
    }
    var defaultButtonProps = getDefaultConfirmBtnProps(options);
    if (!confirmBtn && !instance.slots.confirmBtn) {
      return createVNode(Button, mergeProps({
        "class": className
      }, defaultButtonProps), null);
    }
    if (confirmBtn && ["string", "object"].includes(_typeof$1(confirmBtn))) {
      return getButtonByProps(confirmBtn, defaultButtonProps, className);
    }
    return renderTNodeJSX3("confirmBtn");
  };
  var getCancelBtn = function getCancelBtn2(options) {
    var cancelBtn = options.cancelBtn, className = options.className;
    if (cancelBtn === null)
      return null;
    if (cancelBtn && instance.slots.cancelBtn) {
      console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
    }
    var defaultButtonProps = getDefaultCancelBtnProps(options);
    if (!cancelBtn && !instance.slots.cancelBtn) {
      return createVNode(Button, mergeProps({
        "class": className
      }, defaultButtonProps), null);
    }
    if (cancelBtn && ["string", "object"].includes(_typeof$1(cancelBtn))) {
      return getButtonByProps(cancelBtn, defaultButtonProps);
    }
    return renderTNodeJSX3("cancelBtn");
  };
  return {
    getConfirmBtn,
    getCancelBtn
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$k(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$j(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$k(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function GetCSSValue(v) {
  return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
}
var mousePosition;
var getClickPosition = function getClickPosition2(e) {
  mousePosition = {
    x: e.clientX,
    y: e.clientY
  };
  setTimeout(function() {
    mousePosition = null;
  }, 100);
};
if (typeof window !== "undefined" && window.document && window.document.documentElement) {
  document.documentElement.addEventListener("click", getClickPosition, true);
}
function InitDragEvent(dragBox) {
  var target = dragBox;
  target.addEventListener("mousedown", function(targetEvent) {
    var disX = targetEvent.clientX - target.offsetLeft;
    var disY = targetEvent.clientY - target.offsetTop;
    function mouseMoverHandler(documentEvent) {
      var left2 = documentEvent.clientX - disX;
      var top2 = documentEvent.clientY - disY;
      target.style.left = "".concat(left2, "px");
      target.style.top = "".concat(top2, "px");
    }
    function mouseUpHandler() {
      document.removeEventListener("mousemove", mouseMoverHandler);
      document.removeEventListener("mouseup", mouseUpHandler);
    }
    document.addEventListener("mousemove", mouseMoverHandler);
    document.addEventListener("mouseup", mouseUpHandler);
    document.addEventListener("dragend", mouseUpHandler);
  });
}
var _Dialog = defineComponent({
  name: "TDialog",
  components: {
    CloseIcon: close,
    InfoCircleFilledIcon: infoCircleFilled,
    CheckCircleFilledIcon: checkCircleFilled,
    ErrorCircleFilledIcon: errorCircleFilled,
    TButton: Button,
    Transition
  },
  directives: {
    TransferDom,
    draggable: function draggable(el, binding) {
      if (el && binding && binding.value) {
        InitDragEvent(el);
      }
    }
  },
  props: props$7,
  emits: ["update:visible"],
  setup: function setup116(props2, context) {
    var _this = this;
    var COMPONENT_NAME2 = usePrefixClass("dialog");
    var LOCK_CLASS = usePrefixClass("dialog--lock");
    var classPrefix2 = usePrefixClass();
    var renderContent6 = useContent();
    var renderTNodeJSX3 = useTNodeJSX();
    var dialogEle = ref(null);
    var _useConfig = useConfig("dialog"), global2 = _useConfig.global;
    var confirmBtnAction = function confirmBtnAction2(e) {
      var _props2$onConfirm;
      (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
        e
      });
    };
    var cancelBtnAction = function cancelBtnAction2(e) {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
        e
      });
      emitCloseEvent({
        trigger: "cancel",
        e
      });
    };
    var _useAction = useAction({
      confirmBtnAction,
      cancelBtnAction
    }), getConfirmBtn = _useAction.getConfirmBtn, getCancelBtn = _useAction.getCancelBtn;
    useDestroyOnClose();
    var scrollWidth = ref(0);
    var isModal = computed(function() {
      return props2.mode === "modal";
    });
    var isModeless = computed(function() {
      return props2.mode === "modeless";
    });
    var maskClass = computed(function() {
      return ["".concat(COMPONENT_NAME2.value, "__mask"), !props2.showOverlay && "".concat(classPrefix2.value, "-is-hidden")];
    });
    var dialogClass = computed(function() {
      var dialogClass2 = ["".concat(COMPONENT_NAME2.value), "".concat(COMPONENT_NAME2.value, "--default"), "".concat(COMPONENT_NAME2.value, "--").concat(props2.placement), "".concat(COMPONENT_NAME2.value, "__modal-").concat(props2.theme)];
      if (["modeless", "modal"].includes(props2.mode)) {
        dialogClass2.push("".concat(COMPONENT_NAME2.value, "--fixed"));
      }
      return dialogClass2;
    });
    var dialogStyle = computed(function() {
      var top2 = props2.top, placement = props2.placement;
      var topStyle = {};
      if (top2) {
        var topValue = GetCSSValue(top2);
        topStyle = {
          top: topValue,
          transform: "translate(-50%, 0)",
          maxHeight: "calc(100% - ".concat(topValue, ")")
        };
      } else if (placement === "top") {
        topStyle = {
          maxHeight: "calc(100% - 20%)"
        };
      }
      return _objectSpread$j({
        width: GetCSSValue(props2.width)
      }, topStyle);
    });
    watch(function() {
      return props2.visible;
    }, function(value6) {
      if (value6) {
        if (scrollWidth.value > 0) {
          var bodyCssText = "position: relative;width: calc(100% - ".concat(scrollWidth.value, "px);");
          document.body.style.cssText = bodyCssText;
        }
        !isModeless.value && addClass(document.body, LOCK_CLASS.value);
        nextTick(function() {
          if (mousePosition && dialogEle.value) {
            dialogEle.value.style.transformOrigin = "".concat(mousePosition.x - dialogEle.value.offsetLeft, "px ").concat(mousePosition.y - dialogEle.value.offsetTop, "px");
          }
        });
      } else {
        document.body.style.cssText = "";
        removeClass(document.body, LOCK_CLASS.value);
      }
      addKeyboardEvent(value6);
    });
    var addKeyboardEvent = function addKeyboardEvent2(status) {
      if (status) {
        document.addEventListener("keydown", keyboardEvent);
      } else {
        document.removeEventListener("keydown", keyboardEvent);
      }
    };
    var keyboardEvent = function keyboardEvent2(e) {
      if (e.code === "Escape") {
        var _props2$onEscKeydown;
        (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
          e
        });
        if (props2.closeOnEscKeydown) {
          emitCloseEvent({
            trigger: "esc",
            e
          });
        }
      }
    };
    var overlayAction = function overlayAction2(e) {
      var _props2$onOverlayClic;
      (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
        e
      });
      if (props2.closeOnOverlayClick) {
        emitCloseEvent({
          trigger: "overlay",
          e
        });
      }
    };
    var closeBtnAction = function closeBtnAction2(e) {
      var _props2$onCloseBtnCli;
      (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
        e
      });
      emitCloseEvent({
        trigger: "close-btn",
        e
      });
    };
    var afterEnter = function afterEnter2() {
      var _props2$onOpened;
      (_props2$onOpened = props2.onOpened) === null || _props2$onOpened === void 0 ? void 0 : _props2$onOpened.call(props2);
    };
    var afterLeave = function afterLeave2() {
      var _props2$onClosed;
      (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2);
    };
    var emitCloseEvent = function emitCloseEvent2(ctx) {
      var _props2$onClose;
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, ctx);
      context.emit("update:visible", false);
    };
    var hasEventOn = function hasEventOn2(name2) {
      var _this$_events;
      var eventFuncs = (_this$_events = _this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name2];
      return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
    };
    var getIcon2 = function getIcon3() {
      var icon = {
        info: createVNode(infoCircleFilled, {
          "class": "t-is-info"
        }, null),
        warning: createVNode(errorCircleFilled, {
          "class": "t-is-warning"
        }, null),
        danger: createVNode(errorCircleFilled, {
          "class": "t-is-error"
        }, null),
        success: createVNode(checkCircleFilled, {
          "class": "t-is-success"
        }, null)
      };
      return icon[props2.theme];
    };
    var renderDialog = function renderDialog2() {
      var defaultHeader = createVNode("h5", {
        "class": "title"
      }, null);
      var defaultCloseBtn = createVNode(close, null, null);
      var body = renderContent6("default", "body");
      var defaultFooter = createVNode("div", null, [getCancelBtn({
        cancelBtn: props2.cancelBtn,
        globalCancel: global2.value.cancel,
        className: "".concat(COMPONENT_NAME2.value, "__cancel")
      }), getConfirmBtn({
        theme: props2.theme,
        confirmBtn: props2.confirmBtn,
        globalConfirm: global2.value.confirm,
        globalConfirmBtnTheme: global2.value.confirmBtnTheme,
        className: "".concat(COMPONENT_NAME2.value, "__confirm")
      })]);
      var bodyClassName = props2.theme === "default" ? "".concat(COMPONENT_NAME2.value, "__body") : "".concat(COMPONENT_NAME2.value, "__body__icon");
      return withDirectives(createVNode("div", {
        "key": "dialog",
        "class": dialogClass.value,
        "style": dialogStyle.value,
        "ref": "dialogEle"
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__header")
      }, [getIcon2(), renderTNodeJSX3("header", defaultHeader)]), props2.closeBtn ? createVNode("span", {
        "class": "".concat(COMPONENT_NAME2.value, "__close"),
        "onClick": closeBtnAction
      }, [renderTNodeJSX3("closeBtn", defaultCloseBtn)]) : null, createVNode("div", {
        "class": bodyClassName
      }, [body]), createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__footer")
      }, [renderTNodeJSX3("footer", defaultFooter)])]), [[resolveDirective("draggable"), isModeless.value && props2.draggable]]);
    };
    onMounted(function() {
      scrollWidth.value = window.innerWidth - document.body.offsetWidth;
    });
    onBeforeUnmount(function() {
      addKeyboardEvent(false);
    });
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      scrollWidth,
      isModal,
      isModeless,
      maskClass,
      dialogClass,
      dialogStyle,
      dialogEle,
      afterEnter,
      afterLeave,
      hasEventOn,
      renderDialog,
      overlayAction
    };
  },
  render: function render93() {
    var _this2 = this;
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    var maskView = this.isModal && createVNode("div", {
      "key": "mask",
      "class": this.maskClass,
      "onClick": this.overlayAction
    }, null);
    var dialogView = this.renderDialog();
    var view = [maskView, dialogView];
    var ctxStyle = {
      zIndex: this.zIndex
    };
    var ctxClass = ["".concat(COMPONENT_NAME2, "__ctx"), {
      "t-dialog__ctx--fixed": this.mode === "modal"
    }];
    return createVNode(resolveComponent("transition"), {
      "duration": 300,
      "name": "".concat(COMPONENT_NAME2, "-zoom__vue"),
      "onAfterEnter": this.afterEnter,
      "onAfterLeave": this.afterLeave
    }, {
      "default": function _default65() {
        return [(!_this2.destroyOnClose || _this2.visible) && withDirectives(createVNode("div", {
          "class": ctxClass,
          "style": ctxStyle
        }, [view]), [[vShow, _this2.visible], [resolveDirective("transfer-dom"), _this2.attach]])];
      }
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$j(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$i(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$j(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var createDialog = function createDialog2(props2) {
  var options = _objectSpread$i({}, props2);
  var wrapper = document.createElement("div");
  var visible4 = ref(false);
  var className = options.className;
  var component = defineComponent({
    setup: function setup134() {
      var dialogOptions = ref(options);
      onMounted(function() {
        visible4.value = true;
        document.activeElement.blur();
      });
      return {
        dialogOptions
      };
    },
    render: function render102() {
      var onClose = options.onClose || function() {
        visible4.value = false;
      };
      delete options.className;
      return h(_Dialog, _objectSpread$i({
        onClose,
        visible: visible4.value
      }, this.dialogOptions));
    }
  });
  var dialog = createApp(component).mount(wrapper);
  if (className) {
    className.split(" ").forEach(function(name2) {
      dialog.$el.classList.add(name2.trim());
    });
  }
  if (options.style) {
    dialog.$el.style.cssText += options.style;
  }
  var container = getAttach(options.attach);
  if (container) {
    container.appendChild(wrapper);
  } else {
    console.error("attach is not exist");
  }
  var dialogNode = {
    show: function show2() {
      visible4.value = true;
    },
    hide: function hide2() {
      visible4.value = false;
    },
    update: function update(options2) {
      Object.assign(dialog, {
        dialogOptions: options2
      });
    },
    destroy: function destroy2() {
      visible4.value = false;
    }
  };
  return dialogNode;
};
var confirm = function confirm2(props2) {
  return createDialog(props2);
};
var alert = function alert2(props2) {
  var options = _objectSpread$i({}, props2);
  options.cancelBtn = null;
  return createDialog(options);
};
var extraApi$1 = {
  confirm,
  alert
};
var DialogPlugin = createDialog;
DialogPlugin.install = function(app) {
  app.config.globalProperties.$dialog = createDialog;
  Object.keys(extraApi$1).forEach(function(funcName) {
    app.config.globalProperties.$dialog[funcName] = extraApi$1[funcName];
  });
};
Object.keys(extraApi$1).forEach(function(funcName) {
  DialogPlugin[funcName] = extraApi$1[funcName];
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$i(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$h(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$i(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function getColumnKeys(columns) {
  var keys2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  for (var i = 0, len2 = columns.length; i < len2; i++) {
    var _col$children;
    var col = columns[i];
    col.colKey && keys2.push(col.colKey);
    if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
      keys2 = keys2.concat(getColumnKeys(col.children, _toConsumableArray(keys2)));
    }
  }
  return keys2;
}
function useColumnController(props2, context) {
  var _useConfig = useConfig("table"), classPrefix2 = _useConfig.classPrefix, global2 = _useConfig.global;
  var _toRefs = toRefs(props2), columns = _toRefs.columns, columnController = _toRefs.columnController, displayColumns = _toRefs.displayColumns, columnControllerVisible = _toRefs.columnControllerVisible;
  var dialogInstance = ref(null);
  var enabledColKeys = computed(function() {
    var _columnController$val;
    var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray(new Set(getColumnKeys(columns.value)))).filter(function(v) {
      return v;
    });
    return new Set(arr);
  });
  var keys2 = _toConsumableArray(new Set(getColumnKeys(columns.value)));
  var _useDefaultValue = useDefaultValue(displayColumns, props2.defaultDisplayColumns || keys2, props2.onDisplayColumnsChange, "displayColumns"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tDisplayColumns = _useDefaultValue2[0], setTDisplayColumns = _useDefaultValue2[1];
  var columnCheckboxKeys = ref(displayColumns.value || props2.defaultDisplayColumns || keys2);
  var checkboxOptions = computed(function() {
    return getCheckboxOptions(columns.value);
  });
  var intersectionChecked = computed(function() {
    return intersection_1(columnCheckboxKeys.value, _toConsumableArray(enabledColKeys.value));
  });
  watch([displayColumns], function(_ref) {
    var _ref2 = _slicedToArray(_ref, 1), val = _ref2[0];
    columnCheckboxKeys.value = val || props2.defaultDisplayColumns || keys2;
  });
  function getCheckboxOptions(columns2) {
    var arr = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var _loop = function _loop2(i2, len3) {
      var _item$children;
      var item = columns2[i2];
      if (item.colKey) {
        arr.push({
          label: function label2() {
            return renderTitle2(context.slots, item, i2);
          },
          value: item.colKey,
          disabled: !enabledColKeys.value.has(item.colKey)
        });
      }
      if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
        getCheckboxOptions(item.children, arr);
      }
    };
    for (var i = 0, len2 = columns2.length; i < len2; i++) {
      _loop(i);
    }
    return arr;
  }
  var handleCheckChange = function handleCheckChange2(val, ctx) {
    var _props$onColumnChange;
    columnCheckboxKeys.value = val;
    var params = {
      columns: val,
      type: ctx.type,
      currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),
      e: ctx.e
    };
    (_props$onColumnChange = props2.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props2, params);
  };
  var handleClickAllShowColumns = function handleClickAllShowColumns2(checked, ctx) {
    if (checked) {
      var _columns$value, _props$onColumnChange2;
      var newData = ((_columns$value = columns.value) === null || _columns$value === void 0 ? void 0 : _columns$value.map(function(t) {
        return t.colKey;
      })) || [];
      columnCheckboxKeys.value = newData;
      (_props$onColumnChange2 = props2.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props2, {
        type: "check",
        columns: newData,
        e: ctx.e
      });
    } else {
      var _props$onColumnChange3;
      var disabledColKeys = checkboxOptions.value.filter(function(t) {
        return t.disabled;
      }).map(function(t) {
        return t.value;
      });
      columnCheckboxKeys.value = disabledColKeys;
      (_props$onColumnChange3 = props2.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props2, {
        type: "uncheck",
        columns: disabledColKeys,
        e: ctx.e
      });
    }
  };
  var handleToggleColumnController = function handleToggleColumnController2() {
    var _columnController$val4;
    dialogInstance.value = DialogPlugin.confirm(_objectSpread$h({
      header: global2.value.columnConfigTitleText,
      body: function body() {
        var _columnController$val2, _columnController$val3;
        var widthMode = ((_columnController$val2 = columnController.value) === null || _columnController$val2 === void 0 ? void 0 : _columnController$val2.displayType) === "fixed-width" ? "fixed" : "auto";
        var checkedLength = intersectionChecked.value.length;
        var isCheckedAll = checkedLength === enabledColKeys.value.size;
        var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.value.size;
        var defaultNode = createVNode("div", {
          "class": ["".concat(classPrefix2.value, "-table__column-controller"), "".concat(classPrefix2.value, "-table__column-controller--").concat(widthMode)]
        }, [createVNode("div", {
          "class": "".concat(classPrefix2.value, "-table__column-controller-body")
        }, [createVNode("p", {
          "class": "".concat(classPrefix2.value, "-table__column-controller-desc")
        }, [global2.value.columnConfigDescriptionText]), createVNode("div", {
          "class": "".concat(classPrefix2.value, "-table__column-controller-block")
        }, [createVNode(Checkbox, {
          "indeterminate": isIndeterminate,
          "checked": isCheckedAll,
          "onChange": handleClickAllShowColumns
        }, {
          "default": function _default65() {
            return [global2.value.selectAllText];
          }
        })]), createVNode("div", {
          "class": "".concat(classPrefix2.value, "-table__column-controller-block")
        }, [createVNode(CheckboxGroup, mergeProps({
          "options": checkboxOptions.value
        }, ((_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.checkboxProps) || {}, {
          "value": columnCheckboxKeys.value,
          "onChange": handleCheckChange
        }), null)])])]);
        return defaultNode;
      },
      confirmBtn: global2.value.confirmText,
      cancelBtn: global2.value.cancelText,
      width: 612,
      onConfirm: function onConfirm() {
        setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.value));
        if (columnControllerVisible.value === void 0) {
          dialogInstance.value.hide();
        } else {
          var _props$onColumnContro;
          (_props$onColumnContro = props2.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props2, false, {
            trigger: "cancel"
          });
          context.emit("update:columnControllerVisible", false);
        }
      },
      onClose: function onClose() {
        if (columnControllerVisible.value === void 0) {
          dialogInstance.value.hide();
        } else {
          var _props$onColumnContro2;
          (_props$onColumnContro2 = props2.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props2, false, {
            trigger: "confirm"
          });
          context.emit("update:columnControllerVisible", false);
        }
      }
    }, ((_columnController$val4 = columnController.value) === null || _columnController$val4 === void 0 ? void 0 : _columnController$val4.dialogProps) || {}));
  };
  watch([columnControllerVisible], function(_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1), visible4 = _ref4[0];
    if (visible4 === void 0)
      return;
    if (dialogInstance.value) {
      visible4 ? dialogInstance.value.show() : dialogInstance.value.hide();
    } else {
      visible4 && handleToggleColumnController();
    }
  }, {
    immediate: true
  });
  var renderColumnController = function renderColumnController2() {
    var _props$columnControll;
    var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
    var placement = isColumnController ? columnController.value.placement || "top-right" : "";
    if (isColumnController && columnController.value.hideTriggerButton)
      return null;
    var classes6 = ["".concat(classPrefix2.value, "-table__column-controller-trigger"), _defineProperty$3({}, "".concat(classPrefix2.value, "-align-").concat(placement), !!placement)];
    return createVNode("div", {
      "class": classes6
    }, [createVNode(Button, mergeProps({
      "theme": "default",
      "variant": "outline",
      "onClick": handleToggleColumnController,
      "content": global2.value.columnConfigButtonText
    }, (_props$columnControll = props2.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps), {
      icon: function icon() {
        return createVNode(setting, null, null);
      }
    })]);
  };
  return {
    tDisplayColumns,
    columnCheckboxKeys,
    checkboxOptions,
    renderColumnController
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useRowExpand(props2, context) {
  var _toRefs = toRefs(props2), expandedRowKeys = _toRefs.expandedRowKeys;
  var renderTNode = useTNodeJSX();
  var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
  var _useClassName = useClassName(), tableExpandClasses = _useClassName.tableExpandClasses, positiveRotate90 = _useClassName.positiveRotate90, tableFullRowClasses = _useClassName.tableFullRowClasses;
  var _useDefaultValue = useDefaultValue(expandedRowKeys, props2.defaultExpandedRowKeys, props2.onExpandChange, "expandedRowKeys"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tExpandedRowKeys = _useDefaultValue2[0], setTExpandedRowKeys = _useDefaultValue2[1];
  var showExpandedRow = computed(function() {
    return Boolean(props2.expandedRow || context.slots.expandedRow || context.slots["expanded-row"]);
  });
  var showExpandIconColumn = computed(function() {
    return props2.expandIcon !== false && showExpandedRow.value;
  });
  var isFirstColumnFixed = computed(function() {
    var _props$columns, _props$columns$;
    return ((_props$columns = props2.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";
  });
  var onToggleExpand = function onToggleExpand2(e, row) {
    props2.expandOnRowClick && e.stopPropagation();
    var currentId = get_1(row, props2.rowKey || "id");
    var index2 = tExpandedRowKeys.value.indexOf(currentId);
    var newKeys = _toConsumableArray(tExpandedRowKeys.value);
    index2 !== -1 ? newKeys.splice(index2, 1) : newKeys.push(currentId);
    setTExpandedRowKeys(newKeys, {
      expandedRowData: props2.data.filter(function(t2) {
        return newKeys.includes(get_1(t2, props2.rowKey || "id"));
      })
    });
  };
  var renderExpandIcon = function renderExpandIcon2(_, p2) {
    var row = p2.row, rowIndex = p2.rowIndex;
    var currentId = get_1(row, props2.rowKey || "id");
    var expanded2 = tExpandedRowKeys.value.includes(currentId);
    var icon = renderTNode("expandIcon", {
      defaultNode: t(global2.value.expandIcon) || createVNode(chevronRightCircle, null, null),
      params: {
        row,
        index: rowIndex
      }
    });
    if (!icon)
      return null;
    var classes6 = [tableExpandClasses.iconBox, tableExpandClasses[expanded2 ? "expanded" : "collapsed"], _defineProperty$3({}, positiveRotate90, expanded2)];
    return createVNode("span", {
      "class": classes6,
      "onClick": function onClick2(e) {
        return onToggleExpand(e, row);
      }
    }, [icon]);
  };
  var getExpandColumn = function getExpandColumn2() {
    var expandCol = {
      colKey: "__EXPAND_ROW_ICON_COLUMN__",
      width: 64,
      className: tableExpandClasses.iconCell,
      fixed: isFirstColumnFixed.value ? "left" : void 0,
      cell: renderExpandIcon
    };
    return expandCol;
  };
  var renderExpandedRow = function renderExpandedRow2(p2) {
    var rowId = get_1(p2.row, props2.rowKey || "id");
    if (!tExpandedRowKeys.value.includes(rowId))
      return null;
    var isFixedLeft = p2.isWidthOverflow && props2.columns.find(function(item) {
      return item.fixed === "left";
    });
    return createVNode("tr", {
      "key": "expand_".concat(rowId),
      "class": [tableExpandClasses.row, _defineProperty$3({}, tableFullRowClasses.base, isFixedLeft)]
    }, [createVNode("td", {
      "colspan": p2.columns.length
    }, [createVNode("div", {
      "class": [tableExpandClasses.rowInner, _defineProperty$3({}, tableFullRowClasses.innerFullRow, isFixedLeft)],
      "style": isFixedLeft ? {
        width: "".concat(p2.tableWidth, "px")
      } : {}
    }, [createVNode("div", {
      "class": tableFullRowClasses.innerFullElement
    }, [renderTNode("expandedRow", {
      params: p2
    })])])])]);
  };
  var onInnerExpandRowClick = function onInnerExpandRowClick2(p2) {
    onToggleExpand(p2.e, p2.row);
  };
  return {
    showExpandedRow,
    showExpandIconColumn,
    getExpandColumn,
    renderExpandedRow,
    onInnerExpandRowClick
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$h(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$g(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$h(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useRowSelect(props2) {
  var _toRefs = toRefs(props2), selectedRowKeys = _toRefs.selectedRowKeys, columns = _toRefs.columns, data26 = _toRefs.data, rowKey = _toRefs.rowKey;
  var _useClassName = useClassName(), tableSelectedClasses = _useClassName.tableSelectedClasses;
  var selectedRowClassNames = ref();
  var _useDefaultValue = useDefaultValue(selectedRowKeys, props2.defaultSelectedRowKeys || [], props2.onSelectChange, "selectedRowKeys"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tSelectedRowKeys = _useDefaultValue2[0], setTSelectedRowKeys = _useDefaultValue2[1];
  var selectColumn = computed(function() {
    return props2.columns.find(function(_ref) {
      var type = _ref.type;
      return ["multiple", "single"].includes(type);
    });
  });
  var canSelectedRows = computed(function() {
    return props2.data.filter(function(row, rowIndex) {
      return !isDisabled(row, rowIndex);
    });
  });
  var intersectionKeys = computed(function() {
    return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function(t) {
      return get_1(t, props2.rowKey || "id");
    }));
  });
  watch([data26, columns, tSelectedRowKeys, selectColumn, rowKey], function() {
    var _selectColumn$value;
    var disabledRowFunc = function disabledRowFunc2(p2) {
      return selectColumn.value.disabled(p2) ? tableSelectedClasses.disabled : "";
    };
    var disabledRowClass = (_selectColumn$value = selectColumn.value) !== null && _selectColumn$value !== void 0 && _selectColumn$value.disabled ? disabledRowFunc : void 0;
    var selected2 = new Set(tSelectedRowKeys.value);
    var selectedRowClassFunc = function selectedRowClassFunc2(_ref2) {
      var row = _ref2.row;
      var rowId = get_1(row, props2.rowKey || "id");
      return selected2.has(rowId) ? tableSelectedClasses.selected : "";
    };
    var selectedRowClass = selected2.size ? selectedRowClassFunc : void 0;
    selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
  }, {
    immediate: true
  });
  function isDisabled(row, rowIndex) {
    return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
  }
  function getSelectedHeader() {
    var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
    return function() {
      return createVNode(Checkbox, {
        "checked": intersectionKeys.value.length === canSelectedRows.value.length,
        "indeterminate": isIndeterminate,
        "disabled": !canSelectedRows.value.length,
        "onChange": handleSelectAll
      }, null);
    };
  }
  function renderSelectCell(p2) {
    var column = p2.col, _p$row = p2.row, row = _p$row === void 0 ? {} : _p$row, rowIndex = p2.rowIndex;
    var checked = tSelectedRowKeys.value.includes(get_1(row, props2.rowKey || "id"));
    var disabled2 = typeof column.disabled === "function" ? column.disabled({
      row,
      rowIndex
    }) : column.disabled;
    var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
      row,
      rowIndex
    }) : column.checkProps;
    var selectBoxProps = _objectSpread$g(_objectSpread$g({
      checked,
      disabled: disabled2
    }, checkProps), {}, {
      onClick: function onClick2(e) {
        if (_typeof$1(e) === "object" && "e" in e) {
          var _e$e;
          (_e$e = e.e) === null || _e$e === void 0 ? void 0 : _e$e.stopPropagation();
        } else {
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }
      },
      onChange: function onChange() {
        return handleSelectChange(row);
      }
    });
    if (column.type === "single")
      return createVNode(Radio, selectBoxProps, null);
    if (column.type === "multiple")
      return createVNode(Checkbox, selectBoxProps, null);
    return null;
  }
  function handleSelectChange() {
    var row = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);
    var reRowKey = props2.rowKey || "id";
    var id = get_1(row, reRowKey);
    var selectedRowIndex = selectedRowKeys2.indexOf(id);
    var isExisted = selectedRowIndex !== -1;
    if (selectColumn.value.type === "multiple") {
      isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
    } else if (selectColumn.value.type === "single") {
      selectedRowKeys2 = !isExisted ? [id] : [];
    } else {
      log.warn("Table", "`column.type` must be one of `multiple` and `single`");
      return;
    }
    setTSelectedRowKeys(selectedRowKeys2, {
      selectedRowData: filterDataByIds(props2.data, selectedRowKeys2, reRowKey),
      currentRowKey: id,
      currentRowData: row,
      type: isExisted ? "uncheck" : "check"
    });
  }
  function handleSelectAll(checked) {
    var _selectedRowKeys$valu;
    var reRowKey = props2.rowKey || "id";
    var canSelectedRowKeys = canSelectedRows.value.map(function(record) {
      return get_1(record, reRowKey);
    });
    var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function(id) {
      return !canSelectedRowKeys.includes(id);
    })) || [];
    var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
    setTSelectedRowKeys(allIds, {
      selectedRowData: filterDataByIds(props2.data, allIds, reRowKey),
      type: checked ? "check" : "uncheck",
      currentRowKey: "CHECK_ALL_BOX"
    });
  }
  function formatToRowSelectColumn(col) {
    var isSelection = ["multiple", "single"].includes(col.type);
    if (!isSelection)
      return col;
    return _objectSpread$g(_objectSpread$g({}, col), {}, {
      width: col.width || 64,
      cell: function cell(_, p2) {
        return renderSelectCell(p2);
      },
      title: col.type === "multiple" ? getSelectedHeader() : ""
    });
  }
  return {
    selectedRowClassNames,
    formatToRowSelectColumn
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$3(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var SorterButton = defineComponent({
  name: "TSorterButton",
  props: {
    sortType: {
      type: String,
      "default": "all"
    },
    sortOrder: {
      type: String,
      "default": function _default59() {
        return "";
      }
    },
    sortIcon: Function,
    tooltipProps: Object
  },
  emits: ["sort-icon-click"],
  setup: function setup117(props2, context) {
    var _useClassName = useClassName(), tableSortClasses = _useClassName.tableSortClasses, negativeRotate180 = _useClassName.negativeRotate180;
    var renderTNode = useTNodeDefault();
    var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
    var allowSortTypes = computed(function() {
      return props2.sortType === "all" ? ["asc", "desc"] : [props2.sortType];
    });
    var onSortIconClick = function onSortIconClick2(e, direction) {
      context.emit("sort-icon-click", e, {
        descending: direction === "desc"
      });
    };
    return {
      t,
      global: global2,
      tableSortClasses,
      negativeRotate180,
      allowSortTypes,
      onSortIconClick,
      renderTNode
    };
  },
  methods: {
    getSortIcon: function getSortIcon(direction, activeClass) {
      var _this = this;
      var defaultIcon = this.t(this.global.sortIcon) || createVNode(chevronDown, null, null);
      var icon = this.renderTNode("sortIcon", defaultIcon);
      var sortClassName = [activeClass, this.tableSortClasses.sortIcon, this.tableSortClasses.iconDirection[direction], _defineProperty$3({}, this.negativeRotate180, direction === "asc")];
      return createVNode("span", {
        "class": sortClassName,
        "onClick": function onClick2(e) {
          return _this.onSortIconClick(e, direction);
        }
      }, [icon]);
    }
  },
  render: function render94() {
    var _this2 = this;
    var tableSortClasses = this.tableSortClasses;
    var classes6 = [tableSortClasses.trigger, _defineProperty$3({}, tableSortClasses.doubleIcon, this.allowSortTypes.length > 1)];
    var tooltips = {
      asc: this.global.sortAscendingOperationText,
      desc: this.global.sortDescendingOperationText
    };
    var sortButton = this.allowSortTypes.map(function(direction) {
      var _slot;
      var activeClass = direction === _this2.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
      var cancelTips = _this2.global.sortCancelOperationText;
      var tips = direction === _this2.sortOrder ? cancelTips : tooltips[direction];
      return createVNode(Tooltip, mergeProps({
        "content": tips,
        "placement": "right"
      }, _this2.tooltipProps, {
        "showArrow": false,
        "class": _this2.tableSortClasses.iconDirection[direction]
      }), _isSlot$3(_slot = _this2.getSortIcon(direction, activeClass)) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      });
    });
    return createVNode("div", {
      "class": classes6
    }, [sortButton]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$g(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$f(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$g(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useSorter(props2, _ref) {
  _ref.emit;
  var slots = _ref.slots;
  var _toRefs = toRefs(props2), sort2 = _toRefs.sort, data26 = _toRefs.data;
  var originalData = ref();
  var _useDefaultValue = useDefaultValue(sort2, props2.defaultSort, props2.onSortChange, "sort"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tSortInfo = _useDefaultValue2[0], setTSortInfo = _useDefaultValue2[1];
  var _useDefaultValue3 = useDefaultValue(data26, [], props2.onDataChange, "data"), _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2), tData = _useDefaultValue4[0], setTData = _useDefaultValue4[1];
  var sorterFuncMap = computed(function() {
    return getSorterFuncMap(props2.columns);
  });
  var sortArray = computed(function() {
    var sort22 = tSortInfo.value;
    if (!sort22)
      return [];
    return Array.isArray(sort22) ? sort22 : [sort22];
  });
  var sortMap = computed(function() {
    var sortMap2 = {};
    sortArray.value.forEach(function(info4, index2) {
      var sortBy = info4.sortBy;
      sortMap2[sortBy] = _objectSpread$f({
        index: index2
      }, info4);
    });
    return sortMap2;
  });
  function getSorterFuncMap(columns) {
    var map = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    for (var i = 0, len2 = columns.length; i < len2; i++) {
      var _col$children;
      var col = columns[i];
      if (isFunction_1(col.sorter)) {
        map[col.colKey] = col.sorter;
      }
      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getSorterFuncMap(col.children, map);
      }
    }
    return map;
  }
  function handleDataSort(sortInfo) {
    var sort22 = sortInfo;
    if (!Object.keys(sorterFuncMap.value).length)
      return;
    if (!originalData.value) {
      originalData.value = tData.value;
    }
    var isEmptyArraySort = !sort22 || sort22 instanceof Array && !sort22.length;
    var isEmptyObjectSort = !(sort22 instanceof Array) && !(sort22 !== null && sort22 !== void 0 && sort22.sortBy);
    if (isEmptyArraySort || isEmptyObjectSort) {
      setTData(originalData.value, {
        trigger: "sort"
      });
      return originalData.value;
    }
    var formatedSort = sort22 instanceof Array ? sort22 : [sort22];
    var newData = tData.value.slice().sort(function(a, b) {
      var sortResult = 0;
      for (var i = 0, len2 = formatedSort.length; i < len2; i++) {
        var item = formatedSort[i];
        var sortFunc = sorterFuncMap.value[item.sortBy];
        if (sortResult === 0 && sortFunc) {
          sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);
        } else {
          break;
        }
      }
      return sortResult;
    });
    if (JSON.stringify(newData) === JSON.stringify(tData.value))
      return;
    setTData(newData, {
      trigger: "sort"
    });
    return newData;
  }
  function handleSortHeaderClick(col, p2) {
    var _props$onChange;
    var sortInfo;
    if (props2.multipleSort) {
      sortInfo = getMultipleNextSort(col, p2);
    } else {
      var sort22 = tSortInfo.value instanceof Array ? tSortInfo.value[0] : tSortInfo.value;
      sortInfo = getSingleNextSort(col, sort22, p2);
    }
    var newData = handleDataSort(sortInfo);
    var currentData = newData || tData.value;
    var currentDataSource = currentData;
    setTSortInfo(sortInfo, {
      currentDataSource,
      col
    });
    (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props2, {
      sorter: sortInfo
    }, {
      currentData,
      trigger: "sorter"
    });
  }
  function getSortOrder(descending) {
    if (descending === void 0)
      return;
    return descending ? "desc" : "asc";
  }
  function getSingleNextSort(col, sortInfo, p2) {
    if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p2.descending) {
      return void 0;
    }
    return {
      sortBy: col.colKey,
      descending: p2.descending
    };
  }
  function getMultipleNextSort(col, p2) {
    var sort22 = tSortInfo.value;
    if (!(sort22 instanceof Array))
      return;
    var colKey = col.colKey;
    var result = _toConsumableArray(sort22);
    for (var i = 0, len2 = sort22.length; i < len2; i++) {
      if (sort22[i].sortBy === colKey) {
        var next = getSingleNextSort(col, sort22[i], p2);
        next ? result[i] = next : result.splice(i, 1);
        return result;
      }
    }
    result.push({
      sortBy: colKey,
      descending: p2.descending
    });
    return result;
  }
  function renderSortIcon(_ref2) {
    var _sortMap$value$col$co;
    var col = _ref2.col;
    if (!col.sorter)
      return null;
    var sorterButtonsProps = {
      sortType: col.sortType,
      sortOrder: getSortOrder((_sortMap$value$col$co = sortMap.value[col.colKey]) === null || _sortMap$value$col$co === void 0 ? void 0 : _sortMap$value$col$co.descending),
      sortIcon: props2.sortIcon
    };
    return createVNode(SorterButton, mergeProps(sorterButtonsProps, {
      "onSortIconClick": function onSortIconClick(_, p2) {
        return handleSortHeaderClick(col, p2);
      }
    }), {
      sortIcon: slots.sortIcon
    });
  }
  return {
    renderSortIcon
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$f(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$e(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$f(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var TableFilterController = defineComponent({
  name: "TableFilterController",
  props: {
    column: Object,
    tFilterValue: Object,
    innerFilterValue: Object,
    tableFilterClasses: Object,
    isFocusClass: String,
    primaryTableElement: {},
    onVisibleChange: Function
  },
  emits: ["inner-filter-change", "reset", "confirm"],
  setup: function setup118(props2) {
    var triggerElementRef = ref(null);
    var renderTNode = useTNodeDefault();
    var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
    var filterPopupVisible = ref(false);
    var onFilterPopupVisibleChange = function onFilterPopupVisibleChange2(visible4) {
      var _props$onVisibleChang;
      filterPopupVisible.value = visible4;
      (_props$onVisibleChang = props2.onVisibleChange) === null || _props$onVisibleChang === void 0 ? void 0 : _props$onVisibleChang.call(props2, visible4);
    };
    return {
      t,
      global: global2,
      filterPopupVisible,
      triggerElementRef,
      renderTNode,
      onFilterPopupVisibleChange
    };
  },
  render: function render95() {
    var _this = this, _this$tFilterValue;
    var getFilterContent = function getFilterContent2(column2) {
      var _column2$filter, _column2$filter2, _column2$filter3, _column2$filter4, _column2$filter5, _this$innerFilterValu, _column2$filter6, _column2$filter7, _this$innerFilterValu2;
      var types = ["single", "multiple", "input"];
      if (column2.type && !types.includes(column2.filter.type)) {
        console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
        return;
      }
      if (column2 !== null && column2 !== void 0 && (_column2$filter = column2.filter) !== null && _column2$filter !== void 0 && _column2$filter.component && typeof (column2 === null || column2 === void 0 ? void 0 : (_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.component) !== "function") {
        console.error("TDesign Table Error: column.filter.component must be a function");
        return;
      }
      var component = {
        single: RadioGroup,
        multiple: CheckboxGroup,
        input: Input
      }[column2.filter.type];
      if (!component && !(column2 !== null && column2 !== void 0 && (_column2$filter3 = column2.filter) !== null && _column2$filter3 !== void 0 && _column2$filter3.component))
        return;
      var filterComponentProps = _objectSpread$e(_objectSpread$e({
        options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter4 = column2.filter) === null || _column2$filter4 === void 0 ? void 0 : _column2$filter4.list : void 0
      }, ((_column2$filter5 = column2.filter) === null || _column2$filter5 === void 0 ? void 0 : _column2$filter5.props) || {}), {}, {
        value: (_this$innerFilterValu = _this.innerFilterValue) === null || _this$innerFilterValu === void 0 ? void 0 : _this$innerFilterValu[column2.colKey],
        onChange: function onChange(val) {
          _this.$emit("inner-filter-change", val, column2);
        }
      });
      return createVNode("div", {
        "class": _this.tableFilterClasses.contentInner
      }, [column2 !== null && column2 !== void 0 && (_column2$filter6 = column2.filter) !== null && _column2$filter6 !== void 0 && _column2$filter6.component ? column2 === null || column2 === void 0 ? void 0 : (_column2$filter7 = column2.filter) === null || _column2$filter7 === void 0 ? void 0 : _column2$filter7.component(function(v, b) {
        var tProps = _typeof$1(b) === "object" && "attrs" in b ? b.attrs : {};
        return h(v, {
          props: _objectSpread$e(_objectSpread$e({}, filterComponentProps), tProps)
        });
      }) : createVNode(component, mergeProps({
        "value": (_this$innerFilterValu2 = _this.innerFilterValue) === null || _this$innerFilterValu2 === void 0 ? void 0 : _this$innerFilterValu2[column2.colKey]
      }, filterComponentProps), null)]);
    };
    var getBottomButtons = function getBottomButtons2(column2) {
      if (!column2.filter.showConfirmAndReset)
        return;
      return createVNode("div", {
        "class": _this.tableFilterClasses.bottomButtons
      }, [createVNode(Button, {
        "theme": "default",
        "size": "small",
        "onClick": function onClick2() {
          _this.$emit("reset", column2);
          _this.filterPopupVisible = false;
        }
      }, {
        "default": function _default65() {
          return [_this.global.resetText];
        }
      }), createVNode(Button, {
        "theme": "primary",
        "size": "small",
        "onClick": function onClick2() {
          _this.$emit("confirm", column2);
          _this.filterPopupVisible = false;
        }
      }, {
        "default": function _default65() {
          return [_this.global.confirmText];
        }
      })]);
    };
    var column = this.column;
    if (!column.filter || column.filter && !Object.keys(column.filter).length)
      return null;
    var defaultFilterIcon = this.t(this.global.filterIcon) || createVNode(filter, null, null);
    return createVNode(Popup, {
      "attach": this.primaryTableElement ? function() {
        return _this.primaryTableElement;
      } : void 0,
      "visible": this.filterPopupVisible,
      "destroyOnClose": true,
      "trigger": "click",
      "placement": "bottom-right",
      "showArrow": true,
      "overlayClassName": this.tableFilterClasses.popup,
      "onVisibleChange": function onVisibleChange(val) {
        return _this.onFilterPopupVisibleChange(val);
      },
      "class": [this.tableFilterClasses.icon, _defineProperty$3({}, this.isFocusClass, !isEmpty_1((_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey]))],
      "content": function content() {
        return createVNode("div", {
          "class": _this.tableFilterClasses.popupContent
        }, [getFilterContent(column), getBottomButtons(column)]);
      }
    }, {
      "default": function _default65() {
        return [createVNode("div", {
          "ref": "triggerElementRef"
        }, [_this.renderTNode("filterIcon", defaultFilterIcon)])];
      }
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$e(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$d(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$e(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function filterEmptyData(data26) {
  var newFilterValue = {};
  Object.keys(data26).forEach(function(key) {
    var item = data26[key];
    var isArrayTrue = item instanceof Array && item.length;
    var isObject2 = _typeof$1(item) === "object" && !(item instanceof Array);
    var isObjectTrue = isObject2 && Object.keys(item).length;
    if (isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(item))) {
      newFilterValue[key] = item;
    }
  });
  return newFilterValue;
}
function useFilter(props2, context) {
  var primaryTableRef = ref(null);
  var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
  var renderTNode = useTNodeDefault();
  var _toRefs = toRefs(props2), filterValue = _toRefs.filterValue;
  var _useClassName = useClassName(), tableFilterClasses = _useClassName.tableFilterClasses, isFocusClass = _useClassName.isFocusClass;
  var isTableOverflowHidden = ref();
  var _useDefaultValue = useDefaultValue(filterValue, props2.defaultFilterValue, props2.onFilterChange, "filterValue"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tFilterValue = _useDefaultValue2[0], setTFilterValue = _useDefaultValue2[1];
  var innerFilterValue = ref(tFilterValue.value);
  var hasEmptyCondition = computed(function() {
    var filterEmpty = filterEmptyData(tFilterValue.value || {});
    return !tFilterValue.value || !Object.keys(filterEmpty).length;
  });
  watch([tFilterValue], function(_ref) {
    var _ref2 = _slicedToArray(_ref, 1), val = _ref2[0];
    innerFilterValue.value = val;
  });
  function renderFirstFilterRow() {
    var _props$pagination, _props$data;
    if (hasEmptyCondition.value)
      return null;
    var defaultNode = createVNode("div", {
      "class": tableFilterClasses.result
    }, [createVNode("span", null, [t(global2.value.searchResultText, {
      result: getFilterResultContent(),
      count: ((_props$pagination = props2.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props2.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
    })]), createVNode(Button, {
      "theme": "primary",
      "variant": "text",
      "onClick": onResetAll
    }, {
      "default": function _default65() {
        return [global2.value.clearFilterResultButtonText];
      }
    })]);
    var filterContent = renderTNode("filterRow");
    if (props2.filterRow && !filterContent)
      return null;
    return createVNode("div", {
      "class": tableFilterClasses.inner
    }, [filterContent || defaultNode]);
  }
  function getFilterResultContent() {
    var arr = [];
    props2.columns.filter(function(col) {
      return col.filter;
    }).forEach(function(col) {
      var value6 = tFilterValue.value[col.colKey];
      if (col.filter.list && !["null", "", "undefined"].includes(String(value6))) {
        var formattedValue = value6 instanceof Array ? value6 : [value6];
        var label2 = [];
        col.filter.list.forEach(function(option2) {
          if (formattedValue.includes(option2.value)) {
            label2.push(option2.label);
          }
        });
        value6 = label2.join();
      }
      if (value6) {
        arr.push("".concat(col.title, "\uFF1A").concat(value6));
      }
    });
    return arr.join("\uFF1B");
  }
  function onInnerFilterChange(val, column) {
    var filterValue2 = _objectSpread$d(_objectSpread$d({}, innerFilterValue.value), {}, _defineProperty$3({}, column.colKey, val));
    innerFilterValue.value = filterValue2;
    if (!column.filter.showConfirmAndReset) {
      emitFilterChange(filterValue2, column);
    }
  }
  function emitFilterChange(filterValue2, column) {
    var _props$onChange;
    setTFilterValue(filterValue2, {
      col: column
    });
    (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props2, {
      filter: filterValue2
    }, {
      trigger: "filter"
    });
  }
  function onReset(column) {
    var filterValue2 = _objectSpread$d(_objectSpread$d({}, tFilterValue.value), {}, _defineProperty$3({}, column.colKey, {
      single: "",
      multiple: [],
      input: ""
    }[column.filter.type] || column.filter.resetValue || ""));
    emitFilterChange(filterValue2, column);
  }
  function onResetAll() {
    emitFilterChange({}, void 0);
  }
  function onConfirm(column) {
    emitFilterChange(innerFilterValue.value, column);
  }
  function renderFilterIcon(_ref3) {
    var _primaryTableRef$valu;
    var col = _ref3.col;
    return createVNode(TableFilterController, {
      "column": col,
      "filterIcon": props2.filterIcon,
      "tFilterValue": tFilterValue.value,
      "innerFilterValue": innerFilterValue.value,
      "tableFilterClasses": tableFilterClasses,
      "isFocusClass": isFocusClass,
      "onReset": onReset,
      "onConfirm": onConfirm,
      "onInnerFilterChange": onInnerFilterChange,
      "primaryTableElement": (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.$el,
      "onVisibleChange": onPopupVisibleChange
    }, {
      filterIcon: context.slots.filterIcon
    });
  }
  function setFilterPrimaryTableRef(primaryTableElement) {
    primaryTableRef.value = primaryTableElement;
  }
  function onPopupVisibleChange(visible4) {
    if (visible4 && !isTableOverflowHidden.value) {
      isTableOverflowHidden.value = !visible4;
    }
  }
  return {
    hasEmptyCondition,
    isTableOverflowHidden,
    renderFilterIcon,
    renderFirstFilterRow,
    setFilterPrimaryTableRef
  };
}
/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys$d(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys$d(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$d(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value6) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value6,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value6;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var version = "1.15.0";
function userAgent(pattern2) {
  if (typeof window !== "undefined" && window.navigator) {
    return !!/* @__PURE__ */ navigator.userAgent.match(pattern2);
  }
}
var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
var captureMode = {
  capture: false,
  passive: false
};
function on(el, event, fn2) {
  el.addEventListener(event, fn2, !IE11OrLess && captureMode);
}
function off(el, event, fn2) {
  el.removeEventListener(event, fn2, !IE11OrLess && captureMode);
}
function matches(el, selector) {
  if (!selector)
    return;
  selector[0] === ">" && (selector = selector.substring(1));
  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }
  return false;
}
function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}
function closest(el, selector, ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;
    do {
      if (selector != null && (selector[0] === ">" ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }
      if (el === ctx)
        break;
    } while (el = getParentOrHost(el));
  }
  return null;
}
var R_SPACE = /\s+/g;
function toggleClass(el, name2, state) {
  if (el && name2) {
    if (el.classList) {
      el.classList[state ? "add" : "remove"](name2);
    } else {
      var className = (" " + el.className + " ").replace(R_SPACE, " ").replace(" " + name2 + " ", " ");
      el.className = (className + (state ? " " + name2 : "")).replace(R_SPACE, " ");
    }
  }
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, "");
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf("webkit") === -1) {
        prop = "-webkit-" + prop;
      }
      style[prop] = val + (typeof val === "string" ? "" : "px");
    }
  }
}
function matrix(el, selfOnly) {
  var appliedTransforms = "";
  if (typeof el === "string") {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, "transform");
      if (transform && transform !== "none") {
        appliedTransforms = transform + " " + appliedTransforms;
      }
    } while (!selfOnly && (el = el.parentNode));
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  return matrixFn && new matrixFn(appliedTransforms);
}
function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;
    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }
    return list;
  }
  return [];
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window)
    return;
  var elRect, top2, left2, bottom2, right2, height, width;
  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top2 = elRect.top;
    left2 = elRect.left;
    bottom2 = elRect.bottom;
    right2 = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top2 = 0;
    left2 = 0;
    bottom2 = window.innerHeight;
    right2 = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    container = container || el.parentNode;
    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, "transform") !== "none" || relativeToNonStaticParent && css(container, "position") !== "static")) {
          var containerRect = container.getBoundingClientRect();
          top2 -= containerRect.top + parseInt(css(container, "border-top-width"));
          left2 -= containerRect.left + parseInt(css(container, "border-left-width"));
          bottom2 = top2 + elRect.height;
          right2 = left2 + elRect.width;
          break;
        }
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    var elMatrix = matrix(container || el), scaleX = elMatrix && elMatrix.a, scaleY = elMatrix && elMatrix.d;
    if (elMatrix) {
      top2 /= scaleY;
      left2 /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom2 = top2 + height;
      right2 = left2 + width;
    }
  }
  return {
    top: top2,
    left: left2,
    bottom: bottom2,
    right: right2,
    width,
    height
  };
}
function isScrolledPast(el, elSide, parentSide) {
  var parent2 = getParentAutoScrollElement(el, true), elSideVal = getRect(el)[elSide];
  while (parent2) {
    var parentSideVal = getRect(parent2)[parentSide], visible4 = void 0;
    if (parentSide === "top" || parentSide === "left") {
      visible4 = elSideVal >= parentSideVal;
    } else {
      visible4 = elSideVal <= parentSideVal;
    }
    if (!visible4)
      return parent2;
    if (parent2 === getWindowScrollingElement())
      break;
    parent2 = getParentAutoScrollElement(parent2, false);
  }
  return false;
}
function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0, i = 0, children = el.children;
  while (i < children.length) {
    if (children[i].style.display !== "none" && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }
      currentChild++;
    }
    i++;
  }
  return null;
}
function lastChild(el, selector) {
  var last2 = el.lastElementChild;
  while (last2 && (last2 === Sortable.ghost || css(last2, "display") === "none" || selector && !matches(last2, selector))) {
    last2 = last2.previousElementSibling;
  }
  return last2 || null;
}
function index$8(el, selector) {
  var index2 = 0;
  if (!el || !el.parentNode) {
    return -1;
  }
  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== "TEMPLATE" && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index2++;
    }
  }
  return index2;
}
function getRelativeScrollOffset(el) {
  var offsetLeft = 0, offsetTop = 0, winScroller = getWindowScrollingElement();
  if (el) {
    do {
      var elMatrix = matrix(el), scaleX = elMatrix.a, scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }
  return [offsetLeft, offsetTop];
}
function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i))
      continue;
    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key])
        return Number(i);
    }
  }
  return -1;
}
function getParentAutoScrollElement(el, includeSelf) {
  if (!el || !el.getBoundingClientRect)
    return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;
  do {
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);
      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == "auto" || elemCSS.overflowX == "scroll") || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == "auto" || elemCSS.overflowY == "scroll")) {
        if (!elem.getBoundingClientRect || elem === document.body)
          return getWindowScrollingElement();
        if (gotSelf || includeSelf)
          return elem;
        gotSelf = true;
      }
    }
  } while (elem = elem.parentNode);
  return getWindowScrollingElement();
}
function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }
  return dst;
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
var _throttleTimeout;
function throttle(callback, ms) {
  return function() {
    if (!_throttleTimeout) {
      var args = arguments, _this = this;
      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }
      _throttleTimeout = setTimeout(function() {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}
function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}
function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}
function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;
  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}
var expando = "Sortable" + new Date().getTime();
function AnimationStateManager() {
  var animationStates = [], animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation)
        return;
      var children = [].slice.call(this.el.children);
      children.forEach(function(child) {
        if (css(child, "display") === "none" || child === Sortable.ghost)
          return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);
        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === "function")
          callback();
        return;
      }
      var animating = false, animationTime = 0;
      animationStates.forEach(function(state) {
        var time2 = 0, target = state.target, fromRect = target.fromRect, toRect = getRect(target), prevFromRect = target.prevFromRect, prevToRect = target.prevToRect, animatingRect = state.rect, targetMatrix = matrix(target, true);
        if (targetMatrix) {
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            time2 = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        }
        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time2) {
            time2 = _this.options.animation;
          }
          _this.animate(target, animatingRect, toRect, time2);
        }
        if (time2) {
          animating = true;
          animationTime = Math.max(animationTime, time2);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function() {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time2);
          target.thisAnimationDuration = time2;
        }
      });
      clearTimeout(animationCallbackId);
      if (!animating) {
        if (typeof callback === "function")
          callback();
      } else {
        animationCallbackId = setTimeout(function() {
          if (typeof callback === "function")
            callback();
        }, animationTime);
      }
      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, "transition", "");
        css(target, "transform", "");
        var elMatrix = matrix(this.el), scaleX = elMatrix && elMatrix.a, scaleY = elMatrix && elMatrix.d, translateX = (currentRect.left - toRect.left) / (scaleX || 1), translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, "transform", "translate3d(" + translateX + "px," + translateY + "px,0)");
        this.forRepaintDummy = repaint(target);
        css(target, "transition", "transform " + duration + "ms" + (this.options.easing ? " " + this.options.easing : ""));
        css(target, "transform", "translate3d(0,0,0)");
        typeof target.animated === "number" && clearTimeout(target.animated);
        target.animated = setTimeout(function() {
          css(target, "transition", "");
          css(target, "transform", "");
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}
function repaint(target) {
  return target.offsetWidth;
}
function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}
var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    for (var option2 in defaults) {
      if (defaults.hasOwnProperty(option2) && !(option2 in plugin)) {
        plugin[option2] = defaults[option2];
      }
    }
    plugins.forEach(function(p2) {
      if (p2.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;
    this.eventCanceled = false;
    evt.cancel = function() {
      _this.eventCanceled = true;
    };
    var eventNameGlobal = eventName + "Global";
    plugins.forEach(function(plugin) {
      if (!sortable[plugin.pluginName])
        return;
      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable
        }, evt));
      }
      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults2, options) {
    plugins.forEach(function(plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault)
        return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized;
      _extends(defaults2, initialized.defaults);
    });
    for (var option2 in sortable.options) {
      if (!sortable.options.hasOwnProperty(option2))
        continue;
      var modified = this.modifyOption(sortable, option2, sortable.options[option2]);
      if (typeof modified !== "undefined") {
        sortable.options[option2] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name2, sortable) {
    var eventProperties = {};
    plugins.forEach(function(plugin) {
      if (typeof plugin.eventProperties !== "function")
        return;
      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name2));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name2, value6) {
    var modifiedValue;
    plugins.forEach(function(plugin) {
      if (!sortable[plugin.pluginName])
        return;
      if (plugin.optionListeners && typeof plugin.optionListeners[name2] === "function") {
        modifiedValue = plugin.optionListeners[name2].call(sortable[plugin.pluginName], value6);
      }
    });
    return modifiedValue;
  }
};
function dispatchEvent(_ref) {
  var sortable = _ref.sortable, rootEl2 = _ref.rootEl, name2 = _ref.name, targetEl = _ref.targetEl, cloneEl2 = _ref.cloneEl, toEl = _ref.toEl, fromEl = _ref.fromEl, oldIndex2 = _ref.oldIndex, newIndex2 = _ref.newIndex, oldDraggableIndex2 = _ref.oldDraggableIndex, newDraggableIndex2 = _ref.newDraggableIndex, originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl2 && rootEl2[expando];
  if (!sortable)
    return;
  var evt, options = sortable.options, onName = "on" + name2.charAt(0).toUpperCase() + name2.substr(1);
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name2, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent(name2, true, true);
  }
  evt.to = toEl || rootEl2;
  evt.from = fromEl || rootEl2;
  evt.item = targetEl || rootEl2;
  evt.clone = cloneEl2;
  evt.oldIndex = oldIndex2;
  evt.newIndex = newIndex2;
  evt.oldDraggableIndex = oldDraggableIndex2;
  evt.newDraggableIndex = newDraggableIndex2;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable2 ? putSortable2.lastPutMode : void 0;
  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name2, sortable));
  for (var option2 in allEventProperties) {
    evt[option2] = allEventProperties[option2];
  }
  if (rootEl2) {
    rootEl2.dispatchEvent(evt);
  }
  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}
var _excluded$1 = ["evt"];
var pluginEvent2 = function pluginEvent3(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, originalEvent = _ref.evt, data26 = _objectWithoutProperties(_ref, _excluded$1);
  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    dragStarted: moved,
    putSortable,
    activeSortable: Sortable.active,
    originalEvent,
    oldIndex,
    oldDraggableIndex,
    newIndex,
    newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name2) {
      _dispatchEvent({
        sortable,
        name: name2,
        originalEvent
      });
    }
  }, data26));
};
function _dispatchEvent(info4) {
  dispatchEvent(_objectSpread2({
    putSortable,
    cloneEl,
    targetEl: dragEl,
    rootEl,
    oldIndex,
    oldDraggableIndex,
    newIndex,
    newDraggableIndex
  }, info4));
}
var dragEl, parentEl, ghostEl, rootEl, nextEl, lastDownEl, cloneEl, cloneHidden, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, activeGroup, putSortable, awaitingDragStarted = false, ignoreNextClick = false, sortables = [], tapEvt, touchEvt, lastDx, lastDy, tapDistanceLeft, tapDistanceTop, moved, lastTarget, lastDirection, pastFirstInvertThresh = false, isCircumstantialInvert = false, targetMoveDistance, ghostRelativeParent, ghostRelativeParentInitialScroll = [], _silent = false, savedInputChecked = [];
var documentExists = typeof document !== "undefined", PositionGhostAbsolutely = IOS, CSSFloatProperty = Edge || IE11OrLess ? "cssFloat" : "float", supportDraggable = documentExists && !ChromeForAndroid && !IOS && "draggable" in document.createElement("div"), supportCssPointerEvents = function() {
  if (!documentExists)
    return;
  if (IE11OrLess) {
    return false;
  }
  var el = document.createElement("x");
  el.style.cssText = "pointer-events:auto";
  return el.style.pointerEvents === "auto";
}(), _detectDirection = function _detectDirection2(el, options) {
  var elCSS = css(el), elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth), child1 = getChild(el, 0, options), child2 = getChild(el, 1, options), firstChildCSS = child1 && css(child1), secondChildCSS = child2 && css(child2), firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width, secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
  if (elCSS.display === "flex") {
    return elCSS.flexDirection === "column" || elCSS.flexDirection === "column-reverse" ? "vertical" : "horizontal";
  }
  if (elCSS.display === "grid") {
    return elCSS.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
  }
  if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== "none") {
    var touchingSideChild2 = firstChildCSS["float"] === "left" ? "left" : "right";
    return child2 && (secondChildCSS.clear === "both" || secondChildCSS.clear === touchingSideChild2) ? "vertical" : "horizontal";
  }
  return child1 && (firstChildCSS.display === "block" || firstChildCSS.display === "flex" || firstChildCSS.display === "table" || firstChildCSS.display === "grid" || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === "none" || child2 && elCSS[CSSFloatProperty] === "none" && firstChildWidth + secondChildWidth > elWidth) ? "vertical" : "horizontal";
}, _dragElInRowColumn = function _dragElInRowColumn2(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top, dragElS2Opp = vertical ? dragRect.right : dragRect.bottom, dragElOppLength = vertical ? dragRect.width : dragRect.height, targetS1Opp = vertical ? targetRect.left : targetRect.top, targetS2Opp = vertical ? targetRect.right : targetRect.bottom, targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
}, _detectNearestEmptySortable = function _detectNearestEmptySortable2(x, y) {
  var ret;
  sortables.some(function(sortable) {
    var threshold = sortable[expando].options.emptyInsertThreshold;
    if (!threshold || lastChild(sortable))
      return;
    var rect = getRect(sortable), insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold, insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
    if (insideHorizontally && insideVertically) {
      return ret = sortable;
    }
  });
  return ret;
}, _prepareGroup = function _prepareGroup2(options) {
  function toFn(value6, pull) {
    return function(to, from, dragEl2, evt) {
      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
      if (value6 == null && (pull || sameGroup)) {
        return true;
      } else if (value6 == null || value6 === false) {
        return false;
      } else if (pull && value6 === "clone") {
        return value6;
      } else if (typeof value6 === "function") {
        return toFn(value6(to, from, dragEl2, evt), pull)(to, from, dragEl2, evt);
      } else {
        var otherGroup = (pull ? to : from).options.group.name;
        return value6 === true || typeof value6 === "string" && value6 === otherGroup || value6.join && value6.indexOf(otherGroup) > -1;
      }
    };
  }
  var group = {};
  var originalGroup = options.group;
  if (!originalGroup || _typeof(originalGroup) != "object") {
    originalGroup = {
      name: originalGroup
    };
  }
  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
}, _hideGhostForTarget = function _hideGhostForTarget2() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, "display", "none");
  }
}, _unhideGhostForTarget = function _unhideGhostForTarget2() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, "display", "");
  }
};
if (documentExists && !ChromeForAndroid) {
  document.addEventListener("click", function(evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}
var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent2(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;
    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
    if (nearest) {
      var event = {};
      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }
      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;
      nearest[expando]._onDragOver(event);
    }
  }
};
var _checkOutsideTargetEl = function _checkOutsideTargetEl2(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }
  this.el = el;
  this.options = options = _extends({}, options);
  el[expando] = this;
  var defaults2 = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? ">li" : ">*",
    swapThreshold: 1,
    invertSwap: false,
    invertedSwapThreshold: null,
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: "sortable-ghost",
    chosenClass: "sortable-chosen",
    dragClass: "sortable-drag",
    ignore: "a, img",
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl2) {
      dataTransfer.setData("Text", dragEl2.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: "data-id",
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: "sortable-fallback",
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && "PointerEvent" in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults2);
  for (var name2 in defaults2) {
    !(name2 in options) && (options[name2] = defaults2[name2]);
  }
  _prepareGroup(options);
  for (var fn2 in this) {
    if (fn2.charAt(0) === "_" && typeof this[fn2] === "function") {
      this[fn2] = this[fn2].bind(this);
    }
  }
  this.nativeDraggable = options.forceFallback ? false : supportDraggable;
  if (this.nativeDraggable) {
    this.options.touchStartThreshold = 1;
  }
  if (options.supportPointer) {
    on(el, "pointerdown", this._onTapStart);
  } else {
    on(el, "mousedown", this._onTapStart);
    on(el, "touchstart", this._onTapStart);
  }
  if (this.nativeDraggable) {
    on(el, "dragover", this);
    on(el, "dragenter", this);
  }
  sortables.push(this.el);
  options.store && options.store.get && this.sort(options.store.get(this) || []);
  _extends(this, AnimationStateManager());
}
Sortable.prototype = {
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === "function" ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(evt) {
    if (!evt.cancelable)
      return;
    var _this = this, el = this.el, options = this.options, preventOnFilter = options.preventOnFilter, type = evt.type, touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === "touch" && evt, target = (touch || evt).target, originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target, filter2 = options.filter;
    _saveInputCheckedState(el);
    if (dragEl) {
      return;
    }
    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return;
    }
    if (originalTarget.isContentEditable) {
      return;
    }
    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === "SELECT") {
      return;
    }
    target = closest(target, options.draggable, el, false);
    if (target && target.animated) {
      return;
    }
    if (lastDownEl === target) {
      return;
    }
    oldIndex = index$8(target);
    oldDraggableIndex = index$8(target, options.draggable);
    if (typeof filter2 === "function") {
      if (filter2.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: "filter",
          targetEl: target,
          toEl: el,
          fromEl: el
        });
        pluginEvent2("filter", _this, {
          evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return;
      }
    } else if (filter2) {
      filter2 = filter2.split(",").some(function(criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);
        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: "filter",
            targetEl: target,
            fromEl: el,
            toEl: el
          });
          pluginEvent2("filter", _this, {
            evt
          });
          return true;
        }
      });
      if (filter2) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return;
      }
    }
    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    }
    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(evt, touch, target) {
    var _this = this, el = _this.el, options = _this.options, ownerDocument = el.ownerDocument, dragStartFn;
    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style["will-change"] = "all";
      dragStartFn = function dragStartFn2() {
        pluginEvent2("delayEnded", _this, {
          evt
        });
        if (Sortable.eventCanceled) {
          _this._onDrop();
          return;
        }
        _this._disableDelayedDragEvents();
        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        }
        _this._triggerDragStart(evt, touch);
        _dispatchEvent({
          sortable: _this,
          name: "choose",
          originalEvent: evt
        });
        toggleClass(dragEl, options.chosenClass, true);
      };
      options.ignore.split(",").forEach(function(criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, "dragover", nearestEmptyInsertDetectEvent);
      on(ownerDocument, "mousemove", nearestEmptyInsertDetectEvent);
      on(ownerDocument, "touchmove", nearestEmptyInsertDetectEvent);
      on(ownerDocument, "mouseup", _this._onDrop);
      on(ownerDocument, "touchend", _this._onDrop);
      on(ownerDocument, "touchcancel", _this._onDrop);
      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }
      pluginEvent2("delayStart", this, {
        evt
      });
      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();
          return;
        }
        on(ownerDocument, "mouseup", _this._disableDelayedDrag);
        on(ownerDocument, "touchend", _this._disableDelayedDrag);
        on(ownerDocument, "touchcancel", _this._disableDelayedDrag);
        on(ownerDocument, "mousemove", _this._delayedDragTouchMoveHandler);
        on(ownerDocument, "touchmove", _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, "pointermove", _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(e) {
    var touch = e.touches ? e.touches[0] : e;
    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);
    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, "mouseup", this._disableDelayedDrag);
    off(ownerDocument, "touchend", this._disableDelayedDrag);
    off(ownerDocument, "touchcancel", this._disableDelayedDrag);
    off(ownerDocument, "mousemove", this._delayedDragTouchMoveHandler);
    off(ownerDocument, "touchmove", this._delayedDragTouchMoveHandler);
    off(ownerDocument, "pointermove", this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(evt, touch) {
    touch = touch || evt.pointerType == "touch" && evt;
    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, "pointermove", this._onTouchMove);
      } else if (touch) {
        on(document, "touchmove", this._onTouchMove);
      } else {
        on(document, "mousemove", this._onTouchMove);
      }
    } else {
      on(dragEl, "dragend", this);
      on(rootEl, "dragstart", this._onDragStart);
    }
    try {
      if (document.selection) {
        _nextTick(function() {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {
    }
  },
  _dragStarted: function _dragStarted(fallback, evt) {
    awaitingDragStarted = false;
    if (rootEl && dragEl) {
      pluginEvent2("dragStarted", this, {
        evt
      });
      if (this.nativeDraggable) {
        on(document, "dragover", _checkOutsideTargetEl);
      }
      var options = this.options;
      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost();
      _dispatchEvent({
        sortable: this,
        name: "start",
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;
      _hideGhostForTarget();
      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent2 = target;
      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent2)
          break;
        parent2 = target;
      }
      dragEl.parentNode[expando]._isOutsideThisEl(target);
      if (parent2) {
        do {
          if (parent2[expando]) {
            var inserted = void 0;
            inserted = parent2[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target,
              rootEl: parent2
            });
            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }
          target = parent2;
        } while (parent2 = parent2.parentNode);
      }
      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(evt) {
    if (tapEvt) {
      var options = this.options, fallbackTolerance = options.fallbackTolerance, fallbackOffset = options.fallbackOffset, touch = evt.touches ? evt.touches[0] : evt, ghostMatrix = ghostEl && matrix(ghostEl, true), scaleX = ghostEl && ghostMatrix && ghostMatrix.a, scaleY = ghostEl && ghostMatrix && ghostMatrix.d, relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent), dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1), dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);
      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }
        this._onDragStart(evt, true);
      }
      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }
        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, "webkitTransform", cssMatrix);
        css(ghostEl, "mozTransform", cssMatrix);
        css(ghostEl, "msTransform", cssMatrix);
        css(ghostEl, "transform", cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl, rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container), options = this.options;
      if (PositionGhostAbsolutely) {
        ghostRelativeParent = container;
        while (css(ghostRelativeParent, "position") === "static" && css(ghostRelativeParent, "transform") === "none" && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }
        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document)
            ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }
        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }
      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, "transition", "");
      css(ghostEl, "transform", "");
      css(ghostEl, "box-sizing", "border-box");
      css(ghostEl, "margin", 0);
      css(ghostEl, "top", rect.top);
      css(ghostEl, "left", rect.left);
      css(ghostEl, "width", rect.width);
      css(ghostEl, "height", rect.height);
      css(ghostEl, "opacity", "0.8");
      css(ghostEl, "position", PositionGhostAbsolutely ? "absolute" : "fixed");
      css(ghostEl, "zIndex", "100000");
      css(ghostEl, "pointerEvents", "none");
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl);
      css(ghostEl, "transform-origin", tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + "% " + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + "%");
    }
  },
  _onDragStart: function _onDragStart(evt, fallback) {
    var _this = this;
    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent2("dragStart", this, {
      evt
    });
    if (Sortable.eventCanceled) {
      this._onDrop();
      return;
    }
    pluginEvent2("setupClone", this);
    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style["will-change"] = "";
      this._hideClone();
      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    }
    _this.cloneId = _nextTick(function() {
      pluginEvent2("clone", _this);
      if (Sortable.eventCanceled)
        return;
      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }
      _this._hideClone();
      _dispatchEvent({
        sortable: _this,
        name: "clone"
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true);
    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      off(document, "mouseup", _this._onDrop);
      off(document, "touchend", _this._onDrop);
      off(document, "touchcancel", _this._onDrop);
      if (dataTransfer) {
        dataTransfer.effectAllowed = "move";
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }
      on(document, "drop", _this);
      css(dragEl, "transform", "translateZ(0)");
    }
    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, "selectstart", _this);
    moved = true;
    if (Safari) {
      css(document.body, "user-select", "none");
    }
  },
  _onDragOver: function _onDragOver(evt) {
    var el = this.el, target = evt.target, dragRect, targetRect, revert, options = this.options, group = options.group, activeSortable = Sortable.active, isOwner = activeGroup === group, canSort = options.sort, fromSortable = putSortable || activeSortable, vertical, _this = this, completedFired = false;
    if (_silent)
      return;
    function dragOverEvent(name2, extra) {
      pluginEvent2(name2, _this, _objectSpread2({
        evt,
        isOwner,
        axis: vertical ? "vertical" : "horizontal",
        revert,
        dragRect,
        targetRect,
        canSort,
        fromSortable,
        target,
        completed,
        onMove: function onMove(target2, after2) {
          return _onMove(rootEl, el, dragEl, dragRect, target2, getRect(target2), evt, after2);
        },
        changed
      }, extra));
    }
    function capture() {
      dragOverEvent("dragOverAnimationCapture");
      _this.captureAnimationState();
      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    }
    function completed(insertion) {
      dragOverEvent("dragOverCompleted", {
        insertion
      });
      if (insertion) {
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }
        if (_this !== fromSortable) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }
        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        }
        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }
        _this.animateAll(function() {
          dragOverEvent("dragOverAnimationComplete");
          _this._ignoreWhileAnimating = null;
        });
        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      }
      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      }
      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
        !insertion && nearestEmptyInsertDetectEvent(evt);
      }
      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    }
    function changed() {
      newIndex = index$8(dragEl);
      newDraggableIndex = index$8(dragEl, options.draggable);
      _dispatchEvent({
        sortable: _this,
        name: "change",
        toEl: el,
        newIndex,
        newDraggableIndex,
        originalEvent: evt
      });
    }
    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }
    target = closest(target, options.draggable, el, true);
    dragOverEvent("dragOver");
    if (Sortable.eventCanceled)
      return completedFired;
    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }
    ignoreNextClick = false;
    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === "vertical";
      dragRect = getRect(dragEl);
      dragOverEvent("dragOverValid");
      if (Sortable.eventCanceled)
        return completedFired;
      if (revert) {
        parentEl = rootEl;
        capture();
        this._hideClone();
        dragOverEvent("revert");
        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }
        return completed(true);
      }
      var elLastChild = lastChild(el, options.draggable);
      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        if (elLastChild === dragEl) {
          return completed(false);
        }
        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }
        if (target) {
          targetRect = getRect(target);
        }
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          if (elLastChild && elLastChild.nextSibling) {
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }
          parentEl = el;
          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        var firstChild = getChild(el, 0, options, true);
        if (firstChild === dragEl) {
          return completed(false);
        }
        target = firstChild;
        targetRect = getRect(target);
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el;
          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0, targetBeforeFirstSwap, differentLevel = dragEl.parentNode !== el, differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical), side1 = vertical ? "top" : "left", scrolledPastTop = isScrolledPast(target, "top", "top") || isScrolledPast(dragEl, "top", "top"), scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }
        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;
        if (direction !== 0) {
          var dragIndex = index$8(dragEl);
          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, "display") === "none" || sibling === ghostEl));
        }
        if (direction === 0 || sibling === target) {
          return completed(false);
        }
        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling, after = false;
        after = direction === 1;
        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }
          _silent = true;
          setTimeout(_unsilent, 30);
          capture();
          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          }
          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }
          parentEl = dragEl.parentNode;
          if (targetBeforeFirstSwap !== void 0 && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }
          changed();
          return completed(true);
        }
      }
      if (el.contains(dragEl)) {
        return completed(false);
      }
    }
    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, "mousemove", this._onTouchMove);
    off(document, "touchmove", this._onTouchMove);
    off(document, "pointermove", this._onTouchMove);
    off(document, "dragover", nearestEmptyInsertDetectEvent);
    off(document, "mousemove", nearestEmptyInsertDetectEvent);
    off(document, "touchmove", nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, "mouseup", this._onDrop);
    off(ownerDocument, "touchend", this._onDrop);
    off(ownerDocument, "pointerup", this._onDrop);
    off(ownerDocument, "touchcancel", this._onDrop);
    off(document, "selectstart", this);
  },
  _onDrop: function _onDrop(evt) {
    var el = this.el, options = this.options;
    newIndex = index$8(dragEl);
    newDraggableIndex = index$8(dragEl, options.draggable);
    pluginEvent2("drop", this, {
      evt
    });
    parentEl = dragEl && dragEl.parentNode;
    newIndex = index$8(dragEl);
    newDraggableIndex = index$8(dragEl, options.draggable);
    if (Sortable.eventCanceled) {
      this._nulling();
      return;
    }
    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);
    _cancelNextTick(this.cloneId);
    _cancelNextTick(this._dragStartId);
    if (this.nativeDraggable) {
      off(document, "drop", this);
      off(el, "dragstart", this._onDragStart);
    }
    this._offMoveEvents();
    this._offUpEvents();
    if (Safari) {
      css(document.body, "user-select", "");
    }
    css(dragEl, "transform", "");
    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }
      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== "clone") {
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }
      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, "dragend", this);
        }
        _disableDraggable(dragEl);
        dragEl.style["will-change"] = "";
        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }
        toggleClass(dragEl, this.options.chosenClass, false);
        _dispatchEvent({
          sortable: this,
          name: "unchoose",
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });
        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            _dispatchEvent({
              rootEl: parentEl,
              name: "add",
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: "remove",
              toEl: parentEl,
              originalEvent: evt
            });
            _dispatchEvent({
              rootEl: parentEl,
              name: "sort",
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: "sort",
              toEl: parentEl,
              originalEvent: evt
            });
          }
          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              _dispatchEvent({
                sortable: this,
                name: "update",
                toEl: parentEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: "sort",
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }
        if (Sortable.active) {
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }
          _dispatchEvent({
            sortable: this,
            name: "end",
            toEl: parentEl,
            originalEvent: evt
          });
          this.save();
        }
      }
    }
    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent2("nulling", this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function(el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent(evt) {
    switch (evt.type) {
      case "drop":
      case "dragend":
        this._onDrop(evt);
        break;
      case "dragenter":
      case "dragover":
        if (dragEl) {
          this._onDragOver(evt);
          _globalDragOver(evt);
        }
        break;
      case "selectstart":
        evt.preventDefault();
        break;
    }
  },
  toArray: function toArray() {
    var order2 = [], el, children = this.el.children, i = 0, n = children.length, options = this.options;
    for (; i < n; i++) {
      el = children[i];
      if (closest(el, options.draggable, this.el, false)) {
        order2.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }
    return order2;
  },
  sort: function sort(order2, useAnimation) {
    var items = {}, rootEl2 = this.el;
    this.toArray().forEach(function(id, i) {
      var el = rootEl2.children[i];
      if (closest(el, this.options.draggable, rootEl2, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order2.forEach(function(id) {
      if (items[id]) {
        rootEl2.removeChild(items[id]);
        rootEl2.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },
  option: function option(name2, value6) {
    var options = this.options;
    if (value6 === void 0) {
      return options[name2];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name2, value6);
      if (typeof modifiedValue !== "undefined") {
        options[name2] = modifiedValue;
      } else {
        options[name2] = value6;
      }
      if (name2 === "group") {
        _prepareGroup(options);
      }
    }
  },
  destroy: function destroy() {
    pluginEvent2("destroy", this);
    var el = this.el;
    el[expando] = null;
    off(el, "mousedown", this._onTapStart);
    off(el, "touchstart", this._onTapStart);
    off(el, "pointerdown", this._onTapStart);
    if (this.nativeDraggable) {
      off(el, "dragover", this);
      off(el, "dragenter", this);
    }
    Array.prototype.forEach.call(el.querySelectorAll("[draggable]"), function(el2) {
      el2.removeAttribute("draggable");
    });
    this._onDrop();
    this._disableDelayedDragEvents();
    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent2("hideClone", this);
      if (Sortable.eventCanceled)
        return;
      css(cloneEl, "display", "none");
      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }
      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable2) {
    if (putSortable2.lastPutMode !== "clone") {
      this._hideClone();
      return;
    }
    if (cloneHidden) {
      pluginEvent2("showClone", this);
      if (Sortable.eventCanceled)
        return;
      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }
      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }
      css(cloneEl, "display", "");
      cloneHidden = false;
    }
  }
};
function _globalDragOver(evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = "move";
  }
  evt.cancelable && evt.preventDefault();
}
function _onMove(fromEl, toEl, dragEl2, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt, sortable = fromEl[expando], onMoveFn = sortable.options.onMove, retVal;
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent("move", {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent("move", true, true);
  }
  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl2;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);
  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }
  return retVal;
}
function _disableDraggable(el) {
  el.draggable = false;
}
function _unsilent() {
  _silent = false;
}
function _ghostIsFirst(evt, vertical, sortable) {
  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var spacer = 10;
  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
}
function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}
function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX, targetLength = vertical ? targetRect.height : targetRect.width, targetS1 = vertical ? targetRect.top : targetRect.left, targetS2 = vertical ? targetRect.bottom : targetRect.right, invert = false;
  if (!invertSwap) {
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        pastFirstInvertThresh = true;
      }
      if (!pastFirstInvertThresh) {
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }
  invert = invert || invertSwap;
  if (invert) {
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }
  return 0;
}
function _getInsertDirection(target) {
  if (index$8(dragEl) < index$8(target)) {
    return 1;
  } else {
    return -1;
  }
}
function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent, i = str.length, sum = 0;
  while (i--) {
    sum += str.charCodeAt(i);
  }
  return sum.toString(36);
}
function _saveInputCheckedState(root2) {
  savedInputChecked.length = 0;
  var inputs = root2.getElementsByTagName("input");
  var idx = inputs.length;
  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}
function _nextTick(fn2) {
  return setTimeout(fn2, 0);
}
function _cancelNextTick(id) {
  return clearTimeout(id);
}
if (documentExists) {
  on(document, "touchmove", function(evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
}
Sortable.utils = {
  on,
  off,
  css,
  find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend,
  throttle,
  closest,
  toggleClass,
  clone,
  index: index$8,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild
};
Sortable.get = function(element2) {
  return element2[expando];
};
Sortable.mount = function() {
  for (var _len = arguments.length, plugins2 = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins2[_key] = arguments[_key];
  }
  if (plugins2[0].constructor === Array)
    plugins2 = plugins2[0];
  plugins2.forEach(function(plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }
    if (plugin.utils)
      Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};
Sortable.create = function(el, options) {
  return new Sortable(el, options);
};
Sortable.version = version;
var autoScrolls = [], scrollEl, scrollRootEl, scrolling = false, lastAutoScrollX, lastAutoScrollY, touchEvt$1, pointerElemChangedInterval;
function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    };
    for (var fn2 in this) {
      if (fn2.charAt(0) === "_" && typeof this[fn2] === "function") {
        this[fn2] = this[fn2].bind(this);
      }
    }
  }
  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;
      if (this.sortable.nativeDraggable) {
        on(document, "dragover", this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, "pointermove", this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, "touchmove", this._handleFallbackAutoScroll);
        } else {
          on(document, "mousemove", this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop3() {
      if (this.sortable.nativeDraggable) {
        off(document, "dragover", this._handleAutoScroll);
      } else {
        off(document, "pointermove", this._handleFallbackAutoScroll);
        off(document, "touchmove", this._handleFallbackAutoScroll);
        off(document, "mousemove", this._handleFallbackAutoScroll);
      }
      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;
      var x = (evt.touches ? evt.touches[0] : evt).clientX, y = (evt.touches ? evt.touches[0] : evt).clientY, elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt;
      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback);
        var ogElemScroller = getParentAutoScrollElement(elem, true);
        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval();
          pointerElemChangedInterval = setInterval(function() {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }
            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }
        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: "scroll",
    initializeByDefault: true
  });
}
function clearAutoScrolls() {
  autoScrolls.forEach(function(autoScroll2) {
    clearInterval(autoScroll2.pid);
  });
  autoScrolls = [];
}
function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}
var autoScroll = throttle(function(evt, options, rootEl2, isFallback) {
  if (!options.scroll)
    return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX, y = (evt.touches ? evt.touches[0] : evt).clientY, sens = options.scrollSensitivity, speed = options.scrollSpeed, winScroller = getWindowScrollingElement();
  var scrollThisInstance = false, scrollCustomFn;
  if (scrollRootEl !== rootEl2) {
    scrollRootEl = rootEl2;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;
    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl2, true);
    }
  }
  var layersOut = 0;
  var currentParent = scrollEl;
  do {
    var el = currentParent, rect = getRect(el), top2 = rect.top, bottom2 = rect.bottom, left2 = rect.left, right2 = rect.right, width = rect.width, height = rect.height, canScrollX = void 0, canScrollY = void 0, scrollWidth = el.scrollWidth, scrollHeight = el.scrollHeight, elCSS = css(el), scrollPosX = el.scrollLeft, scrollPosY = el.scrollTop;
    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll" || elCSS.overflowX === "visible");
      canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll" || elCSS.overflowY === "visible");
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll");
      canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll");
    }
    var vx = canScrollX && (Math.abs(right2 - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left2 - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom2 - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top2 - y) <= sens && !!scrollPosY);
    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }
    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);
      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        autoScrolls[layersOut].pid = setInterval(function() {
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1);
          }
          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
          if (typeof scrollCustomFn === "function") {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== "continue") {
              return;
            }
          }
          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }
    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
  scrolling = scrollThisInstance;
}, 30);
var drop = function drop2(_ref) {
  var originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, dragEl2 = _ref.dragEl, activeSortable = _ref.activeSortable, dispatchSortableEvent = _ref.dispatchSortableEvent, hideGhostForTarget = _ref.hideGhostForTarget, unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent)
    return;
  var toSortable = putSortable2 || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();
  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent("spill");
    this.onSpill({
      dragEl: dragEl2,
      putSortable: putSortable2
    });
  }
};
function Revert() {
}
Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex2 = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex2;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl2 = _ref3.dragEl, putSortable2 = _ref3.putSortable;
    this.sortable.captureAnimationState();
    if (putSortable2) {
      putSortable2.captureAnimationState();
    }
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl2, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl2);
    }
    this.sortable.animateAll();
    if (putSortable2) {
      putSortable2.animateAll();
    }
  },
  drop
};
_extends(Revert, {
  pluginName: "revertOnSpill"
});
function Remove() {
}
Remove.prototype = {
  onSpill: function onSpill2(_ref4) {
    var dragEl2 = _ref4.dragEl, putSortable2 = _ref4.putSortable;
    var parentSortable = putSortable2 || this.sortable;
    parentSortable.captureAnimationState();
    dragEl2.parentNode && dragEl2.parentNode.removeChild(dragEl2);
    parentSortable.animateAll();
  },
  drop
};
_extends(Remove, {
  pluginName: "removeOnSpill"
});
Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function swapDragArrayElement(data26, currentIndex, targetIndex) {
  var newData = _toConsumableArray(data26);
  if (targetIndex - currentIndex > 0) {
    newData.splice(targetIndex + 1, 0, newData[currentIndex]);
    newData.splice(currentIndex, 1);
  } else {
    newData.splice(targetIndex, 0, newData[currentIndex]);
    newData.splice(currentIndex + 1, 1);
  }
  return newData;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$c(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$c(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$c(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useDragSort(props2) {
  var _toRefs = toRefs(props2), sortOnRowDraggable = _toRefs.sortOnRowDraggable, dragSort = _toRefs.dragSort, columns = _toRefs.columns, data26 = _toRefs.data, rowKey = _toRefs.rowKey;
  var _useClassName = useClassName(), tableDraggableClasses = _useClassName.tableDraggableClasses, tableBaseClass = _useClassName.tableBaseClass;
  var primaryTableRef = ref(null);
  var dragCol = computed(function() {
    return columns.value.find(function(item) {
      return item.colKey === "drag";
    });
  });
  var isRowDraggable = computed(function() {
    return sortOnRowDraggable.value || dragSort.value === "row";
  });
  var isRowHandlerDraggable = computed(function() {
    return dragSort.value === "row-handler" && !!dragCol.value;
  });
  var isColDraggable = computed(function() {
    return dragSort.value === "col";
  });
  var lastRowList = ref([]);
  var lastColList = ref([]);
  if (props2.sortOnRowDraggable) {
    log.error("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
  }
  if (dragSort.value === "col") {
    log.error("Table", "dragSort='col' is going to be used as column drag, please use dragSort='row-handler' instead.");
  }
  watch([data26, rowKey], function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), data27 = _ref2[0], rowKey2 = _ref2[1];
    lastRowList.value = (data27 === null || data27 === void 0 ? void 0 : data27.map(function(item) {
      return get_1(item, rowKey2);
    })) || [];
  }, {
    immediate: true
  });
  watch(columns, function(columns2) {
    lastColList.value = columns2 || [];
  }, {
    immediate: true
  });
  var registerRowDragEvent = function registerRowDragEvent2(element2) {
    if (!isRowHandlerDraggable.value && !isRowDraggable.value)
      return;
    var dragContainer = element2 === null || element2 === void 0 ? void 0 : element2.querySelector("tbody");
    if (!dragContainer) {
      console.error("tbody does not exist.");
      return null;
    }
    var dragInstanceTmp = null;
    var baseOptions = _objectSpread$c(_objectSpread$c({
      animation: 150
    }, props2.dragSortOptions), {}, {
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp, _props$onDragSort;
        (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(lastRowList.value);
        var currentIndex = evt.oldIndex, targetIndex = evt.newIndex;
        var params = {
          currentIndex,
          current: data26[currentIndex],
          targetIndex,
          target: data26[targetIndex],
          currentData: swapDragArrayElement(props2.data, currentIndex, targetIndex),
          e: evt,
          sort: "row"
        };
        (_props$onDragSort = props2.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props2, params);
      }
    });
    if (isRowDraggable.value) {
      dragInstanceTmp = new Sortable(dragContainer, _objectSpread$c({}, baseOptions));
    } else {
      dragInstanceTmp = new Sortable(dragContainer, _objectSpread$c(_objectSpread$c({}, baseOptions), {}, {
        handle: ".".concat(tableDraggableClasses.handle)
      }));
    }
    lastRowList.value = dragInstanceTmp.toArray();
  };
  var registerColDragEvent = function registerColDragEvent2(tableElement) {
    var _dragInstanceTmp3;
    if (!isColDraggable.value || !tableElement)
      return;
    var dragInstanceTmp = null;
    var options = _objectSpread$c(_objectSpread$c({
      animation: 150
    }, props2.dragSortOptions), {}, {
      dataIdAttr: "data-colkey",
      direction: "vertical",
      ghostClass: tableDraggableClasses.ghost,
      chosenClass: tableDraggableClasses.chosen,
      dragClass: tableDraggableClasses.dragging,
      handle: ".".concat(tableBaseClass.thCellInner),
      onEnd: function onEnd(evt) {
        var _dragInstanceTmp2, _props$onDragSort2;
        (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.sort(_toConsumableArray(lastColList.value));
        var currentIndex = evt.oldIndex, targetIndex = evt.newIndex;
        var params = {
          currentIndex,
          current: columns.value[currentIndex],
          targetIndex,
          target: columns.value[targetIndex],
          currentData: swapDragArrayElement(columns.value, currentIndex, targetIndex),
          e: evt,
          sort: "col"
        };
        (_props$onDragSort2 = props2.onDragSort) === null || _props$onDragSort2 === void 0 ? void 0 : _props$onDragSort2.call(props2, params);
      }
    });
    var container = tableElement.querySelector("thead > tr");
    dragInstanceTmp = new Sortable(container, options);
    lastColList.value = (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.toArray();
  };
  function setDragSortPrimaryTableRef(primaryTableElement) {
    primaryTableRef.value = primaryTableElement;
  }
  watch([primaryTableRef], function(_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1), val = _ref4[0];
    (val === null || val === void 0 ? void 0 : val.$el) && registerRowDragEvent(val === null || val === void 0 ? void 0 : val.$el);
    (val === null || val === void 0 ? void 0 : val.$el) && registerColDragEvent(val === null || val === void 0 ? void 0 : val.$el);
  });
  return {
    isRowDraggable,
    isRowHandlerDraggable,
    isColDraggable,
    setDragSortPrimaryTableRef
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useAsyncLoading(props2, context) {
  var renderTNode = useTNodeJSX();
  var _useConfig = useConfig("table"), global2 = _useConfig.global;
  var _useClassName = useClassName(), isLoadingClass = _useClassName.isLoadingClass, isLoadMoreClass = _useClassName.isLoadMoreClass, asyncLoadingClass = _useClassName.asyncLoadingClass;
  var classes6 = computed(function() {
    var _ref;
    return [asyncLoadingClass, (_ref = {}, _defineProperty$3(_ref, isLoadingClass, props2.asyncLoading === "loading"), _defineProperty$3(_ref, isLoadMoreClass, props2.asyncLoading === "load-more"), _ref)];
  });
  function onLoadClick() {
    var _props$onAsyncLoading;
    if (typeof props2.asyncLoading !== "string")
      return;
    (_props$onAsyncLoading = props2.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 ? void 0 : _props$onAsyncLoading.call(props2, {
      status: props2.asyncLoading
    });
  }
  function renderAsyncLoading() {
    var asyncLoadingNode = renderTNode("asyncLoading");
    if (isString_1(asyncLoadingNode)) {
      var asyncLoading = props2.asyncLoading;
      var loadingText = {
        "load-more": global2.value.loadingMoreText,
        loading: global2.value.loadingText
      }[String(asyncLoading)];
      return createVNode("div", {
        "class": classes6.value,
        "onClick": onLoadClick
      }, [createVNode(Loading, {
        "loading": asyncLoading === "loading",
        "text": loadingText
      }, null)]);
    }
    if (![null, false, void 0].includes(asyncLoadingNode)) {
      return createVNode("div", {
        "class": classes6.value,
        "onClick": onLoadClick
      }, [asyncLoadingNode]);
    }
    return null;
  }
  return {
    renderAsyncLoading
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$b(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$b(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$b(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var OMIT_PROPS = ["defaultExpandedRowKeys", "columnController", "filterRow", "sortOnRowDraggable", "expandOnRowClick", "multipleSort", "expandIcon", "onChange", "onAsyncLoadingClick", "onChange", "onColumnChange", "onColumnControllerVisibleChange", "onDataChange", "onDisplayColumnsChange", "onDragSort", "onExpandChange", "onFilterChange", "onSelectChange", "onSortChange"];
var _PrimaryTable = defineComponent({
  name: "TPrimaryTable",
  props: _objectSpread$b(_objectSpread$b({}, baseTableProps), primaryTableProps),
  setup: function setup119(props2, context) {
    var renderTNode = useTNodeJSX();
    var _toRefs = toRefs(props2), columns = _toRefs.columns;
    var primaryTableRef = ref(null);
    var _useClassName = useClassName(), tableDraggableClasses = _useClassName.tableDraggableClasses, tableBaseClass = _useClassName.tableBaseClass;
    var _useColumnController = useColumnController(props2, context), tDisplayColumns = _useColumnController.tDisplayColumns, renderColumnController = _useColumnController.renderColumnController;
    var _useRowExpand = useRowExpand(props2, context), showExpandedRow = _useRowExpand.showExpandedRow, showExpandIconColumn = _useRowExpand.showExpandIconColumn, getExpandColumn = _useRowExpand.getExpandColumn, renderExpandedRow = _useRowExpand.renderExpandedRow, onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick;
    var _useSorter = useSorter(props2, context), renderSortIcon = _useSorter.renderSortIcon;
    var _useRowSelect = useRowSelect(props2), formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn, selectedRowClassNames = _useRowSelect.selectedRowClassNames;
    var _useFilter = useFilter(props2, context), hasEmptyCondition = _useFilter.hasEmptyCondition, isTableOverflowHidden = _useFilter.isTableOverflowHidden, renderFilterIcon = _useFilter.renderFilterIcon, renderFirstFilterRow = _useFilter.renderFirstFilterRow, setFilterPrimaryTableRef = _useFilter.setFilterPrimaryTableRef;
    var _useDragSort = useDragSort(props2), isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable, isRowDraggable = _useDragSort.isRowDraggable, isColDraggable = _useDragSort.isColDraggable, setDragSortPrimaryTableRef = _useDragSort.setDragSortPrimaryTableRef;
    var _useTableHeader = useTableHeader(props2), renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;
    var _useAsyncLoading = useAsyncLoading(props2), renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;
    var primaryTableClasses = computed(function() {
      var _ref;
      return _ref = {}, _defineProperty$3(_ref, tableDraggableClasses.colDraggable, isColDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowDraggable, isRowDraggable.value), _defineProperty$3(_ref, tableBaseClass.overflowVisible, isTableOverflowHidden.value === false), _ref;
    });
    var tRowClassNames = computed(function() {
      var tClassNames = [props2.rowClassName, selectedRowClassNames.value];
      return tClassNames.filter(function(v) {
        return v;
      });
    });
    var tRowAttributes = computed(function() {
      var tAttributes = [props2.rowAttributes];
      if (isRowHandlerDraggable.value || isRowDraggable.value) {
        tAttributes.push(function(_ref2) {
          var row = _ref2.row;
          return {
            "data-id": get_1(row, props2.rowKey || "id")
          };
        });
      }
      return tAttributes.filter(function(v) {
        return v;
      });
    });
    onMounted(function() {
      setFilterPrimaryTableRef(primaryTableRef.value);
      setDragSortPrimaryTableRef(primaryTableRef.value);
    });
    var getColumns = function getColumns2(columns2) {
      var arr = [];
      var _loop = function _loop2(i2, len3) {
        var _item$children, _tDisplayColumns$valu, _item$children2, _item$children3;
        var item = _objectSpread$b({}, columns2[i2]);
        var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || ((_tDisplayColumns$valu = tDisplayColumns.value) === null || _tDisplayColumns$valu === void 0 ? void 0 : _tDisplayColumns$valu.includes(item.colKey));
        if (!isDisplayColumn && props2.columnController)
          return "continue";
        item = formatToRowSelectColumn(item);
        if (item.sorter || item.filter) {
          var titleContent = renderTitle2(context.slots, item, i2);
          item.title = function(h2, p2) {
            var sortIcon = item.sorter ? renderSortIcon(p2) : null;
            var filterIcon = item.filter ? renderFilterIcon(p2) : null;
            return renderTitleWidthIcon([titleContent, sortIcon, filterIcon]);
          };
        }
        if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
          item.children = getColumns2(item.children);
        }
        if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
          arr.push(item);
        }
      };
      for (var i = 0, len2 = columns2.length; i < len2; i++) {
        var _ret = _loop(i);
        if (_ret === "continue")
          continue;
      }
      return arr;
    };
    var tColumns = computed(function() {
      var cols2 = getColumns(columns.value);
      if (showExpandIconColumn.value) {
        cols2.unshift(getExpandColumn());
      }
      return cols2;
    });
    var onInnerPageChange = function onInnerPageChange2(pageInfo, newData) {
      var _props$onPageChange, _props$onChange;
      (_props$onPageChange = props2.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props2, pageInfo, newData);
      var changeParams = [{
        pagination: pageInfo
      }, {
        trigger: "pagination",
        currentData: newData
      }];
      (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call.apply(_props$onChange, [props2].concat(changeParams));
    };
    return {
      tColumns,
      showExpandedRow,
      tRowClassNames,
      hasEmptyCondition,
      primaryTableRef,
      tRowAttributes,
      primaryTableClasses,
      renderTNode,
      renderColumnController,
      renderExpandedRow,
      onInnerExpandRowClick,
      renderFirstFilterRow,
      renderAsyncLoading,
      onInnerPageChange
    };
  },
  methods: {
    formatNode: function formatNode(api, renderInnerNode, condition, extra) {
      if (!condition)
        return this[api];
      var innerNode = renderInnerNode(h);
      var propsNode = this.renderTNode(api);
      if (innerNode && !propsNode)
        return function() {
          return innerNode;
        };
      if (propsNode && !innerNode)
        return function() {
          return propsNode;
        };
      if (innerNode && propsNode) {
        return function() {
          return extra !== null && extra !== void 0 && extra.reverse ? createVNode("div", null, [innerNode, propsNode]) : createVNode("div", null, [propsNode, innerNode]);
        };
      }
      return null;
    }
  },
  render: function render96() {
    var isColumnController = !!(this.columnController && Object.keys(this.columnController).length);
    var placement = isColumnController ? this.columnController.placement || "top-right" : "";
    var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
    var topContent = this.formatNode("topContent", this.renderColumnController, isColumnController && !isBottomController);
    var bottomContent = this.formatNode("bottomContent", this.renderColumnController, isBottomController, {
      reverse: true
    });
    var firstFullRow = this.formatNode("firstFullRow", this.renderFirstFilterRow, !this.hasEmptyCondition);
    var lastFullRow = this.formatNode("lastFullRow", this.renderAsyncLoading, !!this.asyncLoading);
    var props2 = _objectSpread$b(_objectSpread$b({}, omit_1(this.$props, OMIT_PROPS)), {}, {
      rowClassName: this.tRowClassNames,
      rowAttributes: this.tRowAttributes,
      columns: this.tColumns,
      topContent,
      bottomContent,
      firstFullRow,
      lastFullRow,
      onPageChange: this.onInnerPageChange,
      renderExpandedRow: this.showExpandedRow ? this.renderExpandedRow : void 0
    });
    if (this.expandOnRowClick) {
      props2.onRowClick = this.onInnerExpandRowClick;
    }
    return createVNode(_BaseTable, mergeProps({
      "ref": "primaryTableRef"
    }, props2, this.$attrs, {
      "class": this.primaryTableClasses
    }), this.$slots);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var enhancedTableProps = {
  tree: {
    type: Object
  },
  onTreeExpandChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$a(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$a(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$a(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var TableTreeStore = /* @__PURE__ */ function() {
  function TableTreeStore2() {
    _classCallCheck(this, TableTreeStore2);
    _defineProperty$3(this, "treeDataMap", /* @__PURE__ */ new Map());
    this.treeDataMap = /* @__PURE__ */ new Map();
  }
  _createClass(TableTreeStore2, [{
    key: "initialTreeStore",
    value: function initialTreeStore(dataSource, columns, keys2) {
      var _this$treeDataMap;
      (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 ? void 0 : _this$treeDataMap.clear();
      initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys2);
    }
  }, {
    key: "toggleExpandData",
    value: function toggleExpandData(p2, dataSource, keys2) {
      if (!p2) {
        log.error("EnhancedTable", "the node you want to toggleExpand doest not exist in `data`");
        return dataSource;
      }
      var rowValue = get_1(p2.row, keys2.rowKey);
      if (rowValue === void 0) {
        log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
        return [];
      }
      var r = this.treeDataMap.get(rowValue) || {
        row: p2.row,
        rowIndex: p2.rowIndex,
        expanded: false
      };
      r.rowIndex = p2.rowIndex;
      r.expanded = !r.expanded;
      this.treeDataMap.set(rowValue, r);
      return this.updateExpandRow(r, dataSource, keys2);
    }
  }, {
    key: "updateExpandRow",
    value: function updateExpandRow(changeRow, dataSource, keys2) {
      var row = changeRow.row, rowIndex = changeRow.rowIndex, expanded2 = changeRow.expanded;
      var treeDataMap = this.treeDataMap;
      var childrenNodes = get_1(row, keys2.childrenKey);
      if (!row || !childrenNodes)
        return;
      if (expanded2) {
        updateChildrenRowState(treeDataMap, changeRow, expanded2, keys2);
        updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys2);
        dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
      } else {
        updateChildrenRowState(treeDataMap, changeRow, expanded2, keys2);
        var len2 = changeRow.expandChildrenLength || childrenNodes.length;
        updateRowExpandLength(treeDataMap, row, -1 * len2, "fold", keys2);
        dataSource.splice(rowIndex + 1, len2);
      }
      updateRowIndex(treeDataMap, dataSource, {
        rowKey: keys2.rowKey,
        minRowIndex: rowIndex + 1
      });
      return dataSource;
    }
  }, {
    key: "getData",
    value: function getData2(key) {
      return this.treeDataMap.get(key);
    }
  }, {
    key: "updateData",
    value: function updateData(key, newRowData, dataSource, keys2) {
      var newKey = get_1(newRowData, keys2.rowKey);
      var rowState = this.treeDataMap.get(key);
      if (!rowState || rowState.rowIndex === -1) {
        updateRowData(dataSource, key, newRowData, {
          rowKey: keys2.rowKey,
          childrenKey: keys2.childrenKey
        });
        return;
      }
      var currentRowIndex = rowState.rowIndex;
      rowState.row = newRowData;
      this.treeDataMap.set(key, rowState);
      if (rowState.parent) {
        var siblings = get_1(rowState.parent.row, keys2.childrenKey);
        var index2 = siblings.findIndex(function(item) {
          return get_1(item, keys2.rowKey) === key;
        });
        siblings[index2] = newRowData;
      }
      if (key !== newKey) {
        this.treeDataMap.set(newKey, rowState);
        this.treeDataMap["delete"](key);
      } else {
        this.treeDataMap.set(key, rowState);
      }
      return currentRowIndex;
    }
  }, {
    key: "remove",
    value: function remove3(key, dataSource, keys2) {
      var r = this.treeDataMap.get(key);
      if (r && r.rowIndex >= 0) {
        var removeNumber = (r.expandChildrenLength || 0) + 1;
        dataSource.splice(r.rowIndex, removeNumber);
        if (r.parent) {
          var siblings = get_1(r.parent.row, keys2.childrenKey);
          var index2 = siblings.findIndex(function(item) {
            return get_1(item, keys2.rowKey) === key;
          });
          siblings.splice(index2, 1);
          updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", {
            rowKey: keys2.rowKey,
            childrenKey: keys2.childrenKey
          });
        }
        this.treeDataMap["delete"](key);
        updateRowIndex(this.treeDataMap, dataSource, {
          minRowIndex: r.rowIndex,
          rowKey: keys2.rowKey
        });
      } else {
        console.warn("TDesign Table Warn: Do not remove this node, which is not appreared.");
      }
      return dataSource;
    }
  }, {
    key: "appendTo",
    value: function appendTo2(key, newData, dataSource, keys2) {
      var state = this.treeDataMap.get(key);
      if (!state) {
        console.warn("TDesign Table Warn: ".concat(key, " is not exist."));
        return;
      }
      var newRowValue = get_1(newData, keys2.rowKey);
      if (this.treeDataMap.get(newRowValue)) {
        console.warn("TDesign Table Warn: Duplicated Key. ".concat(newRowValue, " is already exists."));
        return;
      }
      var children = get_1(state.row, keys2.childrenKey);
      var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
      var newState = {
        row: newData,
        level: state.level + 1,
        parent: state,
        path: _toConsumableArray(state.path),
        expanded: false,
        expandChildrenLength: 0,
        rowIndex: isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + 1 : -1
      };
      newState.path = newState.path.concat(newState);
      if (children !== null && children !== void 0 && children.length) {
        state.row[keys2.childrenKey].push(newData);
      } else {
        state.row[keys2.childrenKey] = [newData];
        state.expanded = true;
      }
      this.treeDataMap.set(newRowValue, newState);
      if (isShowNewNode) {
        dataSource.splice(newState.rowIndex, 0, newData);
        updateRowExpandLength(this.treeDataMap, state.row, 1, "insert", {
          rowKey: keys2.rowKey,
          childrenKey: keys2.childrenKey
        });
        updateRowIndex(this.treeDataMap, dataSource, {
          minRowIndex: newState.rowIndex,
          rowKey: keys2.rowKey
        });
      }
      return dataSource;
    }
  }]);
  return TableTreeStore2;
}();
function initialTreeDataMap(treeDataMap, dataSource, column, keys2) {
  for (var i = 0, len2 = dataSource.length; i < len2; i++) {
    var item = dataSource[i];
    var rowValue = get_1(item, keys2.rowKey);
    if (rowValue === void 0) {
      log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
      return;
    }
    var state = {
      row: item,
      rowIndex: i,
      expanded: false,
      level: 0,
      expandChildrenLength: 0,
      disabled: isRowSelectedDisabled(column, item, i)
    };
    state.path = [state];
    treeDataMap.set(rowValue, state);
    var children = get_1(item, keys2.childrenKey);
    if (children !== null && children !== void 0 && children.length) {
      initialTreeDataMap(treeDataMap, children, column, keys2);
    }
  }
}
function updateRowExpandLength(treeDataMap, row, distance, type, keys2) {
  var tmp = row;
  while (tmp) {
    var _state$parent;
    var state = treeDataMap.get(get_1(tmp, keys2.rowKey));
    var expandLen = (state.expandChildrenLength || 0) + distance;
    state.expandChildrenLength = Math.max(0, expandLen);
    tmp = state === null || state === void 0 ? void 0 : (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
  }
  if (type === "fold") {
    clearRowExpandLength(treeDataMap, row, keys2);
  }
}
function clearRowExpandLength(treeDataMap, row, keys2) {
  var children = get_1(row, keys2.childrenKey);
  if (children !== null && children !== void 0 && children.length) {
    children.forEach(function(item) {
      var state = treeDataMap.get(get_1(item, keys2.rowKey));
      if (!state)
        return;
      state.expandChildrenLength = 0;
      clearRowExpandLength(treeDataMap, state.row, keys2);
    });
  }
}
function updateChildrenRowState(treeDataMap, rowState, expanded2, keys2) {
  var row = rowState.row, _rowState$level = rowState.level, level = _rowState$level === void 0 ? 0 : _rowState$level, rowIndex = rowState.rowIndex;
  var childrenNodes = get_1(row, keys2.childrenKey);
  childrenNodes.forEach(function(item, kidRowIndex) {
    var rowValue = get_1(item, keys2.rowKey);
    var index2 = expanded2 ? rowIndex + 1 + kidRowIndex : -1;
    var curState = treeDataMap.get(rowValue);
    var newState = _objectSpread$a(_objectSpread$a({}, curState), {}, {
      row: item,
      rowIndex: index2,
      expanded: false,
      parent: rowState,
      level: level + 1,
      path: []
    });
    newState.path = newState.path.concat(newState);
    treeDataMap.set(rowValue, newState);
    if (!expanded2) {
      var children = get_1(item, keys2.childrenKey);
      if (children !== null && children !== void 0 && children.length) {
        updateChildrenRowState(treeDataMap, _objectSpread$a(_objectSpread$a({}, newState), {}, {
          rowIndex: -1,
          expanded: false
        }), expanded2, keys2);
      }
    }
  });
}
function updateRowData(data26, key, newData, keys2) {
  for (var i = 0, len2 = data26.length; i < len2; i++) {
    var item = data26[i];
    if (get_1(item, keys2.rowKey) === key) {
      data26[i] = newData;
      return;
    }
    var children = get_1(item, keys2.childrenKey) || [];
    if (children !== null && children !== void 0 && children.length) {
      updateRowData(children, key, newData, keys2);
    }
  }
}
function updateRowIndex(treeDataMap, dataSource, extra) {
  var start3 = extra.minRowIndex || 0;
  var end3 = extra.maxRowIndex || dataSource.length;
  for (var rowIndex = start3; rowIndex < end3; rowIndex++) {
    var item = dataSource[rowIndex];
    var state = treeDataMap.get(get_1(item, extra.rowKey));
    if (!state) {
      log.warn("Table", "tree map went wrong");
    }
    state.rowIndex = rowIndex;
  }
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$9(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$9(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$9(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function useTreeData(props2, context) {
  var _toRefs = toRefs(props2), data26 = _toRefs.data, columns = _toRefs.columns;
  var store = ref(new TableTreeStore());
  var treeNodeCol = ref();
  var dataSource = ref([]);
  var _useClassName = useClassName(), tableTreeClasses = _useClassName.tableTreeClasses;
  var rowDataKeys = computed(function() {
    var _props$tree;
    return {
      rowKey: props2.rowKey || "id",
      childrenKey: ((_props$tree = props2.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
    };
  });
  watch([data26], function(_ref) {
    var _ref2 = _slicedToArray(_ref, 1), data27 = _ref2[0];
    if (!data27)
      return;
    if (!props2.tree || !Object.keys(props2.tree).length) {
      dataSource.value = data27;
      return;
    }
    var newVal = cloneDeep_1(data27);
    dataSource.value = newVal;
    store.value.initialTreeStore(newVal, props2.columns, rowDataKeys.value);
  }, {
    immediate: true
  });
  onUnmounted(function() {
    var _store$value$treeData;
    if (!props2.tree || !Object.keys(props2.tree).length)
      return;
    (_store$value$treeData = store.value.treeDataMap) === null || _store$value$treeData === void 0 ? void 0 : _store$value$treeData.clear();
    store.value = null;
  });
  watch([columns], function() {
    treeNodeCol.value = getTreeNodeColumnCol();
  }, {
    immediate: true
  });
  function getTreeNodeStyle(level) {
    var _props$tree2;
    if (level === void 0)
      return;
    var indent = ((_props$tree2 = props2.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.indent) || 24;
    return {
      paddingLeft: "".concat(level * indent || 1, "px")
    };
  }
  function toggleExpandData(p2) {
    dataSource.value = store.value.toggleExpandData(p2, dataSource.value, rowDataKeys.value);
    if (p2.trigger === "inner") {
      var _props$onTreeExpandCh, _store$value, _store$value$treeData2;
      var rowValue = get_1(p2.row, rowDataKeys.value.rowKey);
      (_props$onTreeExpandCh = props2.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props2, {
        row: p2.row,
        rowIndex: p2.rowIndex,
        rowState: (_store$value = store.value) === null || _store$value === void 0 ? void 0 : (_store$value$treeData2 = _store$value.treeDataMap) === null || _store$value$treeData2 === void 0 ? void 0 : _store$value$treeData2.get(rowValue)
      });
    }
  }
  function getTreeNodeColumnCol() {
    var _props$tree3;
    var columns2 = props2.columns;
    var treeNodeColumnIndex = ((_props$tree3 = props2.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.treeNodeColumnIndex) || 0;
    while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
      var _columns2$treeNodeCol, _columns2$treeNodeCol2;
      treeNodeColumnIndex += 1;
    }
    return columns2[treeNodeColumnIndex];
  }
  function formatTreeColum(col) {
    if (!props2.tree || !Object.keys(props2.tree).length || col.colKey !== treeNodeCol.value.colKey)
      return col;
    var newCol = _objectSpread$9({}, treeNodeCol.value);
    newCol.cell = function(h2, p2) {
      var cellInfo = renderCell(_objectSpread$9(_objectSpread$9({}, p2), {}, {
        col: _objectSpread$9({}, treeNodeCol.value)
      }), context.slots);
      var currentState = store.value.treeDataMap.get(get_1(p2.row, rowDataKeys.value.rowKey));
      var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);
      var classes6 = _defineProperty$3({}, tableTreeClasses.inlineCol, !!col.ellipsis);
      var childrenNodes = get_1(p2.row, rowDataKeys.value.childrenKey);
      if (childrenNodes && childrenNodes instanceof Array) {
        var _store$value$treeData3;
        var IconNode = (_store$value$treeData3 = store.value.treeDataMap.get(get_1(p2.row, rowDataKeys.value.rowKey))) !== null && _store$value$treeData3 !== void 0 && _store$value$treeData3.expanded ? minusRectangle : addRectangle;
        return createVNode("div", {
          "class": [tableTreeClasses.col, classes6],
          "style": colStyle
        }, [!!childrenNodes.length && createVNode(IconNode, {
          "class": tableTreeClasses.icon,
          "onClick": function onClick2() {
            return toggleExpandData(_objectSpread$9(_objectSpread$9({}, p2), {}, {
              trigger: "inner"
            }));
          }
        }, null), cellInfo]);
      }
      return createVNode("div", {
        "style": colStyle,
        "class": classes6
      }, [cellInfo]);
    };
    if (newCol.ellipsis === true) {
      newCol.ellipsis = function(h2, p2) {
        return renderCell(_objectSpread$9(_objectSpread$9({}, p2), {}, {
          col: _objectSpread$9({}, treeNodeCol.value)
        }), context.slots);
      };
    }
    return newCol;
  }
  function setData(key, newRowData) {
    var rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);
    var newData = _toConsumableArray(dataSource.value);
    newData[rowIndex] = newRowData;
    dataSource.value = newData;
  }
  function getData2(key) {
    return store.value.getData(key);
  }
  function remove3(key) {
    dataSource.value = store.value.remove(key, dataSource.value, rowDataKeys.value);
  }
  function appendTo2(key, newData) {
    dataSource.value = store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value);
  }
  return {
    store,
    rowDataKeys,
    dataSource,
    setData,
    getData: getData2,
    remove: remove3,
    appendTo: appendTo2,
    formatTreeColum,
    toggleExpandData
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$8(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$8(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$8(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var childrenMap = /* @__PURE__ */ new Map();
function getChildrenData(treeDataMap, data26, childrenKey, rowKey, r) {
  if (childrenMap.get(data26))
    return childrenMap.get(data26);
  var result = r || {
    allChildren: [],
    allChildrenKeys: []
  };
  var children = get_1(data26, childrenKey);
  if (!children || !children.length)
    return result;
  var selectableChildren = children.filter(function(item) {
    var _treeDataMap$get;
    return !((_treeDataMap$get = treeDataMap.get(get_1(item, rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
  });
  result.allChildren = result.allChildren.concat(selectableChildren);
  var childrenKeys = selectableChildren.map(function(item) {
    return get_1(item, rowKey);
  });
  result.allChildrenKeys = result.allChildrenKeys.concat(childrenKeys);
  for (var i = 0, len2 = children.length; i < len2; i++) {
    var tItem = children[i];
    var c = get_1(tItem, childrenKey);
    if (c !== null && c !== void 0 && c.length) {
      var nextLevelData = getChildrenData(treeDataMap, tItem, childrenKey, rowKey, result);
      result.allChildren = result.allChildren.concat(nextLevelData.allChildren);
      result.allChildrenKeys = result.allChildrenKeys.concat(nextLevelData.allChildrenKeys);
    }
  }
  return result;
}
function removeChildrenKeys(p2, r) {
  var selectedRowKeys = p2.selectedRowKeys, removeKeys = p2.removeKeys;
  var result = r || {
    data: [],
    keys: []
  };
  for (var i = 0, len2 = selectedRowKeys.length; i < len2; i++) {
    var key = selectedRowKeys[i];
    if (!removeKeys.includes(key)) {
      result.keys.push(key);
    }
  }
  return result;
}
function getRowDataByKeys(p2) {
  var treeDataMap = p2.treeDataMap, selectedRowKeys = p2.selectedRowKeys;
  var result = [];
  for (var i = 0, len2 = selectedRowKeys.length; i < len2; i++) {
    var key = selectedRowKeys[i];
    result.push(treeDataMap.get(key));
  }
  return result;
}
function useTreeSelect(props2, treeDataMap) {
  var _toRefs = toRefs(props2), selectedRowKeys = _toRefs.selectedRowKeys;
  var _useDefaultValue = useDefaultValue(selectedRowKeys, props2.defaultSelectedRowKeys, props2.onSelectChange, "selectedRowKeys"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2);
  _useDefaultValue2[0];
  var setTSelectedRowKeys = _useDefaultValue2[1];
  var rowDataKeys = computed(function() {
    var _props$tree;
    return {
      rowKey: props2.rowKey || "id",
      childrenKey: ((_props$tree = props2.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
    };
  });
  function onInnerSelectChange(rowKeys, extraData) {
    if (extraData.currentRowKey === "CHECK_ALL_BOX") {
      handleSelectAll(extraData);
    } else {
      handleSelect(rowKeys, extraData);
    }
  }
  function handleSelectAll(extraData) {
    var newRowKeys = [];
    var newRowData = [];
    if (extraData.type === "check") {
      var arr = _toConsumableArray(treeDataMap.value.values());
      for (var i = 0, len2 = arr.length; i < len2; i++) {
        var item = arr[i];
        if (!item.disabled) {
          newRowData.push(item.row);
          newRowKeys.push(get_1(item.row, rowDataKeys.value.rowKey));
        }
      }
    }
    var newExtraData = _objectSpread$8(_objectSpread$8({}, extraData), {}, {
      selectedRowData: newRowData || []
    });
    setTSelectedRowKeys(newRowKeys, newExtraData);
  }
  function handleSelect(rowKeys, extraData) {
    var newRowKeys = _toConsumableArray(rowKeys);
    if ((props2 === null || props2 === void 0 ? void 0 : props2.tree.checkStrictly) === false) {
      if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
        var result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value.childrenKey, rowDataKeys.value.rowKey);
        var allChildrenKeys = result.allChildrenKeys;
        childrenMap.set(extraData.currentRowData, result);
        newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
      } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
        var children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value.childrenKey, rowDataKeys.value.rowKey);
        var _result = removeChildrenKeys({
          selectedRowKeys: rowKeys,
          removeKeys: children.allChildrenKeys
        });
        newRowKeys = _result.keys;
      }
    }
    var newRowData = getRowDataByKeys({
      treeDataMap: treeDataMap.value,
      selectedRowKeys: newRowKeys
    });
    var newExtraData = _objectSpread$8(_objectSpread$8({}, extraData), {}, {
      selectedRowData: newRowData
    });
    setTSelectedRowKeys(newRowKeys, newExtraData);
  }
  return {
    onInnerSelectChange
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _excluded = ["store", "dataSource", "formatTreeColum"];
function ownKeys$7(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$7(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$7(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _EnhancedTable = defineComponent({
  name: "TEnhancedTable",
  props: _objectSpread$7(_objectSpread$7(_objectSpread$7({}, baseTableProps), primaryTableProps), enhancedTableProps),
  setup: function setup120(props2, context) {
    var _useTreeData = useTreeData(props2, context), store = _useTreeData.store, dataSource = _useTreeData.dataSource, formatTreeColum = _useTreeData.formatTreeColum, treeInstanceFunctions = _objectWithoutProperties$1(_useTreeData, _excluded);
    var treeDataMap = ref(store.value.treeDataMap);
    var _useTreeSelect = useTreeSelect(props2, treeDataMap), onInnerSelectChange = _useTreeSelect.onInnerSelectChange;
    var getColumns = function getColumns2(columns) {
      var arr = [];
      for (var i = 0, len2 = columns.length; i < len2; i++) {
        var _item$children, _item$children2;
        var item = _objectSpread$7({}, columns[i]);
        item = formatTreeColum(item);
        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          item.children = getColumns2(item.children);
        }
        if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
          arr.push(item);
        }
      }
      return arr;
    };
    var tColumns = computed(function() {
      var isTreeData = !props2.tree || !Object.keys(props2.tree).length;
      return isTreeData ? props2.columns : getColumns(props2.columns);
    });
    return _objectSpread$7({
      store,
      dataSource,
      tColumns,
      onInnerSelectChange
    }, treeInstanceFunctions);
  },
  render: function render97() {
    var props2 = _objectSpread$7(_objectSpread$7({}, this.$props), {}, {
      data: this.dataSource,
      columns: this.tColumns,
      disableDataPage: Boolean(this.tree && Object.keys(this.tree).length),
      onSelectChange: this.onInnerSelectChange
    });
    return createVNode(_PrimaryTable, mergeProps(props2, this.$attrs), this.$slots);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var BaseTable = withInstall(_BaseTable);
var PrimaryTable = withInstall(_PrimaryTable);
var EnhancedTable = withInstall(_EnhancedTable);
var table = cloneDeep_1(_PrimaryTable);
table.name = "TTable";
var Table = withInstall(table);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$6 = {
  borderless: Boolean,
  defaultExpandAll: Boolean,
  disabled: Boolean,
  expandIcon: {
    type: [Boolean, Function],
    "default": true
  },
  expandIconPlacement: {
    type: String,
    "default": "left",
    validator: function validator112(val) {
      if (!val)
        return true;
      return ["left", "right"].includes(val);
    }
  },
  expandMutex: Boolean,
  expandOnRowClick: {
    type: Boolean,
    "default": true
  },
  value: {
    type: Array,
    "default": void 0
  },
  modelValue: {
    type: Array,
    "default": void 0
  },
  defaultValue: {
    type: Array
  },
  onChange: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Collapse = defineComponent({
  name: "TCollapse",
  props: props$6,
  setup: function setup121(props2, context) {
    var componentName = usePrefixClass("collapse");
    var borderlessClass = usePrefixClass("-border-less");
    var renderTNodeJSX3 = useTNodeJSX();
    var _toRefs = toRefs(props2), value6 = _toRefs.value, expandMutex = _toRefs.expandMutex, borderless = _toRefs.borderless, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value6, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), collapseValue = _useVModel2[0], setCollapseValue = _useVModel2[1];
    var updateCollapseValue = function updateCollapseValue2(value22) {
      var newValue = [].concat(collapseValue.value || []);
      var index2 = newValue.indexOf(value22);
      if (index2 >= 0) {
        newValue.splice(index2, 1);
      } else if (expandMutex.value) {
        newValue = [value22];
      } else {
        newValue.push(value22);
      }
      setCollapseValue(newValue);
    };
    var classes6 = computed(function() {
      return [componentName.value, _defineProperty$3({}, borderlessClass.value, !!borderless.value)];
    });
    var getUniqId = function() {
      var index2 = 0;
      return function() {
        return index2++;
      };
    }();
    provide("collapseValue", collapseValue);
    provide("updateCollapseValue", updateCollapseValue);
    provide("collapseProps", toRefs(props2));
    provide("getUniqId", getUniqId);
    return function() {
      var nodes = renderTNodeJSX3("default");
      return createVNode("div", {
        "class": classes6.value
      }, [nodes]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$5 = {
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  destroyOnCollapse: Boolean,
  disabled: {
    type: Boolean,
    "default": void 0
  },
  expandIcon: {
    type: [Boolean, Function],
    "default": void 0
  },
  header: {
    type: [String, Function]
  },
  headerRightContent: {
    type: [String, Function]
  },
  value: {
    type: [String, Number]
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useCollapseAnimation() {
  var beforeEnter = function beforeEnter2(el) {
    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;
    el.style.height = "0";
    el.style.paddingTop = "0";
    el.style.paddingBottom = "0";
  };
  var enter2 = function enter3(el) {
    el.dataset.oldOverflow = el.style.overflow;
    el.style.height = "".concat(el.scrollHeight, "px");
    el.style.paddingTop = el.dataset.oldPaddingTop;
    el.style.paddingBottom = el.dataset.oldPaddingBottom;
    el.style.overflow = "hidden";
  };
  var afterEnter = function afterEnter2(el) {
    el.style.height = "";
    el.style.overflow = el.dataset.oldOverflow;
  };
  var beforeLeave = function beforeLeave2(el) {
    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;
    el.dataset.oldOverflow = el.style.overflow;
    el.style.height = "".concat(el.scrollHeight, "px");
    el.style.overflow = "hidden";
  };
  var leave = function leave2(el) {
    if (el.scrollHeight !== 0) {
      el.style.height = "0";
      el.style.paddingTop = "0";
      el.style.paddingBottom = "0";
    }
  };
  var afterLeave = function afterLeave2(el) {
    el.style.height = "";
    el.style.overflow = el.dataset.oldOverflow;
    el.style.paddingTop = el.dataset.oldPaddingTop;
    el.style.paddingBottom = el.dataset.oldPaddingBottom;
  };
  return {
    beforeEnter,
    enter: enter2,
    afterEnter,
    beforeLeave,
    leave,
    afterLeave
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function _isSlot$2(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _CollapsePanel = defineComponent({
  name: "TCollapsePanel",
  props: props$5,
  setup: function setup122(props2, context) {
    var renderTNodeJSX3 = useTNodeJSX();
    var componentName = usePrefixClass("collapse-panel");
    var disableClass = usePrefixClass("is-disabled");
    var clickableClass = usePrefixClass("is-clickable");
    var transitionClass = usePrefixClass("slide-down");
    var _toRefs = toRefs(props2), value6 = _toRefs.value, disabled2 = _toRefs.disabled, destroyOnCollapse = _toRefs.destroyOnCollapse, expandIcon = _toRefs.expandIcon;
    var collapseValue = inject("collapseValue");
    var updateCollapseValue = inject("updateCollapseValue");
    var getUniqId = inject("getUniqId", function() {
      return void 0;
    }, false);
    var _inject = inject("collapseProps"), defaultExpandAll = _inject.defaultExpandAll, disableAll = _inject.disabled, expandIconPlacement = _inject.expandIconPlacement, expandOnRowClick = _inject.expandOnRowClick, expandIconAll = _inject.expandIcon;
    var innerValue = value6.value || getUniqId();
    var showExpandIcon = computed(function() {
      return expandIcon.value === void 0 ? expandIconAll.value : expandIcon.value;
    });
    if (defaultExpandAll.value) {
      updateCollapseValue(innerValue);
    }
    var _useCollapseAnimation = useCollapseAnimation(), beforeEnter = _useCollapseAnimation.beforeEnter, enter2 = _useCollapseAnimation.enter, afterEnter = _useCollapseAnimation.afterEnter, beforeLeave = _useCollapseAnimation.beforeLeave, leave = _useCollapseAnimation.leave, afterLeave = _useCollapseAnimation.afterLeave;
    var headRef = ref();
    var isDisabled = computed(function() {
      return disabled2.value || disableAll.value;
    });
    var isActive2 = computed(function() {
      return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
    });
    var classes6 = computed(function() {
      return [componentName.value, _defineProperty$3({}, disableClass.value, isDisabled.value)];
    });
    var handleClick5 = function handleClick6(e) {
      var canExpand = expandOnRowClick.value && e.target === headRef.value || e.target.getAttribute("name") === "arrow";
      if (canExpand && !isDisabled.value) {
        updateCollapseValue(innerValue);
      }
    };
    var renderIcon4 = function renderIcon5(direction) {
      return createVNode(FakeArrow, {
        "name": "arrow",
        "isActive": isActive2.value,
        "overlayClassName": "".concat(componentName.value, "__icon ").concat(componentName.value, "__icon--").concat(direction)
      }, null);
    };
    var renderBlank = function renderBlank2() {
      return createVNode("div", {
        "class": "".concat(componentName.value, "__header--blank")
      }, null);
    };
    var renderHeader = function renderHeader2() {
      var cls = ["".concat(componentName.value, "__header"), _defineProperty$3({}, clickableClass.value, expandOnRowClick.value && !isDisabled.value)];
      return createVNode("div", {
        "ref": headRef,
        "class": cls,
        "onClick": handleClick5
      }, [showExpandIcon.value && expandIconPlacement.value === "left" ? renderIcon4(expandIconPlacement.value) : null, renderTNodeJSX3("header"), renderBlank(), renderTNodeJSX3("headerRightContent"), showExpandIcon.value && expandIconPlacement.value === "right" ? renderIcon4(expandIconPlacement.value) : null]);
    };
    var renderBodyByNormal = function renderBodyByNormal2() {
      return withDirectives(createVNode("div", {
        "class": "".concat(componentName.value, "__body")
      }, [createVNode("div", {
        "class": "".concat(componentName.value, "__content")
      }, [renderTNodeJSX3("default")])]), [[vShow, isActive2.value]]);
    };
    var renderBodyDestroyOnCollapse = function renderBodyDestroyOnCollapse2() {
      return isActive2.value ? createVNode("div", {
        "class": "".concat(componentName.value, "__body")
      }, [createVNode("div", {
        "class": "".concat(componentName.value, "__content")
      }, [renderTNodeJSX3("default")])]) : null;
    };
    var renderBody2 = function renderBody3() {
      return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();
    };
    return function() {
      var _slot;
      return createVNode("div", {
        "class": classes6.value
      }, [createVNode("div", {
        "class": "".concat(componentName.value, "__wrapper")
      }, [renderHeader(), createVNode(Transition, {
        "name": transitionClass.value,
        "onBeforeEnter": beforeEnter,
        "onEnter": enter2,
        "onAfterEnter": afterEnter,
        "onBeforeLeave": beforeLeave,
        "onLeave": leave,
        "onAfterLeave": afterLeave
      }, _isSlot$2(_slot = renderBody2()) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      })])]);
    };
  }
});
var index$7 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Collapse = withInstall(_Collapse);
var CollapsePanel = withInstall(_CollapsePanel);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$4 = {
  close: {
    type: [String, Boolean, Function],
    "default": false
  },
  "default": {
    type: [String, Function]
  },
  icon: {
    type: Function
  },
  maxLine: {
    type: Number,
    "default": 0
  },
  message: {
    type: [String, Function]
  },
  operation: {
    type: Function
  },
  theme: {
    type: String,
    "default": "info",
    validator: function validator113(val) {
      return ["success", "info", "warning", "error"].includes(val);
    }
  },
  title: {
    type: [String, Function]
  },
  onClose: Function,
  onClosed: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function useIcon() {
  var instance = getCurrentInstance();
  return function renderIconTNode(iconType, defaultIcons) {
    var iconContent;
    if (typeof instance.props[iconType] === "function") {
      iconContent = instance.props[iconType](h);
    } else if (instance.slots[iconType]) {
      iconContent = instance.slots[iconType] && instance.slots[iconType](null)[0];
    } else if (defaultIcons) {
      var Component = defaultIcons[instance.props.theme];
      iconContent = createVNode(Component, null, null);
    }
    return iconContent;
  };
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Alert = defineComponent({
  name: "TAlert",
  props: props$4,
  setup: function setup123(props2) {
    var _useConfig = useConfig("alert"), global2 = _useConfig.global, classPrefix2 = _useConfig.classPrefix;
    var COMPONENT_NAME2 = usePrefixClass("alert");
    var renderIconTNode = useIcon();
    var ele = ref(null);
    var description = ref(null);
    var descHeight = ref(0);
    var visible4 = ref(true);
    var collapsed = ref(true);
    var renderIcon4 = function renderIcon5() {
      var Component = {
        info: infoCircleFilled,
        success: checkCircleFilled,
        warning: errorCircleFilled,
        error: errorCircleFilled,
        question: helpCircleFilled
      };
      var iconContent = renderIconTNode("icon", Component);
      return iconContent ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__icon")
      }, [iconContent]) : null;
    };
    var renderClose = function renderClose2() {
      var close$1 = props2.close;
      var closeContent = null;
      if (close$1 === true || close$1 === "") {
        closeContent = createVNode(close, null, null);
      } else if (typeof close$1 === "string") {
        closeContent = close$1;
      } else {
        closeContent = renderIconTNode("close");
      }
      return closeContent ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__close"),
        "onClick": handleClose2
      }, [closeContent]) : null;
    };
    var renderTitle3 = function renderTitle4(context) {
      var titleContent = renderTNodeJSX(context, "title");
      return titleContent ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__title")
      }, [" ", titleContent]) : null;
    };
    var renderMessage = function renderMessage2(context) {
      var operationContent = renderTNodeJSX(context, "operation");
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__message")
      }, [renderDescription(context), operationContent ? createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__operation")
      }, [operationContent]) : null]);
    };
    var renderDescription = function renderDescription2(context) {
      var _description$value, _description$value$ch;
      var messageContent;
      messageContent = renderTNodeJSX(context, "default");
      if (!messageContent) {
        messageContent = renderTNodeJSX(context, "message");
      }
      var contentLength = Array.isArray(messageContent) ? messageContent.length : 1;
      var hasCollapse = props2.maxLine > 0 && props2.maxLine < contentLength;
      var height = (_description$value = description.value) === null || _description$value === void 0 ? void 0 : (_description$value$ch = _description$value.children[0]) === null || _description$value$ch === void 0 ? void 0 : _description$value$ch.offsetHeight;
      if (hasCollapse && collapsed.value) {
        messageContent = messageContent.slice(0, props2.maxLine);
        height && (description.value.style.height = "".concat(descHeight.value, "px"));
      } else if (hasCollapse) {
        height && (description.value.style.height = "".concat(height * (contentLength - props2.maxLine) + descHeight.value, "px"));
      }
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__description"),
        "ref": "description"
      }, [hasCollapse ? messageContent.map(function(content) {
        return createVNode("div", null, [content]);
      }) : messageContent, hasCollapse ? createVNode("div", {
        "class": "t-alert__collapse",
        "onClick": function onClick2() {
          collapsed.value = !collapsed.value;
        }
      }, [collapsed.value ? global2.value.expandText : global2.value.collapseText]) : null]);
    };
    var renderContent6 = function renderContent7(context) {
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__content")
      }, [renderTitle3(context), renderMessage(context)]);
    };
    var handleClose2 = function handleClose3(e) {
      var _props2$onClose;
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
        e
      });
      addClass(ele.value, "".concat(COMPONENT_NAME2.value, "--closing"));
    };
    var handleCloseEnd = function handleCloseEnd2(e) {
      if (e.propertyName === "opacity") {
        var _props2$onClosed;
        visible4.value = false;
        (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2, {
          e
        });
      }
    };
    onMounted(function() {
      on$1(ele.value, "transitionend", handleCloseEnd);
      descHeight.value = description.value.offsetHeight;
    });
    onBeforeUnmount(function() {
      off$1(ele.value, "transitionend", handleCloseEnd);
    });
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      classPrefix: classPrefix2,
      ele,
      description,
      visible: visible4,
      collapsed,
      renderIcon: renderIcon4,
      renderTitle: renderTitle3,
      renderMessage,
      renderDescription,
      renderContent: renderContent6,
      renderClose,
      handleClose: handleClose2,
      handleCloseEnd
    };
  },
  render: function render98() {
    var theme = this.theme, visible4 = this.visible, $attrs = this.$attrs, renderIcon4 = this.renderIcon, renderContent6 = this.renderContent, renderClose = this.renderClose, classPrefix2 = this.classPrefix;
    var CLASS2 = ["".concat(this.COMPONENT_NAME), "".concat(this.COMPONENT_NAME, "--").concat(theme), _defineProperty$3({}, "".concat(classPrefix2, "-is-hidden"), !visible4)];
    return createVNode("div", mergeProps({
      "class": CLASS2
    }, $attrs, {
      "ref": "ele"
    }), [renderIcon4(), renderContent6(this), renderClose()]);
  }
});
var index$6 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Alert = withInstall(_Alert);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Dialog = withInstall(_Dialog);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$3 = {
  attach: {
    type: [String, Function],
    "default": ""
  },
  body: {
    type: [String, Function]
  },
  cancelBtn: {
    type: [String, Object, Function],
    "default": ""
  },
  closeBtn: {
    type: [String, Boolean, Function],
    "default": void 0
  },
  closeOnEscKeydown: {
    type: Boolean,
    "default": true
  },
  closeOnOverlayClick: {
    type: Boolean,
    "default": true
  },
  confirmBtn: {
    type: [String, Object, Function],
    "default": ""
  },
  "default": {
    type: [String, Function]
  },
  destroyOnClose: Boolean,
  footer: {
    type: [Boolean, Function],
    "default": true
  },
  header: {
    type: [String, Boolean, Function],
    "default": void 0
  },
  mode: {
    type: String,
    "default": "overlay",
    validator: function validator114(val) {
      return ["overlay", "push"].includes(val);
    }
  },
  placement: {
    type: String,
    "default": "right",
    validator: function validator115(val) {
      return ["left", "right", "top", "bottom"].includes(val);
    }
  },
  preventScrollThrough: {
    type: Boolean,
    "default": true
  },
  showInAttachedElement: Boolean,
  showOverlay: {
    type: Boolean,
    "default": true
  },
  size: {
    type: String,
    "default": "small"
  },
  sizeDraggable: Boolean,
  visible: Boolean,
  zIndex: {
    type: Number
  },
  onCancel: Function,
  onClose: Function,
  onCloseBtnClick: Function,
  onConfirm: Function,
  onEscKeydown: Function,
  onOverlayClick: Function
};
var index$5 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Drawer = defineComponent({
  name: "TDrawer",
  components: {
    CloseIcon: close,
    TButton: Button
  },
  directives: {
    TransferDom
  },
  props: props$3,
  emits: ["update:visible"],
  setup: function setup124(props2, context) {
    var _useConfig = useConfig("drawer"), global2 = _useConfig.global;
    var COMPONENT_NAME2 = usePrefixClass("drawer");
    var LOCK_CLASS = usePrefixClass("drawer--lock");
    var confirmBtnAction = function confirmBtnAction2(e) {
      var _props2$onConfirm;
      (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
        e
      });
    };
    var cancelBtnAction = function cancelBtnAction2(e) {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
        e
      });
      closeDrawer({
        trigger: "cancel",
        e
      });
    };
    var _useAction = useAction({
      confirmBtnAction,
      cancelBtnAction
    }), getConfirmBtn = _useAction.getConfirmBtn, getCancelBtn = _useAction.getCancelBtn;
    var drawerEle = ref(null);
    var drawerClasses = computed(function() {
      return ["t-drawer", "t-drawer--".concat(props2.placement), {
        "t-drawer--open": props2.visible,
        "t-drawer--attach": props2.showInAttachedElement,
        "t-drawer--without-mask": !props2.showOverlay
      }];
    });
    var sizeValue = computed(function() {
      var defaultSize = isNaN(Number(props2.size)) ? props2.size : "".concat(props2.size, "px");
      return {
        small: "300px",
        medium: "500px",
        large: "760px"
      }[props2.size] || defaultSize;
    });
    var wrapperStyles = computed(function() {
      return {
        transform: props2.visible ? "translateX(0)" : void 0,
        width: ["left", "right"].includes(props2.placement) ? sizeValue.value : "",
        height: ["top", "bottom"].includes(props2.placement) ? sizeValue.value : ""
      };
    });
    var wrapperClasses = computed(function() {
      return ["t-drawer__content-wrapper", "t-drawer__content-wrapper--".concat(props2.placement)];
    });
    var parentNode = computed(function() {
      return drawerEle.value && drawerEle.value.parentNode;
    });
    var modeAndPlacement = computed(function() {
      return [props2.mode, props2.placement].join();
    });
    var footerStyle = computed(function() {
      return {
        display: "flex",
        justifyContent: props2.placement === "right" ? "flex-start" : "flex-end"
      };
    });
    var handlePushMode = function handlePushMode2() {
      if (props2.mode !== "push")
        return;
      nextTick(function() {
        if (!parentNode.value)
          return;
        parentNode.value.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
      });
    };
    var updatePushMode = function updatePushMode2() {
      if (!parentNode.value)
        return;
      if (props2.mode !== "push" || !parentNode.value)
        return;
      var marginStr = {
        left: "margin: 0 0 0 ".concat(sizeValue.value),
        right: "margin: 0 0 0 -".concat(sizeValue.value),
        top: "margin: ".concat(sizeValue.value, " 0 0 0"),
        bottom: "margin: -".concat(sizeValue.value, " 0 0 0")
      }[props2.placement];
      if (props2.visible) {
        parentNode.value.style.cssText += marginStr;
      } else {
        parentNode.value.style.cssText = parentNode.value.style.cssText.replace(/margin:.+;/, "");
      }
    };
    var getDefaultBtn = function getDefaultBtn2(btnType, btnApi) {
      var isCancel = btnType === "cancel";
      var clickAction = isCancel ? cancelBtnAction : confirmBtnAction;
      var theme = isCancel ? "default" : "primary";
      var isApiObject = _typeof$1(btnApi) === "object";
      return createVNode(resolveComponent("t-button"), {
        "theme": theme,
        "onClick": clickAction,
        "props": isApiObject ? btnApi : {},
        "class": "".concat(COMPONENT_NAME2.value, "-").concat(btnType)
      }, {
        "default": function _default65() {
          return [btnApi && _typeof$1(btnApi) === "object" ? btnApi.content : btnApi];
        }
      });
    };
    var isUseDefault = function isUseDefault2(btnApi) {
      var baseTypes = ["string", "object"];
      return Boolean(btnApi && baseTypes.includes(_typeof$1(btnApi)));
    };
    var getDefaultFooter = function getDefaultFooter2() {
      var confirmBtn = getConfirmBtn({
        confirmBtn: props2.confirmBtn,
        globalConfirm: global2.value.confirm,
        className: "".concat(COMPONENT_NAME2.value, "__confirm")
      });
      var cancelBtn = getCancelBtn({
        cancelBtn: props2.cancelBtn,
        globalCancel: global2.value.cancel,
        className: "".concat(COMPONENT_NAME2.value, "__cancel")
      });
      return createVNode("div", {
        "style": footerStyle.value
      }, [props2.placement === "right" ? confirmBtn : null, cancelBtn, props2.placement !== "right" ? confirmBtn : null]);
    };
    watch(modeAndPlacement, function() {
      handlePushMode();
    }, {
      immediate: true
    });
    watch(function() {
      return props2.visible;
    }, function(value6) {
      if (value6 && !props2.showInAttachedElement) {
        props2.preventScrollThrough && addClass(document.body, LOCK_CLASS.value);
      } else {
        props2.preventScrollThrough && removeClass(document.body, LOCK_CLASS.value);
      }
    }, {
      immediate: true
    });
    var handleCloseBtnClick = function handleCloseBtnClick2(e) {
      var _props2$onCloseBtnCli;
      (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
        e
      });
      closeDrawer({
        trigger: "close-btn",
        e
      });
    };
    var handleWrapperClick = function handleWrapperClick2(e) {
      var _props2$onOverlayClic;
      (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
        e
      });
      if (props2.closeOnOverlayClick) {
        closeDrawer({
          trigger: "overlay",
          e
        });
      }
    };
    var onKeyDown = function onKeyDown2(e) {
      if (props2.closeOnEscKeydown && e.key === "Escape") {
        var _props2$onEscKeydown;
        (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
          e
        });
        closeDrawer({
          trigger: "esc",
          e
        });
      }
    };
    var closeDrawer = function closeDrawer2(params) {
      var _props2$onClose;
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, params);
      context.emit("update:visible", false);
    };
    onUpdated(function() {
      updatePushMode();
    });
    return {
      COMPONENT_NAME: COMPONENT_NAME2,
      drawerEle,
      drawerClasses,
      wrapperStyles,
      modeAndPlacement,
      wrapperClasses,
      handlePushMode,
      updatePushMode,
      getDefaultBtn,
      isUseDefault,
      getDefaultFooter,
      handleCloseBtnClick,
      handleWrapperClick,
      onKeyDown,
      confirmBtnAction,
      cancelBtnAction,
      closeDrawer
    };
  },
  render: function render99() {
    var COMPONENT_NAME2 = this.COMPONENT_NAME;
    if (this.destroyOnClose && !this.visible)
      return;
    var defaultCloseBtn = createVNode(resolveComponent("close-icon"), {
      "class": "t-submenu-icon"
    }, null);
    var body = renderContent(this, "body", "default");
    var headerContent = renderTNodeJSX(this, "header");
    var defaultFooter = this.getDefaultFooter();
    return withDirectives(createVNode("div", mergeProps({
      "class": this.drawerClasses,
      "style": {
        zIndex: this.zIndex
      },
      "onKeydown": this.onKeyDown
    }, this.$attrs, {
      "ref": "drawerEle"
    }), [this.showOverlay && createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__mask"),
      "onClick": this.handleWrapperClick
    }, null), createVNode("div", {
      "class": this.wrapperClasses,
      "style": this.wrapperStyles
    }, [headerContent && createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__header")
    }, [headerContent]), this.closeBtn && createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__close-btn"),
      "onClick": this.handleCloseBtnClick
    }, [renderTNodeJSX(this, "closeBtn", defaultCloseBtn)]), createVNode("div", {
      "class": ["".concat(COMPONENT_NAME2, "__body"), "narrow-scrollbar"]
    }, [body]), this.footer && createVNode("div", {
      "class": "".concat(COMPONENT_NAME2, "__footer")
    }, [renderTNodeJSX(this, "footer", defaultFooter)])])]), [[resolveDirective("transfer-dom"), this.attach]]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Drawer = withInstall(_Drawer);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Message = withInstall(_Message);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$2 = {
  closeBtn: {
    type: [String, Boolean, Function],
    "default": void 0
  },
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  duration: {
    type: Number,
    "default": 3e3
  },
  footer: {
    type: [String, Function]
  },
  icon: {
    type: [Boolean, Function],
    "default": true
  },
  theme: {
    type: String,
    "default": "info",
    validator: function validator116(val) {
      return ["info", "success", "warning", "error"].includes(val);
    }
  },
  title: {
    type: [String, Function]
  },
  onCloseBtnClick: Function,
  onDurationEnd: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _Notification = defineComponent({
  name: "TNotification",
  props: props$2,
  setup: function setup125(props2, _ref) {
    var slots = _ref.slots, expose = _ref.expose;
    var COMPONENT_NAME2 = usePrefixClass("notification");
    var _useConfig = useConfig("classPrefix"), classPrefix2 = _useConfig.classPrefix;
    var renderTNode = useTNodeJSX();
    var renderContent6 = useContent();
    var close$1 = function close5(e) {
      var _props2$onCloseBtnCli;
      (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
        e
      });
    };
    var renderIcon4 = function renderIcon5() {
      var iconContent;
      if (props2.icon === false)
        return null;
      if (isFunction_1(props2.icon)) {
        iconContent = props2.icon(h);
      } else if (slots.icon) {
        iconContent = slots.icon(null);
      } else if (props2.theme) {
        var iconType = props2.theme === "success" ? createVNode(checkCircleFilled, {
          "class": "t-is-".concat(props2.theme)
        }, null) : createVNode(infoCircleFilled, {
          "class": "t-is-".concat(props2.theme)
        }, null);
        iconContent = createVNode("div", {
          "class": "t-notification__icon"
        }, [iconType]);
      }
      return iconContent;
    };
    var renderClose = function renderClose2() {
      var defaultClose = createVNode(close, null, null);
      return createVNode("span", {
        "class": "".concat(classPrefix2.value, "-message__close"),
        "onClick": close$1
      }, [renderTNode("closeBtn", defaultClose)]);
    };
    var renderMainContent = function renderMainContent2() {
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__content")
      }, [renderContent6("default", "content")]);
    };
    onMounted(function() {
      if (props2.duration > 0) {
        var timer = setTimeout(function() {
          var _props2$onDurationEnd;
          clearTimeout(timer);
          (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
        }, props2.duration);
      }
    });
    expose({
      close: close$1
    });
    return function() {
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value)
      }, [renderIcon4(), createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__main")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__title__wrap")
      }, [createVNode("span", {
        "class": "".concat(COMPONENT_NAME2.value, "__title")
      }, [renderTNode("title")]), renderClose()]), renderMainContent(), renderTNode("footer")])]);
    };
  }
});
var index$4 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var DEFAULT_Z_INDEX = 6e3;
var DISTANCE = "16px";
var PLACEMENT_OFFSET = {
  "top-left": {
    left: DISTANCE,
    top: DISTANCE
  },
  "top-right": {
    right: DISTANCE,
    top: DISTANCE
  },
  "bottom-right": {
    right: DISTANCE,
    bottom: DISTANCE
  },
  "bottom-left": {
    left: DISTANCE,
    bottom: DISTANCE
  }
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$6(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$6(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot$1(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var NotificationList = defineComponent({
  props: {
    placement: {
      type: String,
      "default": "top-right",
      validator: function validator117(v) {
        return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
      }
    }
  },
  setup: function setup126(props2, _ref) {
    var expose = _ref.expose;
    var COMPONENT_NAME2 = usePrefixClass("notification-list");
    var placement = props2.placement;
    var list = ref([]);
    var styles = computed(function() {
      return _objectSpread$6({
        zIndex: DEFAULT_Z_INDEX
      }, PLACEMENT_OFFSET[placement]);
    });
    var add2 = function add3(options) {
      list.value.push(options);
      return list.value.length - 1;
    };
    var remove3 = function remove4(index2) {
      list.value.splice(index2, 1);
    };
    var removeAll = function removeAll2() {
      list.value = [];
    };
    var getOffset = function getOffset2(val) {
      if (!val)
        return;
      return isNaN(Number(val)) ? val : "".concat(val, "px");
    };
    var notificationStyles = function notificationStyles2(item) {
      var styles2 = {
        marginBottom: DISTANCE
      };
      if (item.offset) {
        styles2.position = "relative";
        styles2.left = getOffset(item.offset[0]);
        styles2.top = getOffset(item.offset[1]);
      }
      if (item.zIndex)
        styles2["z-index"] = item.zIndex;
      return styles2;
    };
    var getListeners = function getListeners2(index2) {
      return {
        onCloseBtnClick: function onCloseBtnClick() {
          return remove3(index2);
        },
        onDurationEnd: function onDurationEnd() {
          return remove3(index2);
        }
      };
    };
    expose({
      add: add2,
      remove: remove3,
      removeAll
    });
    return function() {
      var _slot;
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__show-transition--").concat(placement),
        "style": styles.value
      }, [createVNode(TransitionGroup, {
        "name": "notification-slide-fade"
      }, _isSlot$1(_slot = list.value.map(function(item, index2) {
        return createVNode(_Notification, mergeProps({
          "ref": "notification".concat(index2),
          "key": item.id,
          "style": notificationStyles(item)
        }, item, getListeners(index2)), null);
      })) ? _slot : {
        "default": function _default65() {
          return [_slot];
        }
      })]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$5(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$5(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var seed = 0;
var instanceMap = /* @__PURE__ */ new Map();
var NotificationFunction = function NotificationFunction2(options) {
  seed += 1;
  var hackOptions = _objectSpread$5({
    placement: "top-right",
    zIndex: 6e3,
    attach: "body",
    id: seed
  }, options);
  hackOptions.content = options.content ? options.content : "";
  var attachEl = getAttach(hackOptions.attach);
  if (!instanceMap.get(attachEl)) {
    instanceMap.set(attachEl, {});
  }
  var tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];
  if (!tmpInstance) {
    var wrapper = document.createElement("div");
    var instance = createApp(NotificationList, {
      placement: hackOptions.placement
    }).mount(wrapper);
    instance.add(hackOptions);
    instanceMap.get(attachEl)[hackOptions.placement] = instance;
    tmpInstance = instance;
    attachEl.appendChild(instance.$el);
  } else {
    tmpInstance.add(hackOptions);
  }
  return new Promise(function(resolve2) {
    nextTick(function() {
      var _tmpInstance$$refs;
      var lastChild2 = (_tmpInstance$$refs = tmpInstance.$refs) === null || _tmpInstance$$refs === void 0 ? void 0 : _tmpInstance$$refs.notification0;
      resolve2(lastChild2);
    });
  });
};
var showThemeNotification = function showThemeNotification2(theme, options) {
  var hackOptions = _objectSpread$5(_objectSpread$5({}, options), {}, {
    theme
  });
  return NotificationFunction(hackOptions);
};
var extraApi = {
  info: function info3(options) {
    return showThemeNotification("info", options);
  },
  success: function success2(options) {
    return showThemeNotification("success", options);
  },
  warning: function warning2(options) {
    return showThemeNotification("warning", options);
  },
  error: function error4(options) {
    return showThemeNotification("error", options);
  },
  close: function close4(promise) {
    promise.then(function(instance) {
      return instance.close();
    });
  },
  closeAll: function closeAll2() {
    instanceMap.forEach(function(attach2) {
      Object.keys(attach2).forEach(function(placement) {
        attach2[placement].removeAll();
      });
    });
  }
};
var NotificationPlugin = showThemeNotification;
NotificationPlugin.install = function(app) {
  app.config.globalProperties.$notify = showThemeNotification;
  Object.keys(extraApi).forEach(function(funcName) {
    app.config.globalProperties.$notify[funcName] = extraApi[funcName];
  });
};
Object.keys(extraApi).forEach(function(funcName) {
  NotificationPlugin[funcName] = extraApi[funcName];
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Notification = withInstall(_Notification);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props$1 = {
  cancelBtn: {
    type: [String, Object, Function],
    "default": ""
  },
  confirmBtn: {
    type: [String, Object, Function],
    "default": ""
  },
  content: {
    type: [String, Function]
  },
  "default": {
    type: [String, Function]
  },
  destroyOnClose: {
    type: Boolean,
    "default": true
  },
  icon: {
    type: Function
  },
  placement: {
    type: String,
    "default": "top",
    validator: function validator118(val) {
      if (!val)
        return true;
      return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
    }
  },
  popupProps: {
    type: Object
  },
  showArrow: {
    type: Boolean,
    "default": true
  },
  theme: {
    type: String,
    "default": "default",
    validator: function validator119(val) {
      if (!val)
        return true;
      return ["default", "warning", "danger"].includes(val);
    }
  },
  triggerElement: {
    type: [String, Function]
  },
  visible: {
    type: Boolean,
    "default": void 0
  },
  modelValue: {
    type: Boolean,
    "default": void 0
  },
  defaultVisible: Boolean,
  onCancel: Function,
  onConfirm: Function,
  onVisibleChange: Function
};
var index$3 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$4(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var _Popconfirm = defineComponent({
  name: "TPopconfirm",
  props: props$1,
  setup: function setup127(props2) {
    var _useConfig = useConfig("popconfirm"), global2 = _useConfig.global;
    var COMPONENT_NAME2 = usePrefixClass("popconfirm");
    var _toRefs = toRefs(props2), visible4 = _toRefs.visible, modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(visible4, modelValue, props2.defaultVisible, props2.onVisibleChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerVisible = _useVModel2[0], setInnerVisible = _useVModel2[1];
    var confirmBtnAction = function confirmBtnAction2(e) {
      var _props2$onConfirm;
      (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
        e
      });
      setInnerVisible(false, {
        e
      });
    };
    var cancelBtnAction = function cancelBtnAction2(e) {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
        e
      });
      setInnerVisible(false, {
        e
      });
    };
    var _useAction = useAction({
      confirmBtnAction,
      cancelBtnAction
    }), getConfirmBtn = _useAction.getConfirmBtn, getCancelBtn = _useAction.getCancelBtn;
    var renderTNodeJSX3 = useTNodeJSX();
    var innerPopupProps = computed(function() {
      return _objectSpread$4({
        showArrow: props2.showArrow,
        overlayClassName: COMPONENT_NAME2.value,
        trigger: "click",
        destroyOnClose: props2.destroyOnClose,
        placement: props2.placement
      }, props2.popupProps);
    });
    var renderTNodeDefault = useTNodeDefault();
    var renderContent6 = function renderContent7() {
      var cancelBtn = getCancelBtn({
        cancelBtn: props2.cancelBtn,
        globalCancel: global2.value.cancel,
        className: "".concat(COMPONENT_NAME2.value, "__cancel"),
        size: "small"
      });
      var confirmBtn = getConfirmBtn({
        theme: props2.theme,
        confirmBtn: props2.confirmBtn,
        globalConfirm: global2.value.confirm,
        globalConfirmBtnTheme: global2.value.confirmBtnTheme,
        className: "".concat(COMPONENT_NAME2.value, "__confirm"),
        size: "small"
      });
      var renderIcon4 = function renderIcon5() {
        var Icon2 = {
          "default": infoCircleFilled,
          warning: errorCircleFilled,
          danger: errorCircleFilled
        }[props2.theme];
        var theme = props2.theme || "default";
        return renderTNodeDefault("icon", createVNode(Icon2, {
          "class": "".concat(COMPONENT_NAME2.value, "__icon--").concat(theme)
        }, null));
      };
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__content")
      }, [createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__body")
      }, [renderIcon4(), createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__inner")
      }, [renderTNodeJSX3("content")])]), Boolean(cancelBtn || confirmBtn) && createVNode("div", {
        "class": "".concat(COMPONENT_NAME2.value, "__buttons")
      }, [cancelBtn, confirmBtn])]);
    };
    var onPopupVisibleChange = function onPopupVisibleChange2(val, context) {
      setInnerVisible(val, context);
    };
    var renderTNodeContent = useContent();
    var renderTriggerElement = function renderTriggerElement2() {
      return renderTNodeContent("default", "triggerElement");
    };
    return {
      innerVisible,
      innerPopupProps,
      onPopupVisibleChange,
      renderContent: renderContent6,
      renderTriggerElement
    };
  },
  render: function render100() {
    var _this = this;
    return createVNode(Popup, mergeProps({
      "ref": "popup",
      "visible": this.innerVisible
    }, this.innerPopupProps, {
      "onVisibleChange": this.onPopupVisibleChange
    }), {
      "default": function _default65() {
        return [_this.renderTriggerElement()];
      },
      content: this.renderContent
    });
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Popconfirm = withInstall(_Popconfirm);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var props = {
  accept: {
    type: String,
    "default": ""
  },
  action: {
    type: String,
    "default": ""
  },
  autoUpload: {
    type: Boolean,
    "default": true
  },
  beforeUpload: {
    type: Function
  },
  data: {
    type: Object
  },
  "default": {
    type: [String, Function]
  },
  disabled: Boolean,
  draggable: Boolean,
  fileListDisplay: {
    type: Function
  },
  files: {
    type: Array,
    "default": void 0
  },
  modelValue: {
    type: Array,
    "default": void 0
  },
  defaultFiles: {
    type: Array
  },
  format: {
    type: Function
  },
  formatResponse: {
    type: Function
  },
  headers: {
    type: Object
  },
  isBatchUpload: Boolean,
  max: {
    type: Number,
    "default": 0
  },
  method: {
    type: String,
    "default": "POST",
    validator: function validator120(val) {
      if (!val)
        return true;
      return ["POST", "GET", "PUT", "OPTION"].includes(val);
    }
  },
  multiple: Boolean,
  name: {
    type: String,
    "default": "file"
  },
  placeholder: {
    type: String,
    "default": ""
  },
  requestMethod: {
    type: Function
  },
  showUploadProgress: {
    type: Boolean,
    "default": true
  },
  sizeLimit: {
    type: [Number, Object]
  },
  theme: {
    type: String,
    "default": "file",
    validator: function validator121(val) {
      if (!val)
        return true;
      return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
    }
  },
  tips: {
    type: String,
    "default": ""
  },
  trigger: {
    type: [String, Function]
  },
  uploadAllFilesInOneRequest: Boolean,
  useMockProgress: {
    type: Boolean,
    "default": true
  },
  withCredentials: Boolean,
  onCancelUpload: Function,
  onChange: Function,
  onDragenter: Function,
  onDragleave: Function,
  onFail: Function,
  onPreview: Function,
  onProgress: Function,
  onRemove: Function,
  onSelectChange: Function,
  onSuccess: Function
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function returnFileSize(number2) {
  if (number2 < 1024) {
    return "".concat(number2, " Bytes");
  }
  if (number2 >= 1024 && number2 < 1048576) {
    return "".concat((number2 / 1024).toFixed(1), " KB");
  }
  if (number2 >= 1048576) {
    return "".concat((number2 / 1048576).toFixed(1), " MB");
  }
}
function getCurrentDate() {
  var d = new Date();
  var month = d.getMonth() + 1;
  month = month < 10 ? "0".concat(month) : month;
  return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
}
function abridgeName(inputName) {
  var leftCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
  var rightcount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 7;
  var name2 = inputName;
  var leftLength = 0;
  var rightLength = 0;
  for (var i = 0; i < name2.length; i++) {
    var w = name2[i];
    var isCn = escape(w).indexOf("%u") === 0;
    if (i < leftCount * 2 && leftLength < leftCount) {
      isCn ? leftLength += 1 : leftLength += 2;
    } else if (i > i - rightcount && rightLength < rightcount) {
      isCn ? rightLength += 1 : rightLength += 2;
    }
  }
  return name2.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
}
var SIZE_MAP = {
  B: 1024,
  KB: 1,
  MB: 1048576,
  GB: 1073741824
};
function isOverSizeLimit(fileSize, sizeLimit, unit) {
  var units = ["B", "KB", "MB", "GB"];
  var KB_INDEX = 1;
  var index2 = units.indexOf(unit);
  if (index2 === -1) {
    console.warn("TDesign Upload Warn: `sizeLimit.unit` can only be one of ".concat(units.join()));
    index2 = KB_INDEX;
  }
  var num = SIZE_MAP[unit];
  var limit = index2 < KB_INDEX ? sizeLimit / num : sizeLimit * num;
  return fileSize <= limit;
}
var index$2 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$3(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var Dragger = defineComponent({
  name: "TUploadDragger",
  props: {
    file: {
      type: Object,
      "default": function _default60() {
        return null;
      }
    },
    loadingFile: {
      type: Object,
      "default": function _default61() {
        return null;
      }
    },
    autoUpload: props.autoUpload,
    theme: props.theme,
    onCancel: Function,
    onClick: Function,
    onRemove: Function,
    onUpload: Function,
    onChange: Function,
    onDragleave: Function,
    onDragenter: Function
  },
  setup: function setup128(props2) {
    var renderTNodeJSX3 = useTNodeJSX();
    var target = ref(null);
    var dragActive = ref(false);
    var _useConfig = useConfig("upload"), global2 = _useConfig.global;
    var UPLOAD_NAME = usePrefixClass("upload");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
    var imageUrl = computed(function() {
      return props2.loadingFile && props2.loadingFile.url || props2.file && props2.file.url;
    });
    var inputName = computed(function() {
      return props2.loadingFile && props2.loadingFile.name || props2.file && props2.file.name || "";
    });
    var classes6 = computed(function() {
      return ["".concat(UPLOAD_NAME.value, "__dragger"), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__dragger-center"), !props2.loadingFile && !props2.file), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__dragger-error"), props2.loadingFile && props2.loadingFile.status === "fail")];
    });
    var size2 = computed(function() {
      return props2.loadingFile && props2.loadingFile.size || props2.file && props2.file.size;
    });
    var showResultOperate = computed(function() {
      var _props2$file, _props2$loadingFile;
      return Boolean(!props2.loadingFile && ((_props2$file = props2.file) === null || _props2$file === void 0 ? void 0 : _props2$file.name)) || ["success", "fail"].includes((_props2$loadingFile = props2.loadingFile) === null || _props2$loadingFile === void 0 ? void 0 : _props2$loadingFile.status);
    });
    var handleDrop = function handleDrop2(event) {
      var _props2$onChange, _props2$onDragleave;
      event.preventDefault();
      (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, event.dataTransfer.files);
      (_props2$onDragleave = props2.onDragleave) === null || _props2$onDragleave === void 0 ? void 0 : _props2$onDragleave.call(props2, event);
      dragActive.value = false;
    };
    var handleDragenter = function handleDragenter2(event) {
      var _props2$onDragenter;
      event.preventDefault();
      target.value = event.target;
      (_props2$onDragenter = props2.onDragenter) === null || _props2$onDragenter === void 0 ? void 0 : _props2$onDragenter.call(props2, event);
      dragActive.value = true;
    };
    var handleDragleave = function handleDragleave2(event) {
      var _props2$onDragleave2;
      if (target.value !== event.target)
        return;
      event.preventDefault();
      (_props2$onDragleave2 = props2.onDragleave) === null || _props2$onDragleave2 === void 0 ? void 0 : _props2$onDragleave2.call(props2, event);
      dragActive.value = false;
    };
    var renderImage = function renderImage2() {
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-img-wrap")
      }, [imageUrl.value && createVNode("img", {
        "src": imageUrl.value
      }, null)]);
    };
    var renderUploading = function renderUploading2() {
      if (props2.loadingFile.status === "fail")
        return createVNode(errorCircleFilled, null, null);
      if (props2.loadingFile.status === "progress") {
        return createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__single-progress")
        }, [createVNode(Loading, null, null), createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-percent")
        }, [Math.min(props2.loadingFile.percent, 99), "%"])]);
      }
    };
    var renderProgress = function renderProgress2() {
      var _props2$loadingFile2, _props2$loadingFile3;
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress")
      }, [props2.theme === "image" && renderImage(), createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-info")
      }, [createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-text")
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-name")
      }, [abridgeName(inputName.value)]), props2.loadingFile && renderUploading(), !props2.loadingFile && !!props2.file && createVNode(checkCircleFilled, null, null)]), createVNode("small", {
        "class": "".concat(SIZE.value.small)
      }, [global2.value.file.fileSizeText, "\uFF1A", returnFileSize(size2.value)]), createVNode("small", {
        "class": "".concat(SIZE.value.small)
      }, [global2.value.file.fileOperationDateText, "\uFF1A", getCurrentDate()]), createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
      }, [["progress", "waiting"].includes((_props2$loadingFile2 = props2.loadingFile) === null || _props2$loadingFile2 === void 0 ? void 0 : _props2$loadingFile2.status) && createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
        "onClick": props2.onCancel
      }, {
        "default": function _default65() {
          return [global2.value.cancelUploadText];
        }
      }), !props2.autoUpload && ((_props2$loadingFile3 = props2.loadingFile) === null || _props2$loadingFile3 === void 0 ? void 0 : _props2$loadingFile3.status) === "waiting" && createVNode(Button, {
        "variant": "text",
        "theme": "primary",
        "onClick": function onClick2(e) {
          return props2.onUpload(_objectSpread$3({}, props2.loadingFile), e);
        }
      }, {
        "default": function _default65() {
          return [global2.value.triggerUploadText.normal];
        }
      })]), showResultOperate.value && createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
      }, [createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
        "onClick": function onClick2(e) {
          props2.onRemove(e);
          props2.onClick(e);
        }
      }, {
        "default": function _default65() {
          return [global2.value.triggerUploadText.reupload];
        }
      }), createVNode(Button, {
        "theme": "danger",
        "variant": "text",
        "onClick": props2.onRemove
      }, {
        "default": function _default65() {
          return [global2.value.triggerUploadText["delete"]];
        }
      })])])]);
    };
    var renderDefaultDragElement = function renderDefaultDragElement2() {
      var unActiveElement = createVNode("div", null, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "--highlight")
      }, [global2.value.triggerUploadText.normal]), createVNode("span", null, ["\xA0\xA0/\xA0\xA0", global2.value.dragger.draggingText])]);
      var activeElement = createVNode("div", null, [global2.value.dragger.dragDropText]);
      return dragActive.value ? activeElement : unActiveElement;
    };
    return function() {
      var content = null;
      if ((props2.loadingFile || props2.file) && props2.theme !== "custom") {
        content = renderProgress();
      } else {
        content = createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__trigger"),
          "onClick": props2.onClick
        }, [renderTNodeJSX3("default") || renderDefaultDragElement()]);
      }
      return createVNode("div", {
        "class": classes6.value,
        "onDrop": handleDrop,
        "onDragenter": handleDragenter,
        "onDragleave": handleDragleave,
        "onDragover": function onDragover(event) {
          event.preventDefault();
        }
      }, [content]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var ImageCard = defineComponent({
  name: "TImageUpload",
  props: {
    files: props.files,
    loadingFile: {
      type: Object,
      "default": function _default62() {
        return null;
      }
    },
    showUploadProgress: props.showUploadProgress,
    multiple: props.multiple,
    max: props.max,
    disabled: props.disabled,
    onClick: Function,
    onRemove: Function,
    onImgPreview: Function
  },
  setup: function setup129(props2) {
    var disabled2 = useFormDisabled();
    var _useConfig = useConfig("upload"), prefix2 = _useConfig.classPrefix, global2 = _useConfig.global;
    var UPLOAD_NAME = usePrefixClass("upload");
    var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
    var showTrigger = computed(function() {
      var multiple = props2.multiple, max4 = props2.max, files = props2.files;
      if (multiple) {
        return !max4 || files && files.length < max4;
      }
      return !(files && files[0]);
    });
    var onMaskClick = function onMaskClick2(e) {
      !showTrigger.value && props2.onClick(e);
    };
    var renderCardItem = function renderCardItem2(file, index2) {
      return createVNode("li", {
        "class": "".concat(UPLOAD_NAME.value, "__card-item ").concat(prefix2.value, "-is--background")
      }, [createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-content ").concat(UPLOAD_NAME.value, "__card-box")
      }, [createVNode("img", {
        "class": "".concat(UPLOAD_NAME.value, "__card-image"),
        "src": file.url
      }, null), createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask"),
        "onClick": onMaskClick
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item")
      }, [createVNode(browse, {
        "onClick": function onClick2(_ref) {
          var e = _ref.e;
          e.stopPropagation();
          props2.onImgPreview(e, file);
        }
      }, null)]), !disabled2.value && [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item-divider"),
        "key": "divider"
      }, null), createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item"),
        "key": "delete-icon"
      }, [createVNode(_delete, {
        "onClick": function onClick2(_ref2) {
          var e = _ref2.e;
          e.stopPropagation();
          props2.onRemove({
            e,
            file,
            index: index2
          });
        }
      }, null)])]])])]);
    };
    var renderTrigger2 = function renderTrigger3() {
      return createVNode("li", {
        "class": ["".concat(UPLOAD_NAME.value, "__card-item ").concat(prefix2.value, "-is--background"), _defineProperty$3({}, STATUS.value.disabled, disabled2.value)],
        "onClick": props2.onClick
      }, [props2.showUploadProgress && props2.loadingFile && props2.loadingFile.status === "progress" ? createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-container ").concat(UPLOAD_NAME.value, "__card-box")
      }, [createVNode(Loading, null, null), createVNode("p", null, [global2.value.progress.uploadingText, " ", Math.min(props2.loadingFile.percent, 99), "%"])]) : createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-container ").concat(UPLOAD_NAME.value, "__card-box")
      }, [createVNode(add, null, null), createVNode("p", {
        "class": "".concat(prefix2.value, "-size-s")
      }, [global2.value.triggerUploadText.image])])]);
    };
    return function() {
      return createVNode("ul", {
        "class": "".concat(UPLOAD_NAME.value, "__card")
      }, [props2.files && props2.files.map(function(file, index2) {
        return renderCardItem(file, index2);
      }), showTrigger.value && renderTrigger2()]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var FlowList = defineComponent({
  name: "TUploadFlowList",
  props: {
    showUploadProgress: props.showUploadProgress,
    placeholder: props.placeholder,
    autoUpload: props.autoUpload,
    disabled: props.disabled,
    theme: props.theme,
    batchUpload: props.isBatchUpload,
    files: props.files,
    toUploadFiles: Array,
    onRemove: Function,
    onUpload: Function,
    onCancel: Function,
    onChange: Function,
    onDragleave: Function,
    onDragenter: Function,
    onImgPreview: Function
  },
  setup: function setup130(props2) {
    var target = ref(null);
    var dragActive = ref(false);
    var renderTNodeJSX3 = useTNodeJSX();
    var disabled2 = useFormDisabled();
    var _useConfig = useConfig("upload"), prefix2 = _useConfig.classPrefix, global2 = _useConfig.global;
    var UPLOAD_NAME = usePrefixClass("upload");
    var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
    var waitingUploadFiles = computed(function() {
      var list = [];
      props2.toUploadFiles.forEach(function(item) {
        var r = props2.files.filter(function(t) {
          return t.name === item.name;
        });
        if (!r.length) {
          list.push(item);
        }
      });
      return list;
    });
    var showInitial = computed(function() {
      var isWaitingEmpty = !waitingUploadFiles.value || !waitingUploadFiles.value.length;
      return (!props2.files || !props2.files.length) && isWaitingEmpty;
    });
    var listFiles = computed(function() {
      if (!props2.files || !props2.files.length)
        return props2.toUploadFiles;
      return props2.files.concat(waitingUploadFiles.value);
    });
    var failedList = computed(function() {
      return props2.toUploadFiles.filter(function(file) {
        return file.status === "fail";
      });
    });
    var processList = computed(function() {
      return props2.toUploadFiles.filter(function(file) {
        return file.status === "progress";
      });
    });
    var isUploading = computed(function() {
      return !!processList.value.length;
    });
    var allowUpload = computed(function() {
      return Boolean(waitingUploadFiles.value && waitingUploadFiles.value.length) && !isUploading.value;
    });
    var uploadText = computed(function() {
      if (isUploading.value)
        return "".concat(global2.value.progress.uploadingText, "...");
      return failedList.value && failedList.value.length ? global2.value.triggerUploadText.reupload : global2.value.triggerUploadText.normal;
    });
    var handleDrop = function handleDrop2(event) {
      event.preventDefault();
      props2.onChange(event.dataTransfer.files);
      props2.onDragleave(event);
      dragActive.value = false;
    };
    var handleDragenter = function handleDragenter2(event) {
      target.value = event.target;
      event.preventDefault();
      props2.onDragenter(event);
      dragActive.value = true;
    };
    var handleDragleave = function handleDragleave2(event) {
      if (target.value !== event.target)
        return;
      event.preventDefault();
      props2.onDragleave(event);
      dragActive.value = false;
    };
    var handleDragover = function handleDragover2(event) {
      event.preventDefault();
    };
    var renderDragger = function renderDragger2() {
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-empty"),
        "onDrop": handleDrop,
        "onDragenter": handleDragenter,
        "onDragover": handleDragover,
        "onDragleave": handleDragleave
      }, [dragActive.value ? global2.value.dragger.dragDropText : global2.value.dragger.clickAndDragText]);
    };
    var getStatusMap = function getStatusMap2(file) {
      var iconMap = {
        success: createVNode(checkCircleFilled, null, null),
        fail: createVNode(errorCircleFilled, null, null),
        progress: createVNode(Loading, null, null),
        waiting: createVNode(timeFilled, null, null)
      };
      var textMap = {
        success: global2.value.progress.successText,
        fail: global2.value.progress.failText,
        progress: "".concat(global2.value.progress.uploadingText, " ").concat(Math.min(file.percent, 99), "%"),
        waiting: global2.value.progress.waitingText
      };
      return {
        iconMap,
        textMap
      };
    };
    var renderStatus = function renderStatus2(file) {
      if (!props2.showUploadProgress)
        return;
      var _getStatusMap = getStatusMap(file), iconMap = _getStatusMap.iconMap, textMap = _getStatusMap.textMap;
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-status")
      }, [iconMap[file.status], createVNode("span", null, [textMap[file.status]])]);
    };
    var renderNormalActionCol = function renderNormalActionCol2(file, index2) {
      return createVNode("td", null, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
        "onClick": function onClick2(e) {
          return props2.onRemove({
            e,
            index: index2,
            file
          });
        }
      }, [global2.value.triggerUploadText["delete"]])]);
    };
    var renderBatchActionCol = function renderBatchActionCol2(index2) {
      return index2 === 0 ? createVNode("td", {
        "rowspan": listFiles.value.length,
        "class": "".concat(UPLOAD_NAME.value, "__flow-table__batch-row")
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
        "onClick": function onClick2(e) {
          return props2.onRemove({
            e,
            index: -1,
            file: null
          });
        }
      }, [global2.value.triggerUploadText["delete"]])]) : "";
    };
    var renderFileList = function renderFileList2() {
      return props2.theme === "file-flow" && createVNode("table", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-table")
      }, [createVNode("tr", null, [createVNode("th", null, [global2.value.file.fileNameText]), createVNode("th", null, [global2.value.file.fileSizeText]), createVNode("th", null, [global2.value.file.fileStatusText]), createVNode("th", null, [global2.value.file.fileOperationText])]), showInitial.value && createVNode("tr", null, [createVNode("td", {
        "colspan": 4
      }, [renderDragger()])]), listFiles.value.map(function(file, index2) {
        var showBatchUploadAction = props2.batchUpload && props2.toUploadFiles.length === 0;
        return createVNode("tr", null, [createVNode("td", null, [abridgeName(file.name, 7, 10)]), createVNode("td", null, [returnFileSize(file.size)]), createVNode("td", null, [renderStatus(file)]), showBatchUploadAction ? renderBatchActionCol(index2) : renderNormalActionCol(file, index2)]);
      })]);
    };
    var renderImgItem = function renderImgItem2(file, index2) {
      var _getStatusMap2 = getStatusMap(file), iconMap = _getStatusMap2.iconMap, textMap = _getStatusMap2.textMap;
      return createVNode("li", {
        "class": "".concat(UPLOAD_NAME.value, "__card-item")
      }, [createVNode("div", {
        "class": ["".concat(UPLOAD_NAME.value, "__card-content"), _defineProperty$3({}, "".concat(prefix2.value, "-is-bordered"), file.status !== "waiting")]
      }, [["fail", "progress"].includes(file.status) && createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-status-wrap")
      }, [iconMap[file.status], createVNode("p", null, [textMap[file.status]])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && createVNode("img", {
        "class": "".concat(UPLOAD_NAME.value, "__card-image"),
        "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
      }, null), createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask")
      }, [file.url && createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item")
      }, [createVNode(browse, {
        "onClick": function onClick2(_ref2) {
          var e = _ref2.e;
          return props2.onImgPreview(e, file);
        }
      }, null), createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item-divider")
      }, null)]), !disabled2.value && createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__card-mask-item"),
        "onClick": function onClick2(e) {
          return props2.onRemove({
            e,
            index: index2,
            file
          });
        }
      }, [createVNode(_delete, null, null)])])]), createVNode("p", {
        "class": "".concat(UPLOAD_NAME.value, "__card-name")
      }, [abridgeName(file.name)])]);
    };
    var renderImgList = function renderImgList2() {
      return props2.theme === "image-flow" && createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-card-area")
      }, [showInitial.value && renderDragger(), !!listFiles.value.length && createVNode("ul", {
        "class": "".concat(UPLOAD_NAME.value, "__card clearfix")
      }, [listFiles.value.map(function(file, index2) {
        return renderImgItem(file, index2);
      })])]);
    };
    var renderFooter2 = function renderFooter3() {
      return !props2.autoUpload && createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-bottom")
      }, [createVNode(Button, {
        "theme": "default",
        "onClick": props2.onCancel,
        "disabled": !allowUpload.value
      }, {
        "default": function _default65() {
          return [global2.value.cancelUploadText];
        }
      }), createVNode(Button, {
        "disabled": !allowUpload.value,
        "theme": "primary",
        "onClick": function onClick2(e) {
          return props2.onUpload(waitingUploadFiles.value, e);
        }
      }, {
        "default": function _default65() {
          return [uploadText.value];
        }
      })]);
    };
    return function() {
      return createVNode("div", {
        "class": ["".concat(UPLOAD_NAME.value, "__flow"), "".concat(UPLOAD_NAME.value, "__flow-").concat(props2.theme)]
      }, [createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__flow-op")
      }, [renderTNodeJSX3("default"), createVNode("small", {
        "class": "".concat(SIZE.value.small, " ").concat(UPLOAD_NAME.value, "__flow-placeholder")
      }, [props2.placeholder])]), renderFileList(), renderImgList(), renderFooter2()]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var SingleFileProps = {
  file: {
    type: Object,
    "default": function _default63() {
      return null;
    }
  },
  loadingFile: {
    type: Object,
    "default": function _default64() {
      return null;
    }
  },
  showUploadProgress: props.showUploadProgress,
  theme: props.theme,
  placeholder: props.placeholder,
  onRemove: Function
};
var SingleFile = defineComponent({
  name: "TUploadSingleFile",
  props: SingleFileProps,
  setup: function setup131(props2) {
    var renderTNodeJSX3 = useTNodeJSX();
    var _useConfig = useConfig("upload"), prefix2 = _useConfig.classPrefix;
    var UPLOAD_NAME = usePrefixClass("upload");
    var showProgress = computed(function() {
      return !!(props2.loadingFile && props2.loadingFile.status === "progress");
    });
    var inputName = computed(function() {
      var fileName = props2.file && props2.file.name;
      var loadingName = props2.loadingFile && props2.loadingFile.name;
      return showProgress.value ? loadingName : fileName;
    });
    var inputText = computed(function() {
      return inputName.value || props2.placeholder;
    });
    var inputTextClass = computed(function() {
      return ["".concat(prefix2.value, "-input__inner"), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__placeholder"), !inputName.value)];
    });
    var classes6 = computed(function() {
      return ["".concat(UPLOAD_NAME.value, "__single"), "".concat(UPLOAD_NAME.value, "__single-").concat(props2.theme)];
    });
    var renderProgress = function renderProgress2() {
      if (props2.loadingFile.status === "fail") {
        return createVNode(errorCircleFilled, null, null);
      }
      if (props2.showUploadProgress) {
        return createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__single-progress")
        }, [createVNode(Loading, null, null), createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-percent")
        }, [Math.min(props2.loadingFile.percent, 99), "%"])]);
      }
    };
    var renderFilePreviewAsText = function renderFilePreviewAsText2() {
      if (!inputName.value || props2.theme !== "file")
        return;
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__single-display-text ").concat(UPLOAD_NAME.value, "__display-text--margin")
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-name")
      }, [inputName.value]), showProgress.value ? renderProgress() : createVNode(closeCircleFilled, {
        "class": "".concat(UPLOAD_NAME.value, "__icon-delete"),
        "onClick": function onClick2(_ref2) {
          var e = _ref2.e;
          return props2.onRemove(e);
        }
      }, null)]);
    };
    var renderFilePreviewAsInput = function renderFilePreviewAsInput2() {
      if (props2.theme !== "file-input")
        return;
      var renderResult = function renderResult2() {
        if (!!props2.loadingFile && props2.loadingFile.status === "fail") {
          return createVNode(errorCircleFilled, null, null);
        }
        if (props2.file && props2.file.name && !props2.loadingFile) {
          return createVNode(checkCircleFilled, null, null);
        }
        return "";
      };
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__single-input-preview ").concat(prefix2.value, "-input")
      }, [createVNode("div", {
        "class": inputTextClass.value
      }, [createVNode("span", {
        "class": "".concat(UPLOAD_NAME.value, "__single-input-text")
      }, [abridgeName(inputText.value, 4, 6)]), showProgress.value && renderProgress(), renderResult()])]);
    };
    return function() {
      return createVNode("div", {
        "class": classes6.value
      }, [renderFilePreviewAsInput(), renderTNodeJSX3("default"), renderFilePreviewAsText()]);
    };
  }
});
var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
function baseIsMatch$1(object, source, matchData, customizer) {
  var index2 = matchData.length, length = index2, noCustomizer = !customizer;
  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index2--) {
    var data26 = matchData[index2];
    if (noCustomizer && data26[2] ? data26[1] !== object[data26[0]] : !(data26[0] in object)) {
      return false;
    }
  }
  while (++index2 < length) {
    data26 = matchData[index2];
    var key = data26[0], objValue = object[key], srcValue = data26[1];
    if (noCustomizer && data26[2]) {
      if (objValue === void 0 && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}
var _baseIsMatch = baseIsMatch$1;
var isObject = isObject_1;
function isStrictComparable$2(value6) {
  return value6 === value6 && !isObject(value6);
}
var _isStrictComparable = isStrictComparable$2;
var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
function getMatchData$1(object) {
  var result = keys(object), length = result.length;
  while (length--) {
    var key = result[length], value6 = object[key];
    result[length] = [key, value6, isStrictComparable$1(value6)];
  }
  return result;
}
var _getMatchData = getMatchData$1;
function matchesStrictComparable$2(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
  };
}
var _matchesStrictComparable = matchesStrictComparable$2;
var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
function baseMatches$1(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}
var _baseMatches = baseMatches$1;
var baseIsEqual = _baseIsEqual, get3 = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
function baseMatchesProperty$1(path, srcValue) {
  if (isKey$1(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey$1(path), srcValue);
  }
  return function(object) {
    var objValue = get3(object, path);
    return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
var _baseMatchesProperty = baseMatchesProperty$1;
function baseProperty$1(key) {
  return function(object) {
    return object == null ? void 0 : object[key];
  };
}
var _baseProperty = baseProperty$1;
var baseGet = _baseGet;
function basePropertyDeep$1(path) {
  return function(object) {
    return baseGet(object, path);
  };
}
var _basePropertyDeep = basePropertyDeep$1;
var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
function property$1(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
var property_1 = property$1;
var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
function baseIteratee$1(value6) {
  if (typeof value6 == "function") {
    return value6;
  }
  if (value6 == null) {
    return identity;
  }
  if (typeof value6 == "object") {
    return isArray(value6) ? baseMatchesProperty(value6[0], value6[1]) : baseMatches(value6);
  }
  return property(value6);
}
var _baseIteratee = baseIteratee$1;
var baseFindIndex = _baseFindIndex, baseIteratee = _baseIteratee, toInteger = toInteger_1;
var nativeMax = Math.max;
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index2 < 0) {
    index2 = nativeMax(length + index2, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate), index2);
}
var findIndex_1 = findIndex;
var baseDifference = _baseDifference, baseRest = _baseRest, isArrayLikeObject = isArrayLikeObject_1;
var without = baseRest(function(array, values) {
  return isArrayLikeObject(array) ? baseDifference(array, values) : [];
});
var without_1 = without;
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function xhr(_ref) {
  var _ref$method = _ref.method, method = _ref$method === void 0 ? "POST" : _ref$method, action = _ref.action, _ref$withCredentials = _ref.withCredentials, withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials, _ref$headers = _ref.headers, headers = _ref$headers === void 0 ? {} : _ref$headers, _ref$data = _ref.data, data26 = _ref$data === void 0 ? {} : _ref$data, file = _ref.file, files = _ref.files, _ref$name = _ref.name, name2 = _ref$name === void 0 ? "file" : _ref$name, onError = _ref.onError, onProgress = _ref.onProgress, onSuccess = _ref.onSuccess;
  var innerFiles = files || [];
  var xhr2 = new XMLHttpRequest();
  if (withCredentials) {
    xhr2.withCredentials = true;
  }
  var formData = new FormData();
  var sendData = typeof data26 === "function" ? data26(file) : data26;
  Object.keys(sendData).forEach(function(key) {
    formData.append(key, data26[key]);
  });
  innerFiles.forEach(function(f) {
    formData.append(name2, f && f.raw);
  });
  xhr2.open(method, action, true);
  Object.keys(headers).forEach(function(key) {
    xhr2.setRequestHeader(key, headers[key]);
  });
  xhr2.onerror = function(event) {
    return onError({
      event,
      file,
      files: innerFiles
    });
  };
  if (xhr2.upload) {
    xhr2.upload.onprogress = function(event) {
      var percent = 0;
      if (event.total > 0) {
        percent = Math.round(event.loaded / event.total * 100);
      }
      onProgress({
        event,
        percent,
        file,
        files: innerFiles
      });
    };
  }
  xhr2.onload = function(event) {
    var response;
    var isFail = xhr2.status < 200 || xhr2.status >= 300;
    if (isFail) {
      return onError({
        event,
        file,
        files: innerFiles,
        response
      });
    }
    var text = xhr2.responseText || xhr2.response;
    try {
      response = JSON.parse(text);
    } catch (e) {
      response = text;
    }
    onSuccess({
      event,
      file,
      files: innerFiles,
      response
    });
  };
  xhr2.send(formData);
  return xhr2;
}
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$2(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var useUploadProgress = function useUploadProgress2(props2, uploadCtx) {
  var handleProgress = function handleProgress2(_ref) {
    var _props$onProgress;
    var event = _ref.event, file = _ref.file, currentFiles = _ref.files, percent = _ref.percent, _ref$type = _ref.type, type = _ref$type === void 0 ? "real" : _ref$type;
    var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
    if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0)
      return log.error("Uploader", "Progress Error files");
    innerFiles.forEach(function(file2) {
      file2.percent = Math.min(percent, 100);
      uploadCtx.loadingFile = file2;
    });
    var progressCtx = {
      percent,
      e: event,
      file,
      type,
      currentFiles: innerFiles
    };
    (_props$onProgress = props2.onProgress) === null || _props$onProgress === void 0 ? void 0 : _props$onProgress.call(props2, progressCtx);
  };
  var onError = function onError2(options) {
    var _res, _props$onFail;
    var event = options.event, file = options.file, files = options.files, response = options.response, resFormatted = options.resFormatted;
    var innerFiles = Array.isArray(files) ? files : [file];
    innerFiles.forEach(function(file2) {
      file2.status = "fail";
      uploadCtx.loadingFile = file2;
    });
    var res = response;
    if (!resFormatted && typeof props2.formatResponse === "function") {
      res = props2.formatResponse(response, {
        file,
        currentFiles: files
      });
    }
    uploadCtx.errorMsg = (_res = res) === null || _res === void 0 ? void 0 : _res.error;
    var context = {
      e: event,
      file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
      currentFiles: innerFiles
    };
    (_props$onFail = props2.onFail) === null || _props$onFail === void 0 ? void 0 : _props$onFail.call(props2, context);
    uploadCtx.loadingFile = null;
  };
  var handleSuccess = function handleSuccess2(_ref2) {
    var _res2, _props$onSuccess;
    var event = _ref2.event, file = _ref2.file, currentFiles = _ref2.files, response = _ref2.response;
    var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
    if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0)
      return log.error("Uploader", "success no files");
    innerFiles.forEach(function(file2) {
      file2.status = "success";
    });
    var res = response;
    if (typeof props2.formatResponse === "function") {
      res = props2.formatResponse(response, {
        file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
        currentFiles: innerFiles
      });
    }
    if ((_res2 = res) !== null && _res2 !== void 0 && _res2.error) {
      onError({
        event,
        file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
        files: innerFiles,
        response: res,
        resFormatted: true
      });
      return;
    }
    if (!uploadCtx.uploadInOneRequest) {
      innerFiles[0].url = res.url || innerFiles[0].url;
    }
    uploadCtx.toUploadFiles = without_1.apply(void 0, [uploadCtx.toUploadFiles].concat(_toConsumableArray(innerFiles)));
    var newFiles = innerFiles.map(function(file2) {
      return _objectSpread$2(_objectSpread$2({}, file2), {}, {
        response: res
      });
    });
    var uploadedFiles = props2.multiple ? uploadCtx.uploadValue.concat(newFiles) : newFiles;
    var context = {
      e: event,
      response: res,
      trigger: "upload-success"
    };
    uploadCtx.setUploadValue(uploadedFiles, context);
    var sContext = {
      file: uploadCtx.uploadInOneRequest ? null : newFiles[0],
      fileList: uploadedFiles,
      currentFiles: newFiles,
      e: event,
      response: res
    };
    (_props$onSuccess = props2.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props2, sContext);
    uploadCtx.loadingFile = null;
  };
  var handleMockProgress = function handleMockProgress2(files) {
    var timer = setInterval(function() {
      files.forEach(function(file) {
        if (file.status === "success" || file.percent >= 99) {
          clearInterval(timer);
          return;
        }
        file.percent += 1;
      });
      var percent = files[0].percent;
      handleProgress({
        files,
        percent,
        type: "mock"
      });
    }, 10);
  };
  return {
    handleProgress,
    handleMockProgress,
    handleSuccess,
    onError
  };
};
var useUpload = function useUpload2(props2, uploadCtx) {
  var xhrReq = ref(null);
  var _useConfig = useConfig("upload"), global2 = _useConfig.global, t = _useConfig.t;
  var _useUploadProgress = useUploadProgress(props2, uploadCtx), handleProgress = _useUploadProgress.handleProgress, handleMockProgress = _useUploadProgress.handleMockProgress, handleSuccess = _useUploadProgress.handleSuccess, onError = _useUploadProgress.onError;
  var handleSizeLimit = function handleSizeLimit2(fileSize) {
    var sizeLimit = typeof props2.sizeLimit === "number" ? {
      size: props2.sizeLimit,
      unit: "KB"
    } : props2.sizeLimit;
    var rSize = isOverSizeLimit(fileSize / 1024, sizeLimit.size, sizeLimit.unit);
    if (!rSize) {
      uploadCtx.errorMsg = sizeLimit.message ? t(sizeLimit.message, {
        sizeLimit: sizeLimit.size
      }) : "".concat(t(global2.value.sizeLimitMessage, {
        sizeLimit: sizeLimit.size
      }), " ").concat(sizeLimit.unit);
    }
    return rSize;
  };
  var handleBeforeUpload = function handleBeforeUpload2(file) {
    if (typeof props2.beforeUpload === "function") {
      var r = props2.beforeUpload(file);
      if (r instanceof Promise)
        return r;
      return new Promise(function(resolve2) {
        return resolve2(r);
      });
    }
    return new Promise(function(resolve2) {
      if (props2.sizeLimit) {
        resolve2(handleSizeLimit(file.size));
      }
      resolve2(true);
    });
  };
  var handleRequestMethodResponse = function handleRequestMethodResponse2(res) {
    if (!res) {
      log.error("Upload", "`requestMethodResponse` is required.");
      return false;
    }
    if (!res.status) {
      log.error("Upload", "`requestMethodResponse.status` is missing, which value is `success` or `fail`");
      return false;
    }
    if (!["success", "fail"].includes(res.status)) {
      log.error("Upload", "`requestMethodResponse.status` must be `success` or `fail`");
      return false;
    }
    if (res.status === "success" && (!res.response || !res.response.url)) {
      log.warn("Upload", "`requestMethodResponse.response.url` is required, when `status` is `success`");
    }
    return true;
  };
  var handleRequestMethod = function handleRequestMethod2(files) {
    if (!isFunction_1(props2.requestMethod)) {
      log.warn("Upload", "`requestMethod` must be a function.");
      return;
    }
    var requestMethodParam = uploadCtx.uploadInOneRequest ? files : files[0];
    props2.requestMethod(requestMethodParam).then(function(res) {
      if (!handleRequestMethodResponse(res))
        return;
      if (res.status === "success") {
        handleSuccess({
          files,
          response: res.response
        });
      } else if (res.status === "fail") {
        var r = res.response || {};
        onError({
          event: null,
          file: uploadCtx.uploadInOneRequest ? null : files[0],
          files,
          response: _objectSpread$2(_objectSpread$2({}, r), {}, {
            error: res.error
          })
        });
      }
    });
  };
  var upload2 = /* @__PURE__ */ function() {
    var _ref3 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(currentFiles) {
      var innerFiles, request;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              innerFiles = Array.isArray(currentFiles) ? currentFiles : [currentFiles];
              if (!(!props2.action && !props2.requestMethod)) {
                _context.next = 4;
                break;
              }
              log.error("Upload", "one of action and requestMethod must be exist.");
              return _context.abrupt("return");
            case 4:
              innerFiles.forEach(function(file) {
                file.status = "progress";
                uploadCtx.loadingFile = file;
              });
              if (props2.requestMethod) {
                handleRequestMethod(innerFiles);
              } else {
                if (props2.useMockProgress) {
                  handleMockProgress(innerFiles);
                }
                request = xhr;
                xhrReq.value = request({
                  action: props2.action,
                  data: props2.data,
                  files: innerFiles,
                  name: props2.name,
                  headers: props2.headers,
                  withCredentials: props2.withCredentials,
                  onError,
                  onProgress: handleProgress,
                  onSuccess: handleSuccess,
                  method: props2.method
                });
              }
            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function upload3(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var uploadFiles = function uploadFiles2(files) {
    var _uploadCtx$uploadValu;
    if (uploadCtx.canBatchUpload && ((_uploadCtx$uploadValu = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu === void 0 ? void 0 : _uploadCtx$uploadValu.length) > 0) {
      var context = {
        trigger: "batch-clear"
      };
      uploadCtx.setUploadValue([], context);
    }
    var tmpFiles = _toConsumableArray(files);
    if (props2.max) {
      tmpFiles = tmpFiles.slice(0, props2.max - uploadCtx.uploadValue.length);
      if (tmpFiles.length !== files.length) {
        console.warn("TDesign Upload Warn: you can only upload ".concat(props2.max, " files"));
      }
    }
    tmpFiles.forEach(function(fileRaw) {
      var file = fileRaw;
      if (typeof props2.format === "function") {
        file = props2.format(fileRaw);
      }
      var uploadFile = _objectSpread$2({
        raw: fileRaw,
        lastModified: fileRaw.lastModified,
        name: fileRaw.name,
        size: fileRaw.size,
        type: fileRaw.type,
        percent: 0,
        status: "waiting"
      }, file);
      var reader = new FileReader();
      reader.readAsDataURL(fileRaw);
      reader.onload = function(event) {
        uploadFile.url = event.target.result;
      };
      handleBeforeUpload(file).then(function(canUpload) {
        if (!canUpload)
          return;
        var newFiles = uploadCtx.toUploadFiles.concat();
        newFiles.push(uploadFile);
        uploadCtx.toUploadFiles = _toConsumableArray(new Set(newFiles));
        uploadCtx.loadingFile = uploadFile;
        if (props2.autoUpload) {
          upload2(uploadFile);
        }
      });
    });
  };
  return {
    uploadFiles,
    upload: upload2,
    xhrReq
  };
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys$1(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var useComponentsStatus = function useComponentsStatus2(props2, uploadCtx) {
  var showUploadList = computed(function() {
    return props2.multiple && ["file-flow", "image-flow"].includes(props2.theme);
  });
  var showTips = computed(function() {
    if (props2.theme === "file") {
      var hasNoFile = (!uploadCtx.uploadValue || !uploadCtx.uploadValue.length) && !uploadCtx.loadingFile;
      return props2.tips && hasNoFile;
    }
    return Boolean(props2.tips);
  });
  var showErrorMsg = computed(function() {
    return !showUploadList.value && !!uploadCtx.errorMsg;
  });
  var singleDraggable = computed(function() {
    return !props2.multiple && props2.draggable && ["file", "file-input", "image"].includes(props2.theme);
  });
  return {
    showUploadList,
    showTips,
    showErrorMsg,
    singleDraggable
  };
};
var useImgPreview = function useImgPreview2(props2) {
  var showImageViewUrl = ref("");
  var showImageViewDialog = ref(false);
  var handlePreviewImg = function handlePreviewImg2(event, file) {
    var _props$onPreview;
    if (!file || !file.url)
      return log.error("Uploader", "Preview Error file");
    showImageViewUrl.value = file.url;
    showImageViewDialog.value = true;
    var previewCtx = {
      file,
      e: event
    };
    (_props$onPreview = props2.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props2, previewCtx);
  };
  var cancelPreviewImgDialog = function cancelPreviewImgDialog2() {
    showImageViewDialog.value = false;
    var timer = setTimeout(function() {
      showImageViewUrl.value = null;
      clearTimeout(timer);
      timer = null;
    }, 500);
  };
  return {
    showImageViewUrl,
    showImageViewDialog,
    handlePreviewImg,
    cancelPreviewImgDialog
  };
};
var useDragger = function useDragger2(props2, disabled2) {
  var dragActive = ref(false);
  var handleDragenter = function handleDragenter2(e) {
    var _props$onDragenter;
    if (disabled2.value)
      return;
    dragActive.value = true;
    (_props$onDragenter = props2.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props2, {
      e
    });
  };
  var handleDragleave = function handleDragleave2(e) {
    var _props$onDragleave;
    if (disabled2.value)
      return;
    dragActive.value = false;
    (_props$onDragleave = props2.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props2, {
      e
    });
  };
  return {
    handleDragenter,
    handleDragleave,
    dragActive
  };
};
var useRemove = function useRemove2(props2, uploadCtx) {
  var handleSingleRemove = function handleSingleRemove2(e) {
    var _props$onRemove;
    var changeCtx = {
      trigger: "remove"
    };
    if (uploadCtx.loadingFile)
      uploadCtx.loadingFile = null;
    uploadCtx.errorMsg = "";
    uploadCtx.setUploadValue([], changeCtx);
    (_props$onRemove = props2.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props2, {
      e
    });
  };
  var handleFileInputRemove = function handleFileInputRemove2(e) {
    e === null || e === void 0 ? void 0 : e.stopPropagation();
    handleSingleRemove(e);
  };
  var handleMultipleRemove = function handleMultipleRemove2(options) {
    var _props$onRemove2;
    var files = [];
    if (!uploadCtx.canBatchUpload) {
      files = uploadCtx.uploadValue.concat();
      files.splice(options.index, 1);
    } else {
      files = [];
      options.files = uploadCtx.uploadValue.concat();
    }
    var changeCtx = _objectSpread$1({
      trigger: "remove"
    }, options);
    uploadCtx.setUploadValue(files, changeCtx);
    (_props$onRemove2 = props2.onRemove) === null || _props$onRemove2 === void 0 ? void 0 : _props$onRemove2.call(props2, options);
  };
  var handleListRemove = function handleListRemove2(context) {
    var file = context.file;
    var index2 = findIndex_1(uploadCtx.toUploadFiles, function(o) {
      return o.name === (file === null || file === void 0 ? void 0 : file.name);
    });
    if (index2 >= 0) {
      uploadCtx.toUploadFiles.splice(index2, 1);
    } else {
      var index22 = findIndex_1(uploadCtx.uploadValue, function(o) {
        return o.name === (file === null || file === void 0 ? void 0 : file.name);
      });
      handleMultipleRemove({
        e: context.e,
        index: index22
      });
    }
  };
  return {
    handleFileInputRemove,
    handleSingleRemove,
    handleMultipleRemove,
    handleListRemove
  };
};
var useActions = function useActions2(props2, uploadCtx, disabled2) {
  var _useUpload = useUpload(props2, uploadCtx), uploadFiles = _useUpload.uploadFiles, upload2 = _useUpload.upload, xhrReq = _useUpload.xhrReq;
  var inputRef = ref(null);
  var handleChange5 = function handleChange6(event) {
    var files = event.target.files;
    if (disabled2.value)
      return;
    uploadFiles(files);
    inputRef.value.value = "";
  };
  var multipleUpload = function multipleUpload2(currentFiles) {
    if (props2.uploadAllFilesInOneRequest) {
      upload2(currentFiles);
    } else {
      currentFiles.forEach(function(file) {
        upload2(file);
      });
    }
  };
  var triggerUpload = function triggerUpload2() {
    if (disabled2.value)
      return;
    inputRef.value.click();
  };
  var cancelUpload = function cancelUpload2() {
    if (uploadCtx.loadingFile) {
      var _props$onCancelUpload;
      if (!props2.requestMethod) {
        xhrReq.value && xhrReq.value.abort();
        uploadCtx.toUploadFiles = [];
      }
      (_props$onCancelUpload = props2.onCancelUpload) === null || _props$onCancelUpload === void 0 ? void 0 : _props$onCancelUpload.call(props2);
      uploadCtx.loadingFile = null;
    }
    inputRef.value.value = "";
  };
  var handleDragChange = function handleDragChange2(files) {
    if (disabled2.value)
      return;
    uploadFiles(files);
  };
  return {
    handleChange: handleChange5,
    multipleUpload,
    triggerUpload,
    cancelUpload,
    handleDragChange,
    upload: upload2,
    inputRef
  };
};
var useBatchUpload = function useBatchUpload2(props2) {
  var uploadInOneRequest = computed(function() {
    return props2.multiple && props2.uploadAllFilesInOneRequest;
  });
  var canBatchUpload = computed(function() {
    return uploadInOneRequest.value && props2.isBatchUpload;
  });
  return {
    uploadInOneRequest,
    canBatchUpload
  };
};
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty$3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _Upload = defineComponent({
  name: "TUpload",
  props,
  setup: function setup132(props2, _ref) {
    var expose = _ref.expose;
    var renderTNodeContent = useContent();
    var _useConfig = useConfig("upload"), prefix2 = _useConfig.classPrefix, global2 = _useConfig.global;
    var UPLOAD_NAME = usePrefixClass("upload");
    var _toRefs = toRefs(props2), files = _toRefs.files, modelValue = _toRefs.modelValue;
    var _useBatchUpload = useBatchUpload(props2), canBatchUpload = _useBatchUpload.canBatchUpload, uploadInOneRequest = _useBatchUpload.uploadInOneRequest;
    var _useVModel = useVModel(files, modelValue, props2.defaultFiles || [], props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), uploadValue = _useVModel2[0], setUploadValue = _useVModel2[1];
    var uploadCtx = reactive({
      uploadValue,
      setUploadValue,
      uploadInOneRequest,
      canBatchUpload,
      loadingFile: null,
      toUploadFiles: [],
      errorMsg: ""
    });
    var disabled2 = useFormDisabled();
    var _useComponentsStatus = useComponentsStatus(props2, uploadCtx), showUploadList = _useComponentsStatus.showUploadList, showTips = _useComponentsStatus.showTips, showErrorMsg = _useComponentsStatus.showErrorMsg, singleDraggable = _useComponentsStatus.singleDraggable;
    var _useImgPreview = useImgPreview(props2), showImageViewUrl = _useImgPreview.showImageViewUrl, showImageViewDialog = _useImgPreview.showImageViewDialog, handlePreviewImg = _useImgPreview.handlePreviewImg, cancelPreviewImgDialog = _useImgPreview.cancelPreviewImgDialog;
    var _useDragger = useDragger(props2, disabled2), handleDragenter = _useDragger.handleDragenter, handleDragleave = _useDragger.handleDragleave, dragActive = _useDragger.dragActive;
    var _useRemove = useRemove(props2, uploadCtx), handleFileInputRemove = _useRemove.handleFileInputRemove, handleSingleRemove = _useRemove.handleSingleRemove, handleMultipleRemove = _useRemove.handleMultipleRemove, handleListRemove = _useRemove.handleListRemove;
    var _useActions = useActions(props2, uploadCtx, disabled2), handleChange5 = _useActions.handleChange, multipleUpload = _useActions.multipleUpload, triggerUpload = _useActions.triggerUpload, cancelUpload = _useActions.cancelUpload, handleDragChange = _useActions.handleDragChange, upload$1 = _useActions.upload, inputRef = _useActions.inputRef;
    expose({
      triggerUpload
    });
    var renderInput3 = function renderInput4() {
      return createVNode("input", {
        "ref": inputRef,
        "type": "file",
        "disabled": disabled2.value,
        "onChange": handleChange5,
        "multiple": props2.multiple,
        "accept": props2.accept,
        "hidden": true
      }, null);
    };
    var renderSingleDisplay = function renderSingleDisplay2(triggerElement) {
      var _uploadValue$value;
      return !props2.draggable && ["file", "file-input"].includes(props2.theme) && createVNode(SingleFile, {
        "file": uploadValue.value && uploadValue.value[0],
        "loadingFile": uploadCtx.loadingFile,
        "theme": props2.theme,
        "onRemove": handleSingleRemove,
        "showUploadProgress": props2.showUploadProgress,
        "placeholder": props2.placeholder
      }, {
        "default": function _default65() {
          return [createVNode("div", {
            "class": "".concat(prefix2.value, "-upload__trigger"),
            "onclick": triggerUpload
          }, [triggerElement, !!(props2.theme === "file-input" && (_uploadValue$value = uploadValue.value) !== null && _uploadValue$value !== void 0 && _uploadValue$value.length) && createVNode(Button, {
            "theme": "primary",
            "variant": "text",
            "onClick": handleFileInputRemove
          }, {
            "default": function _default66() {
              return ["\u5220\u9664"];
            }
          })])];
        }
      });
    };
    var renderDraggerTrigger = function renderDraggerTrigger2() {
      var params = {
        dragActive: dragActive.value,
        uploadingFile: props2.multiple ? uploadCtx.toUploadFiles : uploadCtx.loadingFile
      };
      var triggerElement = renderTNodeContent("default", "trigger", {
        params
      });
      if (!Array.isArray(triggerElement)) {
        triggerElement = {};
      }
      return createVNode(Dragger, {
        "showUploadProgress": props2.showUploadProgress,
        "loadingFile": uploadCtx.loadingFile,
        "file": uploadValue.value && uploadValue.value[0],
        "theme": props2.theme,
        "autoUpload": props2.autoUpload,
        "onChange": handleDragChange,
        "onDragenter": handleDragenter,
        "onDragleave": handleDragleave,
        "onCancel": cancelUpload,
        "onClick": triggerUpload,
        "onRemove": handleSingleRemove,
        "onUpload": upload$1
      }, _isSlot(triggerElement) ? triggerElement : {
        "default": function _default65() {
          return [triggerElement];
        }
      });
    };
    var uploadListTriggerText = computed(function() {
      var _uploadCtx$toUploadFi, _uploadCtx$uploadValu;
      var uploadText = global2.value.triggerUploadText.fileInput;
      if (((_uploadCtx$toUploadFi = uploadCtx.toUploadFiles) === null || _uploadCtx$toUploadFi === void 0 ? void 0 : _uploadCtx$toUploadFi.length) > 0 || ((_uploadCtx$uploadValu = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu === void 0 ? void 0 : _uploadCtx$uploadValu.length) > 0) {
        var _uploadCtx$uploadValu2;
        if (props2.theme === "file-input" || ((_uploadCtx$uploadValu2 = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu2 === void 0 ? void 0 : _uploadCtx$uploadValu2.length) > 0 && canBatchUpload.value) {
          uploadText = global2.value.triggerUploadText.reupload;
        } else {
          uploadText = global2.value.triggerUploadText.continueUpload;
        }
      }
      return uploadText;
    });
    var renderTrigger2 = function renderTrigger3() {
      var getDefaultTrigger = function getDefaultTrigger2() {
        if (props2.theme === "file-input" || showUploadList.value) {
          return createVNode(resolveComponent("t-button"), {
            "variant": "outline"
          }, {
            "default": function _default65() {
              return [global2.value.triggerUploadText.fileInput];
            }
          });
        }
        var iconSlot = {
          icon: function icon() {
            return createVNode(upload, null, null);
          }
        };
        return createVNode(Button, {
          "variant": "outline"
        }, _objectSpread({
          "default": function _default65() {
            return [uploadListTriggerText.value];
          }
        }, iconSlot));
      };
      var defaultNode = getDefaultTrigger();
      return renderTNodeContent("default", "trigger", defaultNode);
    };
    var renderCustom = function renderCustom2(triggerElement) {
      if (props2.theme !== "custom")
        return;
      return props2.draggable ? renderDraggerTrigger() : createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value, "__trigger"),
        "onclick": triggerUpload
      }, [triggerElement]);
    };
    var renderImgCard = function renderImgCard2() {
      return !props2.draggable && props2.theme === "image" && createVNode(ImageCard, {
        "files": uploadValue.value,
        "loadingFile": uploadCtx.loadingFile,
        "showUploadProgress": props2.showUploadProgress,
        "multiple": props2.multiple,
        "max": props2.max,
        "disabled": disabled2.value,
        "onClick": triggerUpload,
        "onRemove": handleMultipleRemove,
        "onImgPreview": handlePreviewImg
      }, null);
    };
    var renderFlowList = function renderFlowList2(triggerElement) {
      return showUploadList.value && createVNode(FlowList, {
        "files": uploadValue.value,
        "placeholder": props2.placeholder,
        "autoUpload": props2.autoUpload,
        "toUploadFiles": uploadCtx.toUploadFiles,
        "theme": props2.theme,
        "batchUpload": uploadCtx.canBatchUpload,
        "showUploadProgress": props2.showUploadProgress,
        "onRemove": handleListRemove,
        "onUpload": multipleUpload,
        "onCancel": cancelUpload,
        "onImgPreview": handlePreviewImg,
        "onChange": handleDragChange,
        "onDragenter": handleDragenter,
        "onDragleave": handleDragleave
      }, {
        "default": function _default65() {
          return [createVNode("div", {
            "class": "".concat(UPLOAD_NAME.value, "__trigger"),
            "onclick": triggerUpload
          }, [triggerElement])];
        }
      });
    };
    var renderDialog = function renderDialog2() {
      return ["image", "image-flow", "custom"].includes(props2.theme) && createVNode(Dialog, {
        "visible": showImageViewDialog.value,
        "showOverlay": true,
        "width": "auto",
        "top": "10%",
        "class": "".concat(UPLOAD_NAME.value, "__dialog"),
        "footer": false,
        "header": false,
        "onClose": cancelPreviewImgDialog
      }, {
        "default": function _default65() {
          return [createVNode("div", {
            "class": "".concat(prefix2.value, "__dialog-body-img-box")
          }, [createVNode("img", {
            "src": showImageViewUrl.value,
            "alt": ""
          }, null)])];
        }
      });
    };
    var tipsClasses = computed(function() {
      return ["".concat(UPLOAD_NAME.value, "__tips ").concat(prefix2.value, "-size-s")];
    });
    var errorClasses2 = computed(function() {
      return tipsClasses.value.concat("".concat(UPLOAD_NAME.value, "__tips-error"));
    });
    return function() {
      var triggerElement = renderTrigger2();
      return createVNode("div", {
        "class": "".concat(UPLOAD_NAME.value)
      }, [renderInput3(), renderCustom(triggerElement), renderSingleDisplay(triggerElement), singleDraggable.value && renderDraggerTrigger(), renderImgCard(), renderFlowList(triggerElement), renderDialog(), !uploadCtx.errorMsg && showTips.value && createVNode("small", {
        "class": tipsClasses.value
      }, [props2.tips]), showErrorMsg.value && createVNode("small", {
        "class": errorClasses2.value
      }, [uploadCtx.errorMsg])]);
    };
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var Upload = withInstall(_Upload);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var _ConfigProvider = defineComponent({
  name: "TConfigProvider",
  props: {
    globalConfig: Object
  },
  setup: function setup133(props2) {
    provide("globalConfig", computed(function() {
      return props2.globalConfig;
    }));
  },
  render: function render101() {
    var defaultNode = renderTNodeJSX(this, "default");
    if (defaultNode.length === 1) {
      return defaultNode[0];
    }
    return createVNode("div", null, [defaultNode]);
  }
});
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var ConfigProvider = withInstall(_ConfigProvider);
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
var components = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Button,
  Divider,
  Icon,
  Row,
  Col,
  Aside,
  Layout,
  Header,
  Footer,
  Content,
  Affix,
  Anchor,
  AnchorItem,
  AnchorTarget,
  Breadcrumb,
  BreadcrumbItem,
  Dropdown,
  DropdownItem,
  DropdownMenu,
  Menu,
  HeadMenu,
  Submenu,
  MenuItem,
  MenuGroup,
  Pagination,
  Steps,
  StepItem,
  Tabs,
  TabPanel,
  Cascader,
  Checkbox,
  CheckboxGroup,
  DatePicker,
  Form,
  FormItem,
  Addon,
  Input,
  InputGroup,
  InputNumber,
  Radio,
  RadioGroup,
  RadioButton,
  Select,
  Option,
  OptionGroup,
  Slider,
  SliderButton,
  Switch,
  TagInput,
  SelectInput,
  Textarea,
  Transfer,
  TimePicker,
  TimeRangePicker,
  TreeSelect,
  ColorPickerPanel,
  ColorPicker,
  Avatar,
  AvatarGroup,
  Badge,
  Calendar,
  Card,
  Comment,
  List,
  ListItem,
  ListItemMeta,
  Progress,
  Skeleton,
  Swiper,
  SwiperItem,
  BaseTable,
  PrimaryTable,
  EnhancedTable,
  Table,
  Tag,
  CheckTag,
  Tooltip,
  Tree,
  Collapse,
  CollapsePanel,
  Alert,
  DialogPlugin,
  Dialog,
  Drawer,
  LoadingPlugin,
  Loading,
  MessagePlugin,
  Message,
  NotifyPlugin: NotificationPlugin,
  Notification,
  Popconfirm,
  Popup,
  Upload,
  ConfigProvider
});
var index$1 = "";
/**
 * tdesign v0.13.0
 * (c) 2022 tdesign
 * @license MIT
 */
function install(app, config) {
  Object.keys(components).forEach(function(key) {
    /plugin/i.test(key) ? app.use(components[key]) : app.use(components[key], config);
  });
}
var index = {
  install,
  version: "0.13.0"
};
const scriptRel = "modulepreload";
const seen = {};
const base = "./";
const __vitePreload = function preload(baseModule, deps) {
  if (!deps || deps.length === 0) {
    return baseModule();
  }
  return Promise.all(deps.map((dep) => {
    dep = `${base}${dep}`;
    if (dep in seen)
      return;
    seen[dep] = true;
    const isCss = dep.endsWith(".css");
    const cssSelector = isCss ? '[rel="stylesheet"]' : "";
    if (document.querySelector(`link[href="${dep}"]${cssSelector}`)) {
      return;
    }
    const link = document.createElement("link");
    link.rel = isCss ? "stylesheet" : scriptRel;
    if (!isCss) {
      link.as = "script";
      link.crossOrigin = "";
    }
    link.href = dep;
    document.head.appendChild(link);
    if (isCss) {
      return new Promise((res, rej) => {
        link.addEventListener("load", res);
        link.addEventListener("error", () => rej(new Error(`Unable to preload CSS for ${dep}`)));
      });
    }
  })).then(() => baseModule());
};
/*!
  * vue-router v4.0.14
  * (c) 2022 Eduardo San Martin Morote
  * @license MIT
  */
const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
const PolySymbol = (name2) => hasSymbol ? Symbol(name2) : "_vr_" + name2;
const matchedRouteKey = /* @__PURE__ */ PolySymbol("rvlm");
const viewDepthKey = /* @__PURE__ */ PolySymbol("rvd");
const routerKey = /* @__PURE__ */ PolySymbol("r");
const routeLocationKey = /* @__PURE__ */ PolySymbol("rl");
const routerViewLocationKey = /* @__PURE__ */ PolySymbol("rvl");
const isBrowser = typeof window !== "undefined";
function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === "Module";
}
const assign = Object.assign;
function applyToParams(fn2, params) {
  const newParams = {};
  for (const key in params) {
    const value6 = params[key];
    newParams[key] = Array.isArray(value6) ? value6.map(fn2) : fn2(value6);
  }
  return newParams;
}
const noop = () => {
};
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash2 = "";
  const searchPos = location2.indexOf("?");
  const hashPos = location2.indexOf("#", searchPos > -1 ? searchPos : 0);
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash2 = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash2,
    path,
    query,
    hash: hash2
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base2) {
  if (!base2 || !pathname.toLowerCase().startsWith(base2.toLowerCase()))
    return pathname;
  return pathname.slice(base2.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a, b) {
  const aLastIndex = a.matched.length - 1;
  const bLastIndex = b.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery2(a.query) === stringifyQuery2(b.query) && a.hash === b.hash;
}
function isSameRouteRecord(a, b) {
  return (a.aliasOf || a) === (b.aliasOf || b);
}
function isSameRouteLocationParams(a, b) {
  if (Object.keys(a).length !== Object.keys(b).length)
    return false;
  for (const key in a) {
    if (!isSameRouteLocationParamsValue(a[key], b[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a, b) {
  return Array.isArray(a) ? isEquivalentArray(a, b) : Array.isArray(b) ? isEquivalentArray(b, a) : a === b;
}
function isEquivalentArray(a, b) {
  return Array.isArray(b) ? a.length === b.length && a.every((value6, i) => value6 === b[i]) : a.length === 1 && a[0] === b;
}
function resolveRelativePath(to, from) {
  if (to.startsWith("/"))
    return to;
  if (!to)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to.split("/");
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (position === 1 || segment === ".")
      continue;
    if (segment === "..")
      position--;
    else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base2) {
  if (!base2) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base2 = baseEl && baseEl.getAttribute("href") || "/";
      base2 = base2.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base2 = "/";
    }
  }
  if (base2[0] !== "/" && base2[0] !== "#")
    base2 = "/" + base2;
  return removeTrailingSlash(base2);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base2, location2) {
  return base2.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el, offset2) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el.getBoundingClientRect();
  return {
    behavior: offset2.behavior,
    left: elRect.left - docRect.left - (offset2.left || 0),
    top: elRect.top - docRect.top - (offset2.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    const el = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el) {
      return;
    }
    scrollToOptions = getElementPosition(el, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition) {
  scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base2, location2) {
  const { pathname, search: search2, hash: hash2 } = location2;
  const hashPos = base2.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash2.includes(base2.slice(hashPos)) ? base2.slice(hashPos).length : 1;
    let pathFromHash = hash2.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base2);
  return path + search2 + hash2;
}
function useHistoryListeners(base2, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to = createCurrentLocation(base2, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index2 = listeners.indexOf(callback);
      if (index2 > -1)
        listeners.splice(index2, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy2() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener);
  return {
    pauseListeners,
    listen,
    destroy: destroy2
  };
}
function buildState(back, current2, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current: current2,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base2) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base2, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      position: history2.length - 1,
      replaced: true,
      scroll: null
    }, true);
  }
  function changeLocation(to, state, replace2) {
    const hashIndex = base2.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base2 : base2.slice(hashIndex)) + to : createBaseLocation() + base2 + to;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        console.error(err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to, data26) {
    const state = assign({}, history2.state, buildState(historyState.value.back, to, historyState.value.forward, true), data26, { position: historyState.value.position });
    changeLocation(to, state, true);
    currentLocation.value = to;
  }
  function push(to, data26) {
    const currentState = assign({}, historyState.value, history2.state, {
      forward: to,
      scroll: computeScrollPosition()
    });
    changeLocation(currentState.current, currentState, true);
    const state = assign({}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data26);
    changeLocation(to, state, false);
    currentLocation.value = to;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base2) {
  base2 = normalizeBase(base2);
  const historyNavigation = useHistoryStateNavigation(base2);
  const historyListeners = useHistoryListeners(base2, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign({
    location: "",
    base: base2,
    go,
    createHref: createHref.bind(null, base2)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function createWebHashHistory(base2) {
  base2 = location.host ? base2 || location.pathname + location.search : "";
  if (!base2.includes("#"))
    base2 += "#";
  return createWebHistory(base2);
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name2) {
  return typeof name2 === "string" || typeof name2 === "symbol";
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol = /* @__PURE__ */ PolySymbol("nf");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
function createRouterError(type, params) {
  {
    return assign(new Error(), {
      type,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error5, type) {
  return error5 instanceof Error && NavigationFailureSymbol in error5 && (type == null || !!(error5.type & type));
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern2 = options.start ? "^" : "";
  const keys2 = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [90];
    if (options.strict && !segment.length)
      pattern2 += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern2 += "/";
        pattern2 += token.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value: value6, repeatable, optional, regexp } = token;
        keys2.push({
          name: value6,
          repeatable,
          optional
        });
        const re2 = regexp ? regexp : BASE_PARAM_PATTERN;
        if (re2 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re2})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value6}" (${re2}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re2})(?:/(?:${re2}))*)` : `(${re2})`;
        if (!tokenIndex)
          subPattern = optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern2 += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re2 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i = score.length - 1;
    score[i][score[i].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern2 += "/?";
  if (options.end)
    pattern2 += "$";
  else if (options.strict)
    pattern2 += "(?:/|$)";
  const re = new RegExp(pattern2, options.sensitive ? "" : "i");
  function parse(path) {
    const match = path.match(re);
    const params = {};
    if (!match)
      return null;
    for (let i = 1; i < match.length; i++) {
      const value6 = match[i] || "";
      const key = keys2[i - 1];
      params[key.name] = value6 && key.repeatable ? value6.split("/") : value6;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value: value6, repeatable, optional } = token;
          const param = value6 in params ? params[value6] : "";
          if (Array.isArray(param) && !repeatable)
            throw new Error(`Provided param "${value6}" is an array but it is not repeatable (* or + modifiers)`);
          const text = Array.isArray(param) ? param.join("/") : param;
          if (!text) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value6}"`);
          }
          path += text;
        }
      }
    }
    return path;
  }
  return {
    re,
    score,
    keys: keys2,
    parse,
    stringify
  };
}
function compareScoreArray(a, b) {
  let i = 0;
  while (i < a.length && i < b.length) {
    const diff = b[i] - a[i];
    if (diff)
      return diff;
    i++;
  }
  if (a.length < b.length) {
    return a.length === 1 && a[0] === 40 + 40 ? -1 : 1;
  } else if (a.length > b.length) {
    return b.length === 1 && b[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a, b) {
  let i = 0;
  const aScore = a.score;
  const bScore = b.score;
  while (i < aScore.length && i < bScore.length) {
    const comp = compareScoreArray(aScore[i], bScore[i]);
    if (comp)
      return comp;
    i++;
  }
  return bScore.length - aScore.length;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(`Invalid path "${path}"`);
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i = 0;
  let char;
  let buffer = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer = "";
  }
  function addCharToBuffer() {
    buffer += char;
  }
  while (i < path.length) {
    char = path[i++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher(record, parent2, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  const matcher = assign(parser, {
    record,
    parent: parent2,
    children: [],
    alias: []
  });
  if (parent2) {
    if (!matcher.record.aliasOf === !parent2.record.aliasOf)
      parent2.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name2) {
    return matcherMap.get(name2);
  }
  function addRoute(record, parent2, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(assign({}, mainNormalizedRecord, {
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent2 && path[0] !== "/") {
        const parentPath = parent2.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent2.record.path + (path && connectingSlash + path);
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent2, options);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if ("children" in mainNormalizedRecord) {
        const children = mainNormalizedRecord.children;
        for (let i = 0; i < children.length; i++) {
          addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);
        }
      }
      originalRecord = originalRecord || matcher;
      insertMatcher(matcher);
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index2 = matchers.indexOf(matcherRef);
      if (index2 > -1) {
        matchers.splice(index2, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i = 0;
    while (i < matchers.length && comparePathParserScore(matcher, matchers[i]) >= 0 && (matcher.record.path !== matchers[i].record.path || !isRecordChildOf(matcher, matchers[i])))
      i++;
    matchers.splice(i, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve2(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name2;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      name2 = matcher.record.name;
      params = assign(paramsFromLocation(currentLocation.params, matcher.keys.filter((k) => !k.optional).map((k) => k.name)), location2.params);
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      matcher = matchers.find((m) => m.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name2 = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m) => m.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name2 = matcher.record.name;
      params = assign({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name: name2,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes.forEach((route) => addRoute(route));
  return { addRoute, resolve: resolve2, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation(params, keys2) {
  const newParams = {};
  for (const key of keys2) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || {} : { default: record.component }
  };
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props2 = record.props || false;
  if ("component" in record) {
    propsObject.default = props2;
  } else {
    for (const name2 in record.components)
      propsObject[name2] = typeof props2 === "boolean" ? props2 : props2[name2];
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults2, partialOptions) {
  const options = {};
  for (const key in defaults2) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults2[key];
  }
  return options;
}
function isRecordChildOf(record, parent2) {
  return parent2.children.some((child) => child === record || isRecordChildOf(record, child));
}
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text) {
  return encodeURI("" + text).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text) {
  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text) {
  return commonEncode(text).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text) {
  return encodeQueryValue(text).replace(EQUAL_RE, "%3D");
}
function encodePath(text) {
  return commonEncode(text).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text) {
  return text == null ? "" : encodePath(text).replace(SLASH_RE, "%2F");
}
function decode(text) {
  try {
    return decodeURIComponent("" + text);
  } catch (err) {
  }
  return "" + text;
}
function parseQuery(search2) {
  const query = {};
  if (search2 === "" || search2 === "?")
    return query;
  const hasLeadingIM = search2[0] === "?";
  const searchParams = (hasLeadingIM ? search2.slice(1) : search2).split("&");
  for (let i = 0; i < searchParams.length; ++i) {
    const searchParam = searchParams[i].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value6 = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!Array.isArray(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value6);
    } else {
      query[key] = value6;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search2 = "";
  for (let key in query) {
    const value6 = query[key];
    key = encodeQueryKey(key);
    if (value6 == null) {
      if (value6 !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
      }
      continue;
    }
    const values = Array.isArray(value6) ? value6.map((v) => v && encodeQueryValue(v)) : [value6 && encodeQueryValue(value6)];
    values.forEach((value7) => {
      if (value7 !== void 0) {
        search2 += (search2.length ? "&" : "") + key;
        if (value7 != null)
          search2 += "=" + value7;
      }
    });
  }
  return search2;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value6 = query[key];
    if (value6 !== void 0) {
      normalizedQuery[key] = Array.isArray(value6) ? value6.map((v) => v == null ? null : "" + v) : value6 == null ? value6 : "" + value6;
    }
  }
  return normalizedQuery;
}
function useCallbacks() {
  let handlers = [];
  function add2(handler15) {
    handlers.push(handler15);
    return () => {
      const i = handlers.indexOf(handler15);
      if (i > -1)
        handlers.splice(i, 1);
    };
  }
  function reset3() {
    handlers = [];
  }
  return {
    add: add2,
    list: () => handlers,
    reset: reset3
  };
}
function guardToPromiseFn(guard, to, from, record, name2) {
  const enterCallbackArray = record && (record.enterCallbacks[name2] = record.enterCallbacks[name2] || []);
  return () => new Promise((resolve2, reject) => {
    const next = (valid) => {
      if (valid === false)
        reject(createRouterError(4, {
          from,
          to
        }));
      else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to,
          to: valid
        }));
      } else {
        if (enterCallbackArray && record.enterCallbacks[name2] === enterCallbackArray && typeof valid === "function")
          enterCallbackArray.push(valid);
        resolve2();
      }
    };
    const guardReturn = guard.call(record && record.instances[name2], to, from, next);
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    guardCall.catch((err) => reject(err));
  });
}
function extractComponentsGuards(matched, guardType, to, from) {
  const guards = [];
  for (const record of matched) {
    for (const name2 in record.components) {
      let rawComponent = record.components[name2];
      if (guardType !== "beforeRouteEnter" && !record.instances[name2])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to, from, record, name2));
      } else {
        let componentPromise = rawComponent();
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name2}" at "${record.path}"`));
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.components[name2] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to, from, record, name2)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink(props2) {
  const router2 = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => router2.resolve(unref(props2.to)));
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index2 = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index2 > -1)
      return index2;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return length > 1 && getOriginalPath(routeMatched) === parentRecordPath && currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index2;
  });
  const isActive2 = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e = {}) {
    if (guardEvent(e)) {
      return router2[unref(props2.replace) ? "replace" : "push"](unref(props2.to)).catch(noop);
    }
    return Promise.resolve();
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive: isActive2,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink,
  setup(props2, { slots }) {
    const link = reactive(useLink(props2));
    const { options } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props2.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      [getLinkClass(props2.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props2.custom ? children : h("a", {
        "aria-current": link.isExactActive ? props2.ariaCurrentValue : null,
        href: link.href,
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e) {
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)
    return;
  if (e.defaultPrevented)
    return;
  if (e.button !== void 0 && e.button !== 0)
    return;
  if (e.currentTarget && e.currentTarget.getAttribute) {
    const target = e.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e.preventDefault)
    e.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!Array.isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value6, i) => value6 !== outerValue[i]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  setup(props2, { attrs, slots }) {
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props2.route || injectedRoute.value);
    const depth = inject(viewDepthKey, 0);
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth]);
    provide(viewDepthKey, depth + 1);
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props2.name], ([instance, to, name2], [oldInstance, from, oldName]) => {
      if (to) {
        to.instances[name2] = instance;
        if (from && from !== to && instance && instance === oldInstance) {
          if (!to.leaveGuards.size) {
            to.leaveGuards = from.leaveGuards;
          }
          if (!to.updateGuards.size) {
            to.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to && (!from || !isSameRouteRecord(to, from) || !oldInstance)) {
        (to.enterCallbacks[name2] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[props2.name];
      const currentName = props2.name;
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[props2.name];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h(ViewComponent, assign({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      return normalizeSlot(slots.default, { Component: component, route }) || component;
    };
  }
});
function normalizeSlot(slot, data26) {
  if (!slot)
    return null;
  const slotContent = slot(data26);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$1 = options.parseQuery || parseQuery;
  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = applyToParams.bind(null, decode);
  function addRoute(parentOrRoute, route) {
    let parent2;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent2 = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent2);
  }
  function removeRoute(name2) {
    const recordMatcher = matcher.getRecordMatcher(name2);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name2) {
    return !!matcher.getRecordMatcher(name2);
  }
  function resolve2(rawLocation, currentLocation) {
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      return assign(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(rawLocation.params)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash2 = rawLocation.hash || "";
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
      hash: encodeHash(hash2),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    return assign({
      fullPath,
      hash: hash2,
      query: stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to) {
    return typeof to === "string" ? parseURL(parseQuery$1, to, currentRoute.value.path) : assign({}, to);
  }
  function checkCanceledNavigation(to, from) {
    if (pendingLocation !== to) {
      return createRouterError(8, {
        from,
        to
      });
    }
  }
  function push(to) {
    return pushWithRedirect(to);
  }
  function replace(to) {
    return push(assign(locationAsObject(to), { replace: true }));
  }
  function handleRedirectRecord(to) {
    const lastMatched = to.matched[to.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : { path: newTargetLocation };
        newTargetLocation.params = {};
      }
      return assign({
        query: to.query,
        hash: to.hash,
        params: to.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to, redirectedFrom) {
    const targetLocation = pendingLocation = resolve2(to);
    const from = currentRoute.value;
    const data26 = to.state;
    const force = to.force;
    const replace2 = to.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(assign(locationAsObject(shouldRedirect), {
        state: data26,
        force,
        replace: replace2
      }), redirectedFrom || targetLocation);
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from });
      handleScroll3(from, from, true, false);
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error5) => isNavigationFailure(error5) ? isNavigationFailure(error5, 2) ? error5 : markAsReady(error5) : triggerError(error5, toLocation, from)).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(failure2, 2)) {
          return pushWithRedirect(assign(locationAsObject(failure2.to), {
            state: data26,
            force,
            replace: replace2
          }), redirectedFrom || toLocation);
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data26);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to, from) {
    const error5 = checkCanceledNavigation(to, from);
    return error5 ? Promise.reject(error5) : Promise.resolve();
  }
  function navigate(to, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of to.matched) {
        if (record.beforeEnter && !from.matched.includes(record)) {
          if (Array.isArray(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to, from));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to, from);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(err, 8) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to, from, failure) {
    for (const guard of afterGuards.list())
      guard(to, from, failure);
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data26) {
    const error5 = checkCanceledNavigation(toLocation, from);
    if (error5)
      return error5;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign({
          scroll: isFirstNavigation && state && state.scroll
        }, data26));
      else
        routerHistory.push(toLocation.fullPath, data26);
    }
    currentRoute.value = toLocation;
    handleScroll3(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    removeHistoryListener = routerHistory.listen((to, _from, info4) => {
      const toLocation = resolve2(to);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from.fullPath, info4.delta), computeScrollPosition());
      }
      navigate(toLocation, from).catch((error5) => {
        if (isNavigationFailure(error5, 4 | 8)) {
          return error5;
        }
        if (isNavigationFailure(error5, 2)) {
          pushWithRedirect(error5.to, toLocation).then((failure) => {
            if (isNavigationFailure(failure, 4 | 16) && !info4.delta && info4.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop);
          return Promise.reject();
        }
        if (info4.delta)
          routerHistory.go(-info4.delta, false);
        return triggerError(error5, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(toLocation, from, false);
        if (failure) {
          if (info4.delta) {
            routerHistory.go(-info4.delta, false);
          } else if (info4.type === NavigationType.pop && isNavigationFailure(failure, 4 | 16)) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop);
    });
  }
  let readyHandlers = useCallbacks();
  let errorHandlers = useCallbacks();
  let ready;
  function triggerError(error5, to, from) {
    markAsReady(error5);
    const list = errorHandlers.list();
    if (list.length) {
      list.forEach((handler15) => handler15(error5, to, from));
    } else {
      console.error(error5);
    }
    return Promise.reject(error5);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve3, reject) => {
      readyHandlers.add([resolve3, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve3, reject]) => err ? reject(err) : resolve3());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll3(to, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to, from, scrollPosition)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to, from));
  }
  const go = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router2 = {
    currentRoute,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve: resolve2,
    options,
    push,
    replace,
    go,
    back: () => go(-1),
    forward: () => go(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorHandlers.add,
    isReady,
    install(app) {
      const router3 = this;
      app.component("RouterLink", RouterLink);
      app.component("RouterView", RouterView);
      app.config.globalProperties.$router = router3;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        reactiveRoute[key] = computed(() => currentRoute.value[key]);
      }
      app.provide(routerKey, router3);
      app.provide(routeLocationKey, reactive(reactiveRoute));
      app.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
    }
  };
  return router2;
}
function runGuardQueue(guards) {
  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());
}
function extractChangingRecords(to, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len2 = Math.max(from.matched.length, to.matched.length);
  for (let i = 0; i < len2; i++) {
    const recordFrom = from.matched[i];
    if (recordFrom) {
      if (to.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to.matched[i];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
const router = createRouter({
  history: createWebHashHistory(),
  routes: [
    { path: "/", redirect: "/welcome" },
    {
      path: "/welcome",
      name: "Welcome",
      component: () => __vitePreload(() => import("./Welcome-4887973f.js"), true ? ["js/Welcome-4887973f.js","js/cnchar.draw.min-a1cbc4f2.js"] : void 0)
    },
    {
      path: "/login",
      name: "Login",
      component: () => __vitePreload(() => import("./Login-7465b937.js"), true ? ["js/Login-7465b937.js","css/Login-69e9db13.css","js/WordDraw-7d000180.js","js/cnchar.draw.min-a1cbc4f2.js"] : void 0)
    },
    {
      path: "/home",
      name: "Home",
      component: () => __vitePreload(() => import("./Home-bb1575d0.js"), true ? ["js/Home-bb1575d0.js","css/Home-9578e1f0.css","js/WordDraw-7d000180.js","js/cnchar.draw.min-a1cbc4f2.js"] : void 0),
      beforeEnter: (to, form) => {
        const token = localStorage.getItem("token");
        if (token || form.fullPath === "/login") {
          return true;
        } else {
          return "/login";
        }
      },
      children: [
        {
          path: "",
          redirect: "/home/stock"
        },
        {
          path: "stock",
          name: "Stock",
          component: () => __vitePreload(() => import("./Stock-21d811c5.js"), true ? ["js/Stock-21d811c5.js","css/Stock-67bf9fa3.css","js/clipboard-57daccf8.js"] : void 0)
        },
        {
          path: "add-stock",
          name: "AddStock",
          component: () => __vitePreload(() => import("./AddStock-2ccb693d.js"), true ? ["js/AddStock-2ccb693d.js","js/clipboard-57daccf8.js"] : void 0)
        },
        {
          path: "test",
          name: "Test",
          component: () => __vitePreload(() => import("./Test-15cad2f7.js"), true ? [] : void 0)
        }
      ]
    }
  ]
});
const encryptedData = [
  {
    id: "1",
    label: "qq\u5BC6\u7801",
    createTime: "\u4ECA\u5929",
    method: "a",
    rawData: "123",
    processedData: "321"
  },
  {
    id: "2",
    label: "weibo\u5BC6\u7801",
    createTime: "\u6628\u5929",
    method: "b",
    rawData: "456",
    processedData: "654"
  },
  {
    id: "3",
    label: "wechat\u5BC6\u7801",
    createTime: "\u524D\u5929",
    method: "c",
    rawData: "789",
    processedData: "987"
  },
  {
    id: "4",
    label: "wechat\u5BC6\u7801",
    createTime: "\u524D\u5929",
    method: "c",
    rawData: "789",
    processedData: "987"
  },
  {
    id: "5",
    label: "wechat\u5BC6\u7801",
    createTime: "\u524D\u5929",
    method: "c",
    rawData: "789",
    processedData: "987987987987987987987987987987987987987987987987987987987987987987987987987987987987987987987987987987987987"
  }
];
const fetchData = (timeOut) => {
  return new Promise((resolve2, reject) => {
    setTimeout(() => {
      resolve2(encryptedData);
    }, timeOut * 1e3);
  });
};
var _export_sfc = (sfc, props2) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props2) {
    target[key] = val;
  }
  return target;
};
const _sfc_main = defineComponent({
  name: "App",
  setup() {
    onMounted(() => {
      localStorage.setItem("token", "token123");
      fetchData(3).then((data26) => {
        console.log(data26[0].rawData);
      });
    });
    const globalConfig = merge_1(zhCn, {});
    return {
      globalConfig
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_router_view = resolveComponent("router-view");
  const _component_t_config_provider = ConfigProvider;
  return openBlock(), createBlock(_component_t_config_provider, { "global-config": _ctx.globalConfig }, {
    default: withCtx(() => [
      createVNode(_component_router_view)
    ]),
    _: 1
  }, 8, ["global-config"]);
}
var App = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
createApp(App).use(index).use(router).mount("#app");
export { Loading as $, Fragment as A, Button as B, Col as C, MenuItem as D, Menu as E, FormItem as F, Header as G, HeadMenu as H, Input as I, Aside as J, onUnmounted as K, Layout as L, MessagePlugin as M, normalizeClass as N, Divider as O, ListItemMeta as P, ListItem as Q, Row as R, List as S, TabPanel as T, Dialog as U, fetchData as V, Skeleton as W, createBaseVNode as X, Avatar as Y, Select as Z, _defineProperty$1 as _, _export_sfc as a, openBlock as b, computed as c, defineComponent as d, createElementBlock as e, router as f, ref as g, resolveComponent as h, createBlock as i, createVNode as j, createTextVNode as k, Card as l, Content as m, normalizeStyle as n, onMounted as o, commonjsGlobal$1 as p, getDefaultExportFromCjs$1 as q, renderFn as r, Form as s, reactive as t, useSizeProps as u, Icon as v, withCtx as w, Tabs as x, renderList as y, toDisplayString as z };
